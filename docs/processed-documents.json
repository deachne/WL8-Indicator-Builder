[
  {
    "pageContent": "# BacktestSettings Class\n\n**Namespace:** WealthLab.Backtest  \n**Parent:** Object\n\nThe BacktestSettings class contains information about how a backtest was conducted, including the benchmark symbol used, and whether cash interest and dividends were considered.\n\n## Members\n\n### CashInterestRate\n",
    "metadata": {
      "id": "backtestsettings",
      "title": "backtestsettings",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/backtestsettings.md",
      "chunkIndex": 0,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nThe percentage amount of interest that simulated cash in the backtest should generate.\n\n### CollectDividends\n",
    "metadata": {
      "id": "backtestsettings",
      "title": "backtestsettings",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/backtestsettings.md",
      "chunkIndex": 1,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nIf set to true, simulated dividends will be collected during the backtest. Dividends are calculated based on EventDataPoint instances in the BarHistory instances being tested, and data points with the Name \"dividend\" are considered.\n\n### CommissionAmount\n",
    "metadata": {
      "id": "backtestsettings",
      "title": "backtestsettings",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/backtestsettings.md",
      "chunkIndex": 2,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nSpecifies the amount to use for backtest simulated commissions. Works in conjunction with the CommissionType property.\n\n### CommissionType\n",
    "metadata": {
      "id": "backtestsettings",
      "title": "backtestsettings",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/backtestsettings.md",
      "chunkIndex": 3,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nSpecifies the commission type used in the backtest. Possible values are:\n- None\n- Flat - CommissionAmount specifies total commission per trade\n- PerShare - CommissionAmount specifies commission per share/contract traded\n\n### FuturesMode\n",
    "metadata": {
      "id": "backtestsettings",
      "title": "backtestsettings",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/backtestsettings.md",
      "chunkIndex": 4,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nIf set to true, the backtest will be run in \"futures mode\", and take account of each symbol's Margin, PointValue, and Tick values when calculating gains and losses.\n\n### IsLimitSlippageEnabled\n",
    "metadata": {
      "id": "backtestsettings",
      "title": "backtestsettings",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/backtestsettings.md",
      "chunkIndex": 5,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nAllows you to read or override the Backtest Preference that enables Limit Order Slippage. Works in conjunction with SlippagePercentStocks and SlippageTickFutures properties.\n\n### IsSlippageEnabled\n",
    "metadata": {
      "id": "backtestsettings",
      "title": "backtestsettings",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/backtestsettings.md",
      "chunkIndex": 6,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nAllows you to read or override the Backtest Preference Adjust Entry/Exit Prices that enables Slippage for Market, Stop, and AtClose orders. Works in conjunction with SlippagePercentStocks and SlippageTickFutures properties.\n\n### MarginInterestRate\n",
    "metadata": {
      "id": "backtestsettings",
      "title": "backtestsettings",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/backtestsettings.md",
      "chunkIndex": 7,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nThe percentage amount that simulated margin interest should be charged during the backtest.\n\n### RetainNSFPositions\n",
    "metadata": {
      "id": "backtestsettings",
      "title": "backtestsettings",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/backtestsettings.md",
      "chunkIndex": 8,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nThis setting overrides the Backtest Preference: Retain NSF Positions.\n\nIf set to true, the Backtester will internally retain and continue to process positions for which there was insufficient capital to complete the simulated fill. This preserves the internal integrity of a Strategy, preventing it from potentially signaling new buy orders as an NSF position continues to be held until its eventual exit conditions are met.\n\n### RoundLots\n",
    "metadata": {
      "id": "backtestsettings",
      "title": "backtestsettings",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/backtestsettings.md",
      "chunkIndex": 9,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nIf set to true, Transaction Quantity will be rounded to the nearest 100 shares/contracts, or the nearest 10 if under 100.\n\n### SlippagePercentStocks\n",
    "metadata": {
      "id": "backtestsettings",
      "title": "backtestsettings",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/backtestsettings.md",
      "chunkIndex": 10,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nAllows you to read or override the Backtest Preference SlippagePercentStocks that sets the Slippage percentage amount for Market, Stop, and AtClose orders. Works in conjunction with IsSlippageEnabled and IsLimitSlippageEnabled properties.\n\n### SlippageTickFutures\n",
    "metadata": {
      "id": "backtestsettings",
      "title": "backtestsettings",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/backtestsettings.md",
      "chunkIndex": 11,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nAllows you to read or override the Backtest Preference SlippagePercentStocks that sets the amount of Slippage in ticks for futures contracts for Market, Stop, and AtClose orders. Works in conjunction with IsSlippageEnabled and IsLimitSlippageEnabled properties.\n\n### UseMarginInBenchmark\n",
    "metadata": {
      "id": "backtestsettings",
      "title": "backtestsettings",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/backtestsettings.md",
      "chunkIndex": 12,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nBy default, the comparison benchmark buy and hold backtest does not employ margin. Set this to true to have it employ the same Margin value in the backtest's PositionSize property.\n\n### UseUSTRateAsInterest\n",
    "metadata": {
      "id": "backtestsettings",
      "title": "backtestsettings",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/backtestsettings.md",
      "chunkIndex": 13,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nIf set to true, the CashInterest property will be ignored, and the percentage rate for simulated interest on cash will be determined by the yield of the US Treasury. The US Treasury period to use for this purpose is set in the YieldPeriod property.\n\n### VolumeLimit\n",
    "metadata": {
      "id": "backtestsettings",
      "title": "backtestsettings",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/backtestsettings.md",
      "chunkIndex": 14,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nIf greater than zero, will limit the Quantity of a Transaction to that percentage of the entry bar's volume.\n\n### YieldPeriod\n",
    "metadata": {
      "id": "backtestsettings",
      "title": "backtestsettings",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/backtestsettings.md",
      "chunkIndex": 15,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nThe period of US Treasury yield to use when UseUSTRateAsInterest is set to true. Possible values are:\n- OneMonth\n- ThreeMonth\n- SixMonth\n- OneYear\n- TwoYear\n- ThreeYear\n- FiveYear\n- SevenYear\n- TenYear\n- TwentyYear\n- ThirtyYear ",
    "metadata": {
      "id": "backtestsettings",
      "title": "backtestsettings",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/backtestsettings.md",
      "chunkIndex": 16,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "public double CashInterestRate\n",
    "metadata": {
      "id": "backtestsettings",
      "title": "backtestsettings",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/backtestsettings.md",
      "chunkIndex": "code-0",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "# BacktestSettings Class\n\n**Namespace:** WealthLab.Backtest  \n**Parent:** Object\n\nThe BacktestSettings class contains information about how a backtest was conducted, including the benchmark symbol used, and whether cash interest and dividends were considered.\n\n## Members\n\n### CashInterestRate\n"
    }
  },
  {
    "pageContent": "# BacktestSettings Class\n\n**Namespace:** WealthLab.Backtest  \n**Parent:** Object\n\nThe BacktestSettings class contains information about how a backtest was conducted, including the benchmark symbol used, and whether cash interest and dividends were considered.\n\n## Members\n\n### CashInterestRate\n\n\n```csharp\npublic double CashInterestRate\n\n```",
    "metadata": {
      "id": "backtestsettings",
      "title": "backtestsettings",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/backtestsettings.md",
      "chunkIndex": "code-context-0",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public bool CollectDividends\n",
    "metadata": {
      "id": "backtestsettings",
      "title": "backtestsettings",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/backtestsettings.md",
      "chunkIndex": "code-1",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "# BacktestSettings Class\n\n**Namespace:** WealthLab.Backtest  \n**Parent:** Object\n\nThe BacktestSettings class contains information about how a backtest was conducted, including the benchmark symbol used, and whether cash interest and dividends were considered.\n\n## Members\n\n### CashInterestRate\n```csharp\npublic double CashInterestRate\n```\nThe percentage amount of interest that simulated cash in the backtest should generate.\n\n### CollectDividends\n"
    }
  },
  {
    "pageContent": "# BacktestSettings Class\n\n**Namespace:** WealthLab.Backtest  \n**Parent:** Object\n\nThe BacktestSettings class contains information about how a backtest was conducted, including the benchmark symbol used, and whether cash interest and dividends were considered.\n\n## Members\n\n### CashInterestRate\n```csharp\npublic double CashInterestRate\n```\nThe percentage amount of interest that simulated cash in the backtest should generate.\n\n### CollectDividends\n\n\n```csharp\npublic bool CollectDividends\n\n```",
    "metadata": {
      "id": "backtestsettings",
      "title": "backtestsettings",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/backtestsettings.md",
      "chunkIndex": "code-context-1",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public double CommissionAmount\n",
    "metadata": {
      "id": "backtestsettings",
      "title": "backtestsettings",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/backtestsettings.md",
      "chunkIndex": "code-2",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "e considered.\n\n## Members\n\n### CashInterestRate\n```csharp\npublic double CashInterestRate\n```\nThe percentage amount of interest that simulated cash in the backtest should generate.\n\n### CollectDividends\n```csharp\npublic bool CollectDividends\n```\nIf set to true, simulated dividends will be collected during the backtest. Dividends are calculated based on EventDataPoint instances in the BarHistory instances being tested, and data points with the Name \"dividend\" are considered.\n\n### CommissionAmount\n"
    }
  },
  {
    "pageContent": "e considered.\n\n## Members\n\n### CashInterestRate\n```csharp\npublic double CashInterestRate\n```\nThe percentage amount of interest that simulated cash in the backtest should generate.\n\n### CollectDividends\n```csharp\npublic bool CollectDividends\n```\nIf set to true, simulated dividends will be collected during the backtest. Dividends are calculated based on EventDataPoint instances in the BarHistory instances being tested, and data points with the Name \"dividend\" are considered.\n\n### CommissionAmount\n\n\n```csharp\npublic double CommissionAmount\n\n```",
    "metadata": {
      "id": "backtestsettings",
      "title": "backtestsettings",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/backtestsettings.md",
      "chunkIndex": "code-context-2",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public CommissionTypes CommissionType\n",
    "metadata": {
      "id": "backtestsettings",
      "title": "backtestsettings",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/backtestsettings.md",
      "chunkIndex": "code-3",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": " CollectDividends\n```csharp\npublic bool CollectDividends\n```\nIf set to true, simulated dividends will be collected during the backtest. Dividends are calculated based on EventDataPoint instances in the BarHistory instances being tested, and data points with the Name \"dividend\" are considered.\n\n### CommissionAmount\n```csharp\npublic double CommissionAmount\n```\nSpecifies the amount to use for backtest simulated commissions. Works in conjunction with the CommissionType property.\n\n### CommissionType\n"
    }
  },
  {
    "pageContent": " CollectDividends\n```csharp\npublic bool CollectDividends\n```\nIf set to true, simulated dividends will be collected during the backtest. Dividends are calculated based on EventDataPoint instances in the BarHistory instances being tested, and data points with the Name \"dividend\" are considered.\n\n### CommissionAmount\n```csharp\npublic double CommissionAmount\n```\nSpecifies the amount to use for backtest simulated commissions. Works in conjunction with the CommissionType property.\n\n### CommissionType\n\n\n```csharp\npublic CommissionTypes CommissionType\n\n```",
    "metadata": {
      "id": "backtestsettings",
      "title": "backtestsettings",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/backtestsettings.md",
      "chunkIndex": "code-context-3",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public bool FuturesMode\n",
    "metadata": {
      "id": "backtestsettings",
      "title": "backtestsettings",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/backtestsettings.md",
      "chunkIndex": "code-4",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "red.\n\n### CommissionAmount\n```csharp\npublic double CommissionAmount\n```\nSpecifies the amount to use for backtest simulated commissions. Works in conjunction with the CommissionType property.\n\n### CommissionType\n```csharp\npublic CommissionTypes CommissionType\n```\nSpecifies the commission type used in the backtest. Possible values are:\n- None\n- Flat - CommissionAmount specifies total commission per trade\n- PerShare - CommissionAmount specifies commission per share/contract traded\n\n### FuturesMode\n"
    }
  },
  {
    "pageContent": "red.\n\n### CommissionAmount\n```csharp\npublic double CommissionAmount\n```\nSpecifies the amount to use for backtest simulated commissions. Works in conjunction with the CommissionType property.\n\n### CommissionType\n```csharp\npublic CommissionTypes CommissionType\n```\nSpecifies the commission type used in the backtest. Possible values are:\n- None\n- Flat - CommissionAmount specifies total commission per trade\n- PerShare - CommissionAmount specifies commission per share/contract traded\n\n### FuturesMode\n\n\n```csharp\npublic bool FuturesMode\n\n```",
    "metadata": {
      "id": "backtestsettings",
      "title": "backtestsettings",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/backtestsettings.md",
      "chunkIndex": "code-context-4",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public bool IsLimitSlippageEnabled\n",
    "metadata": {
      "id": "backtestsettings",
      "title": "backtestsettings",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/backtestsettings.md",
      "chunkIndex": "code-5",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "missionTypes CommissionType\n```\nSpecifies the commission type used in the backtest. Possible values are:\n- None\n- Flat - CommissionAmount specifies total commission per trade\n- PerShare - CommissionAmount specifies commission per share/contract traded\n\n### FuturesMode\n```csharp\npublic bool FuturesMode\n```\nIf set to true, the backtest will be run in \"futures mode\", and take account of each symbol's Margin, PointValue, and Tick values when calculating gains and losses.\n\n### IsLimitSlippageEnabled\n"
    }
  },
  {
    "pageContent": "missionTypes CommissionType\n```\nSpecifies the commission type used in the backtest. Possible values are:\n- None\n- Flat - CommissionAmount specifies total commission per trade\n- PerShare - CommissionAmount specifies commission per share/contract traded\n\n### FuturesMode\n```csharp\npublic bool FuturesMode\n```\nIf set to true, the backtest will be run in \"futures mode\", and take account of each symbol's Margin, PointValue, and Tick values when calculating gains and losses.\n\n### IsLimitSlippageEnabled\n\n\n```csharp\npublic bool IsLimitSlippageEnabled\n\n```",
    "metadata": {
      "id": "backtestsettings",
      "title": "backtestsettings",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/backtestsettings.md",
      "chunkIndex": "code-context-5",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public bool IsSlippageEnabled\n",
    "metadata": {
      "id": "backtestsettings",
      "title": "backtestsettings",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/backtestsettings.md",
      "chunkIndex": "code-6",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "raded\n\n### FuturesMode\n```csharp\npublic bool FuturesMode\n```\nIf set to true, the backtest will be run in \"futures mode\", and take account of each symbol's Margin, PointValue, and Tick values when calculating gains and losses.\n\n### IsLimitSlippageEnabled\n```csharp\npublic bool IsLimitSlippageEnabled\n```\nAllows you to read or override the Backtest Preference that enables Limit Order Slippage. Works in conjunction with SlippagePercentStocks and SlippageTickFutures properties.\n\n### IsSlippageEnabled\n"
    }
  },
  {
    "pageContent": "raded\n\n### FuturesMode\n```csharp\npublic bool FuturesMode\n```\nIf set to true, the backtest will be run in \"futures mode\", and take account of each symbol's Margin, PointValue, and Tick values when calculating gains and losses.\n\n### IsLimitSlippageEnabled\n```csharp\npublic bool IsLimitSlippageEnabled\n```\nAllows you to read or override the Backtest Preference that enables Limit Order Slippage. Works in conjunction with SlippagePercentStocks and SlippageTickFutures properties.\n\n### IsSlippageEnabled\n\n\n```csharp\npublic bool IsSlippageEnabled\n\n```",
    "metadata": {
      "id": "backtestsettings",
      "title": "backtestsettings",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/backtestsettings.md",
      "chunkIndex": "code-context-6",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public double MarginInterestRate\n",
    "metadata": {
      "id": "backtestsettings",
      "title": "backtestsettings",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/backtestsettings.md",
      "chunkIndex": "code-7",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "nabled\n```\nAllows you to read or override the Backtest Preference that enables Limit Order Slippage. Works in conjunction with SlippagePercentStocks and SlippageTickFutures properties.\n\n### IsSlippageEnabled\n```csharp\npublic bool IsSlippageEnabled\n```\nAllows you to read or override the Backtest Preference Adjust Entry/Exit Prices that enables Slippage for Market, Stop, and AtClose orders. Works in conjunction with SlippagePercentStocks and SlippageTickFutures properties.\n\n### MarginInterestRate\n"
    }
  },
  {
    "pageContent": "nabled\n```\nAllows you to read or override the Backtest Preference that enables Limit Order Slippage. Works in conjunction with SlippagePercentStocks and SlippageTickFutures properties.\n\n### IsSlippageEnabled\n```csharp\npublic bool IsSlippageEnabled\n```\nAllows you to read or override the Backtest Preference Adjust Entry/Exit Prices that enables Slippage for Market, Stop, and AtClose orders. Works in conjunction with SlippagePercentStocks and SlippageTickFutures properties.\n\n### MarginInterestRate\n\n\n```csharp\npublic double MarginInterestRate\n\n```",
    "metadata": {
      "id": "backtestsettings",
      "title": "backtestsettings",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/backtestsettings.md",
      "chunkIndex": "code-context-7",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public bool RetainNSFPositions\n",
    "metadata": {
      "id": "backtestsettings",
      "title": "backtestsettings",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/backtestsettings.md",
      "chunkIndex": "code-8",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ckFutures properties.\n\n### IsSlippageEnabled\n```csharp\npublic bool IsSlippageEnabled\n```\nAllows you to read or override the Backtest Preference Adjust Entry/Exit Prices that enables Slippage for Market, Stop, and AtClose orders. Works in conjunction with SlippagePercentStocks and SlippageTickFutures properties.\n\n### MarginInterestRate\n```csharp\npublic double MarginInterestRate\n```\nThe percentage amount that simulated margin interest should be charged during the backtest.\n\n### RetainNSFPositions\n"
    }
  },
  {
    "pageContent": "ckFutures properties.\n\n### IsSlippageEnabled\n```csharp\npublic bool IsSlippageEnabled\n```\nAllows you to read or override the Backtest Preference Adjust Entry/Exit Prices that enables Slippage for Market, Stop, and AtClose orders. Works in conjunction with SlippagePercentStocks and SlippageTickFutures properties.\n\n### MarginInterestRate\n```csharp\npublic double MarginInterestRate\n```\nThe percentage amount that simulated margin interest should be charged during the backtest.\n\n### RetainNSFPositions\n\n\n```csharp\npublic bool RetainNSFPositions\n\n```",
    "metadata": {
      "id": "backtestsettings",
      "title": "backtestsettings",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/backtestsettings.md",
      "chunkIndex": "code-context-8",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public bool RoundLots\n",
    "metadata": {
      "id": "backtestsettings",
      "title": "backtestsettings",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/backtestsettings.md",
      "chunkIndex": "code-9",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "inNSFPositions\n```csharp\npublic bool RetainNSFPositions\n```\nThis setting overrides the Backtest Preference: Retain NSF Positions.\n\nIf set to true, the Backtester will internally retain and continue to process positions for which there was insufficient capital to complete the simulated fill. This preserves the internal integrity of a Strategy, preventing it from potentially signaling new buy orders as an NSF position continues to be held until its eventual exit conditions are met.\n\n### RoundLots\n"
    }
  },
  {
    "pageContent": "inNSFPositions\n```csharp\npublic bool RetainNSFPositions\n```\nThis setting overrides the Backtest Preference: Retain NSF Positions.\n\nIf set to true, the Backtester will internally retain and continue to process positions for which there was insufficient capital to complete the simulated fill. This preserves the internal integrity of a Strategy, preventing it from potentially signaling new buy orders as an NSF position continues to be held until its eventual exit conditions are met.\n\n### RoundLots\n\n\n```csharp\npublic bool RoundLots\n\n```",
    "metadata": {
      "id": "backtestsettings",
      "title": "backtestsettings",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/backtestsettings.md",
      "chunkIndex": "code-context-9",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public double SlippagePercentStocks\n",
    "metadata": {
      "id": "backtestsettings",
      "title": "backtestsettings",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/backtestsettings.md",
      "chunkIndex": "code-10",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "and continue to process positions for which there was insufficient capital to complete the simulated fill. This preserves the internal integrity of a Strategy, preventing it from potentially signaling new buy orders as an NSF position continues to be held until its eventual exit conditions are met.\n\n### RoundLots\n```csharp\npublic bool RoundLots\n```\nIf set to true, Transaction Quantity will be rounded to the nearest 100 shares/contracts, or the nearest 10 if under 100.\n\n### SlippagePercentStocks\n"
    }
  },
  {
    "pageContent": "and continue to process positions for which there was insufficient capital to complete the simulated fill. This preserves the internal integrity of a Strategy, preventing it from potentially signaling new buy orders as an NSF position continues to be held until its eventual exit conditions are met.\n\n### RoundLots\n```csharp\npublic bool RoundLots\n```\nIf set to true, Transaction Quantity will be rounded to the nearest 100 shares/contracts, or the nearest 10 if under 100.\n\n### SlippagePercentStocks\n\n\n```csharp\npublic double SlippagePercentStocks\n\n```",
    "metadata": {
      "id": "backtestsettings",
      "title": "backtestsettings",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/backtestsettings.md",
      "chunkIndex": "code-context-10",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public int SlippageTickFutures\n",
    "metadata": {
      "id": "backtestsettings",
      "title": "backtestsettings",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/backtestsettings.md",
      "chunkIndex": "code-11",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "\n```csharp\npublic bool RoundLots\n```\nIf set to true, Transaction Quantity will be rounded to the nearest 100 shares/contracts, or the nearest 10 if under 100.\n\n### SlippagePercentStocks\n```csharp\npublic double SlippagePercentStocks\n```\nAllows you to read or override the Backtest Preference SlippagePercentStocks that sets the Slippage percentage amount for Market, Stop, and AtClose orders. Works in conjunction with IsSlippageEnabled and IsLimitSlippageEnabled properties.\n\n### SlippageTickFutures\n"
    }
  },
  {
    "pageContent": "\n```csharp\npublic bool RoundLots\n```\nIf set to true, Transaction Quantity will be rounded to the nearest 100 shares/contracts, or the nearest 10 if under 100.\n\n### SlippagePercentStocks\n```csharp\npublic double SlippagePercentStocks\n```\nAllows you to read or override the Backtest Preference SlippagePercentStocks that sets the Slippage percentage amount for Market, Stop, and AtClose orders. Works in conjunction with IsSlippageEnabled and IsLimitSlippageEnabled properties.\n\n### SlippageTickFutures\n\n\n```csharp\npublic int SlippageTickFutures\n\n```",
    "metadata": {
      "id": "backtestsettings",
      "title": "backtestsettings",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/backtestsettings.md",
      "chunkIndex": "code-context-11",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public bool UseMarginInBenchmark\n",
    "metadata": {
      "id": "backtestsettings",
      "title": "backtestsettings",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/backtestsettings.md",
      "chunkIndex": "code-12",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ge percentage amount for Market, Stop, and AtClose orders. Works in conjunction with IsSlippageEnabled and IsLimitSlippageEnabled properties.\n\n### SlippageTickFutures\n```csharp\npublic int SlippageTickFutures\n```\nAllows you to read or override the Backtest Preference SlippagePercentStocks that sets the amount of Slippage in ticks for futures contracts for Market, Stop, and AtClose orders. Works in conjunction with IsSlippageEnabled and IsLimitSlippageEnabled properties.\n\n### UseMarginInBenchmark\n"
    }
  },
  {
    "pageContent": "ge percentage amount for Market, Stop, and AtClose orders. Works in conjunction with IsSlippageEnabled and IsLimitSlippageEnabled properties.\n\n### SlippageTickFutures\n```csharp\npublic int SlippageTickFutures\n```\nAllows you to read or override the Backtest Preference SlippagePercentStocks that sets the amount of Slippage in ticks for futures contracts for Market, Stop, and AtClose orders. Works in conjunction with IsSlippageEnabled and IsLimitSlippageEnabled properties.\n\n### UseMarginInBenchmark\n\n\n```csharp\npublic bool UseMarginInBenchmark\n\n```",
    "metadata": {
      "id": "backtestsettings",
      "title": "backtestsettings",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/backtestsettings.md",
      "chunkIndex": "code-context-12",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public bool UseUSTRateAsInterest\n",
    "metadata": {
      "id": "backtestsettings",
      "title": "backtestsettings",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/backtestsettings.md",
      "chunkIndex": "code-13",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "t Preference SlippagePercentStocks that sets the amount of Slippage in ticks for futures contracts for Market, Stop, and AtClose orders. Works in conjunction with IsSlippageEnabled and IsLimitSlippageEnabled properties.\n\n### UseMarginInBenchmark\n```csharp\npublic bool UseMarginInBenchmark\n```\nBy default, the comparison benchmark buy and hold backtest does not employ margin. Set this to true to have it employ the same Margin value in the backtest's PositionSize property.\n\n### UseUSTRateAsInterest\n"
    }
  },
  {
    "pageContent": "t Preference SlippagePercentStocks that sets the amount of Slippage in ticks for futures contracts for Market, Stop, and AtClose orders. Works in conjunction with IsSlippageEnabled and IsLimitSlippageEnabled properties.\n\n### UseMarginInBenchmark\n```csharp\npublic bool UseMarginInBenchmark\n```\nBy default, the comparison benchmark buy and hold backtest does not employ margin. Set this to true to have it employ the same Margin value in the backtest's PositionSize property.\n\n### UseUSTRateAsInterest\n\n\n```csharp\npublic bool UseUSTRateAsInterest\n\n```",
    "metadata": {
      "id": "backtestsettings",
      "title": "backtestsettings",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/backtestsettings.md",
      "chunkIndex": "code-context-13",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public double VolumeLimit\n",
    "metadata": {
      "id": "backtestsettings",
      "title": "backtestsettings",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/backtestsettings.md",
      "chunkIndex": "code-14",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "arison benchmark buy and hold backtest does not employ margin. Set this to true to have it employ the same Margin value in the backtest's PositionSize property.\n\n### UseUSTRateAsInterest\n```csharp\npublic bool UseUSTRateAsInterest\n```\nIf set to true, the CashInterest property will be ignored, and the percentage rate for simulated interest on cash will be determined by the yield of the US Treasury. The US Treasury period to use for this purpose is set in the YieldPeriod property.\n\n### VolumeLimit\n"
    }
  },
  {
    "pageContent": "arison benchmark buy and hold backtest does not employ margin. Set this to true to have it employ the same Margin value in the backtest's PositionSize property.\n\n### UseUSTRateAsInterest\n```csharp\npublic bool UseUSTRateAsInterest\n```\nIf set to true, the CashInterest property will be ignored, and the percentage rate for simulated interest on cash will be determined by the yield of the US Treasury. The US Treasury period to use for this purpose is set in the YieldPeriod property.\n\n### VolumeLimit\n\n\n```csharp\npublic double VolumeLimit\n\n```",
    "metadata": {
      "id": "backtestsettings",
      "title": "backtestsettings",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/backtestsettings.md",
      "chunkIndex": "code-context-14",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public YieldPeriods YieldPeriod\n",
    "metadata": {
      "id": "backtestsettings",
      "title": "backtestsettings",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/backtestsettings.md",
      "chunkIndex": "code-15",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "UseUSTRateAsInterest\n```csharp\npublic bool UseUSTRateAsInterest\n```\nIf set to true, the CashInterest property will be ignored, and the percentage rate for simulated interest on cash will be determined by the yield of the US Treasury. The US Treasury period to use for this purpose is set in the YieldPeriod property.\n\n### VolumeLimit\n```csharp\npublic double VolumeLimit\n```\nIf greater than zero, will limit the Quantity of a Transaction to that percentage of the entry bar's volume.\n\n### YieldPeriod\n"
    }
  },
  {
    "pageContent": "UseUSTRateAsInterest\n```csharp\npublic bool UseUSTRateAsInterest\n```\nIf set to true, the CashInterest property will be ignored, and the percentage rate for simulated interest on cash will be determined by the yield of the US Treasury. The US Treasury period to use for this purpose is set in the YieldPeriod property.\n\n### VolumeLimit\n```csharp\npublic double VolumeLimit\n```\nIf greater than zero, will limit the Quantity of a Transaction to that percentage of the entry bar's volume.\n\n### YieldPeriod\n\n\n```csharp\npublic YieldPeriods YieldPeriod\n\n```",
    "metadata": {
      "id": "backtestsettings",
      "title": "backtestsettings",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/backtestsettings.md",
      "chunkIndex": "code-context-15",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "# BarData Class\n\n**Namespace:** WealthLab.Core  \n**Parent:** Object\n\nThe BarData class represents a single bar of data, comprised of open, high, low, close and volume values.\n\n## Constructors\n\n",
    "metadata": {
      "id": "bardata",
      "title": "bardata",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/bardata.md",
      "chunkIndex": 0,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\nBarData has three constructors:\n- The first parameterless constructor creates an uninitialized BarData instance\n- The second, with a DateTime parameter, assigns the DateTime property that value\n- The third, with a BarHistory parameter, assigns values based on the last bar of data in the BarHistory\n\n## Members\n\n### Ask\n",
    "metadata": {
      "id": "bardata",
      "title": "bardata",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/bardata.md",
      "chunkIndex": 1,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nThe bar's current ask price value.\n\n### Bid\n",
    "metadata": {
      "id": "bardata",
      "title": "bardata",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/bardata.md",
      "chunkIndex": 2,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nThe bar's current bid price value.\n\n### Close\n",
    "metadata": {
      "id": "bardata",
      "title": "bardata",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/bardata.md",
      "chunkIndex": 3,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nThe bar's closing price value.\n\n### DataSource\n",
    "metadata": {
      "id": "bardata",
      "title": "bardata",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/bardata.md",
      "chunkIndex": 4,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nContains the name of the Historical Data Provider, or DataSet, that provided the data for this instance.\n\n### DateTime\n",
    "metadata": {
      "id": "bardata",
      "title": "bardata",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/bardata.md",
      "chunkIndex": 5,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nThe bar's date/time.\n\n### High\n",
    "metadata": {
      "id": "bardata",
      "title": "bardata",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/bardata.md",
      "chunkIndex": 6,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nThe bar's high price value.\n\n### Low\n",
    "metadata": {
      "id": "bardata",
      "title": "bardata",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/bardata.md",
      "chunkIndex": 7,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nThe bar's low price value.\n\n### Open\n",
    "metadata": {
      "id": "bardata",
      "title": "bardata",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/bardata.md",
      "chunkIndex": 8,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nThe bar's opening price value.\n\n### Volume\n",
    "metadata": {
      "id": "bardata",
      "title": "bardata",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/bardata.md",
      "chunkIndex": 9,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nThe bar's volume value. ",
    "metadata": {
      "id": "bardata",
      "title": "bardata",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/bardata.md",
      "chunkIndex": 10,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "public BarData()\npublic BarData(DateTime dt)\npublic BarData(BarHistory bars)\n",
    "metadata": {
      "id": "bardata",
      "title": "bardata",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/bardata.md",
      "chunkIndex": "code-0",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "# BarData Class\n\n**Namespace:** WealthLab.Core  \n**Parent:** Object\n\nThe BarData class represents a single bar of data, comprised of open, high, low, close and volume values.\n\n## Constructors\n\n"
    }
  },
  {
    "pageContent": "# BarData Class\n\n**Namespace:** WealthLab.Core  \n**Parent:** Object\n\nThe BarData class represents a single bar of data, comprised of open, high, low, close and volume values.\n\n## Constructors\n\n\n\n```csharp\npublic BarData()\npublic BarData(DateTime dt)\npublic BarData(BarHistory bars)\n\n```",
    "metadata": {
      "id": "bardata",
      "title": "bardata",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/bardata.md",
      "chunkIndex": "code-context-0",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public double Ask\n",
    "metadata": {
      "id": "bardata",
      "title": "bardata",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/bardata.md",
      "chunkIndex": "code-1",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "e bar of data, comprised of open, high, low, close and volume values.\n\n## Constructors\n\n```csharp\npublic BarData()\npublic BarData(DateTime dt)\npublic BarData(BarHistory bars)\n```\n\nBarData has three constructors:\n- The first parameterless constructor creates an uninitialized BarData instance\n- The second, with a DateTime parameter, assigns the DateTime property that value\n- The third, with a BarHistory parameter, assigns values based on the last bar of data in the BarHistory\n\n## Members\n\n### Ask\n"
    }
  },
  {
    "pageContent": "e bar of data, comprised of open, high, low, close and volume values.\n\n## Constructors\n\n```csharp\npublic BarData()\npublic BarData(DateTime dt)\npublic BarData(BarHistory bars)\n```\n\nBarData has three constructors:\n- The first parameterless constructor creates an uninitialized BarData instance\n- The second, with a DateTime parameter, assigns the DateTime property that value\n- The third, with a BarHistory parameter, assigns values based on the last bar of data in the BarHistory\n\n## Members\n\n### Ask\n\n\n```csharp\npublic double Ask\n\n```",
    "metadata": {
      "id": "bardata",
      "title": "bardata",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/bardata.md",
      "chunkIndex": "code-context-1",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public double Bid\n",
    "metadata": {
      "id": "bardata",
      "title": "bardata",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/bardata.md",
      "chunkIndex": "code-2",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "nstructors\n\n```csharp\npublic BarData()\npublic BarData(DateTime dt)\npublic BarData(BarHistory bars)\n```\n\nBarData has three constructors:\n- The first parameterless constructor creates an uninitialized BarData instance\n- The second, with a DateTime parameter, assigns the DateTime property that value\n- The third, with a BarHistory parameter, assigns values based on the last bar of data in the BarHistory\n\n## Members\n\n### Ask\n```csharp\npublic double Ask\n```\nThe bar's current ask price value.\n\n### Bid\n"
    }
  },
  {
    "pageContent": "nstructors\n\n```csharp\npublic BarData()\npublic BarData(DateTime dt)\npublic BarData(BarHistory bars)\n```\n\nBarData has three constructors:\n- The first parameterless constructor creates an uninitialized BarData instance\n- The second, with a DateTime parameter, assigns the DateTime property that value\n- The third, with a BarHistory parameter, assigns values based on the last bar of data in the BarHistory\n\n## Members\n\n### Ask\n```csharp\npublic double Ask\n```\nThe bar's current ask price value.\n\n### Bid\n\n\n```csharp\npublic double Bid\n\n```",
    "metadata": {
      "id": "bardata",
      "title": "bardata",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/bardata.md",
      "chunkIndex": "code-context-2",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public double Close\n",
    "metadata": {
      "id": "bardata",
      "title": "bardata",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/bardata.md",
      "chunkIndex": "code-3",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ata(BarHistory bars)\n```\n\nBarData has three constructors:\n- The first parameterless constructor creates an uninitialized BarData instance\n- The second, with a DateTime parameter, assigns the DateTime property that value\n- The third, with a BarHistory parameter, assigns values based on the last bar of data in the BarHistory\n\n## Members\n\n### Ask\n```csharp\npublic double Ask\n```\nThe bar's current ask price value.\n\n### Bid\n```csharp\npublic double Bid\n```\nThe bar's current bid price value.\n\n### Close\n"
    }
  },
  {
    "pageContent": "ata(BarHistory bars)\n```\n\nBarData has three constructors:\n- The first parameterless constructor creates an uninitialized BarData instance\n- The second, with a DateTime parameter, assigns the DateTime property that value\n- The third, with a BarHistory parameter, assigns values based on the last bar of data in the BarHistory\n\n## Members\n\n### Ask\n```csharp\npublic double Ask\n```\nThe bar's current ask price value.\n\n### Bid\n```csharp\npublic double Bid\n```\nThe bar's current bid price value.\n\n### Close\n\n\n```csharp\npublic double Close\n\n```",
    "metadata": {
      "id": "bardata",
      "title": "bardata",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/bardata.md",
      "chunkIndex": "code-context-3",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public string DataSource\n",
    "metadata": {
      "id": "bardata",
      "title": "bardata",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/bardata.md",
      "chunkIndex": "code-4",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ss constructor creates an uninitialized BarData instance\n- The second, with a DateTime parameter, assigns the DateTime property that value\n- The third, with a BarHistory parameter, assigns values based on the last bar of data in the BarHistory\n\n## Members\n\n### Ask\n```csharp\npublic double Ask\n```\nThe bar's current ask price value.\n\n### Bid\n```csharp\npublic double Bid\n```\nThe bar's current bid price value.\n\n### Close\n```csharp\npublic double Close\n```\nThe bar's closing price value.\n\n### DataSource\n"
    }
  },
  {
    "pageContent": "ss constructor creates an uninitialized BarData instance\n- The second, with a DateTime parameter, assigns the DateTime property that value\n- The third, with a BarHistory parameter, assigns values based on the last bar of data in the BarHistory\n\n## Members\n\n### Ask\n```csharp\npublic double Ask\n```\nThe bar's current ask price value.\n\n### Bid\n```csharp\npublic double Bid\n```\nThe bar's current bid price value.\n\n### Close\n```csharp\npublic double Close\n```\nThe bar's closing price value.\n\n### DataSource\n\n\n```csharp\npublic string DataSource\n\n```",
    "metadata": {
      "id": "bardata",
      "title": "bardata",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/bardata.md",
      "chunkIndex": "code-context-4",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public DateTime DateTime\n",
    "metadata": {
      "id": "bardata",
      "title": "bardata",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/bardata.md",
      "chunkIndex": "code-5",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": " BarHistory parameter, assigns values based on the last bar of data in the BarHistory\n\n## Members\n\n### Ask\n```csharp\npublic double Ask\n```\nThe bar's current ask price value.\n\n### Bid\n```csharp\npublic double Bid\n```\nThe bar's current bid price value.\n\n### Close\n```csharp\npublic double Close\n```\nThe bar's closing price value.\n\n### DataSource\n```csharp\npublic string DataSource\n```\nContains the name of the Historical Data Provider, or DataSet, that provided the data for this instance.\n\n### DateTime\n"
    }
  },
  {
    "pageContent": " BarHistory parameter, assigns values based on the last bar of data in the BarHistory\n\n## Members\n\n### Ask\n```csharp\npublic double Ask\n```\nThe bar's current ask price value.\n\n### Bid\n```csharp\npublic double Bid\n```\nThe bar's current bid price value.\n\n### Close\n```csharp\npublic double Close\n```\nThe bar's closing price value.\n\n### DataSource\n```csharp\npublic string DataSource\n```\nContains the name of the Historical Data Provider, or DataSet, that provided the data for this instance.\n\n### DateTime\n\n\n```csharp\npublic DateTime DateTime\n\n```",
    "metadata": {
      "id": "bardata",
      "title": "bardata",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/bardata.md",
      "chunkIndex": "code-context-5",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public double High\n",
    "metadata": {
      "id": "bardata",
      "title": "bardata",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/bardata.md",
      "chunkIndex": "code-6",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": " the BarHistory\n\n## Members\n\n### Ask\n```csharp\npublic double Ask\n```\nThe bar's current ask price value.\n\n### Bid\n```csharp\npublic double Bid\n```\nThe bar's current bid price value.\n\n### Close\n```csharp\npublic double Close\n```\nThe bar's closing price value.\n\n### DataSource\n```csharp\npublic string DataSource\n```\nContains the name of the Historical Data Provider, or DataSet, that provided the data for this instance.\n\n### DateTime\n```csharp\npublic DateTime DateTime\n```\nThe bar's date/time.\n\n### High\n"
    }
  },
  {
    "pageContent": " the BarHistory\n\n## Members\n\n### Ask\n```csharp\npublic double Ask\n```\nThe bar's current ask price value.\n\n### Bid\n```csharp\npublic double Bid\n```\nThe bar's current bid price value.\n\n### Close\n```csharp\npublic double Close\n```\nThe bar's closing price value.\n\n### DataSource\n```csharp\npublic string DataSource\n```\nContains the name of the Historical Data Provider, or DataSet, that provided the data for this instance.\n\n### DateTime\n```csharp\npublic DateTime DateTime\n```\nThe bar's date/time.\n\n### High\n\n\n```csharp\npublic double High\n\n```",
    "metadata": {
      "id": "bardata",
      "title": "bardata",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/bardata.md",
      "chunkIndex": "code-context-6",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public double Low\n",
    "metadata": {
      "id": "bardata",
      "title": "bardata",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/bardata.md",
      "chunkIndex": "code-7",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "he bar's current ask price value.\n\n### Bid\n```csharp\npublic double Bid\n```\nThe bar's current bid price value.\n\n### Close\n```csharp\npublic double Close\n```\nThe bar's closing price value.\n\n### DataSource\n```csharp\npublic string DataSource\n```\nContains the name of the Historical Data Provider, or DataSet, that provided the data for this instance.\n\n### DateTime\n```csharp\npublic DateTime DateTime\n```\nThe bar's date/time.\n\n### High\n```csharp\npublic double High\n```\nThe bar's high price value.\n\n### Low\n"
    }
  },
  {
    "pageContent": "he bar's current ask price value.\n\n### Bid\n```csharp\npublic double Bid\n```\nThe bar's current bid price value.\n\n### Close\n```csharp\npublic double Close\n```\nThe bar's closing price value.\n\n### DataSource\n```csharp\npublic string DataSource\n```\nContains the name of the Historical Data Provider, or DataSet, that provided the data for this instance.\n\n### DateTime\n```csharp\npublic DateTime DateTime\n```\nThe bar's date/time.\n\n### High\n```csharp\npublic double High\n```\nThe bar's high price value.\n\n### Low\n\n\n```csharp\npublic double Low\n\n```",
    "metadata": {
      "id": "bardata",
      "title": "bardata",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/bardata.md",
      "chunkIndex": "code-context-7",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public double Open\n",
    "metadata": {
      "id": "bardata",
      "title": "bardata",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/bardata.md",
      "chunkIndex": "code-8",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "d\n```\nThe bar's current bid price value.\n\n### Close\n```csharp\npublic double Close\n```\nThe bar's closing price value.\n\n### DataSource\n```csharp\npublic string DataSource\n```\nContains the name of the Historical Data Provider, or DataSet, that provided the data for this instance.\n\n### DateTime\n```csharp\npublic DateTime DateTime\n```\nThe bar's date/time.\n\n### High\n```csharp\npublic double High\n```\nThe bar's high price value.\n\n### Low\n```csharp\npublic double Low\n```\nThe bar's low price value.\n\n### Open\n"
    }
  },
  {
    "pageContent": "d\n```\nThe bar's current bid price value.\n\n### Close\n```csharp\npublic double Close\n```\nThe bar's closing price value.\n\n### DataSource\n```csharp\npublic string DataSource\n```\nContains the name of the Historical Data Provider, or DataSet, that provided the data for this instance.\n\n### DateTime\n```csharp\npublic DateTime DateTime\n```\nThe bar's date/time.\n\n### High\n```csharp\npublic double High\n```\nThe bar's high price value.\n\n### Low\n```csharp\npublic double Low\n```\nThe bar's low price value.\n\n### Open\n\n\n```csharp\npublic double Open\n\n```",
    "metadata": {
      "id": "bardata",
      "title": "bardata",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/bardata.md",
      "chunkIndex": "code-context-8",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public double Volume\n",
    "metadata": {
      "id": "bardata",
      "title": "bardata",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/bardata.md",
      "chunkIndex": "code-9",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "Close\n```\nThe bar's closing price value.\n\n### DataSource\n```csharp\npublic string DataSource\n```\nContains the name of the Historical Data Provider, or DataSet, that provided the data for this instance.\n\n### DateTime\n```csharp\npublic DateTime DateTime\n```\nThe bar's date/time.\n\n### High\n```csharp\npublic double High\n```\nThe bar's high price value.\n\n### Low\n```csharp\npublic double Low\n```\nThe bar's low price value.\n\n### Open\n```csharp\npublic double Open\n```\nThe bar's opening price value.\n\n### Volume\n"
    }
  },
  {
    "pageContent": "Close\n```\nThe bar's closing price value.\n\n### DataSource\n```csharp\npublic string DataSource\n```\nContains the name of the Historical Data Provider, or DataSet, that provided the data for this instance.\n\n### DateTime\n```csharp\npublic DateTime DateTime\n```\nThe bar's date/time.\n\n### High\n```csharp\npublic double High\n```\nThe bar's high price value.\n\n### Low\n```csharp\npublic double Low\n```\nThe bar's low price value.\n\n### Open\n```csharp\npublic double Open\n```\nThe bar's opening price value.\n\n### Volume\n\n\n```csharp\npublic double Volume\n\n```",
    "metadata": {
      "id": "bardata",
      "title": "bardata",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/bardata.md",
      "chunkIndex": "code-context-9",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "# BarGlyphBase Class\n\n**Namespace:** WealthLab.ChartWPF  \n**Parent:** PlotBase\n\nThe base class for the small icons (glyphs) that are plotted on the chart to represent events like dividends, splits, or candlestick chart patterns. They are the visual depiction of the EventDataPoint instances that are generated by Event Data Providers. The EventProviderBase class can override the GetBarGlyph method to assign custom BarGlyphs for its EventDataPoint instances.\n\n## Chart Related\n\n### Bars\n",
    "metadata": {
      "id": "barglyph-base",
      "title": "barglyph-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barglyph-base.md",
      "chunkIndex": 0,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the BarHistory instance which represents the historical data currently being charted.\n\n### ChartPreferences\n",
    "metadata": {
      "id": "barglyph-base",
      "title": "barglyph-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barglyph-base.md",
      "chunkIndex": 1,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns an instance of the ChartPreferences class, which contains properties that describe the colors and styles to use when rendering the chart.\n\n### Color\n",
    "metadata": {
      "id": "barglyph-base",
      "title": "barglyph-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barglyph-base.md",
      "chunkIndex": 2,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nSpecifies the color that should be used when plotting this plot object.\n\n### DefaultBrush\n",
    "metadata": {
      "id": "barglyph-base",
      "title": "barglyph-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barglyph-base.md",
      "chunkIndex": 3,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the default Brush object that should be used when rendering this plot object.\n\n### DefaultPen\n",
    "metadata": {
      "id": "barglyph-base",
      "title": "barglyph-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barglyph-base.md",
      "chunkIndex": 4,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the default Pen object that should be used when rendering this plot object.\n\n### GetBarColor\n",
    "metadata": {
      "id": "barglyph-base",
      "title": "barglyph-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barglyph-base.md",
      "chunkIndex": 5,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the color that should be used to render the bar number corresponding to the idx index.\n\n### GetMaxValue\n",
    "metadata": {
      "id": "barglyph-base",
      "title": "barglyph-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barglyph-base.md",
      "chunkIndex": 6,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the highest y-axis value that the plot object requires within the specified start and end index range.\n\n### GetMinValue\n",
    "metadata": {
      "id": "barglyph-base",
      "title": "barglyph-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barglyph-base.md",
      "chunkIndex": 7,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the lowest y-axis value that the plot object requires within the specified start and end index range.\n\n### IsMouseOver\n",
    "metadata": {
      "id": "barglyph-base",
      "title": "barglyph-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barglyph-base.md",
      "chunkIndex": 8,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns whether the mouse position, contained in the pt parameter, is considered to be hovering over this plot object.\n\n### Opacity\n",
    "metadata": {
      "id": "barglyph-base",
      "title": "barglyph-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barglyph-base.md",
      "chunkIndex": 9,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nContains the opacity value (0-255) for rendering. When setting, expects value 0-100 (internally converted to 0-255 scale).\n\n## Configuration\n\n### ConfigKey\n",
    "metadata": {
      "id": "barglyph-base",
      "title": "barglyph-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barglyph-base.md",
      "chunkIndex": 10,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nThe key used when WL8 saves this item's Configuration. Default is Name + \"_Configuration\".\n\n### Configuration\n",
    "metadata": {
      "id": "barglyph-base",
      "title": "barglyph-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barglyph-base.md",
      "chunkIndex": 11,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nContains the configuration expressed as a single string, composed by persisting the Parameters.\n\n### Description\n",
    "metadata": {
      "id": "barglyph-base",
      "title": "barglyph-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barglyph-base.md",
      "chunkIndex": 12,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns a short description of the item, shown in parameter editor dialog.\n\n### EditConfig\n",
    "metadata": {
      "id": "barglyph-base",
      "title": "barglyph-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barglyph-base.md",
      "chunkIndex": 13,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nShows parameter editor dialog by default. Can be overridden for custom editor interface.\n\n### IsConfigurable\n",
    "metadata": {
      "id": "barglyph-base",
      "title": "barglyph-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barglyph-base.md",
      "chunkIndex": 14,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns true if Parameters contains one or more Parameter instances.\n\n### Name\n",
    "metadata": {
      "id": "barglyph-base",
      "title": "barglyph-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barglyph-base.md",
      "chunkIndex": 15,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the name of the instance.\n\n### Parameters\n",
    "metadata": {
      "id": "barglyph-base",
      "title": "barglyph-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barglyph-base.md",
      "chunkIndex": 16,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nContains the Parameter instances that comprise the configuration.\n\n### ProcessConfig\n",
    "metadata": {
      "id": "barglyph-base",
      "title": "barglyph-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barglyph-base.md",
      "chunkIndex": 17,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nOverride to perform special processing after Configuration changes.\n\n## Coordinate Conversion\n\n### ConvertDateTimeToX\n",
    "metadata": {
      "id": "barglyph-base",
      "title": "barglyph-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barglyph-base.md",
      "chunkIndex": 18,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nConverts DateTime value to x-axis pixel location.\n\n### ConvertIndexToX\n",
    "metadata": {
      "id": "barglyph-base",
      "title": "barglyph-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barglyph-base.md",
      "chunkIndex": 19,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nConverts BarHistory index to x-axis pixel location.\n\n### ConvertValueToY\n",
    "metadata": {
      "id": "barglyph-base",
      "title": "barglyph-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barglyph-base.md",
      "chunkIndex": 20,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nConverts value to y-axis pixel location.\n\n### ConvertXToDateTime\n",
    "metadata": {
      "id": "barglyph-base",
      "title": "barglyph-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barglyph-base.md",
      "chunkIndex": 21,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nConverts x-axis pixel location to DateTime value.\n\n### ConvertXToIndex\n",
    "metadata": {
      "id": "barglyph-base",
      "title": "barglyph-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barglyph-base.md",
      "chunkIndex": 22,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nConverts x-axis pixel value to BarHistory index.\n\n### ConvertYToValue\n",
    "metadata": {
      "id": "barglyph-base",
      "title": "barglyph-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barglyph-base.md",
      "chunkIndex": 23,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nConverts y-axis pixel location to value.\n\n## Members\n\n### AboveBar\n",
    "metadata": {
      "id": "barglyph-base",
      "title": "barglyph-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barglyph-base.md",
      "chunkIndex": 24,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nDetermines if BarGlyph renders above/below bar (default: false).\n\n### DrawTooltip\n",
    "metadata": {
      "id": "barglyph-base",
      "title": "barglyph-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barglyph-base.md",
      "chunkIndex": 25,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nRenders tooltip for BarGlyph on mouse hover.\n\n### DrawTooltips\n",
    "metadata": {
      "id": "barglyph-base",
      "title": "barglyph-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barglyph-base.md",
      "chunkIndex": 26,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nRenders multi-line tooltip for BarGlyph on mouse hover.\n\n### GlyphHeight\n",
    "metadata": {
      "id": "barglyph-base",
      "title": "barglyph-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barglyph-base.md",
      "chunkIndex": 27,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nHeight of the BarGlyph in pixels.\n\n### GlyphWidth\n",
    "metadata": {
      "id": "barglyph-base",
      "title": "barglyph-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barglyph-base.md",
      "chunkIndex": 28,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nWidth of the BarGlyph in pixels.\n\n## Rendering\n\n### HasMouseOverState\n",
    "metadata": {
      "id": "barglyph-base",
      "title": "barglyph-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barglyph-base.md",
      "chunkIndex": 29,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns whether plot object renders special state on mouse over.\n\n### PostRender\n",
    "metadata": {
      "id": "barglyph-base",
      "title": "barglyph-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barglyph-base.md",
      "chunkIndex": 30,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nCalled after main rendering phase.\n\n### PreRender\n",
    "metadata": {
      "id": "barglyph-base",
      "title": "barglyph-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barglyph-base.md",
      "chunkIndex": 31,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nCalled before main rendering phase.\n\n### Render\n",
    "metadata": {
      "id": "barglyph-base",
      "title": "barglyph-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barglyph-base.md",
      "chunkIndex": 32,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nCalled when plot object should be rendered.\n\n### RenderHighlight\n",
    "metadata": {
      "id": "barglyph-base",
      "title": "barglyph-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barglyph-base.md",
      "chunkIndex": 33,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nCalled when mouse-over effect should be rendered.\n\n### RenderPass\n",
    "metadata": {
      "id": "barglyph-base",
      "title": "barglyph-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barglyph-base.md",
      "chunkIndex": 34,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns rendering pass (1 or 2) for this plot object. ",
    "metadata": {
      "id": "barglyph-base",
      "title": "barglyph-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barglyph-base.md",
      "chunkIndex": 35,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "public BarHistory Bars\n",
    "metadata": {
      "id": "barglyph-base",
      "title": "barglyph-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barglyph-base.md",
      "chunkIndex": "code-0",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "# BarGlyphBase Class\n\n**Namespace:** WealthLab.ChartWPF  \n**Parent:** PlotBase\n\nThe base class for the small icons (glyphs) that are plotted on the chart to represent events like dividends, splits, or candlestick chart patterns. They are the visual depiction of the EventDataPoint instances that are generated by Event Data Providers. The EventProviderBase class can override the GetBarGlyph method to assign custom BarGlyphs for its EventDataPoint instances.\n\n## Chart Related\n\n### Bars\n"
    }
  },
  {
    "pageContent": "# BarGlyphBase Class\n\n**Namespace:** WealthLab.ChartWPF  \n**Parent:** PlotBase\n\nThe base class for the small icons (glyphs) that are plotted on the chart to represent events like dividends, splits, or candlestick chart patterns. They are the visual depiction of the EventDataPoint instances that are generated by Event Data Providers. The EventProviderBase class can override the GetBarGlyph method to assign custom BarGlyphs for its EventDataPoint instances.\n\n## Chart Related\n\n### Bars\n\n\n```csharp\npublic BarHistory Bars\n\n```",
    "metadata": {
      "id": "barglyph-base",
      "title": "barglyph-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barglyph-base.md",
      "chunkIndex": "code-context-0",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public ChartPreferences ChartPreferences\n",
    "metadata": {
      "id": "barglyph-base",
      "title": "barglyph-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barglyph-base.md",
      "chunkIndex": "code-1",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "on the chart to represent events like dividends, splits, or candlestick chart patterns. They are the visual depiction of the EventDataPoint instances that are generated by Event Data Providers. The EventProviderBase class can override the GetBarGlyph method to assign custom BarGlyphs for its EventDataPoint instances.\n\n## Chart Related\n\n### Bars\n```csharp\npublic BarHistory Bars\n```\nReturns the BarHistory instance which represents the historical data currently being charted.\n\n### ChartPreferences\n"
    }
  },
  {
    "pageContent": "on the chart to represent events like dividends, splits, or candlestick chart patterns. They are the visual depiction of the EventDataPoint instances that are generated by Event Data Providers. The EventProviderBase class can override the GetBarGlyph method to assign custom BarGlyphs for its EventDataPoint instances.\n\n## Chart Related\n\n### Bars\n```csharp\npublic BarHistory Bars\n```\nReturns the BarHistory instance which represents the historical data currently being charted.\n\n### ChartPreferences\n\n\n```csharp\npublic ChartPreferences ChartPreferences\n\n```",
    "metadata": {
      "id": "barglyph-base",
      "title": "barglyph-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barglyph-base.md",
      "chunkIndex": "code-context-1",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public WLColor Color\n",
    "metadata": {
      "id": "barglyph-base",
      "title": "barglyph-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barglyph-base.md",
      "chunkIndex": "code-2",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ase class can override the GetBarGlyph method to assign custom BarGlyphs for its EventDataPoint instances.\n\n## Chart Related\n\n### Bars\n```csharp\npublic BarHistory Bars\n```\nReturns the BarHistory instance which represents the historical data currently being charted.\n\n### ChartPreferences\n```csharp\npublic ChartPreferences ChartPreferences\n```\nReturns an instance of the ChartPreferences class, which contains properties that describe the colors and styles to use when rendering the chart.\n\n### Color\n"
    }
  },
  {
    "pageContent": "ase class can override the GetBarGlyph method to assign custom BarGlyphs for its EventDataPoint instances.\n\n## Chart Related\n\n### Bars\n```csharp\npublic BarHistory Bars\n```\nReturns the BarHistory instance which represents the historical data currently being charted.\n\n### ChartPreferences\n```csharp\npublic ChartPreferences ChartPreferences\n```\nReturns an instance of the ChartPreferences class, which contains properties that describe the colors and styles to use when rendering the chart.\n\n### Color\n\n\n```csharp\npublic WLColor Color\n\n```",
    "metadata": {
      "id": "barglyph-base",
      "title": "barglyph-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barglyph-base.md",
      "chunkIndex": "code-context-2",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public Brush DefaultBrush\n",
    "metadata": {
      "id": "barglyph-base",
      "title": "barglyph-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barglyph-base.md",
      "chunkIndex": "code-3",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "\n### Bars\n```csharp\npublic BarHistory Bars\n```\nReturns the BarHistory instance which represents the historical data currently being charted.\n\n### ChartPreferences\n```csharp\npublic ChartPreferences ChartPreferences\n```\nReturns an instance of the ChartPreferences class, which contains properties that describe the colors and styles to use when rendering the chart.\n\n### Color\n```csharp\npublic WLColor Color\n```\nSpecifies the color that should be used when plotting this plot object.\n\n### DefaultBrush\n"
    }
  },
  {
    "pageContent": "\n### Bars\n```csharp\npublic BarHistory Bars\n```\nReturns the BarHistory instance which represents the historical data currently being charted.\n\n### ChartPreferences\n```csharp\npublic ChartPreferences ChartPreferences\n```\nReturns an instance of the ChartPreferences class, which contains properties that describe the colors and styles to use when rendering the chart.\n\n### Color\n```csharp\npublic WLColor Color\n```\nSpecifies the color that should be used when plotting this plot object.\n\n### DefaultBrush\n\n\n```csharp\npublic Brush DefaultBrush\n\n```",
    "metadata": {
      "id": "barglyph-base",
      "title": "barglyph-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barglyph-base.md",
      "chunkIndex": "code-context-3",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public Pen DefaultPen\n",
    "metadata": {
      "id": "barglyph-base",
      "title": "barglyph-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barglyph-base.md",
      "chunkIndex": "code-4",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "### ChartPreferences\n```csharp\npublic ChartPreferences ChartPreferences\n```\nReturns an instance of the ChartPreferences class, which contains properties that describe the colors and styles to use when rendering the chart.\n\n### Color\n```csharp\npublic WLColor Color\n```\nSpecifies the color that should be used when plotting this plot object.\n\n### DefaultBrush\n```csharp\npublic Brush DefaultBrush\n```\nReturns the default Brush object that should be used when rendering this plot object.\n\n### DefaultPen\n"
    }
  },
  {
    "pageContent": "### ChartPreferences\n```csharp\npublic ChartPreferences ChartPreferences\n```\nReturns an instance of the ChartPreferences class, which contains properties that describe the colors and styles to use when rendering the chart.\n\n### Color\n```csharp\npublic WLColor Color\n```\nSpecifies the color that should be used when plotting this plot object.\n\n### DefaultBrush\n```csharp\npublic Brush DefaultBrush\n```\nReturns the default Brush object that should be used when rendering this plot object.\n\n### DefaultPen\n\n\n```csharp\npublic Pen DefaultPen\n\n```",
    "metadata": {
      "id": "barglyph-base",
      "title": "barglyph-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barglyph-base.md",
      "chunkIndex": "code-context-4",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public virtual Color GetBarColor(int idx)\n",
    "metadata": {
      "id": "barglyph-base",
      "title": "barglyph-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barglyph-base.md",
      "chunkIndex": "code-5",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ains properties that describe the colors and styles to use when rendering the chart.\n\n### Color\n```csharp\npublic WLColor Color\n```\nSpecifies the color that should be used when plotting this plot object.\n\n### DefaultBrush\n```csharp\npublic Brush DefaultBrush\n```\nReturns the default Brush object that should be used when rendering this plot object.\n\n### DefaultPen\n```csharp\npublic Pen DefaultPen\n```\nReturns the default Pen object that should be used when rendering this plot object.\n\n### GetBarColor\n"
    }
  },
  {
    "pageContent": "ains properties that describe the colors and styles to use when rendering the chart.\n\n### Color\n```csharp\npublic WLColor Color\n```\nSpecifies the color that should be used when plotting this plot object.\n\n### DefaultBrush\n```csharp\npublic Brush DefaultBrush\n```\nReturns the default Brush object that should be used when rendering this plot object.\n\n### DefaultPen\n```csharp\npublic Pen DefaultPen\n```\nReturns the default Pen object that should be used when rendering this plot object.\n\n### GetBarColor\n\n\n```csharp\npublic virtual Color GetBarColor(int idx)\n\n```",
    "metadata": {
      "id": "barglyph-base",
      "title": "barglyph-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barglyph-base.md",
      "chunkIndex": "code-context-5",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public virtual double GetMaxValue(int start, int end)\n",
    "metadata": {
      "id": "barglyph-base",
      "title": "barglyph-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barglyph-base.md",
      "chunkIndex": "code-6",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ed when plotting this plot object.\n\n### DefaultBrush\n```csharp\npublic Brush DefaultBrush\n```\nReturns the default Brush object that should be used when rendering this plot object.\n\n### DefaultPen\n```csharp\npublic Pen DefaultPen\n```\nReturns the default Pen object that should be used when rendering this plot object.\n\n### GetBarColor\n```csharp\npublic virtual Color GetBarColor(int idx)\n```\nReturns the color that should be used to render the bar number corresponding to the idx index.\n\n### GetMaxValue\n"
    }
  },
  {
    "pageContent": "ed when plotting this plot object.\n\n### DefaultBrush\n```csharp\npublic Brush DefaultBrush\n```\nReturns the default Brush object that should be used when rendering this plot object.\n\n### DefaultPen\n```csharp\npublic Pen DefaultPen\n```\nReturns the default Pen object that should be used when rendering this plot object.\n\n### GetBarColor\n```csharp\npublic virtual Color GetBarColor(int idx)\n```\nReturns the color that should be used to render the bar number corresponding to the idx index.\n\n### GetMaxValue\n\n\n```csharp\npublic virtual double GetMaxValue(int start, int end)\n\n```",
    "metadata": {
      "id": "barglyph-base",
      "title": "barglyph-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barglyph-base.md",
      "chunkIndex": "code-context-6",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public virtual double GetMinValue(int start, int end)\n",
    "metadata": {
      "id": "barglyph-base",
      "title": "barglyph-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barglyph-base.md",
      "chunkIndex": "code-7",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "``csharp\npublic Pen DefaultPen\n```\nReturns the default Pen object that should be used when rendering this plot object.\n\n### GetBarColor\n```csharp\npublic virtual Color GetBarColor(int idx)\n```\nReturns the color that should be used to render the bar number corresponding to the idx index.\n\n### GetMaxValue\n```csharp\npublic virtual double GetMaxValue(int start, int end)\n```\nReturns the highest y-axis value that the plot object requires within the specified start and end index range.\n\n### GetMinValue\n"
    }
  },
  {
    "pageContent": "``csharp\npublic Pen DefaultPen\n```\nReturns the default Pen object that should be used when rendering this plot object.\n\n### GetBarColor\n```csharp\npublic virtual Color GetBarColor(int idx)\n```\nReturns the color that should be used to render the bar number corresponding to the idx index.\n\n### GetMaxValue\n```csharp\npublic virtual double GetMaxValue(int start, int end)\n```\nReturns the highest y-axis value that the plot object requires within the specified start and end index range.\n\n### GetMinValue\n\n\n```csharp\npublic virtual double GetMinValue(int start, int end)\n\n```",
    "metadata": {
      "id": "barglyph-base",
      "title": "barglyph-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barglyph-base.md",
      "chunkIndex": "code-context-7",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public virtual bool IsMouseOver(Point pt)\n",
    "metadata": {
      "id": "barglyph-base",
      "title": "barglyph-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barglyph-base.md",
      "chunkIndex": "code-8",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "urns the color that should be used to render the bar number corresponding to the idx index.\n\n### GetMaxValue\n```csharp\npublic virtual double GetMaxValue(int start, int end)\n```\nReturns the highest y-axis value that the plot object requires within the specified start and end index range.\n\n### GetMinValue\n```csharp\npublic virtual double GetMinValue(int start, int end)\n```\nReturns the lowest y-axis value that the plot object requires within the specified start and end index range.\n\n### IsMouseOver\n"
    }
  },
  {
    "pageContent": "urns the color that should be used to render the bar number corresponding to the idx index.\n\n### GetMaxValue\n```csharp\npublic virtual double GetMaxValue(int start, int end)\n```\nReturns the highest y-axis value that the plot object requires within the specified start and end index range.\n\n### GetMinValue\n```csharp\npublic virtual double GetMinValue(int start, int end)\n```\nReturns the lowest y-axis value that the plot object requires within the specified start and end index range.\n\n### IsMouseOver\n\n\n```csharp\npublic virtual bool IsMouseOver(Point pt)\n\n```",
    "metadata": {
      "id": "barglyph-base",
      "title": "barglyph-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barglyph-base.md",
      "chunkIndex": "code-context-8",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public byte Opacity\n",
    "metadata": {
      "id": "barglyph-base",
      "title": "barglyph-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barglyph-base.md",
      "chunkIndex": "code-9",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": " highest y-axis value that the plot object requires within the specified start and end index range.\n\n### GetMinValue\n```csharp\npublic virtual double GetMinValue(int start, int end)\n```\nReturns the lowest y-axis value that the plot object requires within the specified start and end index range.\n\n### IsMouseOver\n```csharp\npublic virtual bool IsMouseOver(Point pt)\n```\nReturns whether the mouse position, contained in the pt parameter, is considered to be hovering over this plot object.\n\n### Opacity\n"
    }
  },
  {
    "pageContent": " highest y-axis value that the plot object requires within the specified start and end index range.\n\n### GetMinValue\n```csharp\npublic virtual double GetMinValue(int start, int end)\n```\nReturns the lowest y-axis value that the plot object requires within the specified start and end index range.\n\n### IsMouseOver\n```csharp\npublic virtual bool IsMouseOver(Point pt)\n```\nReturns whether the mouse position, contained in the pt parameter, is considered to be hovering over this plot object.\n\n### Opacity\n\n\n```csharp\npublic byte Opacity\n\n```",
    "metadata": {
      "id": "barglyph-base",
      "title": "barglyph-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barglyph-base.md",
      "chunkIndex": "code-context-9",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public virtual string ConfigKey\n",
    "metadata": {
      "id": "barglyph-base",
      "title": "barglyph-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barglyph-base.md",
      "chunkIndex": "code-10",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ns the lowest y-axis value that the plot object requires within the specified start and end index range.\n\n### IsMouseOver\n```csharp\npublic virtual bool IsMouseOver(Point pt)\n```\nReturns whether the mouse position, contained in the pt parameter, is considered to be hovering over this plot object.\n\n### Opacity\n```csharp\npublic byte Opacity\n```\nContains the opacity value (0-255) for rendering. When setting, expects value 0-100 (internally converted to 0-255 scale).\n\n## Configuration\n\n### ConfigKey\n"
    }
  },
  {
    "pageContent": "ns the lowest y-axis value that the plot object requires within the specified start and end index range.\n\n### IsMouseOver\n```csharp\npublic virtual bool IsMouseOver(Point pt)\n```\nReturns whether the mouse position, contained in the pt parameter, is considered to be hovering over this plot object.\n\n### Opacity\n```csharp\npublic byte Opacity\n```\nContains the opacity value (0-255) for rendering. When setting, expects value 0-100 (internally converted to 0-255 scale).\n\n## Configuration\n\n### ConfigKey\n\n\n```csharp\npublic virtual string ConfigKey\n\n```",
    "metadata": {
      "id": "barglyph-base",
      "title": "barglyph-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barglyph-base.md",
      "chunkIndex": "code-context-10",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public string Configuration\n",
    "metadata": {
      "id": "barglyph-base",
      "title": "barglyph-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barglyph-base.md",
      "chunkIndex": "code-11",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "useOver(Point pt)\n```\nReturns whether the mouse position, contained in the pt parameter, is considered to be hovering over this plot object.\n\n### Opacity\n```csharp\npublic byte Opacity\n```\nContains the opacity value (0-255) for rendering. When setting, expects value 0-100 (internally converted to 0-255 scale).\n\n## Configuration\n\n### ConfigKey\n```csharp\npublic virtual string ConfigKey\n```\nThe key used when WL8 saves this item's Configuration. Default is Name + \"_Configuration\".\n\n### Configuration\n"
    }
  },
  {
    "pageContent": "useOver(Point pt)\n```\nReturns whether the mouse position, contained in the pt parameter, is considered to be hovering over this plot object.\n\n### Opacity\n```csharp\npublic byte Opacity\n```\nContains the opacity value (0-255) for rendering. When setting, expects value 0-100 (internally converted to 0-255 scale).\n\n## Configuration\n\n### ConfigKey\n```csharp\npublic virtual string ConfigKey\n```\nThe key used when WL8 saves this item's Configuration. Default is Name + \"_Configuration\".\n\n### Configuration\n\n\n```csharp\npublic string Configuration\n\n```",
    "metadata": {
      "id": "barglyph-base",
      "title": "barglyph-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barglyph-base.md",
      "chunkIndex": "code-context-11",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public virtual string Description\n",
    "metadata": {
      "id": "barglyph-base",
      "title": "barglyph-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barglyph-base.md",
      "chunkIndex": "code-12",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "``csharp\npublic byte Opacity\n```\nContains the opacity value (0-255) for rendering. When setting, expects value 0-100 (internally converted to 0-255 scale).\n\n## Configuration\n\n### ConfigKey\n```csharp\npublic virtual string ConfigKey\n```\nThe key used when WL8 saves this item's Configuration. Default is Name + \"_Configuration\".\n\n### Configuration\n```csharp\npublic string Configuration\n```\nContains the configuration expressed as a single string, composed by persisting the Parameters.\n\n### Description\n"
    }
  },
  {
    "pageContent": "``csharp\npublic byte Opacity\n```\nContains the opacity value (0-255) for rendering. When setting, expects value 0-100 (internally converted to 0-255 scale).\n\n## Configuration\n\n### ConfigKey\n```csharp\npublic virtual string ConfigKey\n```\nThe key used when WL8 saves this item's Configuration. Default is Name + \"_Configuration\".\n\n### Configuration\n```csharp\npublic string Configuration\n```\nContains the configuration expressed as a single string, composed by persisting the Parameters.\n\n### Description\n\n\n```csharp\npublic virtual string Description\n\n```",
    "metadata": {
      "id": "barglyph-base",
      "title": "barglyph-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barglyph-base.md",
      "chunkIndex": "code-context-12",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public virtual string EditConfig()\n",
    "metadata": {
      "id": "barglyph-base",
      "title": "barglyph-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barglyph-base.md",
      "chunkIndex": "code-13",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "to 0-255 scale).\n\n## Configuration\n\n### ConfigKey\n```csharp\npublic virtual string ConfigKey\n```\nThe key used when WL8 saves this item's Configuration. Default is Name + \"_Configuration\".\n\n### Configuration\n```csharp\npublic string Configuration\n```\nContains the configuration expressed as a single string, composed by persisting the Parameters.\n\n### Description\n```csharp\npublic virtual string Description\n```\nReturns a short description of the item, shown in parameter editor dialog.\n\n### EditConfig\n"
    }
  },
  {
    "pageContent": "to 0-255 scale).\n\n## Configuration\n\n### ConfigKey\n```csharp\npublic virtual string ConfigKey\n```\nThe key used when WL8 saves this item's Configuration. Default is Name + \"_Configuration\".\n\n### Configuration\n```csharp\npublic string Configuration\n```\nContains the configuration expressed as a single string, composed by persisting the Parameters.\n\n### Description\n```csharp\npublic virtual string Description\n```\nReturns a short description of the item, shown in parameter editor dialog.\n\n### EditConfig\n\n\n```csharp\npublic virtual string EditConfig()\n\n```",
    "metadata": {
      "id": "barglyph-base",
      "title": "barglyph-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barglyph-base.md",
      "chunkIndex": "code-context-13",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public virtual bool IsConfigurable\n",
    "metadata": {
      "id": "barglyph-base",
      "title": "barglyph-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barglyph-base.md",
      "chunkIndex": "code-14",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": " is Name + \"_Configuration\".\n\n### Configuration\n```csharp\npublic string Configuration\n```\nContains the configuration expressed as a single string, composed by persisting the Parameters.\n\n### Description\n```csharp\npublic virtual string Description\n```\nReturns a short description of the item, shown in parameter editor dialog.\n\n### EditConfig\n```csharp\npublic virtual string EditConfig()\n```\nShows parameter editor dialog by default. Can be overridden for custom editor interface.\n\n### IsConfigurable\n"
    }
  },
  {
    "pageContent": " is Name + \"_Configuration\".\n\n### Configuration\n```csharp\npublic string Configuration\n```\nContains the configuration expressed as a single string, composed by persisting the Parameters.\n\n### Description\n```csharp\npublic virtual string Description\n```\nReturns a short description of the item, shown in parameter editor dialog.\n\n### EditConfig\n```csharp\npublic virtual string EditConfig()\n```\nShows parameter editor dialog by default. Can be overridden for custom editor interface.\n\n### IsConfigurable\n\n\n```csharp\npublic virtual bool IsConfigurable\n\n```",
    "metadata": {
      "id": "barglyph-base",
      "title": "barglyph-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barglyph-base.md",
      "chunkIndex": "code-context-14",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public abstract string Name\n",
    "metadata": {
      "id": "barglyph-base",
      "title": "barglyph-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barglyph-base.md",
      "chunkIndex": "code-15",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "s a single string, composed by persisting the Parameters.\n\n### Description\n```csharp\npublic virtual string Description\n```\nReturns a short description of the item, shown in parameter editor dialog.\n\n### EditConfig\n```csharp\npublic virtual string EditConfig()\n```\nShows parameter editor dialog by default. Can be overridden for custom editor interface.\n\n### IsConfigurable\n```csharp\npublic virtual bool IsConfigurable\n```\nReturns true if Parameters contains one or more Parameter instances.\n\n### Name\n"
    }
  },
  {
    "pageContent": "s a single string, composed by persisting the Parameters.\n\n### Description\n```csharp\npublic virtual string Description\n```\nReturns a short description of the item, shown in parameter editor dialog.\n\n### EditConfig\n```csharp\npublic virtual string EditConfig()\n```\nShows parameter editor dialog by default. Can be overridden for custom editor interface.\n\n### IsConfigurable\n```csharp\npublic virtual bool IsConfigurable\n```\nReturns true if Parameters contains one or more Parameter instances.\n\n### Name\n\n\n```csharp\npublic abstract string Name\n\n```",
    "metadata": {
      "id": "barglyph-base",
      "title": "barglyph-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barglyph-base.md",
      "chunkIndex": "code-context-15",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public ParameterList Parameters\n",
    "metadata": {
      "id": "barglyph-base",
      "title": "barglyph-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barglyph-base.md",
      "chunkIndex": "code-16",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "virtual string Description\n```\nReturns a short description of the item, shown in parameter editor dialog.\n\n### EditConfig\n```csharp\npublic virtual string EditConfig()\n```\nShows parameter editor dialog by default. Can be overridden for custom editor interface.\n\n### IsConfigurable\n```csharp\npublic virtual bool IsConfigurable\n```\nReturns true if Parameters contains one or more Parameter instances.\n\n### Name\n```csharp\npublic abstract string Name\n```\nReturns the name of the instance.\n\n### Parameters\n"
    }
  },
  {
    "pageContent": "virtual string Description\n```\nReturns a short description of the item, shown in parameter editor dialog.\n\n### EditConfig\n```csharp\npublic virtual string EditConfig()\n```\nShows parameter editor dialog by default. Can be overridden for custom editor interface.\n\n### IsConfigurable\n```csharp\npublic virtual bool IsConfigurable\n```\nReturns true if Parameters contains one or more Parameter instances.\n\n### Name\n```csharp\npublic abstract string Name\n```\nReturns the name of the instance.\n\n### Parameters\n\n\n```csharp\npublic ParameterList Parameters\n\n```",
    "metadata": {
      "id": "barglyph-base",
      "title": "barglyph-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barglyph-base.md",
      "chunkIndex": "code-context-16",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public virtual void ProcessConfig()\n",
    "metadata": {
      "id": "barglyph-base",
      "title": "barglyph-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barglyph-base.md",
      "chunkIndex": "code-17",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "\npublic virtual string EditConfig()\n```\nShows parameter editor dialog by default. Can be overridden for custom editor interface.\n\n### IsConfigurable\n```csharp\npublic virtual bool IsConfigurable\n```\nReturns true if Parameters contains one or more Parameter instances.\n\n### Name\n```csharp\npublic abstract string Name\n```\nReturns the name of the instance.\n\n### Parameters\n```csharp\npublic ParameterList Parameters\n```\nContains the Parameter instances that comprise the configuration.\n\n### ProcessConfig\n"
    }
  },
  {
    "pageContent": "\npublic virtual string EditConfig()\n```\nShows parameter editor dialog by default. Can be overridden for custom editor interface.\n\n### IsConfigurable\n```csharp\npublic virtual bool IsConfigurable\n```\nReturns true if Parameters contains one or more Parameter instances.\n\n### Name\n```csharp\npublic abstract string Name\n```\nReturns the name of the instance.\n\n### Parameters\n```csharp\npublic ParameterList Parameters\n```\nContains the Parameter instances that comprise the configuration.\n\n### ProcessConfig\n\n\n```csharp\npublic virtual void ProcessConfig()\n\n```",
    "metadata": {
      "id": "barglyph-base",
      "title": "barglyph-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barglyph-base.md",
      "chunkIndex": "code-context-17",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public double ConvertDateTimeToX(DateTime dt)\n",
    "metadata": {
      "id": "barglyph-base",
      "title": "barglyph-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barglyph-base.md",
      "chunkIndex": "code-18",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "rtual bool IsConfigurable\n```\nReturns true if Parameters contains one or more Parameter instances.\n\n### Name\n```csharp\npublic abstract string Name\n```\nReturns the name of the instance.\n\n### Parameters\n```csharp\npublic ParameterList Parameters\n```\nContains the Parameter instances that comprise the configuration.\n\n### ProcessConfig\n```csharp\npublic virtual void ProcessConfig()\n```\nOverride to perform special processing after Configuration changes.\n\n## Coordinate Conversion\n\n### ConvertDateTimeToX\n"
    }
  },
  {
    "pageContent": "rtual bool IsConfigurable\n```\nReturns true if Parameters contains one or more Parameter instances.\n\n### Name\n```csharp\npublic abstract string Name\n```\nReturns the name of the instance.\n\n### Parameters\n```csharp\npublic ParameterList Parameters\n```\nContains the Parameter instances that comprise the configuration.\n\n### ProcessConfig\n```csharp\npublic virtual void ProcessConfig()\n```\nOverride to perform special processing after Configuration changes.\n\n## Coordinate Conversion\n\n### ConvertDateTimeToX\n\n\n```csharp\npublic double ConvertDateTimeToX(DateTime dt)\n\n```",
    "metadata": {
      "id": "barglyph-base",
      "title": "barglyph-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barglyph-base.md",
      "chunkIndex": "code-context-18",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public double ConvertIndexToX(int idx)\n",
    "metadata": {
      "id": "barglyph-base",
      "title": "barglyph-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barglyph-base.md",
      "chunkIndex": "code-19",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "act string Name\n```\nReturns the name of the instance.\n\n### Parameters\n```csharp\npublic ParameterList Parameters\n```\nContains the Parameter instances that comprise the configuration.\n\n### ProcessConfig\n```csharp\npublic virtual void ProcessConfig()\n```\nOverride to perform special processing after Configuration changes.\n\n## Coordinate Conversion\n\n### ConvertDateTimeToX\n```csharp\npublic double ConvertDateTimeToX(DateTime dt)\n```\nConverts DateTime value to x-axis pixel location.\n\n### ConvertIndexToX\n"
    }
  },
  {
    "pageContent": "act string Name\n```\nReturns the name of the instance.\n\n### Parameters\n```csharp\npublic ParameterList Parameters\n```\nContains the Parameter instances that comprise the configuration.\n\n### ProcessConfig\n```csharp\npublic virtual void ProcessConfig()\n```\nOverride to perform special processing after Configuration changes.\n\n## Coordinate Conversion\n\n### ConvertDateTimeToX\n```csharp\npublic double ConvertDateTimeToX(DateTime dt)\n```\nConverts DateTime value to x-axis pixel location.\n\n### ConvertIndexToX\n\n\n```csharp\npublic double ConvertIndexToX(int idx)\n\n```",
    "metadata": {
      "id": "barglyph-base",
      "title": "barglyph-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barglyph-base.md",
      "chunkIndex": "code-context-19",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public double ConvertValueToY(double value)\n",
    "metadata": {
      "id": "barglyph-base",
      "title": "barglyph-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barglyph-base.md",
      "chunkIndex": "code-20",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "he Parameter instances that comprise the configuration.\n\n### ProcessConfig\n```csharp\npublic virtual void ProcessConfig()\n```\nOverride to perform special processing after Configuration changes.\n\n## Coordinate Conversion\n\n### ConvertDateTimeToX\n```csharp\npublic double ConvertDateTimeToX(DateTime dt)\n```\nConverts DateTime value to x-axis pixel location.\n\n### ConvertIndexToX\n```csharp\npublic double ConvertIndexToX(int idx)\n```\nConverts BarHistory index to x-axis pixel location.\n\n### ConvertValueToY\n"
    }
  },
  {
    "pageContent": "he Parameter instances that comprise the configuration.\n\n### ProcessConfig\n```csharp\npublic virtual void ProcessConfig()\n```\nOverride to perform special processing after Configuration changes.\n\n## Coordinate Conversion\n\n### ConvertDateTimeToX\n```csharp\npublic double ConvertDateTimeToX(DateTime dt)\n```\nConverts DateTime value to x-axis pixel location.\n\n### ConvertIndexToX\n```csharp\npublic double ConvertIndexToX(int idx)\n```\nConverts BarHistory index to x-axis pixel location.\n\n### ConvertValueToY\n\n\n```csharp\npublic double ConvertValueToY(double value)\n\n```",
    "metadata": {
      "id": "barglyph-base",
      "title": "barglyph-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barglyph-base.md",
      "chunkIndex": "code-context-20",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public DateTime ConvertXToDateTime(double x)\n",
    "metadata": {
      "id": "barglyph-base",
      "title": "barglyph-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barglyph-base.md",
      "chunkIndex": "code-21",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "`\nOverride to perform special processing after Configuration changes.\n\n## Coordinate Conversion\n\n### ConvertDateTimeToX\n```csharp\npublic double ConvertDateTimeToX(DateTime dt)\n```\nConverts DateTime value to x-axis pixel location.\n\n### ConvertIndexToX\n```csharp\npublic double ConvertIndexToX(int idx)\n```\nConverts BarHistory index to x-axis pixel location.\n\n### ConvertValueToY\n```csharp\npublic double ConvertValueToY(double value)\n```\nConverts value to y-axis pixel location.\n\n### ConvertXToDateTime\n"
    }
  },
  {
    "pageContent": "`\nOverride to perform special processing after Configuration changes.\n\n## Coordinate Conversion\n\n### ConvertDateTimeToX\n```csharp\npublic double ConvertDateTimeToX(DateTime dt)\n```\nConverts DateTime value to x-axis pixel location.\n\n### ConvertIndexToX\n```csharp\npublic double ConvertIndexToX(int idx)\n```\nConverts BarHistory index to x-axis pixel location.\n\n### ConvertValueToY\n```csharp\npublic double ConvertValueToY(double value)\n```\nConverts value to y-axis pixel location.\n\n### ConvertXToDateTime\n\n\n```csharp\npublic DateTime ConvertXToDateTime(double x)\n\n```",
    "metadata": {
      "id": "barglyph-base",
      "title": "barglyph-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barglyph-base.md",
      "chunkIndex": "code-context-21",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public virtual int ConvertXToIndex(double x)\n",
    "metadata": {
      "id": "barglyph-base",
      "title": "barglyph-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barglyph-base.md",
      "chunkIndex": "code-22",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "public double ConvertDateTimeToX(DateTime dt)\n```\nConverts DateTime value to x-axis pixel location.\n\n### ConvertIndexToX\n```csharp\npublic double ConvertIndexToX(int idx)\n```\nConverts BarHistory index to x-axis pixel location.\n\n### ConvertValueToY\n```csharp\npublic double ConvertValueToY(double value)\n```\nConverts value to y-axis pixel location.\n\n### ConvertXToDateTime\n```csharp\npublic DateTime ConvertXToDateTime(double x)\n```\nConverts x-axis pixel location to DateTime value.\n\n### ConvertXToIndex\n"
    }
  },
  {
    "pageContent": "public double ConvertDateTimeToX(DateTime dt)\n```\nConverts DateTime value to x-axis pixel location.\n\n### ConvertIndexToX\n```csharp\npublic double ConvertIndexToX(int idx)\n```\nConverts BarHistory index to x-axis pixel location.\n\n### ConvertValueToY\n```csharp\npublic double ConvertValueToY(double value)\n```\nConverts value to y-axis pixel location.\n\n### ConvertXToDateTime\n```csharp\npublic DateTime ConvertXToDateTime(double x)\n```\nConverts x-axis pixel location to DateTime value.\n\n### ConvertXToIndex\n\n\n```csharp\npublic virtual int ConvertXToIndex(double x)\n\n```",
    "metadata": {
      "id": "barglyph-base",
      "title": "barglyph-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barglyph-base.md",
      "chunkIndex": "code-context-22",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public double ConvertYToValue(double y)\n",
    "metadata": {
      "id": "barglyph-base",
      "title": "barglyph-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barglyph-base.md",
      "chunkIndex": "code-23",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "p\npublic double ConvertIndexToX(int idx)\n```\nConverts BarHistory index to x-axis pixel location.\n\n### ConvertValueToY\n```csharp\npublic double ConvertValueToY(double value)\n```\nConverts value to y-axis pixel location.\n\n### ConvertXToDateTime\n```csharp\npublic DateTime ConvertXToDateTime(double x)\n```\nConverts x-axis pixel location to DateTime value.\n\n### ConvertXToIndex\n```csharp\npublic virtual int ConvertXToIndex(double x)\n```\nConverts x-axis pixel value to BarHistory index.\n\n### ConvertYToValue\n"
    }
  },
  {
    "pageContent": "p\npublic double ConvertIndexToX(int idx)\n```\nConverts BarHistory index to x-axis pixel location.\n\n### ConvertValueToY\n```csharp\npublic double ConvertValueToY(double value)\n```\nConverts value to y-axis pixel location.\n\n### ConvertXToDateTime\n```csharp\npublic DateTime ConvertXToDateTime(double x)\n```\nConverts x-axis pixel location to DateTime value.\n\n### ConvertXToIndex\n```csharp\npublic virtual int ConvertXToIndex(double x)\n```\nConverts x-axis pixel value to BarHistory index.\n\n### ConvertYToValue\n\n\n```csharp\npublic double ConvertYToValue(double y)\n\n```",
    "metadata": {
      "id": "barglyph-base",
      "title": "barglyph-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barglyph-base.md",
      "chunkIndex": "code-context-23",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public virtual bool AboveBar\n",
    "metadata": {
      "id": "barglyph-base",
      "title": "barglyph-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barglyph-base.md",
      "chunkIndex": "code-24",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "csharp\npublic double ConvertValueToY(double value)\n```\nConverts value to y-axis pixel location.\n\n### ConvertXToDateTime\n```csharp\npublic DateTime ConvertXToDateTime(double x)\n```\nConverts x-axis pixel location to DateTime value.\n\n### ConvertXToIndex\n```csharp\npublic virtual int ConvertXToIndex(double x)\n```\nConverts x-axis pixel value to BarHistory index.\n\n### ConvertYToValue\n```csharp\npublic double ConvertYToValue(double y)\n```\nConverts y-axis pixel location to value.\n\n## Members\n\n### AboveBar\n"
    }
  },
  {
    "pageContent": "csharp\npublic double ConvertValueToY(double value)\n```\nConverts value to y-axis pixel location.\n\n### ConvertXToDateTime\n```csharp\npublic DateTime ConvertXToDateTime(double x)\n```\nConverts x-axis pixel location to DateTime value.\n\n### ConvertXToIndex\n```csharp\npublic virtual int ConvertXToIndex(double x)\n```\nConverts x-axis pixel value to BarHistory index.\n\n### ConvertYToValue\n```csharp\npublic double ConvertYToValue(double y)\n```\nConverts y-axis pixel location to value.\n\n## Members\n\n### AboveBar\n\n\n```csharp\npublic virtual bool AboveBar\n\n```",
    "metadata": {
      "id": "barglyph-base",
      "title": "barglyph-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barglyph-base.md",
      "chunkIndex": "code-context-24",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public void DrawTooltip(DrawingContext dc, string txt, Color color, double y)\n",
    "metadata": {
      "id": "barglyph-base",
      "title": "barglyph-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barglyph-base.md",
      "chunkIndex": "code-25",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "harp\npublic DateTime ConvertXToDateTime(double x)\n```\nConverts x-axis pixel location to DateTime value.\n\n### ConvertXToIndex\n```csharp\npublic virtual int ConvertXToIndex(double x)\n```\nConverts x-axis pixel value to BarHistory index.\n\n### ConvertYToValue\n```csharp\npublic double ConvertYToValue(double y)\n```\nConverts y-axis pixel location to value.\n\n## Members\n\n### AboveBar\n```csharp\npublic virtual bool AboveBar\n```\nDetermines if BarGlyph renders above/below bar (default: false).\n\n### DrawTooltip\n"
    }
  },
  {
    "pageContent": "harp\npublic DateTime ConvertXToDateTime(double x)\n```\nConverts x-axis pixel location to DateTime value.\n\n### ConvertXToIndex\n```csharp\npublic virtual int ConvertXToIndex(double x)\n```\nConverts x-axis pixel value to BarHistory index.\n\n### ConvertYToValue\n```csharp\npublic double ConvertYToValue(double y)\n```\nConverts y-axis pixel location to value.\n\n## Members\n\n### AboveBar\n```csharp\npublic virtual bool AboveBar\n```\nDetermines if BarGlyph renders above/below bar (default: false).\n\n### DrawTooltip\n\n\n```csharp\npublic void DrawTooltip(DrawingContext dc, string txt, Color color, double y)\n\n```",
    "metadata": {
      "id": "barglyph-base",
      "title": "barglyph-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barglyph-base.md",
      "chunkIndex": "code-context-25",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public void DrawTooltips(DrawingContext dc, List<ChartTooltip> tooltips, double y)\n",
    "metadata": {
      "id": "barglyph-base",
      "title": "barglyph-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barglyph-base.md",
      "chunkIndex": "code-26",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "onvertXToIndex(double x)\n```\nConverts x-axis pixel value to BarHistory index.\n\n### ConvertYToValue\n```csharp\npublic double ConvertYToValue(double y)\n```\nConverts y-axis pixel location to value.\n\n## Members\n\n### AboveBar\n```csharp\npublic virtual bool AboveBar\n```\nDetermines if BarGlyph renders above/below bar (default: false).\n\n### DrawTooltip\n```csharp\npublic void DrawTooltip(DrawingContext dc, string txt, Color color, double y)\n```\nRenders tooltip for BarGlyph on mouse hover.\n\n### DrawTooltips\n"
    }
  },
  {
    "pageContent": "onvertXToIndex(double x)\n```\nConverts x-axis pixel value to BarHistory index.\n\n### ConvertYToValue\n```csharp\npublic double ConvertYToValue(double y)\n```\nConverts y-axis pixel location to value.\n\n## Members\n\n### AboveBar\n```csharp\npublic virtual bool AboveBar\n```\nDetermines if BarGlyph renders above/below bar (default: false).\n\n### DrawTooltip\n```csharp\npublic void DrawTooltip(DrawingContext dc, string txt, Color color, double y)\n```\nRenders tooltip for BarGlyph on mouse hover.\n\n### DrawTooltips\n\n\n```csharp\npublic void DrawTooltips(DrawingContext dc, List<ChartTooltip> tooltips, double y)\n\n```",
    "metadata": {
      "id": "barglyph-base",
      "title": "barglyph-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barglyph-base.md",
      "chunkIndex": "code-context-26",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public double GlyphHeight\n",
    "metadata": {
      "id": "barglyph-base",
      "title": "barglyph-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barglyph-base.md",
      "chunkIndex": "code-27",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ixel location to value.\n\n## Members\n\n### AboveBar\n```csharp\npublic virtual bool AboveBar\n```\nDetermines if BarGlyph renders above/below bar (default: false).\n\n### DrawTooltip\n```csharp\npublic void DrawTooltip(DrawingContext dc, string txt, Color color, double y)\n```\nRenders tooltip for BarGlyph on mouse hover.\n\n### DrawTooltips\n```csharp\npublic void DrawTooltips(DrawingContext dc, List<ChartTooltip> tooltips, double y)\n```\nRenders multi-line tooltip for BarGlyph on mouse hover.\n\n### GlyphHeight\n"
    }
  },
  {
    "pageContent": "ixel location to value.\n\n## Members\n\n### AboveBar\n```csharp\npublic virtual bool AboveBar\n```\nDetermines if BarGlyph renders above/below bar (default: false).\n\n### DrawTooltip\n```csharp\npublic void DrawTooltip(DrawingContext dc, string txt, Color color, double y)\n```\nRenders tooltip for BarGlyph on mouse hover.\n\n### DrawTooltips\n```csharp\npublic void DrawTooltips(DrawingContext dc, List<ChartTooltip> tooltips, double y)\n```\nRenders multi-line tooltip for BarGlyph on mouse hover.\n\n### GlyphHeight\n\n\n```csharp\npublic double GlyphHeight\n\n```",
    "metadata": {
      "id": "barglyph-base",
      "title": "barglyph-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barglyph-base.md",
      "chunkIndex": "code-context-27",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public double GlyphWidth\n",
    "metadata": {
      "id": "barglyph-base",
      "title": "barglyph-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barglyph-base.md",
      "chunkIndex": "code-28",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "``\nDetermines if BarGlyph renders above/below bar (default: false).\n\n### DrawTooltip\n```csharp\npublic void DrawTooltip(DrawingContext dc, string txt, Color color, double y)\n```\nRenders tooltip for BarGlyph on mouse hover.\n\n### DrawTooltips\n```csharp\npublic void DrawTooltips(DrawingContext dc, List<ChartTooltip> tooltips, double y)\n```\nRenders multi-line tooltip for BarGlyph on mouse hover.\n\n### GlyphHeight\n```csharp\npublic double GlyphHeight\n```\nHeight of the BarGlyph in pixels.\n\n### GlyphWidth\n"
    }
  },
  {
    "pageContent": "``\nDetermines if BarGlyph renders above/below bar (default: false).\n\n### DrawTooltip\n```csharp\npublic void DrawTooltip(DrawingContext dc, string txt, Color color, double y)\n```\nRenders tooltip for BarGlyph on mouse hover.\n\n### DrawTooltips\n```csharp\npublic void DrawTooltips(DrawingContext dc, List<ChartTooltip> tooltips, double y)\n```\nRenders multi-line tooltip for BarGlyph on mouse hover.\n\n### GlyphHeight\n```csharp\npublic double GlyphHeight\n```\nHeight of the BarGlyph in pixels.\n\n### GlyphWidth\n\n\n```csharp\npublic double GlyphWidth\n\n```",
    "metadata": {
      "id": "barglyph-base",
      "title": "barglyph-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barglyph-base.md",
      "chunkIndex": "code-context-28",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public virtual bool HasMouseOverState\n",
    "metadata": {
      "id": "barglyph-base",
      "title": "barglyph-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barglyph-base.md",
      "chunkIndex": "code-29",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "awTooltip(DrawingContext dc, string txt, Color color, double y)\n```\nRenders tooltip for BarGlyph on mouse hover.\n\n### DrawTooltips\n```csharp\npublic void DrawTooltips(DrawingContext dc, List<ChartTooltip> tooltips, double y)\n```\nRenders multi-line tooltip for BarGlyph on mouse hover.\n\n### GlyphHeight\n```csharp\npublic double GlyphHeight\n```\nHeight of the BarGlyph in pixels.\n\n### GlyphWidth\n```csharp\npublic double GlyphWidth\n```\nWidth of the BarGlyph in pixels.\n\n## Rendering\n\n### HasMouseOverState\n"
    }
  },
  {
    "pageContent": "awTooltip(DrawingContext dc, string txt, Color color, double y)\n```\nRenders tooltip for BarGlyph on mouse hover.\n\n### DrawTooltips\n```csharp\npublic void DrawTooltips(DrawingContext dc, List<ChartTooltip> tooltips, double y)\n```\nRenders multi-line tooltip for BarGlyph on mouse hover.\n\n### GlyphHeight\n```csharp\npublic double GlyphHeight\n```\nHeight of the BarGlyph in pixels.\n\n### GlyphWidth\n```csharp\npublic double GlyphWidth\n```\nWidth of the BarGlyph in pixels.\n\n## Rendering\n\n### HasMouseOverState\n\n\n```csharp\npublic virtual bool HasMouseOverState\n\n```",
    "metadata": {
      "id": "barglyph-base",
      "title": "barglyph-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barglyph-base.md",
      "chunkIndex": "code-context-29",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public virtual void PostRender(DrawingContext dc)\n",
    "metadata": {
      "id": "barglyph-base",
      "title": "barglyph-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barglyph-base.md",
      "chunkIndex": "code-30",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "`csharp\npublic void DrawTooltips(DrawingContext dc, List<ChartTooltip> tooltips, double y)\n```\nRenders multi-line tooltip for BarGlyph on mouse hover.\n\n### GlyphHeight\n```csharp\npublic double GlyphHeight\n```\nHeight of the BarGlyph in pixels.\n\n### GlyphWidth\n```csharp\npublic double GlyphWidth\n```\nWidth of the BarGlyph in pixels.\n\n## Rendering\n\n### HasMouseOverState\n```csharp\npublic virtual bool HasMouseOverState\n```\nReturns whether plot object renders special state on mouse over.\n\n### PostRender\n"
    }
  },
  {
    "pageContent": "`csharp\npublic void DrawTooltips(DrawingContext dc, List<ChartTooltip> tooltips, double y)\n```\nRenders multi-line tooltip for BarGlyph on mouse hover.\n\n### GlyphHeight\n```csharp\npublic double GlyphHeight\n```\nHeight of the BarGlyph in pixels.\n\n### GlyphWidth\n```csharp\npublic double GlyphWidth\n```\nWidth of the BarGlyph in pixels.\n\n## Rendering\n\n### HasMouseOverState\n```csharp\npublic virtual bool HasMouseOverState\n```\nReturns whether plot object renders special state on mouse over.\n\n### PostRender\n\n\n```csharp\npublic virtual void PostRender(DrawingContext dc)\n\n```",
    "metadata": {
      "id": "barglyph-base",
      "title": "barglyph-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barglyph-base.md",
      "chunkIndex": "code-context-30",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public virtual void PreRender(DrawingContext dc)\n",
    "metadata": {
      "id": "barglyph-base",
      "title": "barglyph-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barglyph-base.md",
      "chunkIndex": "code-31",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "tooltip for BarGlyph on mouse hover.\n\n### GlyphHeight\n```csharp\npublic double GlyphHeight\n```\nHeight of the BarGlyph in pixels.\n\n### GlyphWidth\n```csharp\npublic double GlyphWidth\n```\nWidth of the BarGlyph in pixels.\n\n## Rendering\n\n### HasMouseOverState\n```csharp\npublic virtual bool HasMouseOverState\n```\nReturns whether plot object renders special state on mouse over.\n\n### PostRender\n```csharp\npublic virtual void PostRender(DrawingContext dc)\n```\nCalled after main rendering phase.\n\n### PreRender\n"
    }
  },
  {
    "pageContent": "tooltip for BarGlyph on mouse hover.\n\n### GlyphHeight\n```csharp\npublic double GlyphHeight\n```\nHeight of the BarGlyph in pixels.\n\n### GlyphWidth\n```csharp\npublic double GlyphWidth\n```\nWidth of the BarGlyph in pixels.\n\n## Rendering\n\n### HasMouseOverState\n```csharp\npublic virtual bool HasMouseOverState\n```\nReturns whether plot object renders special state on mouse over.\n\n### PostRender\n```csharp\npublic virtual void PostRender(DrawingContext dc)\n```\nCalled after main rendering phase.\n\n### PreRender\n\n\n```csharp\npublic virtual void PreRender(DrawingContext dc)\n\n```",
    "metadata": {
      "id": "barglyph-base",
      "title": "barglyph-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barglyph-base.md",
      "chunkIndex": "code-context-31",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public abstract void Render(DrawingContext dc)\n",
    "metadata": {
      "id": "barglyph-base",
      "title": "barglyph-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barglyph-base.md",
      "chunkIndex": "code-32",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "Glyph in pixels.\n\n### GlyphWidth\n```csharp\npublic double GlyphWidth\n```\nWidth of the BarGlyph in pixels.\n\n## Rendering\n\n### HasMouseOverState\n```csharp\npublic virtual bool HasMouseOverState\n```\nReturns whether plot object renders special state on mouse over.\n\n### PostRender\n```csharp\npublic virtual void PostRender(DrawingContext dc)\n```\nCalled after main rendering phase.\n\n### PreRender\n```csharp\npublic virtual void PreRender(DrawingContext dc)\n```\nCalled before main rendering phase.\n\n### Render\n"
    }
  },
  {
    "pageContent": "Glyph in pixels.\n\n### GlyphWidth\n```csharp\npublic double GlyphWidth\n```\nWidth of the BarGlyph in pixels.\n\n## Rendering\n\n### HasMouseOverState\n```csharp\npublic virtual bool HasMouseOverState\n```\nReturns whether plot object renders special state on mouse over.\n\n### PostRender\n```csharp\npublic virtual void PostRender(DrawingContext dc)\n```\nCalled after main rendering phase.\n\n### PreRender\n```csharp\npublic virtual void PreRender(DrawingContext dc)\n```\nCalled before main rendering phase.\n\n### Render\n\n\n```csharp\npublic abstract void Render(DrawingContext dc)\n\n```",
    "metadata": {
      "id": "barglyph-base",
      "title": "barglyph-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barglyph-base.md",
      "chunkIndex": "code-context-32",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public virtual void RenderHighlight(DrawingContext dc)\n",
    "metadata": {
      "id": "barglyph-base",
      "title": "barglyph-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barglyph-base.md",
      "chunkIndex": "code-33",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "sMouseOverState\n```csharp\npublic virtual bool HasMouseOverState\n```\nReturns whether plot object renders special state on mouse over.\n\n### PostRender\n```csharp\npublic virtual void PostRender(DrawingContext dc)\n```\nCalled after main rendering phase.\n\n### PreRender\n```csharp\npublic virtual void PreRender(DrawingContext dc)\n```\nCalled before main rendering phase.\n\n### Render\n```csharp\npublic abstract void Render(DrawingContext dc)\n```\nCalled when plot object should be rendered.\n\n### RenderHighlight\n"
    }
  },
  {
    "pageContent": "sMouseOverState\n```csharp\npublic virtual bool HasMouseOverState\n```\nReturns whether plot object renders special state on mouse over.\n\n### PostRender\n```csharp\npublic virtual void PostRender(DrawingContext dc)\n```\nCalled after main rendering phase.\n\n### PreRender\n```csharp\npublic virtual void PreRender(DrawingContext dc)\n```\nCalled before main rendering phase.\n\n### Render\n```csharp\npublic abstract void Render(DrawingContext dc)\n```\nCalled when plot object should be rendered.\n\n### RenderHighlight\n\n\n```csharp\npublic virtual void RenderHighlight(DrawingContext dc)\n\n```",
    "metadata": {
      "id": "barglyph-base",
      "title": "barglyph-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barglyph-base.md",
      "chunkIndex": "code-context-33",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public virtual int RenderPass\n",
    "metadata": {
      "id": "barglyph-base",
      "title": "barglyph-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barglyph-base.md",
      "chunkIndex": "code-34",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "## PostRender\n```csharp\npublic virtual void PostRender(DrawingContext dc)\n```\nCalled after main rendering phase.\n\n### PreRender\n```csharp\npublic virtual void PreRender(DrawingContext dc)\n```\nCalled before main rendering phase.\n\n### Render\n```csharp\npublic abstract void Render(DrawingContext dc)\n```\nCalled when plot object should be rendered.\n\n### RenderHighlight\n```csharp\npublic virtual void RenderHighlight(DrawingContext dc)\n```\nCalled when mouse-over effect should be rendered.\n\n### RenderPass\n"
    }
  },
  {
    "pageContent": "## PostRender\n```csharp\npublic virtual void PostRender(DrawingContext dc)\n```\nCalled after main rendering phase.\n\n### PreRender\n```csharp\npublic virtual void PreRender(DrawingContext dc)\n```\nCalled before main rendering phase.\n\n### Render\n```csharp\npublic abstract void Render(DrawingContext dc)\n```\nCalled when plot object should be rendered.\n\n### RenderHighlight\n```csharp\npublic virtual void RenderHighlight(DrawingContext dc)\n```\nCalled when mouse-over effect should be rendered.\n\n### RenderPass\n\n\n```csharp\npublic virtual int RenderPass\n\n```",
    "metadata": {
      "id": "barglyph-base",
      "title": "barglyph-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barglyph-base.md",
      "chunkIndex": "code-context-34",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "# BarHistoryCompressor Class\n\n**Namespace:** WealthLab.Core  \n**Parent:** None (Static Class)\n\nBarHistoryCompressor is a static utility class containing methods that let you compress a BarHistory instance from one scale down to a more compressed scale. For example, you can call BarHistoryCompressor.ToWeekly to compress a daily BarHistory into a weekly one.\n\n**Note:** If you want to be able to plot a compressed BarHistory onto the chart, you would need to first expand it back to the original scale. You can use the BarHistorySynchronizer utility class to accomplish this.\n\n## Static Methods\n\n### ToDaily\n",
    "metadata": {
      "id": "barhistory-compressor",
      "title": "barhistory-compressor",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory-compressor.md",
      "chunkIndex": 0,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nCompresses the source BarHistory to a daily scale, returning a new BarHistory instance.\n\n### ToHour\n",
    "metadata": {
      "id": "barhistory-compressor",
      "title": "barhistory-compressor",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory-compressor.md",
      "chunkIndex": 1,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nCompresses the source BarHistory to an interval-hour hourly scale, returning a new BarHistory instance.\n\n### ToMinute\n",
    "metadata": {
      "id": "barhistory-compressor",
      "title": "barhistory-compressor",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory-compressor.md",
      "chunkIndex": 2,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nCompresses the source BarHistory to an interval-minute scale, returning a new BarHistory instance. The source should be an intraday BarHistory having higher granularity scale than the requested interval. For example, it makes sense to compress a source of 1 minute data to a 5 minute interval, but not the other way around.\n\n### ToMonthly\n",
    "metadata": {
      "id": "barhistory-compressor",
      "title": "barhistory-compressor",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory-compressor.md",
      "chunkIndex": 3,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nCompresses the source BarHistory to a monthly scale, returning a new BarHistory instance.\n\n### ToQuarterly\n",
    "metadata": {
      "id": "barhistory-compressor",
      "title": "barhistory-compressor",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory-compressor.md",
      "chunkIndex": 4,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nCompresses the source BarHistory to a quarterly scale, returning a new BarHistory instance.\n\n### ToScale\n",
    "metadata": {
      "id": "barhistory-compressor",
      "title": "barhistory-compressor",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory-compressor.md",
      "chunkIndex": 5,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nCompresses the source BarHistory to the specified scale, returning a new BarHistory instance.\n\n### ToWeekly\n",
    "metadata": {
      "id": "barhistory-compressor",
      "title": "barhistory-compressor",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory-compressor.md",
      "chunkIndex": 6,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nCompresses the source BarHistory to a weekly scale, returning a new BarHistory instance.\n\n**Note:** For markets that trade 7 days of the week (e.g. Cryptos), the week closes on Sunday's bar and opens with Monday's bar.\n\n### ToYearly\n",
    "metadata": {
      "id": "barhistory-compressor",
      "title": "barhistory-compressor",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory-compressor.md",
      "chunkIndex": 7,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nCompresses the source BarHistory to a yearly scale, returning a new BarHistory instance. ",
    "metadata": {
      "id": "barhistory-compressor",
      "title": "barhistory-compressor",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory-compressor.md",
      "chunkIndex": 8,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "public static BarHistory ToDaily(BarHistory source)\n",
    "metadata": {
      "id": "barhistory-compressor",
      "title": "barhistory-compressor",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory-compressor.md",
      "chunkIndex": "code-0",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "pressor is a static utility class containing methods that let you compress a BarHistory instance from one scale down to a more compressed scale. For example, you can call BarHistoryCompressor.ToWeekly to compress a daily BarHistory into a weekly one.\n\n**Note:** If you want to be able to plot a compressed BarHistory onto the chart, you would need to first expand it back to the original scale. You can use the BarHistorySynchronizer utility class to accomplish this.\n\n## Static Methods\n\n### ToDaily\n"
    }
  },
  {
    "pageContent": "pressor is a static utility class containing methods that let you compress a BarHistory instance from one scale down to a more compressed scale. For example, you can call BarHistoryCompressor.ToWeekly to compress a daily BarHistory into a weekly one.\n\n**Note:** If you want to be able to plot a compressed BarHistory onto the chart, you would need to first expand it back to the original scale. You can use the BarHistorySynchronizer utility class to accomplish this.\n\n## Static Methods\n\n### ToDaily\n\n\n```csharp\npublic static BarHistory ToDaily(BarHistory source)\n\n```",
    "metadata": {
      "id": "barhistory-compressor",
      "title": "barhistory-compressor",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory-compressor.md",
      "chunkIndex": "code-context-0",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public static BarHistory ToHour(BarHistory source, int interval)\n",
    "metadata": {
      "id": "barhistory-compressor",
      "title": "barhistory-compressor",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory-compressor.md",
      "chunkIndex": "code-1",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "call BarHistoryCompressor.ToWeekly to compress a daily BarHistory into a weekly one.\n\n**Note:** If you want to be able to plot a compressed BarHistory onto the chart, you would need to first expand it back to the original scale. You can use the BarHistorySynchronizer utility class to accomplish this.\n\n## Static Methods\n\n### ToDaily\n```csharp\npublic static BarHistory ToDaily(BarHistory source)\n```\nCompresses the source BarHistory to a daily scale, returning a new BarHistory instance.\n\n### ToHour\n"
    }
  },
  {
    "pageContent": "call BarHistoryCompressor.ToWeekly to compress a daily BarHistory into a weekly one.\n\n**Note:** If you want to be able to plot a compressed BarHistory onto the chart, you would need to first expand it back to the original scale. You can use the BarHistorySynchronizer utility class to accomplish this.\n\n## Static Methods\n\n### ToDaily\n```csharp\npublic static BarHistory ToDaily(BarHistory source)\n```\nCompresses the source BarHistory to a daily scale, returning a new BarHistory instance.\n\n### ToHour\n\n\n```csharp\npublic static BarHistory ToHour(BarHistory source, int interval)\n\n```",
    "metadata": {
      "id": "barhistory-compressor",
      "title": "barhistory-compressor",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory-compressor.md",
      "chunkIndex": "code-context-1",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public static BarHistory ToMinute(BarHistory source, int interval)\n",
    "metadata": {
      "id": "barhistory-compressor",
      "title": "barhistory-compressor",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory-compressor.md",
      "chunkIndex": "code-2",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": " it back to the original scale. You can use the BarHistorySynchronizer utility class to accomplish this.\n\n## Static Methods\n\n### ToDaily\n```csharp\npublic static BarHistory ToDaily(BarHistory source)\n```\nCompresses the source BarHistory to a daily scale, returning a new BarHistory instance.\n\n### ToHour\n```csharp\npublic static BarHistory ToHour(BarHistory source, int interval)\n```\nCompresses the source BarHistory to an interval-hour hourly scale, returning a new BarHistory instance.\n\n### ToMinute\n"
    }
  },
  {
    "pageContent": " it back to the original scale. You can use the BarHistorySynchronizer utility class to accomplish this.\n\n## Static Methods\n\n### ToDaily\n```csharp\npublic static BarHistory ToDaily(BarHistory source)\n```\nCompresses the source BarHistory to a daily scale, returning a new BarHistory instance.\n\n### ToHour\n```csharp\npublic static BarHistory ToHour(BarHistory source, int interval)\n```\nCompresses the source BarHistory to an interval-hour hourly scale, returning a new BarHistory instance.\n\n### ToMinute\n\n\n```csharp\npublic static BarHistory ToMinute(BarHistory source, int interval)\n\n```",
    "metadata": {
      "id": "barhistory-compressor",
      "title": "barhistory-compressor",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory-compressor.md",
      "chunkIndex": "code-context-2",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public static BarHistory ToMonthly(BarHistory source)\n",
    "metadata": {
      "id": "barhistory-compressor",
      "title": "barhistory-compressor",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory-compressor.md",
      "chunkIndex": "code-3",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": " interval-hour hourly scale, returning a new BarHistory instance.\n\n### ToMinute\n```csharp\npublic static BarHistory ToMinute(BarHistory source, int interval)\n```\nCompresses the source BarHistory to an interval-minute scale, returning a new BarHistory instance. The source should be an intraday BarHistory having higher granularity scale than the requested interval. For example, it makes sense to compress a source of 1 minute data to a 5 minute interval, but not the other way around.\n\n### ToMonthly\n"
    }
  },
  {
    "pageContent": " interval-hour hourly scale, returning a new BarHistory instance.\n\n### ToMinute\n```csharp\npublic static BarHistory ToMinute(BarHistory source, int interval)\n```\nCompresses the source BarHistory to an interval-minute scale, returning a new BarHistory instance. The source should be an intraday BarHistory having higher granularity scale than the requested interval. For example, it makes sense to compress a source of 1 minute data to a 5 minute interval, but not the other way around.\n\n### ToMonthly\n\n\n```csharp\npublic static BarHistory ToMonthly(BarHistory source)\n\n```",
    "metadata": {
      "id": "barhistory-compressor",
      "title": "barhistory-compressor",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory-compressor.md",
      "chunkIndex": "code-context-3",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public static BarHistory ToQuarterly(BarHistory source)\n",
    "metadata": {
      "id": "barhistory-compressor",
      "title": "barhistory-compressor",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory-compressor.md",
      "chunkIndex": "code-4",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": " source BarHistory to an interval-minute scale, returning a new BarHistory instance. The source should be an intraday BarHistory having higher granularity scale than the requested interval. For example, it makes sense to compress a source of 1 minute data to a 5 minute interval, but not the other way around.\n\n### ToMonthly\n```csharp\npublic static BarHistory ToMonthly(BarHistory source)\n```\nCompresses the source BarHistory to a monthly scale, returning a new BarHistory instance.\n\n### ToQuarterly\n"
    }
  },
  {
    "pageContent": " source BarHistory to an interval-minute scale, returning a new BarHistory instance. The source should be an intraday BarHistory having higher granularity scale than the requested interval. For example, it makes sense to compress a source of 1 minute data to a 5 minute interval, but not the other way around.\n\n### ToMonthly\n```csharp\npublic static BarHistory ToMonthly(BarHistory source)\n```\nCompresses the source BarHistory to a monthly scale, returning a new BarHistory instance.\n\n### ToQuarterly\n\n\n```csharp\npublic static BarHistory ToQuarterly(BarHistory source)\n\n```",
    "metadata": {
      "id": "barhistory-compressor",
      "title": "barhistory-compressor",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory-compressor.md",
      "chunkIndex": "code-context-4",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public static BarHistory ToScale(BarHistory source, Frequency scale)\n",
    "metadata": {
      "id": "barhistory-compressor",
      "title": "barhistory-compressor",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory-compressor.md",
      "chunkIndex": "code-5",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "sted interval. For example, it makes sense to compress a source of 1 minute data to a 5 minute interval, but not the other way around.\n\n### ToMonthly\n```csharp\npublic static BarHistory ToMonthly(BarHistory source)\n```\nCompresses the source BarHistory to a monthly scale, returning a new BarHistory instance.\n\n### ToQuarterly\n```csharp\npublic static BarHistory ToQuarterly(BarHistory source)\n```\nCompresses the source BarHistory to a quarterly scale, returning a new BarHistory instance.\n\n### ToScale\n"
    }
  },
  {
    "pageContent": "sted interval. For example, it makes sense to compress a source of 1 minute data to a 5 minute interval, but not the other way around.\n\n### ToMonthly\n```csharp\npublic static BarHistory ToMonthly(BarHistory source)\n```\nCompresses the source BarHistory to a monthly scale, returning a new BarHistory instance.\n\n### ToQuarterly\n```csharp\npublic static BarHistory ToQuarterly(BarHistory source)\n```\nCompresses the source BarHistory to a quarterly scale, returning a new BarHistory instance.\n\n### ToScale\n\n\n```csharp\npublic static BarHistory ToScale(BarHistory source, Frequency scale)\n\n```",
    "metadata": {
      "id": "barhistory-compressor",
      "title": "barhistory-compressor",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory-compressor.md",
      "chunkIndex": "code-context-5",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public static BarHistory ToWeekly(BarHistory source)\n",
    "metadata": {
      "id": "barhistory-compressor",
      "title": "barhistory-compressor",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory-compressor.md",
      "chunkIndex": "code-6",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "hly(BarHistory source)\n```\nCompresses the source BarHistory to a monthly scale, returning a new BarHistory instance.\n\n### ToQuarterly\n```csharp\npublic static BarHistory ToQuarterly(BarHistory source)\n```\nCompresses the source BarHistory to a quarterly scale, returning a new BarHistory instance.\n\n### ToScale\n```csharp\npublic static BarHistory ToScale(BarHistory source, Frequency scale)\n```\nCompresses the source BarHistory to the specified scale, returning a new BarHistory instance.\n\n### ToWeekly\n"
    }
  },
  {
    "pageContent": "hly(BarHistory source)\n```\nCompresses the source BarHistory to a monthly scale, returning a new BarHistory instance.\n\n### ToQuarterly\n```csharp\npublic static BarHistory ToQuarterly(BarHistory source)\n```\nCompresses the source BarHistory to a quarterly scale, returning a new BarHistory instance.\n\n### ToScale\n```csharp\npublic static BarHistory ToScale(BarHistory source, Frequency scale)\n```\nCompresses the source BarHistory to the specified scale, returning a new BarHistory instance.\n\n### ToWeekly\n\n\n```csharp\npublic static BarHistory ToWeekly(BarHistory source)\n\n```",
    "metadata": {
      "id": "barhistory-compressor",
      "title": "barhistory-compressor",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory-compressor.md",
      "chunkIndex": "code-context-6",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public static BarHistory ToYearly(BarHistory source)\n",
    "metadata": {
      "id": "barhistory-compressor",
      "title": "barhistory-compressor",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory-compressor.md",
      "chunkIndex": "code-7",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": " ToScale\n```csharp\npublic static BarHistory ToScale(BarHistory source, Frequency scale)\n```\nCompresses the source BarHistory to the specified scale, returning a new BarHistory instance.\n\n### ToWeekly\n```csharp\npublic static BarHistory ToWeekly(BarHistory source)\n```\nCompresses the source BarHistory to a weekly scale, returning a new BarHistory instance.\n\n**Note:** For markets that trade 7 days of the week (e.g. Cryptos), the week closes on Sunday's bar and opens with Monday's bar.\n\n### ToYearly\n"
    }
  },
  {
    "pageContent": " ToScale\n```csharp\npublic static BarHistory ToScale(BarHistory source, Frequency scale)\n```\nCompresses the source BarHistory to the specified scale, returning a new BarHistory instance.\n\n### ToWeekly\n```csharp\npublic static BarHistory ToWeekly(BarHistory source)\n```\nCompresses the source BarHistory to a weekly scale, returning a new BarHistory instance.\n\n**Note:** For markets that trade 7 days of the week (e.g. Cryptos), the week closes on Sunday's bar and opens with Monday's bar.\n\n### ToYearly\n\n\n```csharp\npublic static BarHistory ToYearly(BarHistory source)\n\n```",
    "metadata": {
      "id": "barhistory-compressor",
      "title": "barhistory-compressor",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory-compressor.md",
      "chunkIndex": "code-context-7",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "# BarHistorySynchronizer Class\n\n**Namespace:** WealthLab.Core  \n**Parent:** None (Static Class)\n\nBarHistorySynchronizer is a static utility class containing the Synchronize method, allowing you to synchronize a BarHistory instance with another time series (either a TimeSeries or BarHistory instance). It is useful when you want to plot time series in one scale on a chart based on another scale (for example, weekly to daily).\n\n## Static Methods\n\n### Synchronize\n",
    "metadata": {
      "id": "barhistory-synchronizer",
      "title": "barhistory-synchronizer",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory-synchronizer.md",
      "chunkIndex": 0,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nSynchronizes the source BarHistory instance with the master TimeSeriesBase instance. The master parameter can be either a TimeSeries or a BarHistory instance, as both descend from TimeSeriesBase. The method returns a new BarHistory instance that is synchronized with the master. ",
    "metadata": {
      "id": "barhistory-synchronizer",
      "title": "barhistory-synchronizer",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory-synchronizer.md",
      "chunkIndex": 1,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "public static BarHistory Synchronize(BarHistory source, TimeSeriesBase master)\n",
    "metadata": {
      "id": "barhistory-synchronizer",
      "title": "barhistory-synchronizer",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory-synchronizer.md",
      "chunkIndex": "code-0",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "# BarHistorySynchronizer Class\n\n**Namespace:** WealthLab.Core  \n**Parent:** None (Static Class)\n\nBarHistorySynchronizer is a static utility class containing the Synchronize method, allowing you to synchronize a BarHistory instance with another time series (either a TimeSeries or BarHistory instance). It is useful when you want to plot time series in one scale on a chart based on another scale (for example, weekly to daily).\n\n## Static Methods\n\n### Synchronize\n"
    }
  },
  {
    "pageContent": "# BarHistorySynchronizer Class\n\n**Namespace:** WealthLab.Core  \n**Parent:** None (Static Class)\n\nBarHistorySynchronizer is a static utility class containing the Synchronize method, allowing you to synchronize a BarHistory instance with another time series (either a TimeSeries or BarHistory instance). It is useful when you want to plot time series in one scale on a chart based on another scale (for example, weekly to daily).\n\n## Static Methods\n\n### Synchronize\n\n\n```csharp\npublic static BarHistory Synchronize(BarHistory source, TimeSeriesBase master)\n\n```",
    "metadata": {
      "id": "barhistory-synchronizer",
      "title": "barhistory-synchronizer",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory-synchronizer.md",
      "chunkIndex": "code-context-0",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "# BarHistory Class\n\n**Namespace:** WealthLab.Core  \n**Parent:** TimeSeriesBase\n\nThe BarHistory class represents historical price and volume data for a market. When you work with code-based Strategies, you're passed an instance of a BarHistory object in the Initialize, Execute, and other methods. This instance contains the historical data your Strategy should backtest.\n\nA \"bar\" of data contains an open price, a high, low and closing price. The BarHistory class exposes these through Open, High, Low, and Close properties, each of which is an instance of the TimeSeries class. Volume information is available via the Volume property, also a TimeSeries instance. Use the DateTimes property to access the list of DateTimes that these time series are keyed off of.\n\n## Constructors\n\n",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": 0,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\nBarHistory has three constructors:\n- First assigns the Symbol and Scale based on the passed parameters\n- Second assigns the Symbol and creates a HistoryScale instance based on the passed Frequency enum value\n- Third takes a BarHistory as a parameter (parent), and assigns the various property values from that instance\n\n## Alternate Price Components\n\n### AveragePriceHL\n",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": 1,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nCalculates and returns the average price TimeSeries (high + low) / 2.\n\n### AveragePriceHLC\n",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": 2,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nCalculates and returns the average price TimeSeries (high + low + close) / 3.\n\n### AveragePriceHLCC\n",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": 3,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nCalculates and returns the average price TimeSeries (high + low + close + close) / 4.\n\n### AveragePriceOC\n",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": 4,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nCalculates and returns the average price TimeSeries (open + close) / 2.\n\n### AveragePriceOHLC\n",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": 5,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nCalculates and returns the average price TimeSeries (open + high + low + close) / 4.\n\n## Event Data\n\n### EventDataPoints\n",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": 6,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns a list of EventDataPoint instances that represents the event data loaded with the historical data.\n\n**Note:** For intraday charts EventDataPoints will synchronize to the first bar of the Event Date.\n\n### GetEventDataPoints\n",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": 7,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns EventDataPoint instances for the specified event name. The idx overload returns events for specific bar number.\n\n**Note:** Event Providers can use the same name string. Use Provider checkboxes or test EventDataPoint.ProviderName to ensure desired Provider.\n\n## Futures Mode\n\n### FuturesMode\n",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": 8,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nSet by the backtester, returns true if Futures Mode was enabled for this backtest.\n\n### Margin\n",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": 9,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nCapital required to open a 1 share/contract position. Used in Futures Mode for position's cost basis.\n\n### PointValue\n",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": 10,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nPoint value for each 1 point move. In Futures Mode, position's profit is multiplied by this.\n\n### TickSize\n",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": 11,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nMinimum resolution for position quantity. Used in Futures Mode for quantity adjustments.\n\n## Core Members\n\n### Add\n",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": 12,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nAdds datetime/open/high/low/close/volume values to this BarHistory.\n\n### AddTradingDays\n",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": 13,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns date after adding specified trading days to the DateTime of the specified bar.\n\n### Cache\n",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": 14,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nGeneric cache Dictionary for storing objects during backtest run.\n\n### Close\n",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": 15,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns TimeSeries representing closing prices.\n\n### Count\n",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": 16,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns number of items in the time series.\n\n### DateTimes\n",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": 17,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nList of DateTime objects representing date/time of each item.\n\n### DisplayDecimals\n",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": 18,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nNumber of decimals places for displaying price data.\n\n### EndDate\n",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": 19,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns last DateTime in the DateTimes list (DateTime.MaxValue if empty).\n\n### ExtendedBars\n",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": 20,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nCreates projected space along right edge of chart with future date/time values.\n\n### GetNamedSeries\n",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": 21,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns registered \"Named TimeSeries\" or null.\n\n### GetTimeAsInt\n",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": 22,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns integer value for time of day (e.g., 930 for 9:30 AM).\n\n### HasStreamingBar\n",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": 23,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns true if BarHistory has streaming bar (for Extension development).\n\n### High\n",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": 24,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns TimeSeries representing high prices.\n\n### IndexOf\n",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": 25,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns index of specified DateTime in DateTimes list.\n\n### IntradayBarNumber\n",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": 26,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns intraday bar number of the day (-1 for non-intraday data).\n\n### Low\n",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": 27,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns TimeSeries representing low prices.\n\n### Open\n",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": 28,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns TimeSeries representing open prices.\n\n### Volume\n",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": 29,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns TimeSeries representing volume data.\n\n## Market Analysis Methods\n\n### IsFirstBarOfDay\n",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": 30,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns true if specified index is first bar of day.\n\n### IsGap\n",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": 31,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns true if opening price has gapped up or down.\n\n### IsGapDown\n",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": 32,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns true if opening price has gapped down (Open < previous Low).\n\n### IsGapUp\n",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": 33,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns true if opening price has gapped up (Open > previous High).\n\n### IsLastBarOfDay\n",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": 34,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns true if specified index is last bar of regular trading session.\n\n### IsLastTradingDayOfMonth\n",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": 35,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns true if bar falls on last trading day of calendar month.\n\n### IsUpToDate\n",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": 36,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns whether historical data is up to date as of specified date.\n\n### NextOptionExpiryDate\n",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": 37,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns DateTime of next closest monthly options expiration date.\n\n### TomorrowIsLastTradingDayOfWeek\n",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": 38,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns true if next trading day is last trading day of week.\n\n### TradingDaysBetweenDates\n",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": 39,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns number of trading days between specified dates.\n\n### TradingDaysRemaining\n",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": 40,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns trading days remaining in specified Frequency interval.\n\n## Data Management\n\n### ReadFromBinaryFile\n",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": 41,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReads binary file in Wealth-Lab 8 supported format.\n\n### WriteToBinaryFile\n",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": 42,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nWrites BarHistory to binary file in Wealth-Lab 8 format.\n\n### RemoveAt\n",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": 43,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nRemoves data at specified index.\n\n## Properties\n\n### Market\n",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": 44,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns MarketDetails instance with market information.\n\n### Scale\n",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": 45,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nScale of the data being represented.\n\n### SecurityName\n",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": 46,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nSecurity name if available (e.g., \"Apple, Inc.\").\n\n### Symbol\n",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": 47,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nSymbol being represented (e.g., \"MSFT\").\n\n### TimeSpan\n",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": 48,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nTimeSpan encompassing DateTimes range.\n\n## User Data\n\n### UserData\n",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": 49,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nStores ad-hoc data in BarHistory or TimeSeries instance.\n\n### UserDataAsDouble\n",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": 50,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nAccess UserData as double.\n\n### UserDataAsInt\n",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": 51,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nAccess UserData as int. ",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": 52,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "public BarHistory(string symbol, HistoryScale scale)\npublic BarHistory(string symbol, Frequency scale)\npublic BarHistory(BarHistory parent)\n",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": "code-0",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "other methods. This instance contains the historical data your Strategy should backtest.\n\nA \"bar\" of data contains an open price, a high, low and closing price. The BarHistory class exposes these through Open, High, Low, and Close properties, each of which is an instance of the TimeSeries class. Volume information is available via the Volume property, also a TimeSeries instance. Use the DateTimes property to access the list of DateTimes that these time series are keyed off of.\n\n## Constructors\n\n"
    }
  },
  {
    "pageContent": "other methods. This instance contains the historical data your Strategy should backtest.\n\nA \"bar\" of data contains an open price, a high, low and closing price. The BarHistory class exposes these through Open, High, Low, and Close properties, each of which is an instance of the TimeSeries class. Volume information is available via the Volume property, also a TimeSeries instance. Use the DateTimes property to access the list of DateTimes that these time series are keyed off of.\n\n## Constructors\n\n\n\n```csharp\npublic BarHistory(string symbol, HistoryScale scale)\npublic BarHistory(string symbol, Frequency scale)\npublic BarHistory(BarHistory parent)\n\n```",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": "code-context-0",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public TimeSeries AveragePriceHL\n",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": "code-1",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ry(string symbol, HistoryScale scale)\npublic BarHistory(string symbol, Frequency scale)\npublic BarHistory(BarHistory parent)\n```\n\nBarHistory has three constructors:\n- First assigns the Symbol and Scale based on the passed parameters\n- Second assigns the Symbol and creates a HistoryScale instance based on the passed Frequency enum value\n- Third takes a BarHistory as a parameter (parent), and assigns the various property values from that instance\n\n## Alternate Price Components\n\n### AveragePriceHL\n"
    }
  },
  {
    "pageContent": "ry(string symbol, HistoryScale scale)\npublic BarHistory(string symbol, Frequency scale)\npublic BarHistory(BarHistory parent)\n```\n\nBarHistory has three constructors:\n- First assigns the Symbol and Scale based on the passed parameters\n- Second assigns the Symbol and creates a HistoryScale instance based on the passed Frequency enum value\n- Third takes a BarHistory as a parameter (parent), and assigns the various property values from that instance\n\n## Alternate Price Components\n\n### AveragePriceHL\n\n\n```csharp\npublic TimeSeries AveragePriceHL\n\n```",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": "code-context-1",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public TimeSeries AveragePriceHLC\n",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": "code-2",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ry has three constructors:\n- First assigns the Symbol and Scale based on the passed parameters\n- Second assigns the Symbol and creates a HistoryScale instance based on the passed Frequency enum value\n- Third takes a BarHistory as a parameter (parent), and assigns the various property values from that instance\n\n## Alternate Price Components\n\n### AveragePriceHL\n```csharp\npublic TimeSeries AveragePriceHL\n```\nCalculates and returns the average price TimeSeries (high + low) / 2.\n\n### AveragePriceHLC\n"
    }
  },
  {
    "pageContent": "ry has three constructors:\n- First assigns the Symbol and Scale based on the passed parameters\n- Second assigns the Symbol and creates a HistoryScale instance based on the passed Frequency enum value\n- Third takes a BarHistory as a parameter (parent), and assigns the various property values from that instance\n\n## Alternate Price Components\n\n### AveragePriceHL\n```csharp\npublic TimeSeries AveragePriceHL\n```\nCalculates and returns the average price TimeSeries (high + low) / 2.\n\n### AveragePriceHLC\n\n\n```csharp\npublic TimeSeries AveragePriceHLC\n\n```",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": "code-context-2",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public TimeSeries AveragePriceHLCC\n",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": "code-3",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "e instance based on the passed Frequency enum value\n- Third takes a BarHistory as a parameter (parent), and assigns the various property values from that instance\n\n## Alternate Price Components\n\n### AveragePriceHL\n```csharp\npublic TimeSeries AveragePriceHL\n```\nCalculates and returns the average price TimeSeries (high + low) / 2.\n\n### AveragePriceHLC\n```csharp\npublic TimeSeries AveragePriceHLC\n```\nCalculates and returns the average price TimeSeries (high + low + close) / 3.\n\n### AveragePriceHLCC\n"
    }
  },
  {
    "pageContent": "e instance based on the passed Frequency enum value\n- Third takes a BarHistory as a parameter (parent), and assigns the various property values from that instance\n\n## Alternate Price Components\n\n### AveragePriceHL\n```csharp\npublic TimeSeries AveragePriceHL\n```\nCalculates and returns the average price TimeSeries (high + low) / 2.\n\n### AveragePriceHLC\n```csharp\npublic TimeSeries AveragePriceHLC\n```\nCalculates and returns the average price TimeSeries (high + low + close) / 3.\n\n### AveragePriceHLCC\n\n\n```csharp\npublic TimeSeries AveragePriceHLCC\n\n```",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": "code-context-3",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public TimeSeries AveragePriceOC\n",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": "code-4",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "nstance\n\n## Alternate Price Components\n\n### AveragePriceHL\n```csharp\npublic TimeSeries AveragePriceHL\n```\nCalculates and returns the average price TimeSeries (high + low) / 2.\n\n### AveragePriceHLC\n```csharp\npublic TimeSeries AveragePriceHLC\n```\nCalculates and returns the average price TimeSeries (high + low + close) / 3.\n\n### AveragePriceHLCC\n```csharp\npublic TimeSeries AveragePriceHLCC\n```\nCalculates and returns the average price TimeSeries (high + low + close + close) / 4.\n\n### AveragePriceOC\n"
    }
  },
  {
    "pageContent": "nstance\n\n## Alternate Price Components\n\n### AveragePriceHL\n```csharp\npublic TimeSeries AveragePriceHL\n```\nCalculates and returns the average price TimeSeries (high + low) / 2.\n\n### AveragePriceHLC\n```csharp\npublic TimeSeries AveragePriceHLC\n```\nCalculates and returns the average price TimeSeries (high + low + close) / 3.\n\n### AveragePriceHLCC\n```csharp\npublic TimeSeries AveragePriceHLCC\n```\nCalculates and returns the average price TimeSeries (high + low + close + close) / 4.\n\n### AveragePriceOC\n\n\n```csharp\npublic TimeSeries AveragePriceOC\n\n```",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": "code-context-4",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public TimeSeries AveragePriceOHLC\n",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": "code-5",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "price TimeSeries (high + low) / 2.\n\n### AveragePriceHLC\n```csharp\npublic TimeSeries AveragePriceHLC\n```\nCalculates and returns the average price TimeSeries (high + low + close) / 3.\n\n### AveragePriceHLCC\n```csharp\npublic TimeSeries AveragePriceHLCC\n```\nCalculates and returns the average price TimeSeries (high + low + close + close) / 4.\n\n### AveragePriceOC\n```csharp\npublic TimeSeries AveragePriceOC\n```\nCalculates and returns the average price TimeSeries (open + close) / 2.\n\n### AveragePriceOHLC\n"
    }
  },
  {
    "pageContent": "price TimeSeries (high + low) / 2.\n\n### AveragePriceHLC\n```csharp\npublic TimeSeries AveragePriceHLC\n```\nCalculates and returns the average price TimeSeries (high + low + close) / 3.\n\n### AveragePriceHLCC\n```csharp\npublic TimeSeries AveragePriceHLCC\n```\nCalculates and returns the average price TimeSeries (high + low + close + close) / 4.\n\n### AveragePriceOC\n```csharp\npublic TimeSeries AveragePriceOC\n```\nCalculates and returns the average price TimeSeries (open + close) / 2.\n\n### AveragePriceOHLC\n\n\n```csharp\npublic TimeSeries AveragePriceOHLC\n\n```",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": "code-context-5",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public List<EventDataPoint> EventDataPoints\n",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": "code-6",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "close) / 3.\n\n### AveragePriceHLCC\n```csharp\npublic TimeSeries AveragePriceHLCC\n```\nCalculates and returns the average price TimeSeries (high + low + close + close) / 4.\n\n### AveragePriceOC\n```csharp\npublic TimeSeries AveragePriceOC\n```\nCalculates and returns the average price TimeSeries (open + close) / 2.\n\n### AveragePriceOHLC\n```csharp\npublic TimeSeries AveragePriceOHLC\n```\nCalculates and returns the average price TimeSeries (open + high + low + close) / 4.\n\n## Event Data\n\n### EventDataPoints\n"
    }
  },
  {
    "pageContent": "close) / 3.\n\n### AveragePriceHLCC\n```csharp\npublic TimeSeries AveragePriceHLCC\n```\nCalculates and returns the average price TimeSeries (high + low + close + close) / 4.\n\n### AveragePriceOC\n```csharp\npublic TimeSeries AveragePriceOC\n```\nCalculates and returns the average price TimeSeries (open + close) / 2.\n\n### AveragePriceOHLC\n```csharp\npublic TimeSeries AveragePriceOHLC\n```\nCalculates and returns the average price TimeSeries (open + high + low + close) / 4.\n\n## Event Data\n\n### EventDataPoints\n\n\n```csharp\npublic List<EventDataPoint> EventDataPoints\n\n```",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": "code-context-6",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public List<EventDataPoint> GetEventDataPoints(string name)\npublic List<EventDataPoint> GetEventDataPoints(string name, int idx)\n",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": "code-7",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "open + close) / 2.\n\n### AveragePriceOHLC\n```csharp\npublic TimeSeries AveragePriceOHLC\n```\nCalculates and returns the average price TimeSeries (open + high + low + close) / 4.\n\n## Event Data\n\n### EventDataPoints\n```csharp\npublic List<EventDataPoint> EventDataPoints\n```\nReturns a list of EventDataPoint instances that represents the event data loaded with the historical data.\n\n**Note:** For intraday charts EventDataPoints will synchronize to the first bar of the Event Date.\n\n### GetEventDataPoints\n"
    }
  },
  {
    "pageContent": "open + close) / 2.\n\n### AveragePriceOHLC\n```csharp\npublic TimeSeries AveragePriceOHLC\n```\nCalculates and returns the average price TimeSeries (open + high + low + close) / 4.\n\n## Event Data\n\n### EventDataPoints\n```csharp\npublic List<EventDataPoint> EventDataPoints\n```\nReturns a list of EventDataPoint instances that represents the event data loaded with the historical data.\n\n**Note:** For intraday charts EventDataPoints will synchronize to the first bar of the Event Date.\n\n### GetEventDataPoints\n\n\n```csharp\npublic List<EventDataPoint> GetEventDataPoints(string name)\npublic List<EventDataPoint> GetEventDataPoints(string name, int idx)\n\n```",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": "code-context-7",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public bool FuturesMode\n",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": "code-8",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": " the first bar of the Event Date.\n\n### GetEventDataPoints\n```csharp\npublic List<EventDataPoint> GetEventDataPoints(string name)\npublic List<EventDataPoint> GetEventDataPoints(string name, int idx)\n```\nReturns EventDataPoint instances for the specified event name. The idx overload returns events for specific bar number.\n\n**Note:** Event Providers can use the same name string. Use Provider checkboxes or test EventDataPoint.ProviderName to ensure desired Provider.\n\n## Futures Mode\n\n### FuturesMode\n"
    }
  },
  {
    "pageContent": " the first bar of the Event Date.\n\n### GetEventDataPoints\n```csharp\npublic List<EventDataPoint> GetEventDataPoints(string name)\npublic List<EventDataPoint> GetEventDataPoints(string name, int idx)\n```\nReturns EventDataPoint instances for the specified event name. The idx overload returns events for specific bar number.\n\n**Note:** Event Providers can use the same name string. Use Provider checkboxes or test EventDataPoint.ProviderName to ensure desired Provider.\n\n## Futures Mode\n\n### FuturesMode\n\n\n```csharp\npublic bool FuturesMode\n\n```",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": "code-context-8",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public double Margin\n",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": "code-9",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "c List<EventDataPoint> GetEventDataPoints(string name, int idx)\n```\nReturns EventDataPoint instances for the specified event name. The idx overload returns events for specific bar number.\n\n**Note:** Event Providers can use the same name string. Use Provider checkboxes or test EventDataPoint.ProviderName to ensure desired Provider.\n\n## Futures Mode\n\n### FuturesMode\n```csharp\npublic bool FuturesMode\n```\nSet by the backtester, returns true if Futures Mode was enabled for this backtest.\n\n### Margin\n"
    }
  },
  {
    "pageContent": "c List<EventDataPoint> GetEventDataPoints(string name, int idx)\n```\nReturns EventDataPoint instances for the specified event name. The idx overload returns events for specific bar number.\n\n**Note:** Event Providers can use the same name string. Use Provider checkboxes or test EventDataPoint.ProviderName to ensure desired Provider.\n\n## Futures Mode\n\n### FuturesMode\n```csharp\npublic bool FuturesMode\n```\nSet by the backtester, returns true if Futures Mode was enabled for this backtest.\n\n### Margin\n\n\n```csharp\npublic double Margin\n\n```",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": "code-context-9",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public double PointValue\n",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": "code-10",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ns events for specific bar number.\n\n**Note:** Event Providers can use the same name string. Use Provider checkboxes or test EventDataPoint.ProviderName to ensure desired Provider.\n\n## Futures Mode\n\n### FuturesMode\n```csharp\npublic bool FuturesMode\n```\nSet by the backtester, returns true if Futures Mode was enabled for this backtest.\n\n### Margin\n```csharp\npublic double Margin\n```\nCapital required to open a 1 share/contract position. Used in Futures Mode for position's cost basis.\n\n### PointValue\n"
    }
  },
  {
    "pageContent": "ns events for specific bar number.\n\n**Note:** Event Providers can use the same name string. Use Provider checkboxes or test EventDataPoint.ProviderName to ensure desired Provider.\n\n## Futures Mode\n\n### FuturesMode\n```csharp\npublic bool FuturesMode\n```\nSet by the backtester, returns true if Futures Mode was enabled for this backtest.\n\n### Margin\n```csharp\npublic double Margin\n```\nCapital required to open a 1 share/contract position. Used in Futures Mode for position's cost basis.\n\n### PointValue\n\n\n```csharp\npublic double PointValue\n\n```",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": "code-context-10",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public double TickSize\n",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": "code-11",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "rName to ensure desired Provider.\n\n## Futures Mode\n\n### FuturesMode\n```csharp\npublic bool FuturesMode\n```\nSet by the backtester, returns true if Futures Mode was enabled for this backtest.\n\n### Margin\n```csharp\npublic double Margin\n```\nCapital required to open a 1 share/contract position. Used in Futures Mode for position's cost basis.\n\n### PointValue\n```csharp\npublic double PointValue\n```\nPoint value for each 1 point move. In Futures Mode, position's profit is multiplied by this.\n\n### TickSize\n"
    }
  },
  {
    "pageContent": "rName to ensure desired Provider.\n\n## Futures Mode\n\n### FuturesMode\n```csharp\npublic bool FuturesMode\n```\nSet by the backtester, returns true if Futures Mode was enabled for this backtest.\n\n### Margin\n```csharp\npublic double Margin\n```\nCapital required to open a 1 share/contract position. Used in Futures Mode for position's cost basis.\n\n### PointValue\n```csharp\npublic double PointValue\n```\nPoint value for each 1 point move. In Futures Mode, position's profit is multiplied by this.\n\n### TickSize\n\n\n```csharp\npublic double TickSize\n\n```",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": "code-context-11",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public int Add(DateTime dt, double o, double h, double l, double c, double v)\n",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": "code-12",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": " Mode was enabled for this backtest.\n\n### Margin\n```csharp\npublic double Margin\n```\nCapital required to open a 1 share/contract position. Used in Futures Mode for position's cost basis.\n\n### PointValue\n```csharp\npublic double PointValue\n```\nPoint value for each 1 point move. In Futures Mode, position's profit is multiplied by this.\n\n### TickSize\n```csharp\npublic double TickSize\n```\nMinimum resolution for position quantity. Used in Futures Mode for quantity adjustments.\n\n## Core Members\n\n### Add\n"
    }
  },
  {
    "pageContent": " Mode was enabled for this backtest.\n\n### Margin\n```csharp\npublic double Margin\n```\nCapital required to open a 1 share/contract position. Used in Futures Mode for position's cost basis.\n\n### PointValue\n```csharp\npublic double PointValue\n```\nPoint value for each 1 point move. In Futures Mode, position's profit is multiplied by this.\n\n### TickSize\n```csharp\npublic double TickSize\n```\nMinimum resolution for position quantity. Used in Futures Mode for quantity adjustments.\n\n## Core Members\n\n### Add\n\n\n```csharp\npublic int Add(DateTime dt, double o, double h, double l, double c, double v)\n\n```",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": "code-context-12",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public DateTime AddTradingDays(int bar, int days)\n",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": "code-13",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "asis.\n\n### PointValue\n```csharp\npublic double PointValue\n```\nPoint value for each 1 point move. In Futures Mode, position's profit is multiplied by this.\n\n### TickSize\n```csharp\npublic double TickSize\n```\nMinimum resolution for position quantity. Used in Futures Mode for quantity adjustments.\n\n## Core Members\n\n### Add\n```csharp\npublic int Add(DateTime dt, double o, double h, double l, double c, double v)\n```\nAdds datetime/open/high/low/close/volume values to this BarHistory.\n\n### AddTradingDays\n"
    }
  },
  {
    "pageContent": "asis.\n\n### PointValue\n```csharp\npublic double PointValue\n```\nPoint value for each 1 point move. In Futures Mode, position's profit is multiplied by this.\n\n### TickSize\n```csharp\npublic double TickSize\n```\nMinimum resolution for position quantity. Used in Futures Mode for quantity adjustments.\n\n## Core Members\n\n### Add\n```csharp\npublic int Add(DateTime dt, double o, double h, double l, double c, double v)\n```\nAdds datetime/open/high/low/close/volume values to this BarHistory.\n\n### AddTradingDays\n\n\n```csharp\npublic DateTime AddTradingDays(int bar, int days)\n\n```",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": "code-context-13",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public ConcurrentDictionary<string, object> Cache\n",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": "code-14",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "kSize\n```csharp\npublic double TickSize\n```\nMinimum resolution for position quantity. Used in Futures Mode for quantity adjustments.\n\n## Core Members\n\n### Add\n```csharp\npublic int Add(DateTime dt, double o, double h, double l, double c, double v)\n```\nAdds datetime/open/high/low/close/volume values to this BarHistory.\n\n### AddTradingDays\n```csharp\npublic DateTime AddTradingDays(int bar, int days)\n```\nReturns date after adding specified trading days to the DateTime of the specified bar.\n\n### Cache\n"
    }
  },
  {
    "pageContent": "kSize\n```csharp\npublic double TickSize\n```\nMinimum resolution for position quantity. Used in Futures Mode for quantity adjustments.\n\n## Core Members\n\n### Add\n```csharp\npublic int Add(DateTime dt, double o, double h, double l, double c, double v)\n```\nAdds datetime/open/high/low/close/volume values to this BarHistory.\n\n### AddTradingDays\n```csharp\npublic DateTime AddTradingDays(int bar, int days)\n```\nReturns date after adding specified trading days to the DateTime of the specified bar.\n\n### Cache\n\n\n```csharp\npublic ConcurrentDictionary<string, object> Cache\n\n```",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": "code-context-14",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public TimeSeries Close\n",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": "code-15",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "Members\n\n### Add\n```csharp\npublic int Add(DateTime dt, double o, double h, double l, double c, double v)\n```\nAdds datetime/open/high/low/close/volume values to this BarHistory.\n\n### AddTradingDays\n```csharp\npublic DateTime AddTradingDays(int bar, int days)\n```\nReturns date after adding specified trading days to the DateTime of the specified bar.\n\n### Cache\n```csharp\npublic ConcurrentDictionary<string, object> Cache\n```\nGeneric cache Dictionary for storing objects during backtest run.\n\n### Close\n"
    }
  },
  {
    "pageContent": "Members\n\n### Add\n```csharp\npublic int Add(DateTime dt, double o, double h, double l, double c, double v)\n```\nAdds datetime/open/high/low/close/volume values to this BarHistory.\n\n### AddTradingDays\n```csharp\npublic DateTime AddTradingDays(int bar, int days)\n```\nReturns date after adding specified trading days to the DateTime of the specified bar.\n\n### Cache\n```csharp\npublic ConcurrentDictionary<string, object> Cache\n```\nGeneric cache Dictionary for storing objects during backtest run.\n\n### Close\n\n\n```csharp\npublic TimeSeries Close\n\n```",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": "code-context-15",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public int Count\n",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": "code-16",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "uble v)\n```\nAdds datetime/open/high/low/close/volume values to this BarHistory.\n\n### AddTradingDays\n```csharp\npublic DateTime AddTradingDays(int bar, int days)\n```\nReturns date after adding specified trading days to the DateTime of the specified bar.\n\n### Cache\n```csharp\npublic ConcurrentDictionary<string, object> Cache\n```\nGeneric cache Dictionary for storing objects during backtest run.\n\n### Close\n```csharp\npublic TimeSeries Close\n```\nReturns TimeSeries representing closing prices.\n\n### Count\n"
    }
  },
  {
    "pageContent": "uble v)\n```\nAdds datetime/open/high/low/close/volume values to this BarHistory.\n\n### AddTradingDays\n```csharp\npublic DateTime AddTradingDays(int bar, int days)\n```\nReturns date after adding specified trading days to the DateTime of the specified bar.\n\n### Cache\n```csharp\npublic ConcurrentDictionary<string, object> Cache\n```\nGeneric cache Dictionary for storing objects during backtest run.\n\n### Close\n```csharp\npublic TimeSeries Close\n```\nReturns TimeSeries representing closing prices.\n\n### Count\n\n\n```csharp\npublic int Count\n\n```",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": "code-context-16",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public virtual List<DateTime> DateTimes\n",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": "code-17",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "adingDays\n```csharp\npublic DateTime AddTradingDays(int bar, int days)\n```\nReturns date after adding specified trading days to the DateTime of the specified bar.\n\n### Cache\n```csharp\npublic ConcurrentDictionary<string, object> Cache\n```\nGeneric cache Dictionary for storing objects during backtest run.\n\n### Close\n```csharp\npublic TimeSeries Close\n```\nReturns TimeSeries representing closing prices.\n\n### Count\n```csharp\npublic int Count\n```\nReturns number of items in the time series.\n\n### DateTimes\n"
    }
  },
  {
    "pageContent": "adingDays\n```csharp\npublic DateTime AddTradingDays(int bar, int days)\n```\nReturns date after adding specified trading days to the DateTime of the specified bar.\n\n### Cache\n```csharp\npublic ConcurrentDictionary<string, object> Cache\n```\nGeneric cache Dictionary for storing objects during backtest run.\n\n### Close\n```csharp\npublic TimeSeries Close\n```\nReturns TimeSeries representing closing prices.\n\n### Count\n```csharp\npublic int Count\n```\nReturns number of items in the time series.\n\n### DateTimes\n\n\n```csharp\npublic virtual List<DateTime> DateTimes\n\n```",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": "code-context-17",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public int DisplayDecimals\n",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": "code-18",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "e of the specified bar.\n\n### Cache\n```csharp\npublic ConcurrentDictionary<string, object> Cache\n```\nGeneric cache Dictionary for storing objects during backtest run.\n\n### Close\n```csharp\npublic TimeSeries Close\n```\nReturns TimeSeries representing closing prices.\n\n### Count\n```csharp\npublic int Count\n```\nReturns number of items in the time series.\n\n### DateTimes\n```csharp\npublic virtual List<DateTime> DateTimes\n```\nList of DateTime objects representing date/time of each item.\n\n### DisplayDecimals\n"
    }
  },
  {
    "pageContent": "e of the specified bar.\n\n### Cache\n```csharp\npublic ConcurrentDictionary<string, object> Cache\n```\nGeneric cache Dictionary for storing objects during backtest run.\n\n### Close\n```csharp\npublic TimeSeries Close\n```\nReturns TimeSeries representing closing prices.\n\n### Count\n```csharp\npublic int Count\n```\nReturns number of items in the time series.\n\n### DateTimes\n```csharp\npublic virtual List<DateTime> DateTimes\n```\nList of DateTime objects representing date/time of each item.\n\n### DisplayDecimals\n\n\n```csharp\npublic int DisplayDecimals\n\n```",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": "code-context-18",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public DateTime EndDate\n",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": "code-19",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "cache Dictionary for storing objects during backtest run.\n\n### Close\n```csharp\npublic TimeSeries Close\n```\nReturns TimeSeries representing closing prices.\n\n### Count\n```csharp\npublic int Count\n```\nReturns number of items in the time series.\n\n### DateTimes\n```csharp\npublic virtual List<DateTime> DateTimes\n```\nList of DateTime objects representing date/time of each item.\n\n### DisplayDecimals\n```csharp\npublic int DisplayDecimals\n```\nNumber of decimals places for displaying price data.\n\n### EndDate\n"
    }
  },
  {
    "pageContent": "cache Dictionary for storing objects during backtest run.\n\n### Close\n```csharp\npublic TimeSeries Close\n```\nReturns TimeSeries representing closing prices.\n\n### Count\n```csharp\npublic int Count\n```\nReturns number of items in the time series.\n\n### DateTimes\n```csharp\npublic virtual List<DateTime> DateTimes\n```\nList of DateTime objects representing date/time of each item.\n\n### DisplayDecimals\n```csharp\npublic int DisplayDecimals\n```\nNumber of decimals places for displaying price data.\n\n### EndDate\n\n\n```csharp\npublic DateTime EndDate\n\n```",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": "code-context-19",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public int ExtendedBars\n",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": "code-20",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "esenting closing prices.\n\n### Count\n```csharp\npublic int Count\n```\nReturns number of items in the time series.\n\n### DateTimes\n```csharp\npublic virtual List<DateTime> DateTimes\n```\nList of DateTime objects representing date/time of each item.\n\n### DisplayDecimals\n```csharp\npublic int DisplayDecimals\n```\nNumber of decimals places for displaying price data.\n\n### EndDate\n```csharp\npublic DateTime EndDate\n```\nReturns last DateTime in the DateTimes list (DateTime.MaxValue if empty).\n\n### ExtendedBars\n"
    }
  },
  {
    "pageContent": "esenting closing prices.\n\n### Count\n```csharp\npublic int Count\n```\nReturns number of items in the time series.\n\n### DateTimes\n```csharp\npublic virtual List<DateTime> DateTimes\n```\nList of DateTime objects representing date/time of each item.\n\n### DisplayDecimals\n```csharp\npublic int DisplayDecimals\n```\nNumber of decimals places for displaying price data.\n\n### EndDate\n```csharp\npublic DateTime EndDate\n```\nReturns last DateTime in the DateTimes list (DateTime.MaxValue if empty).\n\n### ExtendedBars\n\n\n```csharp\npublic int ExtendedBars\n\n```",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": "code-context-20",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public TimeSeries GetNamedSeries(string name)\n",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": "code-21",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "blic virtual List<DateTime> DateTimes\n```\nList of DateTime objects representing date/time of each item.\n\n### DisplayDecimals\n```csharp\npublic int DisplayDecimals\n```\nNumber of decimals places for displaying price data.\n\n### EndDate\n```csharp\npublic DateTime EndDate\n```\nReturns last DateTime in the DateTimes list (DateTime.MaxValue if empty).\n\n### ExtendedBars\n```csharp\npublic int ExtendedBars\n```\nCreates projected space along right edge of chart with future date/time values.\n\n### GetNamedSeries\n"
    }
  },
  {
    "pageContent": "blic virtual List<DateTime> DateTimes\n```\nList of DateTime objects representing date/time of each item.\n\n### DisplayDecimals\n```csharp\npublic int DisplayDecimals\n```\nNumber of decimals places for displaying price data.\n\n### EndDate\n```csharp\npublic DateTime EndDate\n```\nReturns last DateTime in the DateTimes list (DateTime.MaxValue if empty).\n\n### ExtendedBars\n```csharp\npublic int ExtendedBars\n```\nCreates projected space along right edge of chart with future date/time values.\n\n### GetNamedSeries\n\n\n```csharp\npublic TimeSeries GetNamedSeries(string name)\n\n```",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": "code-context-21",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public int GetTimeAsInt(int bar)\n",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": "code-22",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "```csharp\npublic int DisplayDecimals\n```\nNumber of decimals places for displaying price data.\n\n### EndDate\n```csharp\npublic DateTime EndDate\n```\nReturns last DateTime in the DateTimes list (DateTime.MaxValue if empty).\n\n### ExtendedBars\n```csharp\npublic int ExtendedBars\n```\nCreates projected space along right edge of chart with future date/time values.\n\n### GetNamedSeries\n```csharp\npublic TimeSeries GetNamedSeries(string name)\n```\nReturns registered \"Named TimeSeries\" or null.\n\n### GetTimeAsInt\n"
    }
  },
  {
    "pageContent": "```csharp\npublic int DisplayDecimals\n```\nNumber of decimals places for displaying price data.\n\n### EndDate\n```csharp\npublic DateTime EndDate\n```\nReturns last DateTime in the DateTimes list (DateTime.MaxValue if empty).\n\n### ExtendedBars\n```csharp\npublic int ExtendedBars\n```\nCreates projected space along right edge of chart with future date/time values.\n\n### GetNamedSeries\n```csharp\npublic TimeSeries GetNamedSeries(string name)\n```\nReturns registered \"Named TimeSeries\" or null.\n\n### GetTimeAsInt\n\n\n```csharp\npublic int GetTimeAsInt(int bar)\n\n```",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": "code-context-22",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public bool HasStreamingBar\n",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": "code-23",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "e EndDate\n```\nReturns last DateTime in the DateTimes list (DateTime.MaxValue if empty).\n\n### ExtendedBars\n```csharp\npublic int ExtendedBars\n```\nCreates projected space along right edge of chart with future date/time values.\n\n### GetNamedSeries\n```csharp\npublic TimeSeries GetNamedSeries(string name)\n```\nReturns registered \"Named TimeSeries\" or null.\n\n### GetTimeAsInt\n```csharp\npublic int GetTimeAsInt(int bar)\n```\nReturns integer value for time of day (e.g., 930 for 9:30 AM).\n\n### HasStreamingBar\n"
    }
  },
  {
    "pageContent": "e EndDate\n```\nReturns last DateTime in the DateTimes list (DateTime.MaxValue if empty).\n\n### ExtendedBars\n```csharp\npublic int ExtendedBars\n```\nCreates projected space along right edge of chart with future date/time values.\n\n### GetNamedSeries\n```csharp\npublic TimeSeries GetNamedSeries(string name)\n```\nReturns registered \"Named TimeSeries\" or null.\n\n### GetTimeAsInt\n```csharp\npublic int GetTimeAsInt(int bar)\n```\nReturns integer value for time of day (e.g., 930 for 9:30 AM).\n\n### HasStreamingBar\n\n\n```csharp\npublic bool HasStreamingBar\n\n```",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": "code-context-23",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public TimeSeries High\n",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": "code-24",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": " ExtendedBars\n```\nCreates projected space along right edge of chart with future date/time values.\n\n### GetNamedSeries\n```csharp\npublic TimeSeries GetNamedSeries(string name)\n```\nReturns registered \"Named TimeSeries\" or null.\n\n### GetTimeAsInt\n```csharp\npublic int GetTimeAsInt(int bar)\n```\nReturns integer value for time of day (e.g., 930 for 9:30 AM).\n\n### HasStreamingBar\n```csharp\npublic bool HasStreamingBar\n```\nReturns true if BarHistory has streaming bar (for Extension development).\n\n### High\n"
    }
  },
  {
    "pageContent": " ExtendedBars\n```\nCreates projected space along right edge of chart with future date/time values.\n\n### GetNamedSeries\n```csharp\npublic TimeSeries GetNamedSeries(string name)\n```\nReturns registered \"Named TimeSeries\" or null.\n\n### GetTimeAsInt\n```csharp\npublic int GetTimeAsInt(int bar)\n```\nReturns integer value for time of day (e.g., 930 for 9:30 AM).\n\n### HasStreamingBar\n```csharp\npublic bool HasStreamingBar\n```\nReturns true if BarHistory has streaming bar (for Extension development).\n\n### High\n\n\n```csharp\npublic TimeSeries High\n\n```",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": "code-context-24",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public int IndexOf(DateTime dt, bool exactMatchOnly = false)\n",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": "code-25",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "s.\n\n### GetNamedSeries\n```csharp\npublic TimeSeries GetNamedSeries(string name)\n```\nReturns registered \"Named TimeSeries\" or null.\n\n### GetTimeAsInt\n```csharp\npublic int GetTimeAsInt(int bar)\n```\nReturns integer value for time of day (e.g., 930 for 9:30 AM).\n\n### HasStreamingBar\n```csharp\npublic bool HasStreamingBar\n```\nReturns true if BarHistory has streaming bar (for Extension development).\n\n### High\n```csharp\npublic TimeSeries High\n```\nReturns TimeSeries representing high prices.\n\n### IndexOf\n"
    }
  },
  {
    "pageContent": "s.\n\n### GetNamedSeries\n```csharp\npublic TimeSeries GetNamedSeries(string name)\n```\nReturns registered \"Named TimeSeries\" or null.\n\n### GetTimeAsInt\n```csharp\npublic int GetTimeAsInt(int bar)\n```\nReturns integer value for time of day (e.g., 930 for 9:30 AM).\n\n### HasStreamingBar\n```csharp\npublic bool HasStreamingBar\n```\nReturns true if BarHistory has streaming bar (for Extension development).\n\n### High\n```csharp\npublic TimeSeries High\n```\nReturns TimeSeries representing high prices.\n\n### IndexOf\n\n\n```csharp\npublic int IndexOf(DateTime dt, bool exactMatchOnly = false)\n\n```",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": "code-context-25",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public int IntradayBarNumber\n",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": "code-26",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "harp\npublic int GetTimeAsInt(int bar)\n```\nReturns integer value for time of day (e.g., 930 for 9:30 AM).\n\n### HasStreamingBar\n```csharp\npublic bool HasStreamingBar\n```\nReturns true if BarHistory has streaming bar (for Extension development).\n\n### High\n```csharp\npublic TimeSeries High\n```\nReturns TimeSeries representing high prices.\n\n### IndexOf\n```csharp\npublic int IndexOf(DateTime dt, bool exactMatchOnly = false)\n```\nReturns index of specified DateTime in DateTimes list.\n\n### IntradayBarNumber\n"
    }
  },
  {
    "pageContent": "harp\npublic int GetTimeAsInt(int bar)\n```\nReturns integer value for time of day (e.g., 930 for 9:30 AM).\n\n### HasStreamingBar\n```csharp\npublic bool HasStreamingBar\n```\nReturns true if BarHistory has streaming bar (for Extension development).\n\n### High\n```csharp\npublic TimeSeries High\n```\nReturns TimeSeries representing high prices.\n\n### IndexOf\n```csharp\npublic int IndexOf(DateTime dt, bool exactMatchOnly = false)\n```\nReturns index of specified DateTime in DateTimes list.\n\n### IntradayBarNumber\n\n\n```csharp\npublic int IntradayBarNumber\n\n```",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": "code-context-26",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public TimeSeries Low\n",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": "code-27",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ingBar\n```csharp\npublic bool HasStreamingBar\n```\nReturns true if BarHistory has streaming bar (for Extension development).\n\n### High\n```csharp\npublic TimeSeries High\n```\nReturns TimeSeries representing high prices.\n\n### IndexOf\n```csharp\npublic int IndexOf(DateTime dt, bool exactMatchOnly = false)\n```\nReturns index of specified DateTime in DateTimes list.\n\n### IntradayBarNumber\n```csharp\npublic int IntradayBarNumber\n```\nReturns intraday bar number of the day (-1 for non-intraday data).\n\n### Low\n"
    }
  },
  {
    "pageContent": "ingBar\n```csharp\npublic bool HasStreamingBar\n```\nReturns true if BarHistory has streaming bar (for Extension development).\n\n### High\n```csharp\npublic TimeSeries High\n```\nReturns TimeSeries representing high prices.\n\n### IndexOf\n```csharp\npublic int IndexOf(DateTime dt, bool exactMatchOnly = false)\n```\nReturns index of specified DateTime in DateTimes list.\n\n### IntradayBarNumber\n```csharp\npublic int IntradayBarNumber\n```\nReturns intraday bar number of the day (-1 for non-intraday data).\n\n### Low\n\n\n```csharp\npublic TimeSeries Low\n\n```",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": "code-context-27",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public TimeSeries Open\n",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": "code-28",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "bar (for Extension development).\n\n### High\n```csharp\npublic TimeSeries High\n```\nReturns TimeSeries representing high prices.\n\n### IndexOf\n```csharp\npublic int IndexOf(DateTime dt, bool exactMatchOnly = false)\n```\nReturns index of specified DateTime in DateTimes list.\n\n### IntradayBarNumber\n```csharp\npublic int IntradayBarNumber\n```\nReturns intraday bar number of the day (-1 for non-intraday data).\n\n### Low\n```csharp\npublic TimeSeries Low\n```\nReturns TimeSeries representing low prices.\n\n### Open\n"
    }
  },
  {
    "pageContent": "bar (for Extension development).\n\n### High\n```csharp\npublic TimeSeries High\n```\nReturns TimeSeries representing high prices.\n\n### IndexOf\n```csharp\npublic int IndexOf(DateTime dt, bool exactMatchOnly = false)\n```\nReturns index of specified DateTime in DateTimes list.\n\n### IntradayBarNumber\n```csharp\npublic int IntradayBarNumber\n```\nReturns intraday bar number of the day (-1 for non-intraday data).\n\n### Low\n```csharp\npublic TimeSeries Low\n```\nReturns TimeSeries representing low prices.\n\n### Open\n\n\n```csharp\npublic TimeSeries Open\n\n```",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": "code-context-28",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public TimeSeries Volume\n",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": "code-29",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ries representing high prices.\n\n### IndexOf\n```csharp\npublic int IndexOf(DateTime dt, bool exactMatchOnly = false)\n```\nReturns index of specified DateTime in DateTimes list.\n\n### IntradayBarNumber\n```csharp\npublic int IntradayBarNumber\n```\nReturns intraday bar number of the day (-1 for non-intraday data).\n\n### Low\n```csharp\npublic TimeSeries Low\n```\nReturns TimeSeries representing low prices.\n\n### Open\n```csharp\npublic TimeSeries Open\n```\nReturns TimeSeries representing open prices.\n\n### Volume\n"
    }
  },
  {
    "pageContent": "ries representing high prices.\n\n### IndexOf\n```csharp\npublic int IndexOf(DateTime dt, bool exactMatchOnly = false)\n```\nReturns index of specified DateTime in DateTimes list.\n\n### IntradayBarNumber\n```csharp\npublic int IntradayBarNumber\n```\nReturns intraday bar number of the day (-1 for non-intraday data).\n\n### Low\n```csharp\npublic TimeSeries Low\n```\nReturns TimeSeries representing low prices.\n\n### Open\n```csharp\npublic TimeSeries Open\n```\nReturns TimeSeries representing open prices.\n\n### Volume\n\n\n```csharp\npublic TimeSeries Volume\n\n```",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": "code-context-29",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public bool IsFirstBarOfDay(int idx)\n",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": "code-30",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "of specified DateTime in DateTimes list.\n\n### IntradayBarNumber\n```csharp\npublic int IntradayBarNumber\n```\nReturns intraday bar number of the day (-1 for non-intraday data).\n\n### Low\n```csharp\npublic TimeSeries Low\n```\nReturns TimeSeries representing low prices.\n\n### Open\n```csharp\npublic TimeSeries Open\n```\nReturns TimeSeries representing open prices.\n\n### Volume\n```csharp\npublic TimeSeries Volume\n```\nReturns TimeSeries representing volume data.\n\n## Market Analysis Methods\n\n### IsFirstBarOfDay\n"
    }
  },
  {
    "pageContent": "of specified DateTime in DateTimes list.\n\n### IntradayBarNumber\n```csharp\npublic int IntradayBarNumber\n```\nReturns intraday bar number of the day (-1 for non-intraday data).\n\n### Low\n```csharp\npublic TimeSeries Low\n```\nReturns TimeSeries representing low prices.\n\n### Open\n```csharp\npublic TimeSeries Open\n```\nReturns TimeSeries representing open prices.\n\n### Volume\n```csharp\npublic TimeSeries Volume\n```\nReturns TimeSeries representing volume data.\n\n## Market Analysis Methods\n\n### IsFirstBarOfDay\n\n\n```csharp\npublic bool IsFirstBarOfDay(int idx)\n\n```",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": "code-context-30",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public bool IsGap(int bar)\n",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": "code-31",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "intraday bar number of the day (-1 for non-intraday data).\n\n### Low\n```csharp\npublic TimeSeries Low\n```\nReturns TimeSeries representing low prices.\n\n### Open\n```csharp\npublic TimeSeries Open\n```\nReturns TimeSeries representing open prices.\n\n### Volume\n```csharp\npublic TimeSeries Volume\n```\nReturns TimeSeries representing volume data.\n\n## Market Analysis Methods\n\n### IsFirstBarOfDay\n```csharp\npublic bool IsFirstBarOfDay(int idx)\n```\nReturns true if specified index is first bar of day.\n\n### IsGap\n"
    }
  },
  {
    "pageContent": "intraday bar number of the day (-1 for non-intraday data).\n\n### Low\n```csharp\npublic TimeSeries Low\n```\nReturns TimeSeries representing low prices.\n\n### Open\n```csharp\npublic TimeSeries Open\n```\nReturns TimeSeries representing open prices.\n\n### Volume\n```csharp\npublic TimeSeries Volume\n```\nReturns TimeSeries representing volume data.\n\n## Market Analysis Methods\n\n### IsFirstBarOfDay\n```csharp\npublic bool IsFirstBarOfDay(int idx)\n```\nReturns true if specified index is first bar of day.\n\n### IsGap\n\n\n```csharp\npublic bool IsGap(int bar)\n\n```",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": "code-context-31",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public bool IsGapDown(int bar)\n",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": "code-32",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ns TimeSeries representing low prices.\n\n### Open\n```csharp\npublic TimeSeries Open\n```\nReturns TimeSeries representing open prices.\n\n### Volume\n```csharp\npublic TimeSeries Volume\n```\nReturns TimeSeries representing volume data.\n\n## Market Analysis Methods\n\n### IsFirstBarOfDay\n```csharp\npublic bool IsFirstBarOfDay(int idx)\n```\nReturns true if specified index is first bar of day.\n\n### IsGap\n```csharp\npublic bool IsGap(int bar)\n```\nReturns true if opening price has gapped up or down.\n\n### IsGapDown\n"
    }
  },
  {
    "pageContent": "ns TimeSeries representing low prices.\n\n### Open\n```csharp\npublic TimeSeries Open\n```\nReturns TimeSeries representing open prices.\n\n### Volume\n```csharp\npublic TimeSeries Volume\n```\nReturns TimeSeries representing volume data.\n\n## Market Analysis Methods\n\n### IsFirstBarOfDay\n```csharp\npublic bool IsFirstBarOfDay(int idx)\n```\nReturns true if specified index is first bar of day.\n\n### IsGap\n```csharp\npublic bool IsGap(int bar)\n```\nReturns true if opening price has gapped up or down.\n\n### IsGapDown\n\n\n```csharp\npublic bool IsGapDown(int bar)\n\n```",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": "code-context-32",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public bool IsGapUp(int bar)\n",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": "code-33",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "es.\n\n### Volume\n```csharp\npublic TimeSeries Volume\n```\nReturns TimeSeries representing volume data.\n\n## Market Analysis Methods\n\n### IsFirstBarOfDay\n```csharp\npublic bool IsFirstBarOfDay(int idx)\n```\nReturns true if specified index is first bar of day.\n\n### IsGap\n```csharp\npublic bool IsGap(int bar)\n```\nReturns true if opening price has gapped up or down.\n\n### IsGapDown\n```csharp\npublic bool IsGapDown(int bar)\n```\nReturns true if opening price has gapped down (Open < previous Low).\n\n### IsGapUp\n"
    }
  },
  {
    "pageContent": "es.\n\n### Volume\n```csharp\npublic TimeSeries Volume\n```\nReturns TimeSeries representing volume data.\n\n## Market Analysis Methods\n\n### IsFirstBarOfDay\n```csharp\npublic bool IsFirstBarOfDay(int idx)\n```\nReturns true if specified index is first bar of day.\n\n### IsGap\n```csharp\npublic bool IsGap(int bar)\n```\nReturns true if opening price has gapped up or down.\n\n### IsGapDown\n```csharp\npublic bool IsGapDown(int bar)\n```\nReturns true if opening price has gapped down (Open < previous Low).\n\n### IsGapUp\n\n\n```csharp\npublic bool IsGapUp(int bar)\n\n```",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": "code-context-33",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public bool IsLastBarOfDay(int idx)\n",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": "code-34",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "# IsFirstBarOfDay\n```csharp\npublic bool IsFirstBarOfDay(int idx)\n```\nReturns true if specified index is first bar of day.\n\n### IsGap\n```csharp\npublic bool IsGap(int bar)\n```\nReturns true if opening price has gapped up or down.\n\n### IsGapDown\n```csharp\npublic bool IsGapDown(int bar)\n```\nReturns true if opening price has gapped down (Open < previous Low).\n\n### IsGapUp\n```csharp\npublic bool IsGapUp(int bar)\n```\nReturns true if opening price has gapped up (Open > previous High).\n\n### IsLastBarOfDay\n"
    }
  },
  {
    "pageContent": "# IsFirstBarOfDay\n```csharp\npublic bool IsFirstBarOfDay(int idx)\n```\nReturns true if specified index is first bar of day.\n\n### IsGap\n```csharp\npublic bool IsGap(int bar)\n```\nReturns true if opening price has gapped up or down.\n\n### IsGapDown\n```csharp\npublic bool IsGapDown(int bar)\n```\nReturns true if opening price has gapped down (Open < previous Low).\n\n### IsGapUp\n```csharp\npublic bool IsGapUp(int bar)\n```\nReturns true if opening price has gapped up (Open > previous High).\n\n### IsLastBarOfDay\n\n\n```csharp\npublic bool IsLastBarOfDay(int idx)\n\n```",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": "code-context-34",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public bool IsLastTradingDayOfMonth(int bar)\n",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": "code-35",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ool IsGap(int bar)\n```\nReturns true if opening price has gapped up or down.\n\n### IsGapDown\n```csharp\npublic bool IsGapDown(int bar)\n```\nReturns true if opening price has gapped down (Open < previous Low).\n\n### IsGapUp\n```csharp\npublic bool IsGapUp(int bar)\n```\nReturns true if opening price has gapped up (Open > previous High).\n\n### IsLastBarOfDay\n```csharp\npublic bool IsLastBarOfDay(int idx)\n```\nReturns true if specified index is last bar of regular trading session.\n\n### IsLastTradingDayOfMonth\n"
    }
  },
  {
    "pageContent": "ool IsGap(int bar)\n```\nReturns true if opening price has gapped up or down.\n\n### IsGapDown\n```csharp\npublic bool IsGapDown(int bar)\n```\nReturns true if opening price has gapped down (Open < previous Low).\n\n### IsGapUp\n```csharp\npublic bool IsGapUp(int bar)\n```\nReturns true if opening price has gapped up (Open > previous High).\n\n### IsLastBarOfDay\n```csharp\npublic bool IsLastBarOfDay(int idx)\n```\nReturns true if specified index is last bar of regular trading session.\n\n### IsLastTradingDayOfMonth\n\n\n```csharp\npublic bool IsLastTradingDayOfMonth(int bar)\n\n```",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": "code-context-35",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public virtual bool IsUpToDate(DateTime endDate)\n",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": "code-36",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "rns true if opening price has gapped down (Open < previous Low).\n\n### IsGapUp\n```csharp\npublic bool IsGapUp(int bar)\n```\nReturns true if opening price has gapped up (Open > previous High).\n\n### IsLastBarOfDay\n```csharp\npublic bool IsLastBarOfDay(int idx)\n```\nReturns true if specified index is last bar of regular trading session.\n\n### IsLastTradingDayOfMonth\n```csharp\npublic bool IsLastTradingDayOfMonth(int bar)\n```\nReturns true if bar falls on last trading day of calendar month.\n\n### IsUpToDate\n"
    }
  },
  {
    "pageContent": "rns true if opening price has gapped down (Open < previous Low).\n\n### IsGapUp\n```csharp\npublic bool IsGapUp(int bar)\n```\nReturns true if opening price has gapped up (Open > previous High).\n\n### IsLastBarOfDay\n```csharp\npublic bool IsLastBarOfDay(int idx)\n```\nReturns true if specified index is last bar of regular trading session.\n\n### IsLastTradingDayOfMonth\n```csharp\npublic bool IsLastTradingDayOfMonth(int bar)\n```\nReturns true if bar falls on last trading day of calendar month.\n\n### IsUpToDate\n\n\n```csharp\npublic virtual bool IsUpToDate(DateTime endDate)\n\n```",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": "code-context-36",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public DateTime NextOptionExpiryDate(int bar)\n",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": "code-37",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "pped up (Open > previous High).\n\n### IsLastBarOfDay\n```csharp\npublic bool IsLastBarOfDay(int idx)\n```\nReturns true if specified index is last bar of regular trading session.\n\n### IsLastTradingDayOfMonth\n```csharp\npublic bool IsLastTradingDayOfMonth(int bar)\n```\nReturns true if bar falls on last trading day of calendar month.\n\n### IsUpToDate\n```csharp\npublic virtual bool IsUpToDate(DateTime endDate)\n```\nReturns whether historical data is up to date as of specified date.\n\n### NextOptionExpiryDate\n"
    }
  },
  {
    "pageContent": "pped up (Open > previous High).\n\n### IsLastBarOfDay\n```csharp\npublic bool IsLastBarOfDay(int idx)\n```\nReturns true if specified index is last bar of regular trading session.\n\n### IsLastTradingDayOfMonth\n```csharp\npublic bool IsLastTradingDayOfMonth(int bar)\n```\nReturns true if bar falls on last trading day of calendar month.\n\n### IsUpToDate\n```csharp\npublic virtual bool IsUpToDate(DateTime endDate)\n```\nReturns whether historical data is up to date as of specified date.\n\n### NextOptionExpiryDate\n\n\n```csharp\npublic DateTime NextOptionExpiryDate(int bar)\n\n```",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": "code-context-37",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public bool TomorrowIsLastTradingDayOfWeek(int bar)\n",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": "code-38",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ng session.\n\n### IsLastTradingDayOfMonth\n```csharp\npublic bool IsLastTradingDayOfMonth(int bar)\n```\nReturns true if bar falls on last trading day of calendar month.\n\n### IsUpToDate\n```csharp\npublic virtual bool IsUpToDate(DateTime endDate)\n```\nReturns whether historical data is up to date as of specified date.\n\n### NextOptionExpiryDate\n```csharp\npublic DateTime NextOptionExpiryDate(int bar)\n```\nReturns DateTime of next closest monthly options expiration date.\n\n### TomorrowIsLastTradingDayOfWeek\n"
    }
  },
  {
    "pageContent": "ng session.\n\n### IsLastTradingDayOfMonth\n```csharp\npublic bool IsLastTradingDayOfMonth(int bar)\n```\nReturns true if bar falls on last trading day of calendar month.\n\n### IsUpToDate\n```csharp\npublic virtual bool IsUpToDate(DateTime endDate)\n```\nReturns whether historical data is up to date as of specified date.\n\n### NextOptionExpiryDate\n```csharp\npublic DateTime NextOptionExpiryDate(int bar)\n```\nReturns DateTime of next closest monthly options expiration date.\n\n### TomorrowIsLastTradingDayOfWeek\n\n\n```csharp\npublic bool TomorrowIsLastTradingDayOfWeek(int bar)\n\n```",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": "code-context-38",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public int TradingDaysBetweenDates(DateTime dt1, DateTime dt2)\n",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": "code-39",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": " month.\n\n### IsUpToDate\n```csharp\npublic virtual bool IsUpToDate(DateTime endDate)\n```\nReturns whether historical data is up to date as of specified date.\n\n### NextOptionExpiryDate\n```csharp\npublic DateTime NextOptionExpiryDate(int bar)\n```\nReturns DateTime of next closest monthly options expiration date.\n\n### TomorrowIsLastTradingDayOfWeek\n```csharp\npublic bool TomorrowIsLastTradingDayOfWeek(int bar)\n```\nReturns true if next trading day is last trading day of week.\n\n### TradingDaysBetweenDates\n"
    }
  },
  {
    "pageContent": " month.\n\n### IsUpToDate\n```csharp\npublic virtual bool IsUpToDate(DateTime endDate)\n```\nReturns whether historical data is up to date as of specified date.\n\n### NextOptionExpiryDate\n```csharp\npublic DateTime NextOptionExpiryDate(int bar)\n```\nReturns DateTime of next closest monthly options expiration date.\n\n### TomorrowIsLastTradingDayOfWeek\n```csharp\npublic bool TomorrowIsLastTradingDayOfWeek(int bar)\n```\nReturns true if next trading day is last trading day of week.\n\n### TradingDaysBetweenDates\n\n\n```csharp\npublic int TradingDaysBetweenDates(DateTime dt1, DateTime dt2)\n\n```",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": "code-context-39",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public int TradingDaysRemaining(int bar, Frequency interval)\n",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": "code-40",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": " NextOptionExpiryDate\n```csharp\npublic DateTime NextOptionExpiryDate(int bar)\n```\nReturns DateTime of next closest monthly options expiration date.\n\n### TomorrowIsLastTradingDayOfWeek\n```csharp\npublic bool TomorrowIsLastTradingDayOfWeek(int bar)\n```\nReturns true if next trading day is last trading day of week.\n\n### TradingDaysBetweenDates\n```csharp\npublic int TradingDaysBetweenDates(DateTime dt1, DateTime dt2)\n```\nReturns number of trading days between specified dates.\n\n### TradingDaysRemaining\n"
    }
  },
  {
    "pageContent": " NextOptionExpiryDate\n```csharp\npublic DateTime NextOptionExpiryDate(int bar)\n```\nReturns DateTime of next closest monthly options expiration date.\n\n### TomorrowIsLastTradingDayOfWeek\n```csharp\npublic bool TomorrowIsLastTradingDayOfWeek(int bar)\n```\nReturns true if next trading day is last trading day of week.\n\n### TradingDaysBetweenDates\n```csharp\npublic int TradingDaysBetweenDates(DateTime dt1, DateTime dt2)\n```\nReturns number of trading days between specified dates.\n\n### TradingDaysRemaining\n\n\n```csharp\npublic int TradingDaysRemaining(int bar, Frequency interval)\n\n```",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": "code-context-40",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public void ReadFromBinaryFile(string fileName, DateTime startDate, DateTime endDate, int maxBars)\n",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": "code-41",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "\n```csharp\npublic bool TomorrowIsLastTradingDayOfWeek(int bar)\n```\nReturns true if next trading day is last trading day of week.\n\n### TradingDaysBetweenDates\n```csharp\npublic int TradingDaysBetweenDates(DateTime dt1, DateTime dt2)\n```\nReturns number of trading days between specified dates.\n\n### TradingDaysRemaining\n```csharp\npublic int TradingDaysRemaining(int bar, Frequency interval)\n```\nReturns trading days remaining in specified Frequency interval.\n\n## Data Management\n\n### ReadFromBinaryFile\n"
    }
  },
  {
    "pageContent": "\n```csharp\npublic bool TomorrowIsLastTradingDayOfWeek(int bar)\n```\nReturns true if next trading day is last trading day of week.\n\n### TradingDaysBetweenDates\n```csharp\npublic int TradingDaysBetweenDates(DateTime dt1, DateTime dt2)\n```\nReturns number of trading days between specified dates.\n\n### TradingDaysRemaining\n```csharp\npublic int TradingDaysRemaining(int bar, Frequency interval)\n```\nReturns trading days remaining in specified Frequency interval.\n\n## Data Management\n\n### ReadFromBinaryFile\n\n\n```csharp\npublic void ReadFromBinaryFile(string fileName, DateTime startDate, DateTime endDate, int maxBars)\n\n```",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": "code-context-41",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public void WriteToBinaryFile(string fileName)\n",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": "code-42",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ysBetweenDates(DateTime dt1, DateTime dt2)\n```\nReturns number of trading days between specified dates.\n\n### TradingDaysRemaining\n```csharp\npublic int TradingDaysRemaining(int bar, Frequency interval)\n```\nReturns trading days remaining in specified Frequency interval.\n\n## Data Management\n\n### ReadFromBinaryFile\n```csharp\npublic void ReadFromBinaryFile(string fileName, DateTime startDate, DateTime endDate, int maxBars)\n```\nReads binary file in Wealth-Lab 8 supported format.\n\n### WriteToBinaryFile\n"
    }
  },
  {
    "pageContent": "ysBetweenDates(DateTime dt1, DateTime dt2)\n```\nReturns number of trading days between specified dates.\n\n### TradingDaysRemaining\n```csharp\npublic int TradingDaysRemaining(int bar, Frequency interval)\n```\nReturns trading days remaining in specified Frequency interval.\n\n## Data Management\n\n### ReadFromBinaryFile\n```csharp\npublic void ReadFromBinaryFile(string fileName, DateTime startDate, DateTime endDate, int maxBars)\n```\nReads binary file in Wealth-Lab 8 supported format.\n\n### WriteToBinaryFile\n\n\n```csharp\npublic void WriteToBinaryFile(string fileName)\n\n```",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": "code-context-42",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public void RemoveAt(int idx)\n",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": "code-43",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "csharp\npublic int TradingDaysRemaining(int bar, Frequency interval)\n```\nReturns trading days remaining in specified Frequency interval.\n\n## Data Management\n\n### ReadFromBinaryFile\n```csharp\npublic void ReadFromBinaryFile(string fileName, DateTime startDate, DateTime endDate, int maxBars)\n```\nReads binary file in Wealth-Lab 8 supported format.\n\n### WriteToBinaryFile\n```csharp\npublic void WriteToBinaryFile(string fileName)\n```\nWrites BarHistory to binary file in Wealth-Lab 8 format.\n\n### RemoveAt\n"
    }
  },
  {
    "pageContent": "csharp\npublic int TradingDaysRemaining(int bar, Frequency interval)\n```\nReturns trading days remaining in specified Frequency interval.\n\n## Data Management\n\n### ReadFromBinaryFile\n```csharp\npublic void ReadFromBinaryFile(string fileName, DateTime startDate, DateTime endDate, int maxBars)\n```\nReads binary file in Wealth-Lab 8 supported format.\n\n### WriteToBinaryFile\n```csharp\npublic void WriteToBinaryFile(string fileName)\n```\nWrites BarHistory to binary file in Wealth-Lab 8 format.\n\n### RemoveAt\n\n\n```csharp\npublic void RemoveAt(int idx)\n\n```",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": "code-context-43",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public MarketDetails Market\n",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": "code-44",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "n specified Frequency interval.\n\n## Data Management\n\n### ReadFromBinaryFile\n```csharp\npublic void ReadFromBinaryFile(string fileName, DateTime startDate, DateTime endDate, int maxBars)\n```\nReads binary file in Wealth-Lab 8 supported format.\n\n### WriteToBinaryFile\n```csharp\npublic void WriteToBinaryFile(string fileName)\n```\nWrites BarHistory to binary file in Wealth-Lab 8 format.\n\n### RemoveAt\n```csharp\npublic void RemoveAt(int idx)\n```\nRemoves data at specified index.\n\n## Properties\n\n### Market\n"
    }
  },
  {
    "pageContent": "n specified Frequency interval.\n\n## Data Management\n\n### ReadFromBinaryFile\n```csharp\npublic void ReadFromBinaryFile(string fileName, DateTime startDate, DateTime endDate, int maxBars)\n```\nReads binary file in Wealth-Lab 8 supported format.\n\n### WriteToBinaryFile\n```csharp\npublic void WriteToBinaryFile(string fileName)\n```\nWrites BarHistory to binary file in Wealth-Lab 8 format.\n\n### RemoveAt\n```csharp\npublic void RemoveAt(int idx)\n```\nRemoves data at specified index.\n\n## Properties\n\n### Market\n\n\n```csharp\npublic MarketDetails Market\n\n```",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": "code-context-44",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public HistoryScale Scale\n",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": "code-45",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "aryFile(string fileName, DateTime startDate, DateTime endDate, int maxBars)\n```\nReads binary file in Wealth-Lab 8 supported format.\n\n### WriteToBinaryFile\n```csharp\npublic void WriteToBinaryFile(string fileName)\n```\nWrites BarHistory to binary file in Wealth-Lab 8 format.\n\n### RemoveAt\n```csharp\npublic void RemoveAt(int idx)\n```\nRemoves data at specified index.\n\n## Properties\n\n### Market\n```csharp\npublic MarketDetails Market\n```\nReturns MarketDetails instance with market information.\n\n### Scale\n"
    }
  },
  {
    "pageContent": "aryFile(string fileName, DateTime startDate, DateTime endDate, int maxBars)\n```\nReads binary file in Wealth-Lab 8 supported format.\n\n### WriteToBinaryFile\n```csharp\npublic void WriteToBinaryFile(string fileName)\n```\nWrites BarHistory to binary file in Wealth-Lab 8 format.\n\n### RemoveAt\n```csharp\npublic void RemoveAt(int idx)\n```\nRemoves data at specified index.\n\n## Properties\n\n### Market\n```csharp\npublic MarketDetails Market\n```\nReturns MarketDetails instance with market information.\n\n### Scale\n\n\n```csharp\npublic HistoryScale Scale\n\n```",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": "code-context-45",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public string SecurityName\n",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": "code-46",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "le in Wealth-Lab 8 supported format.\n\n### WriteToBinaryFile\n```csharp\npublic void WriteToBinaryFile(string fileName)\n```\nWrites BarHistory to binary file in Wealth-Lab 8 format.\n\n### RemoveAt\n```csharp\npublic void RemoveAt(int idx)\n```\nRemoves data at specified index.\n\n## Properties\n\n### Market\n```csharp\npublic MarketDetails Market\n```\nReturns MarketDetails instance with market information.\n\n### Scale\n```csharp\npublic HistoryScale Scale\n```\nScale of the data being represented.\n\n### SecurityName\n"
    }
  },
  {
    "pageContent": "le in Wealth-Lab 8 supported format.\n\n### WriteToBinaryFile\n```csharp\npublic void WriteToBinaryFile(string fileName)\n```\nWrites BarHistory to binary file in Wealth-Lab 8 format.\n\n### RemoveAt\n```csharp\npublic void RemoveAt(int idx)\n```\nRemoves data at specified index.\n\n## Properties\n\n### Market\n```csharp\npublic MarketDetails Market\n```\nReturns MarketDetails instance with market information.\n\n### Scale\n```csharp\npublic HistoryScale Scale\n```\nScale of the data being represented.\n\n### SecurityName\n\n\n```csharp\npublic string SecurityName\n\n```",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": "code-context-46",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public string Symbol\n",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": "code-47",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ing fileName)\n```\nWrites BarHistory to binary file in Wealth-Lab 8 format.\n\n### RemoveAt\n```csharp\npublic void RemoveAt(int idx)\n```\nRemoves data at specified index.\n\n## Properties\n\n### Market\n```csharp\npublic MarketDetails Market\n```\nReturns MarketDetails instance with market information.\n\n### Scale\n```csharp\npublic HistoryScale Scale\n```\nScale of the data being represented.\n\n### SecurityName\n```csharp\npublic string SecurityName\n```\nSecurity name if available (e.g., \"Apple, Inc.\").\n\n### Symbol\n"
    }
  },
  {
    "pageContent": "ing fileName)\n```\nWrites BarHistory to binary file in Wealth-Lab 8 format.\n\n### RemoveAt\n```csharp\npublic void RemoveAt(int idx)\n```\nRemoves data at specified index.\n\n## Properties\n\n### Market\n```csharp\npublic MarketDetails Market\n```\nReturns MarketDetails instance with market information.\n\n### Scale\n```csharp\npublic HistoryScale Scale\n```\nScale of the data being represented.\n\n### SecurityName\n```csharp\npublic string SecurityName\n```\nSecurity name if available (e.g., \"Apple, Inc.\").\n\n### Symbol\n\n\n```csharp\npublic string Symbol\n\n```",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": "code-context-47",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public TimeSpan TimeSpan\n",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": "code-48",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "``csharp\npublic void RemoveAt(int idx)\n```\nRemoves data at specified index.\n\n## Properties\n\n### Market\n```csharp\npublic MarketDetails Market\n```\nReturns MarketDetails instance with market information.\n\n### Scale\n```csharp\npublic HistoryScale Scale\n```\nScale of the data being represented.\n\n### SecurityName\n```csharp\npublic string SecurityName\n```\nSecurity name if available (e.g., \"Apple, Inc.\").\n\n### Symbol\n```csharp\npublic string Symbol\n```\nSymbol being represented (e.g., \"MSFT\").\n\n### TimeSpan\n"
    }
  },
  {
    "pageContent": "``csharp\npublic void RemoveAt(int idx)\n```\nRemoves data at specified index.\n\n## Properties\n\n### Market\n```csharp\npublic MarketDetails Market\n```\nReturns MarketDetails instance with market information.\n\n### Scale\n```csharp\npublic HistoryScale Scale\n```\nScale of the data being represented.\n\n### SecurityName\n```csharp\npublic string SecurityName\n```\nSecurity name if available (e.g., \"Apple, Inc.\").\n\n### Symbol\n```csharp\npublic string Symbol\n```\nSymbol being represented (e.g., \"MSFT\").\n\n### TimeSpan\n\n\n```csharp\npublic TimeSpan TimeSpan\n\n```",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": "code-context-48",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public object UserData\n",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": "code-49",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "csharp\npublic MarketDetails Market\n```\nReturns MarketDetails instance with market information.\n\n### Scale\n```csharp\npublic HistoryScale Scale\n```\nScale of the data being represented.\n\n### SecurityName\n```csharp\npublic string SecurityName\n```\nSecurity name if available (e.g., \"Apple, Inc.\").\n\n### Symbol\n```csharp\npublic string Symbol\n```\nSymbol being represented (e.g., \"MSFT\").\n\n### TimeSpan\n```csharp\npublic TimeSpan TimeSpan\n```\nTimeSpan encompassing DateTimes range.\n\n## User Data\n\n### UserData\n"
    }
  },
  {
    "pageContent": "csharp\npublic MarketDetails Market\n```\nReturns MarketDetails instance with market information.\n\n### Scale\n```csharp\npublic HistoryScale Scale\n```\nScale of the data being represented.\n\n### SecurityName\n```csharp\npublic string SecurityName\n```\nSecurity name if available (e.g., \"Apple, Inc.\").\n\n### Symbol\n```csharp\npublic string Symbol\n```\nSymbol being represented (e.g., \"MSFT\").\n\n### TimeSpan\n```csharp\npublic TimeSpan TimeSpan\n```\nTimeSpan encompassing DateTimes range.\n\n## User Data\n\n### UserData\n\n\n```csharp\npublic object UserData\n\n```",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": "code-context-49",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public double UserDataAsInt\n",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": "code-50",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "public HistoryScale Scale\n```\nScale of the data being represented.\n\n### SecurityName\n```csharp\npublic string SecurityName\n```\nSecurity name if available (e.g., \"Apple, Inc.\").\n\n### Symbol\n```csharp\npublic string Symbol\n```\nSymbol being represented (e.g., \"MSFT\").\n\n### TimeSpan\n```csharp\npublic TimeSpan TimeSpan\n```\nTimeSpan encompassing DateTimes range.\n\n## User Data\n\n### UserData\n```csharp\npublic object UserData\n```\nStores ad-hoc data in BarHistory or TimeSeries instance.\n\n### UserDataAsDouble\n"
    }
  },
  {
    "pageContent": "public HistoryScale Scale\n```\nScale of the data being represented.\n\n### SecurityName\n```csharp\npublic string SecurityName\n```\nSecurity name if available (e.g., \"Apple, Inc.\").\n\n### Symbol\n```csharp\npublic string Symbol\n```\nSymbol being represented (e.g., \"MSFT\").\n\n### TimeSpan\n```csharp\npublic TimeSpan TimeSpan\n```\nTimeSpan encompassing DateTimes range.\n\n## User Data\n\n### UserData\n```csharp\npublic object UserData\n```\nStores ad-hoc data in BarHistory or TimeSeries instance.\n\n### UserDataAsDouble\n\n\n```csharp\npublic double UserDataAsInt\n\n```",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": "code-context-50",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public int UserDataAsInt\n",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": "code-51",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "csharp\npublic string SecurityName\n```\nSecurity name if available (e.g., \"Apple, Inc.\").\n\n### Symbol\n```csharp\npublic string Symbol\n```\nSymbol being represented (e.g., \"MSFT\").\n\n### TimeSpan\n```csharp\npublic TimeSpan TimeSpan\n```\nTimeSpan encompassing DateTimes range.\n\n## User Data\n\n### UserData\n```csharp\npublic object UserData\n```\nStores ad-hoc data in BarHistory or TimeSeries instance.\n\n### UserDataAsDouble\n```csharp\npublic double UserDataAsInt\n```\nAccess UserData as double.\n\n### UserDataAsInt\n"
    }
  },
  {
    "pageContent": "csharp\npublic string SecurityName\n```\nSecurity name if available (e.g., \"Apple, Inc.\").\n\n### Symbol\n```csharp\npublic string Symbol\n```\nSymbol being represented (e.g., \"MSFT\").\n\n### TimeSpan\n```csharp\npublic TimeSpan TimeSpan\n```\nTimeSpan encompassing DateTimes range.\n\n## User Data\n\n### UserData\n```csharp\npublic object UserData\n```\nStores ad-hoc data in BarHistory or TimeSeries instance.\n\n### UserDataAsDouble\n```csharp\npublic double UserDataAsInt\n```\nAccess UserData as double.\n\n### UserDataAsInt\n\n\n```csharp\npublic int UserDataAsInt\n\n```",
    "metadata": {
      "id": "barhistory",
      "title": "barhistory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/barhistory.md",
      "chunkIndex": "code-context-51",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "# BrokerAccount Class\n\n**Namespace:** WealthLab.Backtest  \n**Parent:** Object\n\nRepresents an account associated with a connected broker.\n\n## Constructors\n\n",
    "metadata": {
      "id": "broker-account",
      "title": "broker-account",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/broker-account.md",
      "chunkIndex": 0,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nPass the associated BrokerBase instance when creating BrokerAccount instances.\n\n## Derived Properties\n\n### PositionsProfit\n",
    "metadata": {
      "id": "broker-account",
      "title": "broker-account",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/broker-account.md",
      "chunkIndex": 1,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the total profit of the positions in the Positions List, based on their Quantity and CurrentPrice.\n\n### PositionsProfitPct\n",
    "metadata": {
      "id": "broker-account",
      "title": "broker-account",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/broker-account.md",
      "chunkIndex": 2,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the total percentage profit of the positions in the Positions List, based on their Quantity and CurrentPrice.\n\n### PositionsValue\n",
    "metadata": {
      "id": "broker-account",
      "title": "broker-account",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/broker-account.md",
      "chunkIndex": 3,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the total value of the positions in the Positions List, based on their Quantity and CurrentPrice.\n\n## Members\n\n### AccountID\n",
    "metadata": {
      "id": "broker-account",
      "title": "broker-account",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/broker-account.md",
      "chunkIndex": 4,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the account number, or identifier, associated with this account.\n\n### AccountValue\n",
    "metadata": {
      "id": "broker-account",
      "title": "broker-account",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/broker-account.md",
      "chunkIndex": 5,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nRepresents the overall account balance, or value. If the Broker does not have a value that maps cleanly to AccountValue, leave it unassigned and use the CustomFields property to display Broker-specific information.\n\n### Broker\n",
    "metadata": {
      "id": "broker-account",
      "title": "broker-account",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/broker-account.md",
      "chunkIndex": 6,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the BrokerBase instance associated with the account.\n\n### BuyingPower\n",
    "metadata": {
      "id": "broker-account",
      "title": "broker-account",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/broker-account.md",
      "chunkIndex": 7,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nRepresents the current buying power available in the account. If the Broker does not have a value that maps cleanly to BuyingPower, leave it unassigned and use the CustomFields property to display Broker-specific information.\n\n### Cash\n",
    "metadata": {
      "id": "broker-account",
      "title": "broker-account",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/broker-account.md",
      "chunkIndex": 8,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nRepresents the available cash balance in the account. If the Broker does not have a value that maps cleanly to Cash, leave it unassigned and use the CustomFields property to display Broker-specific information.\n\n### CurrencyBalances\n",
    "metadata": {
      "id": "broker-account",
      "title": "broker-account",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/broker-account.md",
      "chunkIndex": 9,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nSome Broker Providers populate this Dictionary with balance amounts per currency symbol in the account.\n\n### CustomFields\n",
    "metadata": {
      "id": "broker-account",
      "title": "broker-account",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/broker-account.md",
      "chunkIndex": 10,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nUse this property to assign any Broker-specific balances or fields that you wish displayed in WL8. These fields will display, along with AccountValue, Cash, and BuyingPower (if assigned) in the Accounts window.\n\n### GetCurrencyBalance\n",
    "metadata": {
      "id": "broker-account",
      "title": "broker-account",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/broker-account.md",
      "chunkIndex": 11,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the balance from the CurrencyBalances property for the corresponding currency symbol, or zero if the symbol is not contained in the Dictionary.\n\n### Positions\n",
    "metadata": {
      "id": "broker-account",
      "title": "broker-account",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/broker-account.md",
      "chunkIndex": 12,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nA List of BrokerPosition instances that represent the open positions held in the account. Create a BrokerPosition instance for each open position reported by the Broker and add it to this List.\n\n### SetCurrencyBalance\n",
    "metadata": {
      "id": "broker-account",
      "title": "broker-account",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/broker-account.md",
      "chunkIndex": 13,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nCall this method from within your Broker Provider to set a currency specific balance amount. If you pass zero, the corresponding currency symbol is removed from the CurrencyBalances property. ",
    "metadata": {
      "id": "broker-account",
      "title": "broker-account",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/broker-account.md",
      "chunkIndex": 14,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "public BrokerAccount(BrokerBase broker)\n",
    "metadata": {
      "id": "broker-account",
      "title": "broker-account",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/broker-account.md",
      "chunkIndex": "code-0",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "# BrokerAccount Class\n\n**Namespace:** WealthLab.Backtest  \n**Parent:** Object\n\nRepresents an account associated with a connected broker.\n\n## Constructors\n\n"
    }
  },
  {
    "pageContent": "# BrokerAccount Class\n\n**Namespace:** WealthLab.Backtest  \n**Parent:** Object\n\nRepresents an account associated with a connected broker.\n\n## Constructors\n\n\n\n```csharp\npublic BrokerAccount(BrokerBase broker)\n\n```",
    "metadata": {
      "id": "broker-account",
      "title": "broker-account",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/broker-account.md",
      "chunkIndex": "code-context-0",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public double PositionsProfit\n",
    "metadata": {
      "id": "broker-account",
      "title": "broker-account",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/broker-account.md",
      "chunkIndex": "code-1",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "# BrokerAccount Class\n\n**Namespace:** WealthLab.Backtest  \n**Parent:** Object\n\nRepresents an account associated with a connected broker.\n\n## Constructors\n\n```csharp\npublic BrokerAccount(BrokerBase broker)\n```\nPass the associated BrokerBase instance when creating BrokerAccount instances.\n\n## Derived Properties\n\n### PositionsProfit\n"
    }
  },
  {
    "pageContent": "# BrokerAccount Class\n\n**Namespace:** WealthLab.Backtest  \n**Parent:** Object\n\nRepresents an account associated with a connected broker.\n\n## Constructors\n\n```csharp\npublic BrokerAccount(BrokerBase broker)\n```\nPass the associated BrokerBase instance when creating BrokerAccount instances.\n\n## Derived Properties\n\n### PositionsProfit\n\n\n```csharp\npublic double PositionsProfit\n\n```",
    "metadata": {
      "id": "broker-account",
      "title": "broker-account",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/broker-account.md",
      "chunkIndex": "code-context-1",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public double PositionsProfitPct\n",
    "metadata": {
      "id": "broker-account",
      "title": "broker-account",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/broker-account.md",
      "chunkIndex": "code-2",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "rAccount Class\n\n**Namespace:** WealthLab.Backtest  \n**Parent:** Object\n\nRepresents an account associated with a connected broker.\n\n## Constructors\n\n```csharp\npublic BrokerAccount(BrokerBase broker)\n```\nPass the associated BrokerBase instance when creating BrokerAccount instances.\n\n## Derived Properties\n\n### PositionsProfit\n```csharp\npublic double PositionsProfit\n```\nReturns the total profit of the positions in the Positions List, based on their Quantity and CurrentPrice.\n\n### PositionsProfitPct\n"
    }
  },
  {
    "pageContent": "rAccount Class\n\n**Namespace:** WealthLab.Backtest  \n**Parent:** Object\n\nRepresents an account associated with a connected broker.\n\n## Constructors\n\n```csharp\npublic BrokerAccount(BrokerBase broker)\n```\nPass the associated BrokerBase instance when creating BrokerAccount instances.\n\n## Derived Properties\n\n### PositionsProfit\n```csharp\npublic double PositionsProfit\n```\nReturns the total profit of the positions in the Positions List, based on their Quantity and CurrentPrice.\n\n### PositionsProfitPct\n\n\n```csharp\npublic double PositionsProfitPct\n\n```",
    "metadata": {
      "id": "broker-account",
      "title": "broker-account",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/broker-account.md",
      "chunkIndex": "code-context-2",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public double PositionsValue\n",
    "metadata": {
      "id": "broker-account",
      "title": "broker-account",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/broker-account.md",
      "chunkIndex": "code-3",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "Base broker)\n```\nPass the associated BrokerBase instance when creating BrokerAccount instances.\n\n## Derived Properties\n\n### PositionsProfit\n```csharp\npublic double PositionsProfit\n```\nReturns the total profit of the positions in the Positions List, based on their Quantity and CurrentPrice.\n\n### PositionsProfitPct\n```csharp\npublic double PositionsProfitPct\n```\nReturns the total percentage profit of the positions in the Positions List, based on their Quantity and CurrentPrice.\n\n### PositionsValue\n"
    }
  },
  {
    "pageContent": "Base broker)\n```\nPass the associated BrokerBase instance when creating BrokerAccount instances.\n\n## Derived Properties\n\n### PositionsProfit\n```csharp\npublic double PositionsProfit\n```\nReturns the total profit of the positions in the Positions List, based on their Quantity and CurrentPrice.\n\n### PositionsProfitPct\n```csharp\npublic double PositionsProfitPct\n```\nReturns the total percentage profit of the positions in the Positions List, based on their Quantity and CurrentPrice.\n\n### PositionsValue\n\n\n```csharp\npublic double PositionsValue\n\n```",
    "metadata": {
      "id": "broker-account",
      "title": "broker-account",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/broker-account.md",
      "chunkIndex": "code-context-3",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public string AccountID\n",
    "metadata": {
      "id": "broker-account",
      "title": "broker-account",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/broker-account.md",
      "chunkIndex": "code-4",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "fit\n```\nReturns the total profit of the positions in the Positions List, based on their Quantity and CurrentPrice.\n\n### PositionsProfitPct\n```csharp\npublic double PositionsProfitPct\n```\nReturns the total percentage profit of the positions in the Positions List, based on their Quantity and CurrentPrice.\n\n### PositionsValue\n```csharp\npublic double PositionsValue\n```\nReturns the total value of the positions in the Positions List, based on their Quantity and CurrentPrice.\n\n## Members\n\n### AccountID\n"
    }
  },
  {
    "pageContent": "fit\n```\nReturns the total profit of the positions in the Positions List, based on their Quantity and CurrentPrice.\n\n### PositionsProfitPct\n```csharp\npublic double PositionsProfitPct\n```\nReturns the total percentage profit of the positions in the Positions List, based on their Quantity and CurrentPrice.\n\n### PositionsValue\n```csharp\npublic double PositionsValue\n```\nReturns the total value of the positions in the Positions List, based on their Quantity and CurrentPrice.\n\n## Members\n\n### AccountID\n\n\n```csharp\npublic string AccountID\n\n```",
    "metadata": {
      "id": "broker-account",
      "title": "broker-account",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/broker-account.md",
      "chunkIndex": "code-context-4",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public double AccountValue\n",
    "metadata": {
      "id": "broker-account",
      "title": "broker-account",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/broker-account.md",
      "chunkIndex": "code-5",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ProfitPct\n```csharp\npublic double PositionsProfitPct\n```\nReturns the total percentage profit of the positions in the Positions List, based on their Quantity and CurrentPrice.\n\n### PositionsValue\n```csharp\npublic double PositionsValue\n```\nReturns the total value of the positions in the Positions List, based on their Quantity and CurrentPrice.\n\n## Members\n\n### AccountID\n```csharp\npublic string AccountID\n```\nReturns the account number, or identifier, associated with this account.\n\n### AccountValue\n"
    }
  },
  {
    "pageContent": "ProfitPct\n```csharp\npublic double PositionsProfitPct\n```\nReturns the total percentage profit of the positions in the Positions List, based on their Quantity and CurrentPrice.\n\n### PositionsValue\n```csharp\npublic double PositionsValue\n```\nReturns the total value of the positions in the Positions List, based on their Quantity and CurrentPrice.\n\n## Members\n\n### AccountID\n```csharp\npublic string AccountID\n```\nReturns the account number, or identifier, associated with this account.\n\n### AccountValue\n\n\n```csharp\npublic double AccountValue\n\n```",
    "metadata": {
      "id": "broker-account",
      "title": "broker-account",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/broker-account.md",
      "chunkIndex": "code-context-5",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public BrokerBase Broker\n",
    "metadata": {
      "id": "broker-account",
      "title": "broker-account",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/broker-account.md",
      "chunkIndex": "code-6",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": " positions in the Positions List, based on their Quantity and CurrentPrice.\n\n## Members\n\n### AccountID\n```csharp\npublic string AccountID\n```\nReturns the account number, or identifier, associated with this account.\n\n### AccountValue\n```csharp\npublic double AccountValue\n```\nRepresents the overall account balance, or value. If the Broker does not have a value that maps cleanly to AccountValue, leave it unassigned and use the CustomFields property to display Broker-specific information.\n\n### Broker\n"
    }
  },
  {
    "pageContent": " positions in the Positions List, based on their Quantity and CurrentPrice.\n\n## Members\n\n### AccountID\n```csharp\npublic string AccountID\n```\nReturns the account number, or identifier, associated with this account.\n\n### AccountValue\n```csharp\npublic double AccountValue\n```\nRepresents the overall account balance, or value. If the Broker does not have a value that maps cleanly to AccountValue, leave it unassigned and use the CustomFields property to display Broker-specific information.\n\n### Broker\n\n\n```csharp\npublic BrokerBase Broker\n\n```",
    "metadata": {
      "id": "broker-account",
      "title": "broker-account",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/broker-account.md",
      "chunkIndex": "code-context-6",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public double BuyingPower\n",
    "metadata": {
      "id": "broker-account",
      "title": "broker-account",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/broker-account.md",
      "chunkIndex": "code-7",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ic string AccountID\n```\nReturns the account number, or identifier, associated with this account.\n\n### AccountValue\n```csharp\npublic double AccountValue\n```\nRepresents the overall account balance, or value. If the Broker does not have a value that maps cleanly to AccountValue, leave it unassigned and use the CustomFields property to display Broker-specific information.\n\n### Broker\n```csharp\npublic BrokerBase Broker\n```\nReturns the BrokerBase instance associated with the account.\n\n### BuyingPower\n"
    }
  },
  {
    "pageContent": "ic string AccountID\n```\nReturns the account number, or identifier, associated with this account.\n\n### AccountValue\n```csharp\npublic double AccountValue\n```\nRepresents the overall account balance, or value. If the Broker does not have a value that maps cleanly to AccountValue, leave it unassigned and use the CustomFields property to display Broker-specific information.\n\n### Broker\n```csharp\npublic BrokerBase Broker\n```\nReturns the BrokerBase instance associated with the account.\n\n### BuyingPower\n\n\n```csharp\npublic double BuyingPower\n\n```",
    "metadata": {
      "id": "broker-account",
      "title": "broker-account",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/broker-account.md",
      "chunkIndex": "code-context-7",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public double Cash\n",
    "metadata": {
      "id": "broker-account",
      "title": "broker-account",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/broker-account.md",
      "chunkIndex": "code-8",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": " leave it unassigned and use the CustomFields property to display Broker-specific information.\n\n### Broker\n```csharp\npublic BrokerBase Broker\n```\nReturns the BrokerBase instance associated with the account.\n\n### BuyingPower\n```csharp\npublic double BuyingPower\n```\nRepresents the current buying power available in the account. If the Broker does not have a value that maps cleanly to BuyingPower, leave it unassigned and use the CustomFields property to display Broker-specific information.\n\n### Cash\n"
    }
  },
  {
    "pageContent": " leave it unassigned and use the CustomFields property to display Broker-specific information.\n\n### Broker\n```csharp\npublic BrokerBase Broker\n```\nReturns the BrokerBase instance associated with the account.\n\n### BuyingPower\n```csharp\npublic double BuyingPower\n```\nRepresents the current buying power available in the account. If the Broker does not have a value that maps cleanly to BuyingPower, leave it unassigned and use the CustomFields property to display Broker-specific information.\n\n### Cash\n\n\n```csharp\npublic double Cash\n\n```",
    "metadata": {
      "id": "broker-account",
      "title": "broker-account",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/broker-account.md",
      "chunkIndex": "code-context-8",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public Dictionary<string, double> CurrencyBalances\n",
    "metadata": {
      "id": "broker-account",
      "title": "broker-account",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/broker-account.md",
      "chunkIndex": "code-9",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "presents the current buying power available in the account. If the Broker does not have a value that maps cleanly to BuyingPower, leave it unassigned and use the CustomFields property to display Broker-specific information.\n\n### Cash\n```csharp\npublic double Cash\n```\nRepresents the available cash balance in the account. If the Broker does not have a value that maps cleanly to Cash, leave it unassigned and use the CustomFields property to display Broker-specific information.\n\n### CurrencyBalances\n"
    }
  },
  {
    "pageContent": "presents the current buying power available in the account. If the Broker does not have a value that maps cleanly to BuyingPower, leave it unassigned and use the CustomFields property to display Broker-specific information.\n\n### Cash\n```csharp\npublic double Cash\n```\nRepresents the available cash balance in the account. If the Broker does not have a value that maps cleanly to Cash, leave it unassigned and use the CustomFields property to display Broker-specific information.\n\n### CurrencyBalances\n\n\n```csharp\npublic Dictionary<string, double> CurrencyBalances\n\n```",
    "metadata": {
      "id": "broker-account",
      "title": "broker-account",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/broker-account.md",
      "chunkIndex": "code-context-9",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public Dictionary<string, string> CustomFields\n",
    "metadata": {
      "id": "broker-account",
      "title": "broker-account",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/broker-account.md",
      "chunkIndex": "code-10",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "display Broker-specific information.\n\n### Cash\n```csharp\npublic double Cash\n```\nRepresents the available cash balance in the account. If the Broker does not have a value that maps cleanly to Cash, leave it unassigned and use the CustomFields property to display Broker-specific information.\n\n### CurrencyBalances\n```csharp\npublic Dictionary<string, double> CurrencyBalances\n```\nSome Broker Providers populate this Dictionary with balance amounts per currency symbol in the account.\n\n### CustomFields\n"
    }
  },
  {
    "pageContent": "display Broker-specific information.\n\n### Cash\n```csharp\npublic double Cash\n```\nRepresents the available cash balance in the account. If the Broker does not have a value that maps cleanly to Cash, leave it unassigned and use the CustomFields property to display Broker-specific information.\n\n### CurrencyBalances\n```csharp\npublic Dictionary<string, double> CurrencyBalances\n```\nSome Broker Providers populate this Dictionary with balance amounts per currency symbol in the account.\n\n### CustomFields\n\n\n```csharp\npublic Dictionary<string, string> CustomFields\n\n```",
    "metadata": {
      "id": "broker-account",
      "title": "broker-account",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/broker-account.md",
      "chunkIndex": "code-context-10",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public double GetCurrencyBalance(string symbol)\n",
    "metadata": {
      "id": "broker-account",
      "title": "broker-account",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/broker-account.md",
      "chunkIndex": "code-11",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "CurrencyBalances\n```csharp\npublic Dictionary<string, double> CurrencyBalances\n```\nSome Broker Providers populate this Dictionary with balance amounts per currency symbol in the account.\n\n### CustomFields\n```csharp\npublic Dictionary<string, string> CustomFields\n```\nUse this property to assign any Broker-specific balances or fields that you wish displayed in WL8. These fields will display, along with AccountValue, Cash, and BuyingPower (if assigned) in the Accounts window.\n\n### GetCurrencyBalance\n"
    }
  },
  {
    "pageContent": "CurrencyBalances\n```csharp\npublic Dictionary<string, double> CurrencyBalances\n```\nSome Broker Providers populate this Dictionary with balance amounts per currency symbol in the account.\n\n### CustomFields\n```csharp\npublic Dictionary<string, string> CustomFields\n```\nUse this property to assign any Broker-specific balances or fields that you wish displayed in WL8. These fields will display, along with AccountValue, Cash, and BuyingPower (if assigned) in the Accounts window.\n\n### GetCurrencyBalance\n\n\n```csharp\npublic double GetCurrencyBalance(string symbol)\n\n```",
    "metadata": {
      "id": "broker-account",
      "title": "broker-account",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/broker-account.md",
      "chunkIndex": "code-context-11",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public List<BrokerPosition> Positions\n",
    "metadata": {
      "id": "broker-account",
      "title": "broker-account",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/broker-account.md",
      "chunkIndex": "code-12",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ry<string, string> CustomFields\n```\nUse this property to assign any Broker-specific balances or fields that you wish displayed in WL8. These fields will display, along with AccountValue, Cash, and BuyingPower (if assigned) in the Accounts window.\n\n### GetCurrencyBalance\n```csharp\npublic double GetCurrencyBalance(string symbol)\n```\nReturns the balance from the CurrencyBalances property for the corresponding currency symbol, or zero if the symbol is not contained in the Dictionary.\n\n### Positions\n"
    }
  },
  {
    "pageContent": "ry<string, string> CustomFields\n```\nUse this property to assign any Broker-specific balances or fields that you wish displayed in WL8. These fields will display, along with AccountValue, Cash, and BuyingPower (if assigned) in the Accounts window.\n\n### GetCurrencyBalance\n```csharp\npublic double GetCurrencyBalance(string symbol)\n```\nReturns the balance from the CurrencyBalances property for the corresponding currency symbol, or zero if the symbol is not contained in the Dictionary.\n\n### Positions\n\n\n```csharp\npublic List<BrokerPosition> Positions\n\n```",
    "metadata": {
      "id": "broker-account",
      "title": "broker-account",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/broker-account.md",
      "chunkIndex": "code-context-12",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public void SetCurrencyBalance(string symbol, double value)\n",
    "metadata": {
      "id": "broker-account",
      "title": "broker-account",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/broker-account.md",
      "chunkIndex": "code-13",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "\n```csharp\npublic double GetCurrencyBalance(string symbol)\n```\nReturns the balance from the CurrencyBalances property for the corresponding currency symbol, or zero if the symbol is not contained in the Dictionary.\n\n### Positions\n```csharp\npublic List<BrokerPosition> Positions\n```\nA List of BrokerPosition instances that represent the open positions held in the account. Create a BrokerPosition instance for each open position reported by the Broker and add it to this List.\n\n### SetCurrencyBalance\n"
    }
  },
  {
    "pageContent": "\n```csharp\npublic double GetCurrencyBalance(string symbol)\n```\nReturns the balance from the CurrencyBalances property for the corresponding currency symbol, or zero if the symbol is not contained in the Dictionary.\n\n### Positions\n```csharp\npublic List<BrokerPosition> Positions\n```\nA List of BrokerPosition instances that represent the open positions held in the account. Create a BrokerPosition instance for each open position reported by the Broker and add it to this List.\n\n### SetCurrencyBalance\n\n\n```csharp\npublic void SetCurrencyBalance(string symbol, double value)\n\n```",
    "metadata": {
      "id": "broker-account",
      "title": "broker-account",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/broker-account.md",
      "chunkIndex": "code-context-13",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "# BrokerPosition Class\n\n**Namespace:** WealthLab.Backtest  \n**Parent:** Object\n\nRepresents an open position held in the associated Broker account.\n\n## Constructors\n\n",
    "metadata": {
      "id": "broker-position",
      "title": "broker-position",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/broker-position.md",
      "chunkIndex": 0,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nPass the associated BrokerAccount instance when creating a new instance.\n\n## Derived Properties\n\n### Profit\n",
    "metadata": {
      "id": "broker-position",
      "title": "broker-position",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/broker-position.md",
      "chunkIndex": 1,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the current profit of the position, based on its CurrentPrice, BasisPrice, and Quantity.\n\n### ProfitPct\n",
    "metadata": {
      "id": "broker-position",
      "title": "broker-position",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/broker-position.md",
      "chunkIndex": 2,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the current percentage profit of the position, based on its CurrentPrice and BasisPrice.\n\n### Value\n",
    "metadata": {
      "id": "broker-position",
      "title": "broker-position",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/broker-position.md",
      "chunkIndex": 3,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the current value of the position, based on its CurrentPrice and Quantity.\n\n## Members\n\n### Account\n",
    "metadata": {
      "id": "broker-position",
      "title": "broker-position",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/broker-position.md",
      "chunkIndex": 4,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nThe BrokerAccount associated with this position.\n\n### BasisPrice\n",
    "metadata": {
      "id": "broker-position",
      "title": "broker-position",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/broker-position.md",
      "chunkIndex": 5,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nThe original basis price of the position, or the price at which the shares/contracts were originally acquired.\n\n### CurrentPrice\n",
    "metadata": {
      "id": "broker-position",
      "title": "broker-position",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/broker-position.md",
      "chunkIndex": 6,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nThe most recent price of the underlying position's Symbol, as reported by the broker.\n\n### PositionType\n",
    "metadata": {
      "id": "broker-position",
      "title": "broker-position",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/broker-position.md",
      "chunkIndex": 7,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nThe position's type, either PositionType.Long or PositionType.Short.\n\n### Quantity\n",
    "metadata": {
      "id": "broker-position",
      "title": "broker-position",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/broker-position.md",
      "chunkIndex": 8,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nThe number of shares or contracts in the position.\n\n### Symbol\n",
    "metadata": {
      "id": "broker-position",
      "title": "broker-position",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/broker-position.md",
      "chunkIndex": 9,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nThe position's symbol. ",
    "metadata": {
      "id": "broker-position",
      "title": "broker-position",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/broker-position.md",
      "chunkIndex": 10,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "public BrokerPosition(BrokerAccount ba)\n",
    "metadata": {
      "id": "broker-position",
      "title": "broker-position",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/broker-position.md",
      "chunkIndex": "code-0",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "# BrokerPosition Class\n\n**Namespace:** WealthLab.Backtest  \n**Parent:** Object\n\nRepresents an open position held in the associated Broker account.\n\n## Constructors\n\n"
    }
  },
  {
    "pageContent": "# BrokerPosition Class\n\n**Namespace:** WealthLab.Backtest  \n**Parent:** Object\n\nRepresents an open position held in the associated Broker account.\n\n## Constructors\n\n\n\n```csharp\npublic BrokerPosition(BrokerAccount ba)\n\n```",
    "metadata": {
      "id": "broker-position",
      "title": "broker-position",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/broker-position.md",
      "chunkIndex": "code-context-0",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public double Profit\n",
    "metadata": {
      "id": "broker-position",
      "title": "broker-position",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/broker-position.md",
      "chunkIndex": "code-1",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "# BrokerPosition Class\n\n**Namespace:** WealthLab.Backtest  \n**Parent:** Object\n\nRepresents an open position held in the associated Broker account.\n\n## Constructors\n\n```csharp\npublic BrokerPosition(BrokerAccount ba)\n```\nPass the associated BrokerAccount instance when creating a new instance.\n\n## Derived Properties\n\n### Profit\n"
    }
  },
  {
    "pageContent": "# BrokerPosition Class\n\n**Namespace:** WealthLab.Backtest  \n**Parent:** Object\n\nRepresents an open position held in the associated Broker account.\n\n## Constructors\n\n```csharp\npublic BrokerPosition(BrokerAccount ba)\n```\nPass the associated BrokerAccount instance when creating a new instance.\n\n## Derived Properties\n\n### Profit\n\n\n```csharp\npublic double Profit\n\n```",
    "metadata": {
      "id": "broker-position",
      "title": "broker-position",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/broker-position.md",
      "chunkIndex": "code-context-1",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public double ProfitPct\n",
    "metadata": {
      "id": "broker-position",
      "title": "broker-position",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/broker-position.md",
      "chunkIndex": "code-2",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "# BrokerPosition Class\n\n**Namespace:** WealthLab.Backtest  \n**Parent:** Object\n\nRepresents an open position held in the associated Broker account.\n\n## Constructors\n\n```csharp\npublic BrokerPosition(BrokerAccount ba)\n```\nPass the associated BrokerAccount instance when creating a new instance.\n\n## Derived Properties\n\n### Profit\n```csharp\npublic double Profit\n```\nReturns the current profit of the position, based on its CurrentPrice, BasisPrice, and Quantity.\n\n### ProfitPct\n"
    }
  },
  {
    "pageContent": "# BrokerPosition Class\n\n**Namespace:** WealthLab.Backtest  \n**Parent:** Object\n\nRepresents an open position held in the associated Broker account.\n\n## Constructors\n\n```csharp\npublic BrokerPosition(BrokerAccount ba)\n```\nPass the associated BrokerAccount instance when creating a new instance.\n\n## Derived Properties\n\n### Profit\n```csharp\npublic double Profit\n```\nReturns the current profit of the position, based on its CurrentPrice, BasisPrice, and Quantity.\n\n### ProfitPct\n\n\n```csharp\npublic double ProfitPct\n\n```",
    "metadata": {
      "id": "broker-position",
      "title": "broker-position",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/broker-position.md",
      "chunkIndex": "code-context-2",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public double Value\n",
    "metadata": {
      "id": "broker-position",
      "title": "broker-position",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/broker-position.md",
      "chunkIndex": "code-3",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "associated Broker account.\n\n## Constructors\n\n```csharp\npublic BrokerPosition(BrokerAccount ba)\n```\nPass the associated BrokerAccount instance when creating a new instance.\n\n## Derived Properties\n\n### Profit\n```csharp\npublic double Profit\n```\nReturns the current profit of the position, based on its CurrentPrice, BasisPrice, and Quantity.\n\n### ProfitPct\n```csharp\npublic double ProfitPct\n```\nReturns the current percentage profit of the position, based on its CurrentPrice and BasisPrice.\n\n### Value\n"
    }
  },
  {
    "pageContent": "associated Broker account.\n\n## Constructors\n\n```csharp\npublic BrokerPosition(BrokerAccount ba)\n```\nPass the associated BrokerAccount instance when creating a new instance.\n\n## Derived Properties\n\n### Profit\n```csharp\npublic double Profit\n```\nReturns the current profit of the position, based on its CurrentPrice, BasisPrice, and Quantity.\n\n### ProfitPct\n```csharp\npublic double ProfitPct\n```\nReturns the current percentage profit of the position, based on its CurrentPrice and BasisPrice.\n\n### Value\n\n\n```csharp\npublic double Value\n\n```",
    "metadata": {
      "id": "broker-position",
      "title": "broker-position",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/broker-position.md",
      "chunkIndex": "code-context-3",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public BrokerAccount Account\n",
    "metadata": {
      "id": "broker-position",
      "title": "broker-position",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/broker-position.md",
      "chunkIndex": "code-4",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "when creating a new instance.\n\n## Derived Properties\n\n### Profit\n```csharp\npublic double Profit\n```\nReturns the current profit of the position, based on its CurrentPrice, BasisPrice, and Quantity.\n\n### ProfitPct\n```csharp\npublic double ProfitPct\n```\nReturns the current percentage profit of the position, based on its CurrentPrice and BasisPrice.\n\n### Value\n```csharp\npublic double Value\n```\nReturns the current value of the position, based on its CurrentPrice and Quantity.\n\n## Members\n\n### Account\n"
    }
  },
  {
    "pageContent": "when creating a new instance.\n\n## Derived Properties\n\n### Profit\n```csharp\npublic double Profit\n```\nReturns the current profit of the position, based on its CurrentPrice, BasisPrice, and Quantity.\n\n### ProfitPct\n```csharp\npublic double ProfitPct\n```\nReturns the current percentage profit of the position, based on its CurrentPrice and BasisPrice.\n\n### Value\n```csharp\npublic double Value\n```\nReturns the current value of the position, based on its CurrentPrice and Quantity.\n\n## Members\n\n### Account\n\n\n```csharp\npublic BrokerAccount Account\n\n```",
    "metadata": {
      "id": "broker-position",
      "title": "broker-position",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/broker-position.md",
      "chunkIndex": "code-context-4",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public double BasisPrice\n",
    "metadata": {
      "id": "broker-position",
      "title": "broker-position",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/broker-position.md",
      "chunkIndex": "code-5",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "the current profit of the position, based on its CurrentPrice, BasisPrice, and Quantity.\n\n### ProfitPct\n```csharp\npublic double ProfitPct\n```\nReturns the current percentage profit of the position, based on its CurrentPrice and BasisPrice.\n\n### Value\n```csharp\npublic double Value\n```\nReturns the current value of the position, based on its CurrentPrice and Quantity.\n\n## Members\n\n### Account\n```csharp\npublic BrokerAccount Account\n```\nThe BrokerAccount associated with this position.\n\n### BasisPrice\n"
    }
  },
  {
    "pageContent": "the current profit of the position, based on its CurrentPrice, BasisPrice, and Quantity.\n\n### ProfitPct\n```csharp\npublic double ProfitPct\n```\nReturns the current percentage profit of the position, based on its CurrentPrice and BasisPrice.\n\n### Value\n```csharp\npublic double Value\n```\nReturns the current value of the position, based on its CurrentPrice and Quantity.\n\n## Members\n\n### Account\n```csharp\npublic BrokerAccount Account\n```\nThe BrokerAccount associated with this position.\n\n### BasisPrice\n\n\n```csharp\npublic double BasisPrice\n\n```",
    "metadata": {
      "id": "broker-position",
      "title": "broker-position",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/broker-position.md",
      "chunkIndex": "code-context-5",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public double CurrentPrice\n",
    "metadata": {
      "id": "broker-position",
      "title": "broker-position",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/broker-position.md",
      "chunkIndex": "code-6",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "tage profit of the position, based on its CurrentPrice and BasisPrice.\n\n### Value\n```csharp\npublic double Value\n```\nReturns the current value of the position, based on its CurrentPrice and Quantity.\n\n## Members\n\n### Account\n```csharp\npublic BrokerAccount Account\n```\nThe BrokerAccount associated with this position.\n\n### BasisPrice\n```csharp\npublic double BasisPrice\n```\nThe original basis price of the position, or the price at which the shares/contracts were originally acquired.\n\n### CurrentPrice\n"
    }
  },
  {
    "pageContent": "tage profit of the position, based on its CurrentPrice and BasisPrice.\n\n### Value\n```csharp\npublic double Value\n```\nReturns the current value of the position, based on its CurrentPrice and Quantity.\n\n## Members\n\n### Account\n```csharp\npublic BrokerAccount Account\n```\nThe BrokerAccount associated with this position.\n\n### BasisPrice\n```csharp\npublic double BasisPrice\n```\nThe original basis price of the position, or the price at which the shares/contracts were originally acquired.\n\n### CurrentPrice\n\n\n```csharp\npublic double CurrentPrice\n\n```",
    "metadata": {
      "id": "broker-position",
      "title": "broker-position",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/broker-position.md",
      "chunkIndex": "code-context-6",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public PositionType PositionType\n",
    "metadata": {
      "id": "broker-position",
      "title": "broker-position",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/broker-position.md",
      "chunkIndex": "code-7",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "the position, based on its CurrentPrice and Quantity.\n\n## Members\n\n### Account\n```csharp\npublic BrokerAccount Account\n```\nThe BrokerAccount associated with this position.\n\n### BasisPrice\n```csharp\npublic double BasisPrice\n```\nThe original basis price of the position, or the price at which the shares/contracts were originally acquired.\n\n### CurrentPrice\n```csharp\npublic double CurrentPrice\n```\nThe most recent price of the underlying position's Symbol, as reported by the broker.\n\n### PositionType\n"
    }
  },
  {
    "pageContent": "the position, based on its CurrentPrice and Quantity.\n\n## Members\n\n### Account\n```csharp\npublic BrokerAccount Account\n```\nThe BrokerAccount associated with this position.\n\n### BasisPrice\n```csharp\npublic double BasisPrice\n```\nThe original basis price of the position, or the price at which the shares/contracts were originally acquired.\n\n### CurrentPrice\n```csharp\npublic double CurrentPrice\n```\nThe most recent price of the underlying position's Symbol, as reported by the broker.\n\n### PositionType\n\n\n```csharp\npublic PositionType PositionType\n\n```",
    "metadata": {
      "id": "broker-position",
      "title": "broker-position",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/broker-position.md",
      "chunkIndex": "code-context-7",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public double Quantity\n",
    "metadata": {
      "id": "broker-position",
      "title": "broker-position",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/broker-position.md",
      "chunkIndex": "code-8",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "erAccount associated with this position.\n\n### BasisPrice\n```csharp\npublic double BasisPrice\n```\nThe original basis price of the position, or the price at which the shares/contracts were originally acquired.\n\n### CurrentPrice\n```csharp\npublic double CurrentPrice\n```\nThe most recent price of the underlying position's Symbol, as reported by the broker.\n\n### PositionType\n```csharp\npublic PositionType PositionType\n```\nThe position's type, either PositionType.Long or PositionType.Short.\n\n### Quantity\n"
    }
  },
  {
    "pageContent": "erAccount associated with this position.\n\n### BasisPrice\n```csharp\npublic double BasisPrice\n```\nThe original basis price of the position, or the price at which the shares/contracts were originally acquired.\n\n### CurrentPrice\n```csharp\npublic double CurrentPrice\n```\nThe most recent price of the underlying position's Symbol, as reported by the broker.\n\n### PositionType\n```csharp\npublic PositionType PositionType\n```\nThe position's type, either PositionType.Long or PositionType.Short.\n\n### Quantity\n\n\n```csharp\npublic double Quantity\n\n```",
    "metadata": {
      "id": "broker-position",
      "title": "broker-position",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/broker-position.md",
      "chunkIndex": "code-context-8",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public string Symbol\n",
    "metadata": {
      "id": "broker-position",
      "title": "broker-position",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/broker-position.md",
      "chunkIndex": "code-9",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "original basis price of the position, or the price at which the shares/contracts were originally acquired.\n\n### CurrentPrice\n```csharp\npublic double CurrentPrice\n```\nThe most recent price of the underlying position's Symbol, as reported by the broker.\n\n### PositionType\n```csharp\npublic PositionType PositionType\n```\nThe position's type, either PositionType.Long or PositionType.Short.\n\n### Quantity\n```csharp\npublic double Quantity\n```\nThe number of shares or contracts in the position.\n\n### Symbol\n"
    }
  },
  {
    "pageContent": "original basis price of the position, or the price at which the shares/contracts were originally acquired.\n\n### CurrentPrice\n```csharp\npublic double CurrentPrice\n```\nThe most recent price of the underlying position's Symbol, as reported by the broker.\n\n### PositionType\n```csharp\npublic PositionType PositionType\n```\nThe position's type, either PositionType.Long or PositionType.Short.\n\n### Quantity\n```csharp\npublic double Quantity\n```\nThe number of shares or contracts in the position.\n\n### Symbol\n\n\n```csharp\npublic string Symbol\n\n```",
    "metadata": {
      "id": "broker-position",
      "title": "broker-position",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/broker-position.md",
      "chunkIndex": "code-context-9",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "# ChartPreferences Class\n\n**Namespace:** WealthLab.ChartWPF  \n**Parent:** Object\n\nContains all of the properties of a visual chart theme, including colors and settings information.\n\n## Members\n\n### AdaptiveScaleStopLimit\n",
    "metadata": {
      "id": "chart-preferences",
      "title": "chart-preferences",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/chart-preferences.md",
      "chunkIndex": 0,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nWhen true, rescales y-axis to ensure stop/limit values are visible when plotted using PlotStopsAndLimits().\n\n### BarSpacing\n",
    "metadata": {
      "id": "chart-preferences",
      "title": "chart-preferences",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/chart-preferences.md",
      "chunkIndex": 1,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nThe spacing between bars in the chart, in pixels.\n\n### ChartStyleName\n",
    "metadata": {
      "id": "chart-preferences",
      "title": "chart-preferences",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/chart-preferences.md",
      "chunkIndex": 2,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nThe name of the chart style that should used for this theme, for example \"Bar\" or \"Candlestick\".\n\n### ChartStyleSettings\n",
    "metadata": {
      "id": "chart-preferences",
      "title": "chart-preferences",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/chart-preferences.md",
      "chunkIndex": 3,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nA ParameterList instance that contains the parameters that the user configured for the chart style specified in this theme (ChartStyleName property).\n\n### Clone\n",
    "metadata": {
      "id": "chart-preferences",
      "title": "chart-preferences",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/chart-preferences.md",
      "chunkIndex": 4,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nCreates a copy of the ChartPreferences instance.\n\n## Color Properties\n\n### ColorAxisBackground\n",
    "metadata": {
      "id": "chart-preferences",
      "title": "chart-preferences",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/chart-preferences.md",
      "chunkIndex": 5,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nThe color to use to render the background of the chart x and y axes.\n\n### ColorAxisLabels\n",
    "metadata": {
      "id": "chart-preferences",
      "title": "chart-preferences",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/chart-preferences.md",
      "chunkIndex": 6,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nThe color to use to render the text of the x and y axis labels in the chart.\n\n### ColorBackground\n",
    "metadata": {
      "id": "chart-preferences",
      "title": "chart-preferences",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/chart-preferences.md",
      "chunkIndex": 7,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nThe color to use to render the background of the chart.\n\n### ColorDownBar\n",
    "metadata": {
      "id": "chart-preferences",
      "title": "chart-preferences",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/chart-preferences.md",
      "chunkIndex": 8,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nThe color to use to render the bars on the chart whose closing price is less than their open price.\n\n### ColorGridlines\n",
    "metadata": {
      "id": "chart-preferences",
      "title": "chart-preferences",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/chart-preferences.md",
      "chunkIndex": 9,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nThe color to use to render the x and y axis grid lines on the chart.\n\n### ColorPaneSeparator\n",
    "metadata": {
      "id": "chart-preferences",
      "title": "chart-preferences",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/chart-preferences.md",
      "chunkIndex": 10,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nThe color to use to render the pane separators that appear between chart panes.\n\n### ColorUpBar\n",
    "metadata": {
      "id": "chart-preferences",
      "title": "chart-preferences",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/chart-preferences.md",
      "chunkIndex": 11,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nThe color to use to render the bars on the chart whose closing price is greater than or equal to their open price.\n\n### ColorWatermark\n",
    "metadata": {
      "id": "chart-preferences",
      "title": "chart-preferences",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/chart-preferences.md",
      "chunkIndex": 12,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nThe color to use to render the text of the watermark that displays the symbol and security name in the middle of the chart.\n\n### VerticalCursorColor\n",
    "metadata": {
      "id": "chart-preferences",
      "title": "chart-preferences",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/chart-preferences.md",
      "chunkIndex": 13,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nThe color to use to render the vertical and crosshair cursors in the chart.\n\n## Display Settings\n\n### DisplayEvents\n",
    "metadata": {
      "id": "chart-preferences",
      "title": "chart-preferences",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/chart-preferences.md",
      "chunkIndex": 14,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nDetermines whether glyph icons for event data, such as dividends and splits, are displayed in the chart.\n\n### LogScale\n",
    "metadata": {
      "id": "chart-preferences",
      "title": "chart-preferences",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/chart-preferences.md",
      "chunkIndex": 15,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nDetermines whether the y axis of the chart uses a logarithmic (true) or linear (false) scale.\n\n### Margin\n",
    "metadata": {
      "id": "chart-preferences",
      "title": "chart-preferences",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/chart-preferences.md",
      "chunkIndex": 16,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nThe number of pixels to reserve as top of bottom margins for the panes of the chart.\n\n### ShowVolumePane\n",
    "metadata": {
      "id": "chart-preferences",
      "title": "chart-preferences",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/chart-preferences.md",
      "chunkIndex": 17,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nControls whether or not the volume pane is displayed in the chart.\n\n## Utility Methods\n\n### MassageColor\n",
    "metadata": {
      "id": "chart-preferences",
      "title": "chart-preferences",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/chart-preferences.md",
      "chunkIndex": 18,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns a potentially modified version of the specified color that ensures it renders well in the chart's background color. ",
    "metadata": {
      "id": "chart-preferences",
      "title": "chart-preferences",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/chart-preferences.md",
      "chunkIndex": 19,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "public bool AdaptiveScaleStopLimit\n",
    "metadata": {
      "id": "chart-preferences",
      "title": "chart-preferences",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/chart-preferences.md",
      "chunkIndex": "code-0",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "# ChartPreferences Class\n\n**Namespace:** WealthLab.ChartWPF  \n**Parent:** Object\n\nContains all of the properties of a visual chart theme, including colors and settings information.\n\n## Members\n\n### AdaptiveScaleStopLimit\n"
    }
  },
  {
    "pageContent": "# ChartPreferences Class\n\n**Namespace:** WealthLab.ChartWPF  \n**Parent:** Object\n\nContains all of the properties of a visual chart theme, including colors and settings information.\n\n## Members\n\n### AdaptiveScaleStopLimit\n\n\n```csharp\npublic bool AdaptiveScaleStopLimit\n\n```",
    "metadata": {
      "id": "chart-preferences",
      "title": "chart-preferences",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/chart-preferences.md",
      "chunkIndex": "code-context-0",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public double BarSpacing\n",
    "metadata": {
      "id": "chart-preferences",
      "title": "chart-preferences",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/chart-preferences.md",
      "chunkIndex": "code-1",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "# ChartPreferences Class\n\n**Namespace:** WealthLab.ChartWPF  \n**Parent:** Object\n\nContains all of the properties of a visual chart theme, including colors and settings information.\n\n## Members\n\n### AdaptiveScaleStopLimit\n```csharp\npublic bool AdaptiveScaleStopLimit\n```\nWhen true, rescales y-axis to ensure stop/limit values are visible when plotted using PlotStopsAndLimits().\n\n### BarSpacing\n"
    }
  },
  {
    "pageContent": "# ChartPreferences Class\n\n**Namespace:** WealthLab.ChartWPF  \n**Parent:** Object\n\nContains all of the properties of a visual chart theme, including colors and settings information.\n\n## Members\n\n### AdaptiveScaleStopLimit\n```csharp\npublic bool AdaptiveScaleStopLimit\n```\nWhen true, rescales y-axis to ensure stop/limit values are visible when plotted using PlotStopsAndLimits().\n\n### BarSpacing\n\n\n```csharp\npublic double BarSpacing\n\n```",
    "metadata": {
      "id": "chart-preferences",
      "title": "chart-preferences",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/chart-preferences.md",
      "chunkIndex": "code-context-1",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public string ChartStyleName\n",
    "metadata": {
      "id": "chart-preferences",
      "title": "chart-preferences",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/chart-preferences.md",
      "chunkIndex": "code-2",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "hartPreferences Class\n\n**Namespace:** WealthLab.ChartWPF  \n**Parent:** Object\n\nContains all of the properties of a visual chart theme, including colors and settings information.\n\n## Members\n\n### AdaptiveScaleStopLimit\n```csharp\npublic bool AdaptiveScaleStopLimit\n```\nWhen true, rescales y-axis to ensure stop/limit values are visible when plotted using PlotStopsAndLimits().\n\n### BarSpacing\n```csharp\npublic double BarSpacing\n```\nThe spacing between bars in the chart, in pixels.\n\n### ChartStyleName\n"
    }
  },
  {
    "pageContent": "hartPreferences Class\n\n**Namespace:** WealthLab.ChartWPF  \n**Parent:** Object\n\nContains all of the properties of a visual chart theme, including colors and settings information.\n\n## Members\n\n### AdaptiveScaleStopLimit\n```csharp\npublic bool AdaptiveScaleStopLimit\n```\nWhen true, rescales y-axis to ensure stop/limit values are visible when plotted using PlotStopsAndLimits().\n\n### BarSpacing\n```csharp\npublic double BarSpacing\n```\nThe spacing between bars in the chart, in pixels.\n\n### ChartStyleName\n\n\n```csharp\npublic string ChartStyleName\n\n```",
    "metadata": {
      "id": "chart-preferences",
      "title": "chart-preferences",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/chart-preferences.md",
      "chunkIndex": "code-context-2",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public ParameterList ChartStyleSettings\n",
    "metadata": {
      "id": "chart-preferences",
      "title": "chart-preferences",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/chart-preferences.md",
      "chunkIndex": "code-3",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": " information.\n\n## Members\n\n### AdaptiveScaleStopLimit\n```csharp\npublic bool AdaptiveScaleStopLimit\n```\nWhen true, rescales y-axis to ensure stop/limit values are visible when plotted using PlotStopsAndLimits().\n\n### BarSpacing\n```csharp\npublic double BarSpacing\n```\nThe spacing between bars in the chart, in pixels.\n\n### ChartStyleName\n```csharp\npublic string ChartStyleName\n```\nThe name of the chart style that should used for this theme, for example \"Bar\" or \"Candlestick\".\n\n### ChartStyleSettings\n"
    }
  },
  {
    "pageContent": " information.\n\n## Members\n\n### AdaptiveScaleStopLimit\n```csharp\npublic bool AdaptiveScaleStopLimit\n```\nWhen true, rescales y-axis to ensure stop/limit values are visible when plotted using PlotStopsAndLimits().\n\n### BarSpacing\n```csharp\npublic double BarSpacing\n```\nThe spacing between bars in the chart, in pixels.\n\n### ChartStyleName\n```csharp\npublic string ChartStyleName\n```\nThe name of the chart style that should used for this theme, for example \"Bar\" or \"Candlestick\".\n\n### ChartStyleSettings\n\n\n```csharp\npublic ParameterList ChartStyleSettings\n\n```",
    "metadata": {
      "id": "chart-preferences",
      "title": "chart-preferences",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/chart-preferences.md",
      "chunkIndex": "code-context-3",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public ChartPreferences Clone()\n",
    "metadata": {
      "id": "chart-preferences",
      "title": "chart-preferences",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/chart-preferences.md",
      "chunkIndex": "code-4",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": " BarSpacing\n```csharp\npublic double BarSpacing\n```\nThe spacing between bars in the chart, in pixels.\n\n### ChartStyleName\n```csharp\npublic string ChartStyleName\n```\nThe name of the chart style that should used for this theme, for example \"Bar\" or \"Candlestick\".\n\n### ChartStyleSettings\n```csharp\npublic ParameterList ChartStyleSettings\n```\nA ParameterList instance that contains the parameters that the user configured for the chart style specified in this theme (ChartStyleName property).\n\n### Clone\n"
    }
  },
  {
    "pageContent": " BarSpacing\n```csharp\npublic double BarSpacing\n```\nThe spacing between bars in the chart, in pixels.\n\n### ChartStyleName\n```csharp\npublic string ChartStyleName\n```\nThe name of the chart style that should used for this theme, for example \"Bar\" or \"Candlestick\".\n\n### ChartStyleSettings\n```csharp\npublic ParameterList ChartStyleSettings\n```\nA ParameterList instance that contains the parameters that the user configured for the chart style specified in this theme (ChartStyleName property).\n\n### Clone\n\n\n```csharp\npublic ChartPreferences Clone()\n\n```",
    "metadata": {
      "id": "chart-preferences",
      "title": "chart-preferences",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/chart-preferences.md",
      "chunkIndex": "code-context-4",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public WLColor ColorAxisBackground\n",
    "metadata": {
      "id": "chart-preferences",
      "title": "chart-preferences",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/chart-preferences.md",
      "chunkIndex": "code-5",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ing ChartStyleName\n```\nThe name of the chart style that should used for this theme, for example \"Bar\" or \"Candlestick\".\n\n### ChartStyleSettings\n```csharp\npublic ParameterList ChartStyleSettings\n```\nA ParameterList instance that contains the parameters that the user configured for the chart style specified in this theme (ChartStyleName property).\n\n### Clone\n```csharp\npublic ChartPreferences Clone()\n```\nCreates a copy of the ChartPreferences instance.\n\n## Color Properties\n\n### ColorAxisBackground\n"
    }
  },
  {
    "pageContent": "ing ChartStyleName\n```\nThe name of the chart style that should used for this theme, for example \"Bar\" or \"Candlestick\".\n\n### ChartStyleSettings\n```csharp\npublic ParameterList ChartStyleSettings\n```\nA ParameterList instance that contains the parameters that the user configured for the chart style specified in this theme (ChartStyleName property).\n\n### Clone\n```csharp\npublic ChartPreferences Clone()\n```\nCreates a copy of the ChartPreferences instance.\n\n## Color Properties\n\n### ColorAxisBackground\n\n\n```csharp\npublic WLColor ColorAxisBackground\n\n```",
    "metadata": {
      "id": "chart-preferences",
      "title": "chart-preferences",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/chart-preferences.md",
      "chunkIndex": "code-context-5",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public WLColor ColorAxisLabels\n",
    "metadata": {
      "id": "chart-preferences",
      "title": "chart-preferences",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/chart-preferences.md",
      "chunkIndex": "code-6",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ings\n```csharp\npublic ParameterList ChartStyleSettings\n```\nA ParameterList instance that contains the parameters that the user configured for the chart style specified in this theme (ChartStyleName property).\n\n### Clone\n```csharp\npublic ChartPreferences Clone()\n```\nCreates a copy of the ChartPreferences instance.\n\n## Color Properties\n\n### ColorAxisBackground\n```csharp\npublic WLColor ColorAxisBackground\n```\nThe color to use to render the background of the chart x and y axes.\n\n### ColorAxisLabels\n"
    }
  },
  {
    "pageContent": "ings\n```csharp\npublic ParameterList ChartStyleSettings\n```\nA ParameterList instance that contains the parameters that the user configured for the chart style specified in this theme (ChartStyleName property).\n\n### Clone\n```csharp\npublic ChartPreferences Clone()\n```\nCreates a copy of the ChartPreferences instance.\n\n## Color Properties\n\n### ColorAxisBackground\n```csharp\npublic WLColor ColorAxisBackground\n```\nThe color to use to render the background of the chart x and y axes.\n\n### ColorAxisLabels\n\n\n```csharp\npublic WLColor ColorAxisLabels\n\n```",
    "metadata": {
      "id": "chart-preferences",
      "title": "chart-preferences",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/chart-preferences.md",
      "chunkIndex": "code-context-6",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public WLColor ColorBackground\n",
    "metadata": {
      "id": "chart-preferences",
      "title": "chart-preferences",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/chart-preferences.md",
      "chunkIndex": "code-7",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "he chart style specified in this theme (ChartStyleName property).\n\n### Clone\n```csharp\npublic ChartPreferences Clone()\n```\nCreates a copy of the ChartPreferences instance.\n\n## Color Properties\n\n### ColorAxisBackground\n```csharp\npublic WLColor ColorAxisBackground\n```\nThe color to use to render the background of the chart x and y axes.\n\n### ColorAxisLabels\n```csharp\npublic WLColor ColorAxisLabels\n```\nThe color to use to render the text of the x and y axis labels in the chart.\n\n### ColorBackground\n"
    }
  },
  {
    "pageContent": "he chart style specified in this theme (ChartStyleName property).\n\n### Clone\n```csharp\npublic ChartPreferences Clone()\n```\nCreates a copy of the ChartPreferences instance.\n\n## Color Properties\n\n### ColorAxisBackground\n```csharp\npublic WLColor ColorAxisBackground\n```\nThe color to use to render the background of the chart x and y axes.\n\n### ColorAxisLabels\n```csharp\npublic WLColor ColorAxisLabels\n```\nThe color to use to render the text of the x and y axis labels in the chart.\n\n### ColorBackground\n\n\n```csharp\npublic WLColor ColorBackground\n\n```",
    "metadata": {
      "id": "chart-preferences",
      "title": "chart-preferences",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/chart-preferences.md",
      "chunkIndex": "code-context-7",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public WLColor ColorDownBar\n",
    "metadata": {
      "id": "chart-preferences",
      "title": "chart-preferences",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/chart-preferences.md",
      "chunkIndex": "code-8",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "```\nCreates a copy of the ChartPreferences instance.\n\n## Color Properties\n\n### ColorAxisBackground\n```csharp\npublic WLColor ColorAxisBackground\n```\nThe color to use to render the background of the chart x and y axes.\n\n### ColorAxisLabels\n```csharp\npublic WLColor ColorAxisLabels\n```\nThe color to use to render the text of the x and y axis labels in the chart.\n\n### ColorBackground\n```csharp\npublic WLColor ColorBackground\n```\nThe color to use to render the background of the chart.\n\n### ColorDownBar\n"
    }
  },
  {
    "pageContent": "```\nCreates a copy of the ChartPreferences instance.\n\n## Color Properties\n\n### ColorAxisBackground\n```csharp\npublic WLColor ColorAxisBackground\n```\nThe color to use to render the background of the chart x and y axes.\n\n### ColorAxisLabels\n```csharp\npublic WLColor ColorAxisLabels\n```\nThe color to use to render the text of the x and y axis labels in the chart.\n\n### ColorBackground\n```csharp\npublic WLColor ColorBackground\n```\nThe color to use to render the background of the chart.\n\n### ColorDownBar\n\n\n```csharp\npublic WLColor ColorDownBar\n\n```",
    "metadata": {
      "id": "chart-preferences",
      "title": "chart-preferences",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/chart-preferences.md",
      "chunkIndex": "code-context-8",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public WLColor ColorGridlines\n",
    "metadata": {
      "id": "chart-preferences",
      "title": "chart-preferences",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/chart-preferences.md",
      "chunkIndex": "code-9",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "se to render the background of the chart x and y axes.\n\n### ColorAxisLabels\n```csharp\npublic WLColor ColorAxisLabels\n```\nThe color to use to render the text of the x and y axis labels in the chart.\n\n### ColorBackground\n```csharp\npublic WLColor ColorBackground\n```\nThe color to use to render the background of the chart.\n\n### ColorDownBar\n```csharp\npublic WLColor ColorDownBar\n```\nThe color to use to render the bars on the chart whose closing price is less than their open price.\n\n### ColorGridlines\n"
    }
  },
  {
    "pageContent": "se to render the background of the chart x and y axes.\n\n### ColorAxisLabels\n```csharp\npublic WLColor ColorAxisLabels\n```\nThe color to use to render the text of the x and y axis labels in the chart.\n\n### ColorBackground\n```csharp\npublic WLColor ColorBackground\n```\nThe color to use to render the background of the chart.\n\n### ColorDownBar\n```csharp\npublic WLColor ColorDownBar\n```\nThe color to use to render the bars on the chart whose closing price is less than their open price.\n\n### ColorGridlines\n\n\n```csharp\npublic WLColor ColorGridlines\n\n```",
    "metadata": {
      "id": "chart-preferences",
      "title": "chart-preferences",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/chart-preferences.md",
      "chunkIndex": "code-context-9",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public WLColor ColorPaneSeparator\n",
    "metadata": {
      "id": "chart-preferences",
      "title": "chart-preferences",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/chart-preferences.md",
      "chunkIndex": "code-10",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": " to render the text of the x and y axis labels in the chart.\n\n### ColorBackground\n```csharp\npublic WLColor ColorBackground\n```\nThe color to use to render the background of the chart.\n\n### ColorDownBar\n```csharp\npublic WLColor ColorDownBar\n```\nThe color to use to render the bars on the chart whose closing price is less than their open price.\n\n### ColorGridlines\n```csharp\npublic WLColor ColorGridlines\n```\nThe color to use to render the x and y axis grid lines on the chart.\n\n### ColorPaneSeparator\n"
    }
  },
  {
    "pageContent": " to render the text of the x and y axis labels in the chart.\n\n### ColorBackground\n```csharp\npublic WLColor ColorBackground\n```\nThe color to use to render the background of the chart.\n\n### ColorDownBar\n```csharp\npublic WLColor ColorDownBar\n```\nThe color to use to render the bars on the chart whose closing price is less than their open price.\n\n### ColorGridlines\n```csharp\npublic WLColor ColorGridlines\n```\nThe color to use to render the x and y axis grid lines on the chart.\n\n### ColorPaneSeparator\n\n\n```csharp\npublic WLColor ColorPaneSeparator\n\n```",
    "metadata": {
      "id": "chart-preferences",
      "title": "chart-preferences",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/chart-preferences.md",
      "chunkIndex": "code-context-10",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public WLColor ColorUpBar\n",
    "metadata": {
      "id": "chart-preferences",
      "title": "chart-preferences",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/chart-preferences.md",
      "chunkIndex": "code-11",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "to render the background of the chart.\n\n### ColorDownBar\n```csharp\npublic WLColor ColorDownBar\n```\nThe color to use to render the bars on the chart whose closing price is less than their open price.\n\n### ColorGridlines\n```csharp\npublic WLColor ColorGridlines\n```\nThe color to use to render the x and y axis grid lines on the chart.\n\n### ColorPaneSeparator\n```csharp\npublic WLColor ColorPaneSeparator\n```\nThe color to use to render the pane separators that appear between chart panes.\n\n### ColorUpBar\n"
    }
  },
  {
    "pageContent": "to render the background of the chart.\n\n### ColorDownBar\n```csharp\npublic WLColor ColorDownBar\n```\nThe color to use to render the bars on the chart whose closing price is less than their open price.\n\n### ColorGridlines\n```csharp\npublic WLColor ColorGridlines\n```\nThe color to use to render the x and y axis grid lines on the chart.\n\n### ColorPaneSeparator\n```csharp\npublic WLColor ColorPaneSeparator\n```\nThe color to use to render the pane separators that appear between chart panes.\n\n### ColorUpBar\n\n\n```csharp\npublic WLColor ColorUpBar\n\n```",
    "metadata": {
      "id": "chart-preferences",
      "title": "chart-preferences",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/chart-preferences.md",
      "chunkIndex": "code-context-11",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public WLColor ColorWatermark\n",
    "metadata": {
      "id": "chart-preferences",
      "title": "chart-preferences",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/chart-preferences.md",
      "chunkIndex": "code-12",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": " than their open price.\n\n### ColorGridlines\n```csharp\npublic WLColor ColorGridlines\n```\nThe color to use to render the x and y axis grid lines on the chart.\n\n### ColorPaneSeparator\n```csharp\npublic WLColor ColorPaneSeparator\n```\nThe color to use to render the pane separators that appear between chart panes.\n\n### ColorUpBar\n```csharp\npublic WLColor ColorUpBar\n```\nThe color to use to render the bars on the chart whose closing price is greater than or equal to their open price.\n\n### ColorWatermark\n"
    }
  },
  {
    "pageContent": " than their open price.\n\n### ColorGridlines\n```csharp\npublic WLColor ColorGridlines\n```\nThe color to use to render the x and y axis grid lines on the chart.\n\n### ColorPaneSeparator\n```csharp\npublic WLColor ColorPaneSeparator\n```\nThe color to use to render the pane separators that appear between chart panes.\n\n### ColorUpBar\n```csharp\npublic WLColor ColorUpBar\n```\nThe color to use to render the bars on the chart whose closing price is greater than or equal to their open price.\n\n### ColorWatermark\n\n\n```csharp\npublic WLColor ColorWatermark\n\n```",
    "metadata": {
      "id": "chart-preferences",
      "title": "chart-preferences",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/chart-preferences.md",
      "chunkIndex": "code-context-12",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public WLColor VerticalCursorColor\n",
    "metadata": {
      "id": "chart-preferences",
      "title": "chart-preferences",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/chart-preferences.md",
      "chunkIndex": "code-13",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "blic WLColor ColorPaneSeparator\n```\nThe color to use to render the pane separators that appear between chart panes.\n\n### ColorUpBar\n```csharp\npublic WLColor ColorUpBar\n```\nThe color to use to render the bars on the chart whose closing price is greater than or equal to their open price.\n\n### ColorWatermark\n```csharp\npublic WLColor ColorWatermark\n```\nThe color to use to render the text of the watermark that displays the symbol and security name in the middle of the chart.\n\n### VerticalCursorColor\n"
    }
  },
  {
    "pageContent": "blic WLColor ColorPaneSeparator\n```\nThe color to use to render the pane separators that appear between chart panes.\n\n### ColorUpBar\n```csharp\npublic WLColor ColorUpBar\n```\nThe color to use to render the bars on the chart whose closing price is greater than or equal to their open price.\n\n### ColorWatermark\n```csharp\npublic WLColor ColorWatermark\n```\nThe color to use to render the text of the watermark that displays the symbol and security name in the middle of the chart.\n\n### VerticalCursorColor\n\n\n```csharp\npublic WLColor VerticalCursorColor\n\n```",
    "metadata": {
      "id": "chart-preferences",
      "title": "chart-preferences",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/chart-preferences.md",
      "chunkIndex": "code-context-13",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public bool DisplayEvents\n",
    "metadata": {
      "id": "chart-preferences",
      "title": "chart-preferences",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/chart-preferences.md",
      "chunkIndex": "code-14",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ar\n```\nThe color to use to render the bars on the chart whose closing price is greater than or equal to their open price.\n\n### ColorWatermark\n```csharp\npublic WLColor ColorWatermark\n```\nThe color to use to render the text of the watermark that displays the symbol and security name in the middle of the chart.\n\n### VerticalCursorColor\n```csharp\npublic WLColor VerticalCursorColor\n```\nThe color to use to render the vertical and crosshair cursors in the chart.\n\n## Display Settings\n\n### DisplayEvents\n"
    }
  },
  {
    "pageContent": "ar\n```\nThe color to use to render the bars on the chart whose closing price is greater than or equal to their open price.\n\n### ColorWatermark\n```csharp\npublic WLColor ColorWatermark\n```\nThe color to use to render the text of the watermark that displays the symbol and security name in the middle of the chart.\n\n### VerticalCursorColor\n```csharp\npublic WLColor VerticalCursorColor\n```\nThe color to use to render the vertical and crosshair cursors in the chart.\n\n## Display Settings\n\n### DisplayEvents\n\n\n```csharp\npublic bool DisplayEvents\n\n```",
    "metadata": {
      "id": "chart-preferences",
      "title": "chart-preferences",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/chart-preferences.md",
      "chunkIndex": "code-context-14",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public bool LogScale\n",
    "metadata": {
      "id": "chart-preferences",
      "title": "chart-preferences",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/chart-preferences.md",
      "chunkIndex": "code-15",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "WLColor ColorWatermark\n```\nThe color to use to render the text of the watermark that displays the symbol and security name in the middle of the chart.\n\n### VerticalCursorColor\n```csharp\npublic WLColor VerticalCursorColor\n```\nThe color to use to render the vertical and crosshair cursors in the chart.\n\n## Display Settings\n\n### DisplayEvents\n```csharp\npublic bool DisplayEvents\n```\nDetermines whether glyph icons for event data, such as dividends and splits, are displayed in the chart.\n\n### LogScale\n"
    }
  },
  {
    "pageContent": "WLColor ColorWatermark\n```\nThe color to use to render the text of the watermark that displays the symbol and security name in the middle of the chart.\n\n### VerticalCursorColor\n```csharp\npublic WLColor VerticalCursorColor\n```\nThe color to use to render the vertical and crosshair cursors in the chart.\n\n## Display Settings\n\n### DisplayEvents\n```csharp\npublic bool DisplayEvents\n```\nDetermines whether glyph icons for event data, such as dividends and splits, are displayed in the chart.\n\n### LogScale\n\n\n```csharp\npublic bool LogScale\n\n```",
    "metadata": {
      "id": "chart-preferences",
      "title": "chart-preferences",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/chart-preferences.md",
      "chunkIndex": "code-context-15",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public int Margin\n",
    "metadata": {
      "id": "chart-preferences",
      "title": "chart-preferences",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/chart-preferences.md",
      "chunkIndex": "code-16",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "he chart.\n\n### VerticalCursorColor\n```csharp\npublic WLColor VerticalCursorColor\n```\nThe color to use to render the vertical and crosshair cursors in the chart.\n\n## Display Settings\n\n### DisplayEvents\n```csharp\npublic bool DisplayEvents\n```\nDetermines whether glyph icons for event data, such as dividends and splits, are displayed in the chart.\n\n### LogScale\n```csharp\npublic bool LogScale\n```\nDetermines whether the y axis of the chart uses a logarithmic (true) or linear (false) scale.\n\n### Margin\n"
    }
  },
  {
    "pageContent": "he chart.\n\n### VerticalCursorColor\n```csharp\npublic WLColor VerticalCursorColor\n```\nThe color to use to render the vertical and crosshair cursors in the chart.\n\n## Display Settings\n\n### DisplayEvents\n```csharp\npublic bool DisplayEvents\n```\nDetermines whether glyph icons for event data, such as dividends and splits, are displayed in the chart.\n\n### LogScale\n```csharp\npublic bool LogScale\n```\nDetermines whether the y axis of the chart uses a logarithmic (true) or linear (false) scale.\n\n### Margin\n\n\n```csharp\npublic int Margin\n\n```",
    "metadata": {
      "id": "chart-preferences",
      "title": "chart-preferences",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/chart-preferences.md",
      "chunkIndex": "code-context-16",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public bool ShowVolumePane\n",
    "metadata": {
      "id": "chart-preferences",
      "title": "chart-preferences",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/chart-preferences.md",
      "chunkIndex": "code-17",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": " cursors in the chart.\n\n## Display Settings\n\n### DisplayEvents\n```csharp\npublic bool DisplayEvents\n```\nDetermines whether glyph icons for event data, such as dividends and splits, are displayed in the chart.\n\n### LogScale\n```csharp\npublic bool LogScale\n```\nDetermines whether the y axis of the chart uses a logarithmic (true) or linear (false) scale.\n\n### Margin\n```csharp\npublic int Margin\n```\nThe number of pixels to reserve as top of bottom margins for the panes of the chart.\n\n### ShowVolumePane\n"
    }
  },
  {
    "pageContent": " cursors in the chart.\n\n## Display Settings\n\n### DisplayEvents\n```csharp\npublic bool DisplayEvents\n```\nDetermines whether glyph icons for event data, such as dividends and splits, are displayed in the chart.\n\n### LogScale\n```csharp\npublic bool LogScale\n```\nDetermines whether the y axis of the chart uses a logarithmic (true) or linear (false) scale.\n\n### Margin\n```csharp\npublic int Margin\n```\nThe number of pixels to reserve as top of bottom margins for the panes of the chart.\n\n### ShowVolumePane\n\n\n```csharp\npublic bool ShowVolumePane\n\n```",
    "metadata": {
      "id": "chart-preferences",
      "title": "chart-preferences",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/chart-preferences.md",
      "chunkIndex": "code-context-17",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public WLColor MassageColor(Color color)\n",
    "metadata": {
      "id": "chart-preferences",
      "title": "chart-preferences",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/chart-preferences.md",
      "chunkIndex": "code-18",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ta, such as dividends and splits, are displayed in the chart.\n\n### LogScale\n```csharp\npublic bool LogScale\n```\nDetermines whether the y axis of the chart uses a logarithmic (true) or linear (false) scale.\n\n### Margin\n```csharp\npublic int Margin\n```\nThe number of pixels to reserve as top of bottom margins for the panes of the chart.\n\n### ShowVolumePane\n```csharp\npublic bool ShowVolumePane\n```\nControls whether or not the volume pane is displayed in the chart.\n\n## Utility Methods\n\n### MassageColor\n"
    }
  },
  {
    "pageContent": "ta, such as dividends and splits, are displayed in the chart.\n\n### LogScale\n```csharp\npublic bool LogScale\n```\nDetermines whether the y axis of the chart uses a logarithmic (true) or linear (false) scale.\n\n### Margin\n```csharp\npublic int Margin\n```\nThe number of pixels to reserve as top of bottom margins for the panes of the chart.\n\n### ShowVolumePane\n```csharp\npublic bool ShowVolumePane\n```\nControls whether or not the volume pane is displayed in the chart.\n\n## Utility Methods\n\n### MassageColor\n\n\n```csharp\npublic WLColor MassageColor(Color color)\n\n```",
    "metadata": {
      "id": "chart-preferences",
      "title": "chart-preferences",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/chart-preferences.md",
      "chunkIndex": "code-context-18",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "# ChartTooltip Class\n\n**Namespace:** WealthLab.ChartWPF  \n**Parent:** Object\n\nContains the information for a tooltip to be displayed on the chart.\n\n## Constructors\n\n",
    "metadata": {
      "id": "chart-tooltip",
      "title": "chart-tooltip",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/chart-tooltip.md",
      "chunkIndex": 0,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nChartTooltip has both:\n- A parameterless constructor\n- A constructor that assigns values to the Color and Text properties\n\n## Members\n\n### Color\n",
    "metadata": {
      "id": "chart-tooltip",
      "title": "chart-tooltip",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/chart-tooltip.md",
      "chunkIndex": 1,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nThe foreground color that should be used to render the tooltip Text.\n\n### Text\n",
    "metadata": {
      "id": "chart-tooltip",
      "title": "chart-tooltip",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/chart-tooltip.md",
      "chunkIndex": 2,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "public ChartTooltip()\npublic ChartTooltip(string txt, WLColor color)\n",
    "metadata": {
      "id": "chart-tooltip",
      "title": "chart-tooltip",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/chart-tooltip.md",
      "chunkIndex": "code-0",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "# ChartTooltip Class\n\n**Namespace:** WealthLab.ChartWPF  \n**Parent:** Object\n\nContains the information for a tooltip to be displayed on the chart.\n\n## Constructors\n\n"
    }
  },
  {
    "pageContent": "# ChartTooltip Class\n\n**Namespace:** WealthLab.ChartWPF  \n**Parent:** Object\n\nContains the information for a tooltip to be displayed on the chart.\n\n## Constructors\n\n\n\n```csharp\npublic ChartTooltip()\npublic ChartTooltip(string txt, WLColor color)\n\n```",
    "metadata": {
      "id": "chart-tooltip",
      "title": "chart-tooltip",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/chart-tooltip.md",
      "chunkIndex": "code-context-0",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public WLColor Color\n",
    "metadata": {
      "id": "chart-tooltip",
      "title": "chart-tooltip",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/chart-tooltip.md",
      "chunkIndex": "code-1",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "# ChartTooltip Class\n\n**Namespace:** WealthLab.ChartWPF  \n**Parent:** Object\n\nContains the information for a tooltip to be displayed on the chart.\n\n## Constructors\n\n```csharp\npublic ChartTooltip()\npublic ChartTooltip(string txt, WLColor color)\n```\nChartTooltip has both:\n- A parameterless constructor\n- A constructor that assigns values to the Color and Text properties\n\n## Members\n\n### Color\n"
    }
  },
  {
    "pageContent": "# ChartTooltip Class\n\n**Namespace:** WealthLab.ChartWPF  \n**Parent:** Object\n\nContains the information for a tooltip to be displayed on the chart.\n\n## Constructors\n\n```csharp\npublic ChartTooltip()\npublic ChartTooltip(string txt, WLColor color)\n```\nChartTooltip has both:\n- A parameterless constructor\n- A constructor that assigns values to the Color and Text properties\n\n## Members\n\n### Color\n\n\n```csharp\npublic WLColor Color\n\n```",
    "metadata": {
      "id": "chart-tooltip",
      "title": "chart-tooltip",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/chart-tooltip.md",
      "chunkIndex": "code-context-1",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public string Text\n",
    "metadata": {
      "id": "chart-tooltip",
      "title": "chart-tooltip",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/chart-tooltip.md",
      "chunkIndex": "code-2",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "Tooltip Class\n\n**Namespace:** WealthLab.ChartWPF  \n**Parent:** Object\n\nContains the information for a tooltip to be displayed on the chart.\n\n## Constructors\n\n```csharp\npublic ChartTooltip()\npublic ChartTooltip(string txt, WLColor color)\n```\nChartTooltip has both:\n- A parameterless constructor\n- A constructor that assigns values to the Color and Text properties\n\n## Members\n\n### Color\n```csharp\npublic WLColor Color\n```\nThe foreground color that should be used to render the tooltip Text.\n\n### Text\n"
    }
  },
  {
    "pageContent": "Tooltip Class\n\n**Namespace:** WealthLab.ChartWPF  \n**Parent:** Object\n\nContains the information for a tooltip to be displayed on the chart.\n\n## Constructors\n\n```csharp\npublic ChartTooltip()\npublic ChartTooltip(string txt, WLColor color)\n```\nChartTooltip has both:\n- A parameterless constructor\n- A constructor that assigns values to the Color and Text properties\n\n## Members\n\n### Color\n```csharp\npublic WLColor Color\n```\nThe foreground color that should be used to render the tooltip Text.\n\n### Text\n\n\n```csharp\npublic string Text\n\n```",
    "metadata": {
      "id": "chart-tooltip",
      "title": "chart-tooltip",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/chart-tooltip.md",
      "chunkIndex": "code-context-2",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "# Configurable Class\n\n**Namespace:** WealthLab.Core  \n**Parent:** Object  \n**Descendants:** Many\n\nContains the functionality for an object to support configuration. A Configurable object has a `Name` property, implementing the `INamed` interface. Its configuration is automatically persisted as a string in WL8's settings file, and is contained in the `Configuration` parameter. The `ConfigurationType` property determines whether the configuration string is an object-specific, plain vanilla format, or represents a persisted `ParameterList`.\n\n## Configuration Properties\n\n### ConfigKey\n",
    "metadata": {
      "id": "configurable",
      "title": "configurable",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/configurable.md",
      "chunkIndex": 0,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nThe key used when WL8 saves this item's Configuration to the settings file. By default, `ConfigKey` is composed of `ConfigPrefix + \"_\" + Name`. Override this property to specify a different `ConfigKey`, useful when multiple components must share the same configuration.\n\n### ConfigPrefix\n",
    "metadata": {
      "id": "configurable",
      "title": "configurable",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/configurable.md",
      "chunkIndex": 1,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the prefix used when creating a key to store the item's Configuration in the WL8 settings file. Each class of item has a short two- or three-character prefix (e.g., Historical Providers are \"HP\", Streaming Providers are \"SP\").\n\n### ConfigurableType\n",
    "metadata": {
      "id": "configurable",
      "title": "configurable",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/configurable.md",
      "chunkIndex": 2,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nDetermines whether the Configuration string is a plain vanilla string or a persisted instance of a `ParameterList`. For the latter case, the object's `Parameters` property will contain the parsed parameters. Possible values:\n- `ConfigurableType.VanillaString`\n- `ConfigurableType.ParameterList`\n\n### Configuration\n",
    "metadata": {
      "id": "configurable",
      "title": "configurable",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/configurable.md",
      "chunkIndex": 3,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nContains the configuration expressed as a single string. If `ConfigurableType` is `ConfigurableType.ParameterList`, then this string is the persisted `Parameters` instance.\n\n## Configuration Methods\n\n### EditConfig\n",
    "metadata": {
      "id": "configurable",
      "title": "configurable",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/configurable.md",
      "chunkIndex": 4,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nCauses WL8 to display a configuration dialog for editing the object's configuration. For `ParameterList` configurations, WL8 shows a parameter editor dialog. For Windows/WPF WL8 extensions, provide a custom editor by creating a class descending from `ObjectEditorBase` in the WealthLab.WPF library.\n\n### GenerateParameters\n",
    "metadata": {
      "id": "configurable",
      "title": "configurable",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/configurable.md",
      "chunkIndex": 5,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nOverride to populate a Configurable object's `Parameters` property with `Parameter` class instances. Only relevant if the object's `ConfigurableType` is `ConfigurableType.ParameterList`.\n\n### IsConfigurable\n",
    "metadata": {
      "id": "configurable",
      "title": "configurable",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/configurable.md",
      "chunkIndex": 6,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nIndicates whether the object supports configuration. Default returns true if object is `ConfigurableType.ParameterList` and contains parameters.\n\n### IsConfigured\n",
    "metadata": {
      "id": "configurable",
      "title": "configurable",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/configurable.md",
      "chunkIndex": 7,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nDefault returns false if `IsConfigurable` is true but `Configuration` string is null/empty. Override for more fine-grained control. Unconfigured Data Providers cannot create DataSets.\n\n### LoadConfig\n",
    "metadata": {
      "id": "configurable",
      "title": "configurable",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/configurable.md",
      "chunkIndex": 8,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nCalled when WL8 loads the item's configuration upon initialization. Default loads from WL8 settings file.\n\n### Parameters\n",
    "metadata": {
      "id": "configurable",
      "title": "configurable",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/configurable.md",
      "chunkIndex": 9,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nContains the `Parameter` instances comprising the configuration. Only relevant if `ConfigurableType` is `ConfigurableType.ParameterList`.\n\n### ProcessConfig\n",
    "metadata": {
      "id": "configurable",
      "title": "configurable",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/configurable.md",
      "chunkIndex": 10,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nOverride to perform special processing after configuration changes.\n\n### SaveConfig\n",
    "metadata": {
      "id": "configurable",
      "title": "configurable",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/configurable.md",
      "chunkIndex": 11,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nCalled when configuration changes need persisting. Default stores in WL8 settings file.\n\n## Descriptive Properties\n\n### Description\n",
    "metadata": {
      "id": "configurable",
      "title": "configurable",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/configurable.md",
      "chunkIndex": 12,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nOptional short description used throughout WL8's UI.\n\n### DisableGlyphReverse\n",
    "metadata": {
      "id": "configurable",
      "title": "configurable",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/configurable.md",
      "chunkIndex": 13,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturn true to prevent WL8 from reversing the item's `GlyphResource` image in Dark Theme.\n\n### GlyphResource\n",
    "metadata": {
      "id": "configurable",
      "title": "configurable",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/configurable.md",
      "chunkIndex": 14,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nString describing an Embedded Resource for representing the item in lists. Format: \"CompanyName.ProjectName.FolderPath.ImageName.png\"\n\n### Name\n",
    "metadata": {
      "id": "configurable",
      "title": "configurable",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/configurable.md",
      "chunkIndex": 15,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns instance name. Configurable objects implement `INamed` interface, usable as target type for `FactoryBase<T>` classes.\n\n### URL\n",
    "metadata": {
      "id": "configurable",
      "title": "configurable",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/configurable.md",
      "chunkIndex": 16,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nOptional URL to additional item information, used in WL8's UI.\n\n## Helper Methods\n\n### AddEnumParameter\n",
    "metadata": {
      "id": "configurable",
      "title": "configurable",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/configurable.md",
      "chunkIndex": 17,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nAdds `StringChoice` Parameter to `Parameters` property with values from specified Enumerated Type.\n\n### AddIndicatorParameter\n",
    "metadata": {
      "id": "configurable",
      "title": "configurable",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/configurable.md",
      "chunkIndex": 18,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nAdds indicator-type Parameter, setting appropriate values for `IndicatorAbbreviation`, `IndicatorParameters` and `IndicatorInstance` properties.\n\n### AddParameter\n",
    "metadata": {
      "id": "configurable",
      "title": "configurable",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/configurable.md",
      "chunkIndex": 19,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nAdds Parameter instance to `Parameters` property.\n\n### AddValueCompareParameter\n",
    "metadata": {
      "id": "configurable",
      "title": "configurable",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/configurable.md",
      "chunkIndex": 20,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nAdds `StringChoice` Parameter with comparison values:\n- less than\n- less than or equal to\n- equal to\n- not equal to\n- greater than or equal to\n- greater than ",
    "metadata": {
      "id": "configurable",
      "title": "configurable",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/configurable.md",
      "chunkIndex": 21,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "public virtual string ConfigKey\n",
    "metadata": {
      "id": "configurable",
      "title": "configurable",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/configurable.md",
      "chunkIndex": "code-0",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": ":** Many\n\nContains the functionality for an object to support configuration. A Configurable object has a `Name` property, implementing the `INamed` interface. Its configuration is automatically persisted as a string in WL8's settings file, and is contained in the `Configuration` parameter. The `ConfigurationType` property determines whether the configuration string is an object-specific, plain vanilla format, or represents a persisted `ParameterList`.\n\n## Configuration Properties\n\n### ConfigKey\n"
    }
  },
  {
    "pageContent": ":** Many\n\nContains the functionality for an object to support configuration. A Configurable object has a `Name` property, implementing the `INamed` interface. Its configuration is automatically persisted as a string in WL8's settings file, and is contained in the `Configuration` parameter. The `ConfigurationType` property determines whether the configuration string is an object-specific, plain vanilla format, or represents a persisted `ParameterList`.\n\n## Configuration Properties\n\n### ConfigKey\n\n\n```csharp\npublic virtual string ConfigKey\n\n```",
    "metadata": {
      "id": "configurable",
      "title": "configurable",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/configurable.md",
      "chunkIndex": "code-context-0",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public virtual string ConfigPrefix\n",
    "metadata": {
      "id": "configurable",
      "title": "configurable",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/configurable.md",
      "chunkIndex": "code-1",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": " whether the configuration string is an object-specific, plain vanilla format, or represents a persisted `ParameterList`.\n\n## Configuration Properties\n\n### ConfigKey\n```csharp\npublic virtual string ConfigKey\n```\nThe key used when WL8 saves this item's Configuration to the settings file. By default, `ConfigKey` is composed of `ConfigPrefix + \"_\" + Name`. Override this property to specify a different `ConfigKey`, useful when multiple components must share the same configuration.\n\n### ConfigPrefix\n"
    }
  },
  {
    "pageContent": " whether the configuration string is an object-specific, plain vanilla format, or represents a persisted `ParameterList`.\n\n## Configuration Properties\n\n### ConfigKey\n```csharp\npublic virtual string ConfigKey\n```\nThe key used when WL8 saves this item's Configuration to the settings file. By default, `ConfigKey` is composed of `ConfigPrefix + \"_\" + Name`. Override this property to specify a different `ConfigKey`, useful when multiple components must share the same configuration.\n\n### ConfigPrefix\n\n\n```csharp\npublic virtual string ConfigPrefix\n\n```",
    "metadata": {
      "id": "configurable",
      "title": "configurable",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/configurable.md",
      "chunkIndex": "code-context-1",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public abstract ConfigurableType ConfigurableType\n",
    "metadata": {
      "id": "configurable",
      "title": "configurable",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/configurable.md",
      "chunkIndex": "code-2",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "gKey` is composed of `ConfigPrefix + \"_\" + Name`. Override this property to specify a different `ConfigKey`, useful when multiple components must share the same configuration.\n\n### ConfigPrefix\n```csharp\npublic virtual string ConfigPrefix\n```\nReturns the prefix used when creating a key to store the item's Configuration in the WL8 settings file. Each class of item has a short two- or three-character prefix (e.g., Historical Providers are \"HP\", Streaming Providers are \"SP\").\n\n### ConfigurableType\n"
    }
  },
  {
    "pageContent": "gKey` is composed of `ConfigPrefix + \"_\" + Name`. Override this property to specify a different `ConfigKey`, useful when multiple components must share the same configuration.\n\n### ConfigPrefix\n```csharp\npublic virtual string ConfigPrefix\n```\nReturns the prefix used when creating a key to store the item's Configuration in the WL8 settings file. Each class of item has a short two- or three-character prefix (e.g., Historical Providers are \"HP\", Streaming Providers are \"SP\").\n\n### ConfigurableType\n\n\n```csharp\npublic abstract ConfigurableType ConfigurableType\n\n```",
    "metadata": {
      "id": "configurable",
      "title": "configurable",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/configurable.md",
      "chunkIndex": "code-context-2",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public string Configuration\n",
    "metadata": {
      "id": "configurable",
      "title": "configurable",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/configurable.md",
      "chunkIndex": "code-3",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "two- or three-character prefix (e.g., Historical Providers are \"HP\", Streaming Providers are \"SP\").\n\n### ConfigurableType\n```csharp\npublic abstract ConfigurableType ConfigurableType\n```\nDetermines whether the Configuration string is a plain vanilla string or a persisted instance of a `ParameterList`. For the latter case, the object's `Parameters` property will contain the parsed parameters. Possible values:\n- `ConfigurableType.VanillaString`\n- `ConfigurableType.ParameterList`\n\n### Configuration\n"
    }
  },
  {
    "pageContent": "two- or three-character prefix (e.g., Historical Providers are \"HP\", Streaming Providers are \"SP\").\n\n### ConfigurableType\n```csharp\npublic abstract ConfigurableType ConfigurableType\n```\nDetermines whether the Configuration string is a plain vanilla string or a persisted instance of a `ParameterList`. For the latter case, the object's `Parameters` property will contain the parsed parameters. Possible values:\n- `ConfigurableType.VanillaString`\n- `ConfigurableType.ParameterList`\n\n### Configuration\n\n\n```csharp\npublic string Configuration\n\n```",
    "metadata": {
      "id": "configurable",
      "title": "configurable",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/configurable.md",
      "chunkIndex": "code-context-3",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public virtual string EditConfig()\n",
    "metadata": {
      "id": "configurable",
      "title": "configurable",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/configurable.md",
      "chunkIndex": "code-4",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "r a persisted instance of a `ParameterList`. For the latter case, the object's `Parameters` property will contain the parsed parameters. Possible values:\n- `ConfigurableType.VanillaString`\n- `ConfigurableType.ParameterList`\n\n### Configuration\n```csharp\npublic string Configuration\n```\nContains the configuration expressed as a single string. If `ConfigurableType` is `ConfigurableType.ParameterList`, then this string is the persisted `Parameters` instance.\n\n## Configuration Methods\n\n### EditConfig\n"
    }
  },
  {
    "pageContent": "r a persisted instance of a `ParameterList`. For the latter case, the object's `Parameters` property will contain the parsed parameters. Possible values:\n- `ConfigurableType.VanillaString`\n- `ConfigurableType.ParameterList`\n\n### Configuration\n```csharp\npublic string Configuration\n```\nContains the configuration expressed as a single string. If `ConfigurableType` is `ConfigurableType.ParameterList`, then this string is the persisted `Parameters` instance.\n\n## Configuration Methods\n\n### EditConfig\n\n\n```csharp\npublic virtual string EditConfig()\n\n```",
    "metadata": {
      "id": "configurable",
      "title": "configurable",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/configurable.md",
      "chunkIndex": "code-context-4",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public virtual void GenerateParameters()\n",
    "metadata": {
      "id": "configurable",
      "title": "configurable",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/configurable.md",
      "chunkIndex": "code-5",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "igurableType.ParameterList`, then this string is the persisted `Parameters` instance.\n\n## Configuration Methods\n\n### EditConfig\n```csharp\npublic virtual string EditConfig()\n```\nCauses WL8 to display a configuration dialog for editing the object's configuration. For `ParameterList` configurations, WL8 shows a parameter editor dialog. For Windows/WPF WL8 extensions, provide a custom editor by creating a class descending from `ObjectEditorBase` in the WealthLab.WPF library.\n\n### GenerateParameters\n"
    }
  },
  {
    "pageContent": "igurableType.ParameterList`, then this string is the persisted `Parameters` instance.\n\n## Configuration Methods\n\n### EditConfig\n```csharp\npublic virtual string EditConfig()\n```\nCauses WL8 to display a configuration dialog for editing the object's configuration. For `ParameterList` configurations, WL8 shows a parameter editor dialog. For Windows/WPF WL8 extensions, provide a custom editor by creating a class descending from `ObjectEditorBase` in the WealthLab.WPF library.\n\n### GenerateParameters\n\n\n```csharp\npublic virtual void GenerateParameters()\n\n```",
    "metadata": {
      "id": "configurable",
      "title": "configurable",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/configurable.md",
      "chunkIndex": "code-context-5",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public virtual bool IsConfigurable\n",
    "metadata": {
      "id": "configurable",
      "title": "configurable",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/configurable.md",
      "chunkIndex": "code-6",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "For `ParameterList` configurations, WL8 shows a parameter editor dialog. For Windows/WPF WL8 extensions, provide a custom editor by creating a class descending from `ObjectEditorBase` in the WealthLab.WPF library.\n\n### GenerateParameters\n```csharp\npublic virtual void GenerateParameters()\n```\nOverride to populate a Configurable object's `Parameters` property with `Parameter` class instances. Only relevant if the object's `ConfigurableType` is `ConfigurableType.ParameterList`.\n\n### IsConfigurable\n"
    }
  },
  {
    "pageContent": "For `ParameterList` configurations, WL8 shows a parameter editor dialog. For Windows/WPF WL8 extensions, provide a custom editor by creating a class descending from `ObjectEditorBase` in the WealthLab.WPF library.\n\n### GenerateParameters\n```csharp\npublic virtual void GenerateParameters()\n```\nOverride to populate a Configurable object's `Parameters` property with `Parameter` class instances. Only relevant if the object's `ConfigurableType` is `ConfigurableType.ParameterList`.\n\n### IsConfigurable\n\n\n```csharp\npublic virtual bool IsConfigurable\n\n```",
    "metadata": {
      "id": "configurable",
      "title": "configurable",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/configurable.md",
      "chunkIndex": "code-context-6",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public virtual bool IsConfigured\n",
    "metadata": {
      "id": "configurable",
      "title": "configurable",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/configurable.md",
      "chunkIndex": "code-7",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": ".\n\n### GenerateParameters\n```csharp\npublic virtual void GenerateParameters()\n```\nOverride to populate a Configurable object's `Parameters` property with `Parameter` class instances. Only relevant if the object's `ConfigurableType` is `ConfigurableType.ParameterList`.\n\n### IsConfigurable\n```csharp\npublic virtual bool IsConfigurable\n```\nIndicates whether the object supports configuration. Default returns true if object is `ConfigurableType.ParameterList` and contains parameters.\n\n### IsConfigured\n"
    }
  },
  {
    "pageContent": ".\n\n### GenerateParameters\n```csharp\npublic virtual void GenerateParameters()\n```\nOverride to populate a Configurable object's `Parameters` property with `Parameter` class instances. Only relevant if the object's `ConfigurableType` is `ConfigurableType.ParameterList`.\n\n### IsConfigurable\n```csharp\npublic virtual bool IsConfigurable\n```\nIndicates whether the object supports configuration. Default returns true if object is `ConfigurableType.ParameterList` and contains parameters.\n\n### IsConfigured\n\n\n```csharp\npublic virtual bool IsConfigured\n\n```",
    "metadata": {
      "id": "configurable",
      "title": "configurable",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/configurable.md",
      "chunkIndex": "code-context-7",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public virtual bool LoadConfig()\n",
    "metadata": {
      "id": "configurable",
      "title": "configurable",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/configurable.md",
      "chunkIndex": "code-8",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "Type.ParameterList`.\n\n### IsConfigurable\n```csharp\npublic virtual bool IsConfigurable\n```\nIndicates whether the object supports configuration. Default returns true if object is `ConfigurableType.ParameterList` and contains parameters.\n\n### IsConfigured\n```csharp\npublic virtual bool IsConfigured\n```\nDefault returns false if `IsConfigurable` is true but `Configuration` string is null/empty. Override for more fine-grained control. Unconfigured Data Providers cannot create DataSets.\n\n### LoadConfig\n"
    }
  },
  {
    "pageContent": "Type.ParameterList`.\n\n### IsConfigurable\n```csharp\npublic virtual bool IsConfigurable\n```\nIndicates whether the object supports configuration. Default returns true if object is `ConfigurableType.ParameterList` and contains parameters.\n\n### IsConfigured\n```csharp\npublic virtual bool IsConfigured\n```\nDefault returns false if `IsConfigurable` is true but `Configuration` string is null/empty. Override for more fine-grained control. Unconfigured Data Providers cannot create DataSets.\n\n### LoadConfig\n\n\n```csharp\npublic virtual bool LoadConfig()\n\n```",
    "metadata": {
      "id": "configurable",
      "title": "configurable",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/configurable.md",
      "chunkIndex": "code-context-8",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public ParameterList Parameters\n",
    "metadata": {
      "id": "configurable",
      "title": "configurable",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/configurable.md",
      "chunkIndex": "code-9",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ject is `ConfigurableType.ParameterList` and contains parameters.\n\n### IsConfigured\n```csharp\npublic virtual bool IsConfigured\n```\nDefault returns false if `IsConfigurable` is true but `Configuration` string is null/empty. Override for more fine-grained control. Unconfigured Data Providers cannot create DataSets.\n\n### LoadConfig\n```csharp\npublic virtual bool LoadConfig()\n```\nCalled when WL8 loads the item's configuration upon initialization. Default loads from WL8 settings file.\n\n### Parameters\n"
    }
  },
  {
    "pageContent": "ject is `ConfigurableType.ParameterList` and contains parameters.\n\n### IsConfigured\n```csharp\npublic virtual bool IsConfigured\n```\nDefault returns false if `IsConfigurable` is true but `Configuration` string is null/empty. Override for more fine-grained control. Unconfigured Data Providers cannot create DataSets.\n\n### LoadConfig\n```csharp\npublic virtual bool LoadConfig()\n```\nCalled when WL8 loads the item's configuration upon initialization. Default loads from WL8 settings file.\n\n### Parameters\n\n\n```csharp\npublic ParameterList Parameters\n\n```",
    "metadata": {
      "id": "configurable",
      "title": "configurable",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/configurable.md",
      "chunkIndex": "code-context-9",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public virtual void ProcessConfig()\n",
    "metadata": {
      "id": "configurable",
      "title": "configurable",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/configurable.md",
      "chunkIndex": "code-10",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ring is null/empty. Override for more fine-grained control. Unconfigured Data Providers cannot create DataSets.\n\n### LoadConfig\n```csharp\npublic virtual bool LoadConfig()\n```\nCalled when WL8 loads the item's configuration upon initialization. Default loads from WL8 settings file.\n\n### Parameters\n```csharp\npublic ParameterList Parameters\n```\nContains the `Parameter` instances comprising the configuration. Only relevant if `ConfigurableType` is `ConfigurableType.ParameterList`.\n\n### ProcessConfig\n"
    }
  },
  {
    "pageContent": "ring is null/empty. Override for more fine-grained control. Unconfigured Data Providers cannot create DataSets.\n\n### LoadConfig\n```csharp\npublic virtual bool LoadConfig()\n```\nCalled when WL8 loads the item's configuration upon initialization. Default loads from WL8 settings file.\n\n### Parameters\n```csharp\npublic ParameterList Parameters\n```\nContains the `Parameter` instances comprising the configuration. Only relevant if `ConfigurableType` is `ConfigurableType.ParameterList`.\n\n### ProcessConfig\n\n\n```csharp\npublic virtual void ProcessConfig()\n\n```",
    "metadata": {
      "id": "configurable",
      "title": "configurable",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/configurable.md",
      "chunkIndex": "code-context-10",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public virtual void SaveConfig()\n",
    "metadata": {
      "id": "configurable",
      "title": "configurable",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/configurable.md",
      "chunkIndex": "code-11",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "arp\npublic virtual bool LoadConfig()\n```\nCalled when WL8 loads the item's configuration upon initialization. Default loads from WL8 settings file.\n\n### Parameters\n```csharp\npublic ParameterList Parameters\n```\nContains the `Parameter` instances comprising the configuration. Only relevant if `ConfigurableType` is `ConfigurableType.ParameterList`.\n\n### ProcessConfig\n```csharp\npublic virtual void ProcessConfig()\n```\nOverride to perform special processing after configuration changes.\n\n### SaveConfig\n"
    }
  },
  {
    "pageContent": "arp\npublic virtual bool LoadConfig()\n```\nCalled when WL8 loads the item's configuration upon initialization. Default loads from WL8 settings file.\n\n### Parameters\n```csharp\npublic ParameterList Parameters\n```\nContains the `Parameter` instances comprising the configuration. Only relevant if `ConfigurableType` is `ConfigurableType.ParameterList`.\n\n### ProcessConfig\n```csharp\npublic virtual void ProcessConfig()\n```\nOverride to perform special processing after configuration changes.\n\n### SaveConfig\n\n\n```csharp\npublic virtual void SaveConfig()\n\n```",
    "metadata": {
      "id": "configurable",
      "title": "configurable",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/configurable.md",
      "chunkIndex": "code-context-11",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public virtual string Description\n",
    "metadata": {
      "id": "configurable",
      "title": "configurable",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/configurable.md",
      "chunkIndex": "code-12",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": " ParameterList Parameters\n```\nContains the `Parameter` instances comprising the configuration. Only relevant if `ConfigurableType` is `ConfigurableType.ParameterList`.\n\n### ProcessConfig\n```csharp\npublic virtual void ProcessConfig()\n```\nOverride to perform special processing after configuration changes.\n\n### SaveConfig\n```csharp\npublic virtual void SaveConfig()\n```\nCalled when configuration changes need persisting. Default stores in WL8 settings file.\n\n## Descriptive Properties\n\n### Description\n"
    }
  },
  {
    "pageContent": " ParameterList Parameters\n```\nContains the `Parameter` instances comprising the configuration. Only relevant if `ConfigurableType` is `ConfigurableType.ParameterList`.\n\n### ProcessConfig\n```csharp\npublic virtual void ProcessConfig()\n```\nOverride to perform special processing after configuration changes.\n\n### SaveConfig\n```csharp\npublic virtual void SaveConfig()\n```\nCalled when configuration changes need persisting. Default stores in WL8 settings file.\n\n## Descriptive Properties\n\n### Description\n\n\n```csharp\npublic virtual string Description\n\n```",
    "metadata": {
      "id": "configurable",
      "title": "configurable",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/configurable.md",
      "chunkIndex": "code-context-12",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public virtual bool DisableGlyphReverse\n",
    "metadata": {
      "id": "configurable",
      "title": "configurable",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/configurable.md",
      "chunkIndex": "code-13",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ype` is `ConfigurableType.ParameterList`.\n\n### ProcessConfig\n```csharp\npublic virtual void ProcessConfig()\n```\nOverride to perform special processing after configuration changes.\n\n### SaveConfig\n```csharp\npublic virtual void SaveConfig()\n```\nCalled when configuration changes need persisting. Default stores in WL8 settings file.\n\n## Descriptive Properties\n\n### Description\n```csharp\npublic virtual string Description\n```\nOptional short description used throughout WL8's UI.\n\n### DisableGlyphReverse\n"
    }
  },
  {
    "pageContent": "ype` is `ConfigurableType.ParameterList`.\n\n### ProcessConfig\n```csharp\npublic virtual void ProcessConfig()\n```\nOverride to perform special processing after configuration changes.\n\n### SaveConfig\n```csharp\npublic virtual void SaveConfig()\n```\nCalled when configuration changes need persisting. Default stores in WL8 settings file.\n\n## Descriptive Properties\n\n### Description\n```csharp\npublic virtual string Description\n```\nOptional short description used throughout WL8's UI.\n\n### DisableGlyphReverse\n\n\n```csharp\npublic virtual bool DisableGlyphReverse\n\n```",
    "metadata": {
      "id": "configurable",
      "title": "configurable",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/configurable.md",
      "chunkIndex": "code-context-13",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public virtual string GlyphResource\n",
    "metadata": {
      "id": "configurable",
      "title": "configurable",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/configurable.md",
      "chunkIndex": "code-14",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ration changes.\n\n### SaveConfig\n```csharp\npublic virtual void SaveConfig()\n```\nCalled when configuration changes need persisting. Default stores in WL8 settings file.\n\n## Descriptive Properties\n\n### Description\n```csharp\npublic virtual string Description\n```\nOptional short description used throughout WL8's UI.\n\n### DisableGlyphReverse\n```csharp\npublic virtual bool DisableGlyphReverse\n```\nReturn true to prevent WL8 from reversing the item's `GlyphResource` image in Dark Theme.\n\n### GlyphResource\n"
    }
  },
  {
    "pageContent": "ration changes.\n\n### SaveConfig\n```csharp\npublic virtual void SaveConfig()\n```\nCalled when configuration changes need persisting. Default stores in WL8 settings file.\n\n## Descriptive Properties\n\n### Description\n```csharp\npublic virtual string Description\n```\nOptional short description used throughout WL8's UI.\n\n### DisableGlyphReverse\n```csharp\npublic virtual bool DisableGlyphReverse\n```\nReturn true to prevent WL8 from reversing the item's `GlyphResource` image in Dark Theme.\n\n### GlyphResource\n\n\n```csharp\npublic virtual string GlyphResource\n\n```",
    "metadata": {
      "id": "configurable",
      "title": "configurable",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/configurable.md",
      "chunkIndex": "code-context-14",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public abstract string Name\n",
    "metadata": {
      "id": "configurable",
      "title": "configurable",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/configurable.md",
      "chunkIndex": "code-15",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "\n### Description\n```csharp\npublic virtual string Description\n```\nOptional short description used throughout WL8's UI.\n\n### DisableGlyphReverse\n```csharp\npublic virtual bool DisableGlyphReverse\n```\nReturn true to prevent WL8 from reversing the item's `GlyphResource` image in Dark Theme.\n\n### GlyphResource\n```csharp\npublic virtual string GlyphResource\n```\nString describing an Embedded Resource for representing the item in lists. Format: \"CompanyName.ProjectName.FolderPath.ImageName.png\"\n\n### Name\n"
    }
  },
  {
    "pageContent": "\n### Description\n```csharp\npublic virtual string Description\n```\nOptional short description used throughout WL8's UI.\n\n### DisableGlyphReverse\n```csharp\npublic virtual bool DisableGlyphReverse\n```\nReturn true to prevent WL8 from reversing the item's `GlyphResource` image in Dark Theme.\n\n### GlyphResource\n```csharp\npublic virtual string GlyphResource\n```\nString describing an Embedded Resource for representing the item in lists. Format: \"CompanyName.ProjectName.FolderPath.ImageName.png\"\n\n### Name\n\n\n```csharp\npublic abstract string Name\n\n```",
    "metadata": {
      "id": "configurable",
      "title": "configurable",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/configurable.md",
      "chunkIndex": "code-context-15",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public virtual string URL\n",
    "metadata": {
      "id": "configurable",
      "title": "configurable",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/configurable.md",
      "chunkIndex": "code-16",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "bleGlyphReverse\n```\nReturn true to prevent WL8 from reversing the item's `GlyphResource` image in Dark Theme.\n\n### GlyphResource\n```csharp\npublic virtual string GlyphResource\n```\nString describing an Embedded Resource for representing the item in lists. Format: \"CompanyName.ProjectName.FolderPath.ImageName.png\"\n\n### Name\n```csharp\npublic abstract string Name\n```\nReturns instance name. Configurable objects implement `INamed` interface, usable as target type for `FactoryBase<T>` classes.\n\n### URL\n"
    }
  },
  {
    "pageContent": "bleGlyphReverse\n```\nReturn true to prevent WL8 from reversing the item's `GlyphResource` image in Dark Theme.\n\n### GlyphResource\n```csharp\npublic virtual string GlyphResource\n```\nString describing an Embedded Resource for representing the item in lists. Format: \"CompanyName.ProjectName.FolderPath.ImageName.png\"\n\n### Name\n```csharp\npublic abstract string Name\n```\nReturns instance name. Configurable objects implement `INamed` interface, usable as target type for `FactoryBase<T>` classes.\n\n### URL\n\n\n```csharp\npublic virtual string URL\n\n```",
    "metadata": {
      "id": "configurable",
      "title": "configurable",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/configurable.md",
      "chunkIndex": "code-context-16",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public Parameter AddEnumParameter(string label, System.Enum enumInstance)\n",
    "metadata": {
      "id": "configurable",
      "title": "configurable",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/configurable.md",
      "chunkIndex": "code-17",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "c virtual string GlyphResource\n```\nString describing an Embedded Resource for representing the item in lists. Format: \"CompanyName.ProjectName.FolderPath.ImageName.png\"\n\n### Name\n```csharp\npublic abstract string Name\n```\nReturns instance name. Configurable objects implement `INamed` interface, usable as target type for `FactoryBase<T>` classes.\n\n### URL\n```csharp\npublic virtual string URL\n```\nOptional URL to additional item information, used in WL8's UI.\n\n## Helper Methods\n\n### AddEnumParameter\n"
    }
  },
  {
    "pageContent": "c virtual string GlyphResource\n```\nString describing an Embedded Resource for representing the item in lists. Format: \"CompanyName.ProjectName.FolderPath.ImageName.png\"\n\n### Name\n```csharp\npublic abstract string Name\n```\nReturns instance name. Configurable objects implement `INamed` interface, usable as target type for `FactoryBase<T>` classes.\n\n### URL\n```csharp\npublic virtual string URL\n```\nOptional URL to additional item information, used in WL8's UI.\n\n## Helper Methods\n\n### AddEnumParameter\n\n\n```csharp\npublic Parameter AddEnumParameter(string label, System.Enum enumInstance)\n\n```",
    "metadata": {
      "id": "configurable",
      "title": "configurable",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/configurable.md",
      "chunkIndex": "code-context-17",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public Parameter AddIndicatorParameter(string label, string indicator = \"RSI\", ParameterType pt = ParameterType.Indicator)\n",
    "metadata": {
      "id": "configurable",
      "title": "configurable",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/configurable.md",
      "chunkIndex": "code-18",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "me\n```\nReturns instance name. Configurable objects implement `INamed` interface, usable as target type for `FactoryBase<T>` classes.\n\n### URL\n```csharp\npublic virtual string URL\n```\nOptional URL to additional item information, used in WL8's UI.\n\n## Helper Methods\n\n### AddEnumParameter\n```csharp\npublic Parameter AddEnumParameter(string label, System.Enum enumInstance)\n```\nAdds `StringChoice` Parameter to `Parameters` property with values from specified Enumerated Type.\n\n### AddIndicatorParameter\n"
    }
  },
  {
    "pageContent": "me\n```\nReturns instance name. Configurable objects implement `INamed` interface, usable as target type for `FactoryBase<T>` classes.\n\n### URL\n```csharp\npublic virtual string URL\n```\nOptional URL to additional item information, used in WL8's UI.\n\n## Helper Methods\n\n### AddEnumParameter\n```csharp\npublic Parameter AddEnumParameter(string label, System.Enum enumInstance)\n```\nAdds `StringChoice` Parameter to `Parameters` property with values from specified Enumerated Type.\n\n### AddIndicatorParameter\n\n\n```csharp\npublic Parameter AddIndicatorParameter(string label, string indicator = \"RSI\", ParameterType pt = ParameterType.Indicator)\n\n```",
    "metadata": {
      "id": "configurable",
      "title": "configurable",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/configurable.md",
      "chunkIndex": "code-context-18",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public Parameter AddParameter(string label, ParameterType pt, object defaultValue)\n",
    "metadata": {
      "id": "configurable",
      "title": "configurable",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/configurable.md",
      "chunkIndex": "code-19",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ic Parameter AddEnumParameter(string label, System.Enum enumInstance)\n```\nAdds `StringChoice` Parameter to `Parameters` property with values from specified Enumerated Type.\n\n### AddIndicatorParameter\n```csharp\npublic Parameter AddIndicatorParameter(string label, string indicator = \"RSI\", ParameterType pt = ParameterType.Indicator)\n```\nAdds indicator-type Parameter, setting appropriate values for `IndicatorAbbreviation`, `IndicatorParameters` and `IndicatorInstance` properties.\n\n### AddParameter\n"
    }
  },
  {
    "pageContent": "ic Parameter AddEnumParameter(string label, System.Enum enumInstance)\n```\nAdds `StringChoice` Parameter to `Parameters` property with values from specified Enumerated Type.\n\n### AddIndicatorParameter\n```csharp\npublic Parameter AddIndicatorParameter(string label, string indicator = \"RSI\", ParameterType pt = ParameterType.Indicator)\n```\nAdds indicator-type Parameter, setting appropriate values for `IndicatorAbbreviation`, `IndicatorParameters` and `IndicatorInstance` properties.\n\n### AddParameter\n\n\n```csharp\npublic Parameter AddParameter(string label, ParameterType pt, object defaultValue)\n\n```",
    "metadata": {
      "id": "configurable",
      "title": "configurable",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/configurable.md",
      "chunkIndex": "code-context-19",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public Parameter AddValueCompareParameter(string label = \"is\", string defaultValue = \"equal to\")\n",
    "metadata": {
      "id": "configurable",
      "title": "configurable",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/configurable.md",
      "chunkIndex": "code-20",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": " AddIndicatorParameter\n```csharp\npublic Parameter AddIndicatorParameter(string label, string indicator = \"RSI\", ParameterType pt = ParameterType.Indicator)\n```\nAdds indicator-type Parameter, setting appropriate values for `IndicatorAbbreviation`, `IndicatorParameters` and `IndicatorInstance` properties.\n\n### AddParameter\n```csharp\npublic Parameter AddParameter(string label, ParameterType pt, object defaultValue)\n```\nAdds Parameter instance to `Parameters` property.\n\n### AddValueCompareParameter\n"
    }
  },
  {
    "pageContent": " AddIndicatorParameter\n```csharp\npublic Parameter AddIndicatorParameter(string label, string indicator = \"RSI\", ParameterType pt = ParameterType.Indicator)\n```\nAdds indicator-type Parameter, setting appropriate values for `IndicatorAbbreviation`, `IndicatorParameters` and `IndicatorInstance` properties.\n\n### AddParameter\n```csharp\npublic Parameter AddParameter(string label, ParameterType pt, object defaultValue)\n```\nAdds Parameter instance to `Parameters` property.\n\n### AddValueCompareParameter\n\n\n```csharp\npublic Parameter AddValueCompareParameter(string label = \"is\", string defaultValue = \"equal to\")\n\n```",
    "metadata": {
      "id": "configurable",
      "title": "configurable",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/configurable.md",
      "chunkIndex": "code-context-20",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "# CustomSettingsPanel Class\n\n**Namespace:** WealthLab.Data  \n**Parent:** UserControl\n\nThe `CustomSettingsPanel` class enables Historical Data Provider extension authors to define their own configuration user interface for their Provider in the Data Manager.\n\n## Members\n\n### GetConfigFromUI\n",
    "metadata": {
      "id": "custom-settings-panel",
      "title": "custom-settings-panel",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/custom-settings-panel.md",
      "chunkIndex": 0,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nOverride this method to return a single string that represents the configuration state of your `CustomSettingsPanel` user interface. This string should contain all necessary information to restore the UI state later.\n\n### Provider\n",
    "metadata": {
      "id": "custom-settings-panel",
      "title": "custom-settings-panel",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/custom-settings-panel.md",
      "chunkIndex": 1,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nContains the instance of the `DataProviderBase` that instantiated this `CustomSettingsPanel`. Use this to access the provider's properties and methods.\n\n### SettingsHost\n",
    "metadata": {
      "id": "custom-settings-panel",
      "title": "custom-settings-panel",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/custom-settings-panel.md",
      "chunkIndex": 2,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns an instance of the `ICustomSettingsHost` interface, which allows the `CustomSettingsPanel` to communicate back to the WL8 Data Manager when the user changes something in the user interface. Call this whenever an input field in the `CustomSettingsPanel` UI is modified by the user.\n\n### UpdateUIFromConfig\n",
    "metadata": {
      "id": "custom-settings-panel",
      "title": "custom-settings-panel",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/custom-settings-panel.md",
      "chunkIndex": 3,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nOverride this method to take the incoming configuration string (config parameter) and populate the values of your `CustomSettingsPanel` user interface. This is called when the panel needs to restore its state from a saved configuration.\n\n## Usage Example\n\n```csharp\npublic class MyProviderSettingsPanel : CustomSettingsPanel\n{\n    private TextBox apiKeyTextBox;\n\n    public MyProviderSettingsPanel()\n    {\n        // Create your UI elements\n        apiKeyTextBox = new TextBox();\n        apiKeyTextBox.TextChanged += (s, e) => \n        {\n            // Notify WL8 of changes\n            SettingsHost?.SettingsChanged();\n        };\n    }\n\n    public override string GetConfigFromUI()\n    {\n        // Return configuration as string\n        return apiKeyTextBox.Text;\n    }\n\n    public override void UpdateUIFromConfig(string config)\n    {\n        // Restore UI state from config\n        apiKeyTextBox.Text = config;\n    }\n} ",
    "metadata": {
      "id": "custom-settings-panel",
      "title": "custom-settings-panel",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/custom-settings-panel.md",
      "chunkIndex": 4,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "public virtual string GetConfigFromUI\n",
    "metadata": {
      "id": "custom-settings-panel",
      "title": "custom-settings-panel",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/custom-settings-panel.md",
      "chunkIndex": "code-0",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "# CustomSettingsPanel Class\n\n**Namespace:** WealthLab.Data  \n**Parent:** UserControl\n\nThe `CustomSettingsPanel` class enables Historical Data Provider extension authors to define their own configuration user interface for their Provider in the Data Manager.\n\n## Members\n\n### GetConfigFromUI\n"
    }
  },
  {
    "pageContent": "# CustomSettingsPanel Class\n\n**Namespace:** WealthLab.Data  \n**Parent:** UserControl\n\nThe `CustomSettingsPanel` class enables Historical Data Provider extension authors to define their own configuration user interface for their Provider in the Data Manager.\n\n## Members\n\n### GetConfigFromUI\n\n\n```csharp\npublic virtual string GetConfigFromUI\n\n```",
    "metadata": {
      "id": "custom-settings-panel",
      "title": "custom-settings-panel",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/custom-settings-panel.md",
      "chunkIndex": "code-context-0",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public ProviderBase Provider\n",
    "metadata": {
      "id": "custom-settings-panel",
      "title": "custom-settings-panel",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/custom-settings-panel.md",
      "chunkIndex": "code-1",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "serControl\n\nThe `CustomSettingsPanel` class enables Historical Data Provider extension authors to define their own configuration user interface for their Provider in the Data Manager.\n\n## Members\n\n### GetConfigFromUI\n```csharp\npublic virtual string GetConfigFromUI\n```\nOverride this method to return a single string that represents the configuration state of your `CustomSettingsPanel` user interface. This string should contain all necessary information to restore the UI state later.\n\n### Provider\n"
    }
  },
  {
    "pageContent": "serControl\n\nThe `CustomSettingsPanel` class enables Historical Data Provider extension authors to define their own configuration user interface for their Provider in the Data Manager.\n\n## Members\n\n### GetConfigFromUI\n```csharp\npublic virtual string GetConfigFromUI\n```\nOverride this method to return a single string that represents the configuration state of your `CustomSettingsPanel` user interface. This string should contain all necessary information to restore the UI state later.\n\n### Provider\n\n\n```csharp\npublic ProviderBase Provider\n\n```",
    "metadata": {
      "id": "custom-settings-panel",
      "title": "custom-settings-panel",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/custom-settings-panel.md",
      "chunkIndex": "code-context-1",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public ICustomSettingsHost SettingsHost\n",
    "metadata": {
      "id": "custom-settings-panel",
      "title": "custom-settings-panel",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/custom-settings-panel.md",
      "chunkIndex": "code-2",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "mUI\n```csharp\npublic virtual string GetConfigFromUI\n```\nOverride this method to return a single string that represents the configuration state of your `CustomSettingsPanel` user interface. This string should contain all necessary information to restore the UI state later.\n\n### Provider\n```csharp\npublic ProviderBase Provider\n```\nContains the instance of the `DataProviderBase` that instantiated this `CustomSettingsPanel`. Use this to access the provider's properties and methods.\n\n### SettingsHost\n"
    }
  },
  {
    "pageContent": "mUI\n```csharp\npublic virtual string GetConfigFromUI\n```\nOverride this method to return a single string that represents the configuration state of your `CustomSettingsPanel` user interface. This string should contain all necessary information to restore the UI state later.\n\n### Provider\n```csharp\npublic ProviderBase Provider\n```\nContains the instance of the `DataProviderBase` that instantiated this `CustomSettingsPanel`. Use this to access the provider's properties and methods.\n\n### SettingsHost\n\n\n```csharp\npublic ICustomSettingsHost SettingsHost\n\n```",
    "metadata": {
      "id": "custom-settings-panel",
      "title": "custom-settings-panel",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/custom-settings-panel.md",
      "chunkIndex": "code-context-2",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public virtual void UpdateUIFromConfig(string config)\n",
    "metadata": {
      "id": "custom-settings-panel",
      "title": "custom-settings-panel",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/custom-settings-panel.md",
      "chunkIndex": "code-3",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "viderBase` that instantiated this `CustomSettingsPanel`. Use this to access the provider's properties and methods.\n\n### SettingsHost\n```csharp\npublic ICustomSettingsHost SettingsHost\n```\nReturns an instance of the `ICustomSettingsHost` interface, which allows the `CustomSettingsPanel` to communicate back to the WL8 Data Manager when the user changes something in the user interface. Call this whenever an input field in the `CustomSettingsPanel` UI is modified by the user.\n\n### UpdateUIFromConfig\n"
    }
  },
  {
    "pageContent": "viderBase` that instantiated this `CustomSettingsPanel`. Use this to access the provider's properties and methods.\n\n### SettingsHost\n```csharp\npublic ICustomSettingsHost SettingsHost\n```\nReturns an instance of the `ICustomSettingsHost` interface, which allows the `CustomSettingsPanel` to communicate back to the WL8 Data Manager when the user changes something in the user interface. Call this whenever an input field in the `CustomSettingsPanel` UI is modified by the user.\n\n### UpdateUIFromConfig\n\n\n```csharp\npublic virtual void UpdateUIFromConfig(string config)\n\n```",
    "metadata": {
      "id": "custom-settings-panel",
      "title": "custom-settings-panel",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/custom-settings-panel.md",
      "chunkIndex": "code-context-3",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "# DataPanelItem Class\n\n**Namespace:** WealthLab.Backtest  \n**Parent:** Object\n\nContains the information to be displayed in a row in the WL8 Data Panel. When building a Data Panel ScoreCard Extension, you'll create instances of `DataPanelItem` objects and add them to the List returned in the `GetItems` method.\n\n## Constructors\n\n",
    "metadata": {
      "id": "data-panel-item",
      "title": "data-panel-item",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/data-panel-item.md",
      "chunkIndex": 0,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n`DataPanelItem` provides several constructors for flexibility:\n- Default constructor creates an empty item\n- String-based constructor for text values\n- Numeric constructor with optional formatting parameters:\n  - `dec`: Number of decimal places\n  - `colorize`: Enable color coding based on value\n  - `suffix`: Text to append to the value\n- Numeric constructor with explicit color specification\n\n## Properties\n\n### Color\n",
    "metadata": {
      "id": "data-panel-item",
      "title": "data-panel-item",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/data-panel-item.md",
      "chunkIndex": 1,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nIf assigned a non-null `WLColor` value, determines the color to use when rendering the item in the Data Panel.\n\n### Colorize\n",
    "metadata": {
      "id": "data-panel-item",
      "title": "data-panel-item",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/data-panel-item.md",
      "chunkIndex": 2,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nWhen true, the text will be colored based on its `NumberValue`:\n- Green for positive values\n- Red for negative values\n\n### Decimals\n",
    "metadata": {
      "id": "data-panel-item",
      "title": "data-panel-item",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/data-panel-item.md",
      "chunkIndex": 3,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nIf assigned a non-null integer value, determines the number of decimal places to use when rendering the item's `NumberValue` in the \"Value\" column.\n\n### Header\n",
    "metadata": {
      "id": "data-panel-item",
      "title": "data-panel-item",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/data-panel-item.md",
      "chunkIndex": 4,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nContains the header text that will be displayed in the \"Item\" column of the Data Panel.\n\n### NumberValue\n",
    "metadata": {
      "id": "data-panel-item",
      "title": "data-panel-item",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/data-panel-item.md",
      "chunkIndex": 5,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nIf `StringValue` is null, this numeric value will be used as the content of the item's \"Value\" in the Data Panel.\n\n### StringValue\n",
    "metadata": {
      "id": "data-panel-item",
      "title": "data-panel-item",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/data-panel-item.md",
      "chunkIndex": 6,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nIf assigned a non-null string value, it will be used as the content of the item's \"Value\" in the Data Panel.\n\n### Suffix\n",
    "metadata": {
      "id": "data-panel-item",
      "title": "data-panel-item",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/data-panel-item.md",
      "chunkIndex": 7,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nIf assigned a non-null string, it will be appended to the text of the item's \"Value\" column.\n\n## Usage Example\n\n",
    "metadata": {
      "id": "data-panel-item",
      "title": "data-panel-item",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/data-panel-item.md",
      "chunkIndex": 8,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "public DataPanelItem()\npublic DataPanelItem(string header, string stringValue)\npublic DataPanelItem(string header, double numberValue, int? dec = null, bool colorize = false, string suffix = null)\npublic DataPanelItem(string header, double numberValue, WLColor color)\n",
    "metadata": {
      "id": "data-panel-item",
      "title": "data-panel-item",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/data-panel-item.md",
      "chunkIndex": "code-0",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "# DataPanelItem Class\n\n**Namespace:** WealthLab.Backtest  \n**Parent:** Object\n\nContains the information to be displayed in a row in the WL8 Data Panel. When building a Data Panel ScoreCard Extension, you'll create instances of `DataPanelItem` objects and add them to the List returned in the `GetItems` method.\n\n## Constructors\n\n"
    }
  },
  {
    "pageContent": "# DataPanelItem Class\n\n**Namespace:** WealthLab.Backtest  \n**Parent:** Object\n\nContains the information to be displayed in a row in the WL8 Data Panel. When building a Data Panel ScoreCard Extension, you'll create instances of `DataPanelItem` objects and add them to the List returned in the `GetItems` method.\n\n## Constructors\n\n\n\n```csharp\npublic DataPanelItem()\npublic DataPanelItem(string header, string stringValue)\npublic DataPanelItem(string header, double numberValue, int? dec = null, bool colorize = false, string suffix = null)\npublic DataPanelItem(string header, double numberValue, WLColor color)\n\n```",
    "metadata": {
      "id": "data-panel-item",
      "title": "data-panel-item",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/data-panel-item.md",
      "chunkIndex": "code-context-0",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public WLColor Color\n",
    "metadata": {
      "id": "data-panel-item",
      "title": "data-panel-item",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/data-panel-item.md",
      "chunkIndex": "code-1",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ll)\npublic DataPanelItem(string header, double numberValue, WLColor color)\n```\n\n`DataPanelItem` provides several constructors for flexibility:\n- Default constructor creates an empty item\n- String-based constructor for text values\n- Numeric constructor with optional formatting parameters:\n  - `dec`: Number of decimal places\n  - `colorize`: Enable color coding based on value\n  - `suffix`: Text to append to the value\n- Numeric constructor with explicit color specification\n\n## Properties\n\n### Color\n"
    }
  },
  {
    "pageContent": "ll)\npublic DataPanelItem(string header, double numberValue, WLColor color)\n```\n\n`DataPanelItem` provides several constructors for flexibility:\n- Default constructor creates an empty item\n- String-based constructor for text values\n- Numeric constructor with optional formatting parameters:\n  - `dec`: Number of decimal places\n  - `colorize`: Enable color coding based on value\n  - `suffix`: Text to append to the value\n- Numeric constructor with explicit color specification\n\n## Properties\n\n### Color\n\n\n```csharp\npublic WLColor Color\n\n```",
    "metadata": {
      "id": "data-panel-item",
      "title": "data-panel-item",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/data-panel-item.md",
      "chunkIndex": "code-context-1",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public bool Colorize\n",
    "metadata": {
      "id": "data-panel-item",
      "title": "data-panel-item",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/data-panel-item.md",
      "chunkIndex": "code-2",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ctor creates an empty item\n- String-based constructor for text values\n- Numeric constructor with optional formatting parameters:\n  - `dec`: Number of decimal places\n  - `colorize`: Enable color coding based on value\n  - `suffix`: Text to append to the value\n- Numeric constructor with explicit color specification\n\n## Properties\n\n### Color\n```csharp\npublic WLColor Color\n```\nIf assigned a non-null `WLColor` value, determines the color to use when rendering the item in the Data Panel.\n\n### Colorize\n"
    }
  },
  {
    "pageContent": "ctor creates an empty item\n- String-based constructor for text values\n- Numeric constructor with optional formatting parameters:\n  - `dec`: Number of decimal places\n  - `colorize`: Enable color coding based on value\n  - `suffix`: Text to append to the value\n- Numeric constructor with explicit color specification\n\n## Properties\n\n### Color\n```csharp\npublic WLColor Color\n```\nIf assigned a non-null `WLColor` value, determines the color to use when rendering the item in the Data Panel.\n\n### Colorize\n\n\n```csharp\npublic bool Colorize\n\n```",
    "metadata": {
      "id": "data-panel-item",
      "title": "data-panel-item",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/data-panel-item.md",
      "chunkIndex": "code-context-2",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public int? Decimals\n",
    "metadata": {
      "id": "data-panel-item",
      "title": "data-panel-item",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/data-panel-item.md",
      "chunkIndex": "code-3",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "- `colorize`: Enable color coding based on value\n  - `suffix`: Text to append to the value\n- Numeric constructor with explicit color specification\n\n## Properties\n\n### Color\n```csharp\npublic WLColor Color\n```\nIf assigned a non-null `WLColor` value, determines the color to use when rendering the item in the Data Panel.\n\n### Colorize\n```csharp\npublic bool Colorize\n```\nWhen true, the text will be colored based on its `NumberValue`:\n- Green for positive values\n- Red for negative values\n\n### Decimals\n"
    }
  },
  {
    "pageContent": "- `colorize`: Enable color coding based on value\n  - `suffix`: Text to append to the value\n- Numeric constructor with explicit color specification\n\n## Properties\n\n### Color\n```csharp\npublic WLColor Color\n```\nIf assigned a non-null `WLColor` value, determines the color to use when rendering the item in the Data Panel.\n\n### Colorize\n```csharp\npublic bool Colorize\n```\nWhen true, the text will be colored based on its `NumberValue`:\n- Green for positive values\n- Red for negative values\n\n### Decimals\n\n\n```csharp\npublic int? Decimals\n\n```",
    "metadata": {
      "id": "data-panel-item",
      "title": "data-panel-item",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/data-panel-item.md",
      "chunkIndex": "code-context-3",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public string Header\n",
    "metadata": {
      "id": "data-panel-item",
      "title": "data-panel-item",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/data-panel-item.md",
      "chunkIndex": "code-4",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "or Color\n```\nIf assigned a non-null `WLColor` value, determines the color to use when rendering the item in the Data Panel.\n\n### Colorize\n```csharp\npublic bool Colorize\n```\nWhen true, the text will be colored based on its `NumberValue`:\n- Green for positive values\n- Red for negative values\n\n### Decimals\n```csharp\npublic int? Decimals\n```\nIf assigned a non-null integer value, determines the number of decimal places to use when rendering the item's `NumberValue` in the \"Value\" column.\n\n### Header\n"
    }
  },
  {
    "pageContent": "or Color\n```\nIf assigned a non-null `WLColor` value, determines the color to use when rendering the item in the Data Panel.\n\n### Colorize\n```csharp\npublic bool Colorize\n```\nWhen true, the text will be colored based on its `NumberValue`:\n- Green for positive values\n- Red for negative values\n\n### Decimals\n```csharp\npublic int? Decimals\n```\nIf assigned a non-null integer value, determines the number of decimal places to use when rendering the item's `NumberValue` in the \"Value\" column.\n\n### Header\n\n\n```csharp\npublic string Header\n\n```",
    "metadata": {
      "id": "data-panel-item",
      "title": "data-panel-item",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/data-panel-item.md",
      "chunkIndex": "code-context-4",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public double NumberValue\n",
    "metadata": {
      "id": "data-panel-item",
      "title": "data-panel-item",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/data-panel-item.md",
      "chunkIndex": "code-5",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "`csharp\npublic bool Colorize\n```\nWhen true, the text will be colored based on its `NumberValue`:\n- Green for positive values\n- Red for negative values\n\n### Decimals\n```csharp\npublic int? Decimals\n```\nIf assigned a non-null integer value, determines the number of decimal places to use when rendering the item's `NumberValue` in the \"Value\" column.\n\n### Header\n```csharp\npublic string Header\n```\nContains the header text that will be displayed in the \"Item\" column of the Data Panel.\n\n### NumberValue\n"
    }
  },
  {
    "pageContent": "`csharp\npublic bool Colorize\n```\nWhen true, the text will be colored based on its `NumberValue`:\n- Green for positive values\n- Red for negative values\n\n### Decimals\n```csharp\npublic int? Decimals\n```\nIf assigned a non-null integer value, determines the number of decimal places to use when rendering the item's `NumberValue` in the \"Value\" column.\n\n### Header\n```csharp\npublic string Header\n```\nContains the header text that will be displayed in the \"Item\" column of the Data Panel.\n\n### NumberValue\n\n\n```csharp\npublic double NumberValue\n\n```",
    "metadata": {
      "id": "data-panel-item",
      "title": "data-panel-item",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/data-panel-item.md",
      "chunkIndex": "code-context-5",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public string StringValue\n",
    "metadata": {
      "id": "data-panel-item",
      "title": "data-panel-item",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/data-panel-item.md",
      "chunkIndex": "code-6",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "arp\npublic int? Decimals\n```\nIf assigned a non-null integer value, determines the number of decimal places to use when rendering the item's `NumberValue` in the \"Value\" column.\n\n### Header\n```csharp\npublic string Header\n```\nContains the header text that will be displayed in the \"Item\" column of the Data Panel.\n\n### NumberValue\n```csharp\npublic double NumberValue\n```\nIf `StringValue` is null, this numeric value will be used as the content of the item's \"Value\" in the Data Panel.\n\n### StringValue\n"
    }
  },
  {
    "pageContent": "arp\npublic int? Decimals\n```\nIf assigned a non-null integer value, determines the number of decimal places to use when rendering the item's `NumberValue` in the \"Value\" column.\n\n### Header\n```csharp\npublic string Header\n```\nContains the header text that will be displayed in the \"Item\" column of the Data Panel.\n\n### NumberValue\n```csharp\npublic double NumberValue\n```\nIf `StringValue` is null, this numeric value will be used as the content of the item's \"Value\" in the Data Panel.\n\n### StringValue\n\n\n```csharp\npublic string StringValue\n\n```",
    "metadata": {
      "id": "data-panel-item",
      "title": "data-panel-item",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/data-panel-item.md",
      "chunkIndex": "code-context-6",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public string Suffix\n",
    "metadata": {
      "id": "data-panel-item",
      "title": "data-panel-item",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/data-panel-item.md",
      "chunkIndex": "code-7",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "\"Value\" column.\n\n### Header\n```csharp\npublic string Header\n```\nContains the header text that will be displayed in the \"Item\" column of the Data Panel.\n\n### NumberValue\n```csharp\npublic double NumberValue\n```\nIf `StringValue` is null, this numeric value will be used as the content of the item's \"Value\" in the Data Panel.\n\n### StringValue\n```csharp\npublic string StringValue\n```\nIf assigned a non-null string value, it will be used as the content of the item's \"Value\" in the Data Panel.\n\n### Suffix\n"
    }
  },
  {
    "pageContent": "\"Value\" column.\n\n### Header\n```csharp\npublic string Header\n```\nContains the header text that will be displayed in the \"Item\" column of the Data Panel.\n\n### NumberValue\n```csharp\npublic double NumberValue\n```\nIf `StringValue` is null, this numeric value will be used as the content of the item's \"Value\" in the Data Panel.\n\n### StringValue\n```csharp\npublic string StringValue\n```\nIf assigned a non-null string value, it will be used as the content of the item's \"Value\" in the Data Panel.\n\n### Suffix\n\n\n```csharp\npublic string Suffix\n\n```",
    "metadata": {
      "id": "data-panel-item",
      "title": "data-panel-item",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/data-panel-item.md",
      "chunkIndex": "code-context-7",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public List<DataPanelItem> GetItems()\n{\n    var items = new List<DataPanelItem>();\n    \n    // String-based item\n    items.Add(new DataPanelItem(\"Status\", \"Active\"));\n    \n    // Numeric item with 2 decimal places and % suffix\n    items.Add(new DataPanelItem(\"Return\", 15.7532, 2, true, \"%\"));\n    \n    // Numeric item with custom color\n    items.Add(new DataPanelItem(\"Risk Score\", 7.5, WLColor.Orange));\n    \n    return items;\n}\n",
    "metadata": {
      "id": "data-panel-item",
      "title": "data-panel-item",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/data-panel-item.md",
      "chunkIndex": "code-8",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "el.\n\n### NumberValue\n```csharp\npublic double NumberValue\n```\nIf `StringValue` is null, this numeric value will be used as the content of the item's \"Value\" in the Data Panel.\n\n### StringValue\n```csharp\npublic string StringValue\n```\nIf assigned a non-null string value, it will be used as the content of the item's \"Value\" in the Data Panel.\n\n### Suffix\n```csharp\npublic string Suffix\n```\nIf assigned a non-null string, it will be appended to the text of the item's \"Value\" column.\n\n## Usage Example\n\n"
    }
  },
  {
    "pageContent": "el.\n\n### NumberValue\n```csharp\npublic double NumberValue\n```\nIf `StringValue` is null, this numeric value will be used as the content of the item's \"Value\" in the Data Panel.\n\n### StringValue\n```csharp\npublic string StringValue\n```\nIf assigned a non-null string value, it will be used as the content of the item's \"Value\" in the Data Panel.\n\n### Suffix\n```csharp\npublic string Suffix\n```\nIf assigned a non-null string, it will be appended to the text of the item's \"Value\" column.\n\n## Usage Example\n\n\n\n```csharp\npublic List<DataPanelItem> GetItems()\n{\n    var items = new List<DataPanelItem>();\n    \n    // String-based item\n    items.Add(new DataPanelItem(\"Status\", \"Active\"));\n    \n    // Numeric item with 2 decimal places and % suffix\n    items.Add(new DataPanelItem(\"Return\", 15.7532, 2, true, \"%\"));\n    \n    // Numeric item with custom color\n    items.Add(new DataPanelItem(\"Risk Score\", 7.5, WLColor.Orange));\n    \n    return items;\n}\n\n```",
    "metadata": {
      "id": "data-panel-item",
      "title": "data-panel-item",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/data-panel-item.md",
      "chunkIndex": "code-context-8",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "# DataSet Class\n\n**Namespace:** WealthLab.Core  \n**Parent:** Object\n\nThe `DataSet` class represents a DataSet in WL8, which can be created either by users through the New DataSet Wizard or by a DataSet Provider. DataSet Providers can return instances of classes that derive from `DataSet`, in addition to plain vanilla DataSets. The class contains several properties and methods that can be overridden when creating a derived class.\n\n## Core Properties\n\n### DSString\n",
    "metadata": {
      "id": "dataset",
      "title": "dataset",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/dataset.md",
      "chunkIndex": 0,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nContains configuration information about the DataSet. Interpretation depends on creation context. Historical Data Providers and DataSet Providers use this to configure the DataSet as it's read from the local file system, determining the contained Symbols.\n\n### IsDynamic\n",
    "metadata": {
      "id": "dataset",
      "title": "dataset",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/dataset.md",
      "chunkIndex": 1,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns true if the DataSet has any entries defined in its `DynamicDateRanges` property.\n\n### IsUserCreated\n",
    "metadata": {
      "id": "dataset",
      "title": "dataset",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/dataset.md",
      "chunkIndex": 2,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns true if the DataSet was created by the user via the New DataSet Wizard, false if created by a DataSet Provider.\n\n### Name\n",
    "metadata": {
      "id": "dataset",
      "title": "dataset",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/dataset.md",
      "chunkIndex": 3,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nContains the DataSet name, either user-entered in the New DataSet Wizard or assigned by a DataSet Provider.\n\n### Symbols\n",
    "metadata": {
      "id": "dataset",
      "title": "dataset",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/dataset.md",
      "chunkIndex": 4,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nA List of strings containing the symbols in the DataSet.\n\n### SymbolString\n",
    "metadata": {
      "id": "dataset",
      "title": "dataset",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/dataset.md",
      "chunkIndex": 5,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nAccesses the Symbols as a single, comma-delimited string.\n\n## Members for Derived Classes\n\n### DynamicDateRanges\n",
    "metadata": {
      "id": "dataset",
      "title": "dataset",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/dataset.md",
      "chunkIndex": 6,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nDictionary of `DateRange` instances, keyed by symbol, representing when specific symbols should be considered part of the DataSet. Absence of an entry means the symbol is always part of the DataSet. Used by the WL8 backtester to restrict trades to specified date ranges, enabling modeling of actual stock market indices.\n\n### GetHistory\n",
    "metadata": {
      "id": "dataset",
      "title": "dataset",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/dataset.md",
      "chunkIndex": 7,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nOverride this method (when `ShouldReturnOwnData` is true) to return historical data as a `BarHistory` instance for the specified parameters. If `maxBars` is non-zero, return that many bars; otherwise use the date range parameters.\n\n### Glyph\n",
    "metadata": {
      "id": "dataset",
      "title": "dataset",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/dataset.md",
      "chunkIndex": 8,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nOptional `System.Drawing.Bitmap` to represent the DataSet in the WL8 DataSet tree. Defaults to the associated Historical Data Provider's Glyph or a generic image.\n\n### PostDataLoad\n",
    "metadata": {
      "id": "dataset",
      "title": "dataset",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/dataset.md",
      "chunkIndex": 9,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nCalled after `GetHistory`. Default implementation assigns `DynamicDateRanges` to the `BarHistory` instance. Override for additional processing, but call `base.PostDataLoad` to retain base functionality.\n\n### PreferredDataProviderName\n",
    "metadata": {
      "id": "dataset",
      "title": "dataset",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/dataset.md",
      "chunkIndex": 10,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nAssociates the DataSet with a specific Historical Data Provider. WL8 will prioritize this provider when getting data for this DataSet.\n\n### ReadOnlySymbols\n",
    "metadata": {
      "id": "dataset",
      "title": "dataset",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/dataset.md",
      "chunkIndex": 11,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nDetermines if users can modify the DataSet's symbols.\n\n### ShouldReturnOwnData\n",
    "metadata": {
      "id": "dataset",
      "title": "dataset",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/dataset.md",
      "chunkIndex": 12,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nOverride to return true if the DataSet should handle its own historical data retrieval. If false (default), WL8 uses its built-in Historical Data Providers mechanism. If true, implement `SupportsScale` and `GetHistory`.\n\n### SupportsScale\n",
    "metadata": {
      "id": "dataset",
      "title": "dataset",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/dataset.md",
      "chunkIndex": 13,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nWhen `ShouldReturnOwnData` is true, override to indicate support for the specified scale.\n\n### TradableSymbols\n",
    "metadata": {
      "id": "dataset",
      "title": "dataset",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/dataset.md",
      "chunkIndex": 14,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nBy default returns the same as `Symbols`. Override to return a subset of currently tradable symbols (e.g., excluding decommissioned stocks). Used by WL8 Strategy Monitor for symbol activation.\n\n## Usage Example\n\n",
    "metadata": {
      "id": "dataset",
      "title": "dataset",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/dataset.md",
      "chunkIndex": 15,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "public string DSString\n",
    "metadata": {
      "id": "dataset",
      "title": "dataset",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/dataset.md",
      "chunkIndex": "code-0",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "# DataSet Class\n\n**Namespace:** WealthLab.Core  \n**Parent:** Object\n\nThe `DataSet` class represents a DataSet in WL8, which can be created either by users through the New DataSet Wizard or by a DataSet Provider. DataSet Providers can return instances of classes that derive from `DataSet`, in addition to plain vanilla DataSets. The class contains several properties and methods that can be overridden when creating a derived class.\n\n## Core Properties\n\n### DSString\n"
    }
  },
  {
    "pageContent": "# DataSet Class\n\n**Namespace:** WealthLab.Core  \n**Parent:** Object\n\nThe `DataSet` class represents a DataSet in WL8, which can be created either by users through the New DataSet Wizard or by a DataSet Provider. DataSet Providers can return instances of classes that derive from `DataSet`, in addition to plain vanilla DataSets. The class contains several properties and methods that can be overridden when creating a derived class.\n\n## Core Properties\n\n### DSString\n\n\n```csharp\npublic string DSString\n\n```",
    "metadata": {
      "id": "dataset",
      "title": "dataset",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/dataset.md",
      "chunkIndex": "code-context-0",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public bool IsDynamic\n",
    "metadata": {
      "id": "dataset",
      "title": "dataset",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/dataset.md",
      "chunkIndex": "code-1",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "rom `DataSet`, in addition to plain vanilla DataSets. The class contains several properties and methods that can be overridden when creating a derived class.\n\n## Core Properties\n\n### DSString\n```csharp\npublic string DSString\n```\nContains configuration information about the DataSet. Interpretation depends on creation context. Historical Data Providers and DataSet Providers use this to configure the DataSet as it's read from the local file system, determining the contained Symbols.\n\n### IsDynamic\n"
    }
  },
  {
    "pageContent": "rom `DataSet`, in addition to plain vanilla DataSets. The class contains several properties and methods that can be overridden when creating a derived class.\n\n## Core Properties\n\n### DSString\n```csharp\npublic string DSString\n```\nContains configuration information about the DataSet. Interpretation depends on creation context. Historical Data Providers and DataSet Providers use this to configure the DataSet as it's read from the local file system, determining the contained Symbols.\n\n### IsDynamic\n\n\n```csharp\npublic bool IsDynamic\n\n```",
    "metadata": {
      "id": "dataset",
      "title": "dataset",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/dataset.md",
      "chunkIndex": "code-context-1",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public bool IsUserCreated\n",
    "metadata": {
      "id": "dataset",
      "title": "dataset",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/dataset.md",
      "chunkIndex": "code-2",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "erived class.\n\n## Core Properties\n\n### DSString\n```csharp\npublic string DSString\n```\nContains configuration information about the DataSet. Interpretation depends on creation context. Historical Data Providers and DataSet Providers use this to configure the DataSet as it's read from the local file system, determining the contained Symbols.\n\n### IsDynamic\n```csharp\npublic bool IsDynamic\n```\nReturns true if the DataSet has any entries defined in its `DynamicDateRanges` property.\n\n### IsUserCreated\n"
    }
  },
  {
    "pageContent": "erived class.\n\n## Core Properties\n\n### DSString\n```csharp\npublic string DSString\n```\nContains configuration information about the DataSet. Interpretation depends on creation context. Historical Data Providers and DataSet Providers use this to configure the DataSet as it's read from the local file system, determining the contained Symbols.\n\n### IsDynamic\n```csharp\npublic bool IsDynamic\n```\nReturns true if the DataSet has any entries defined in its `DynamicDateRanges` property.\n\n### IsUserCreated\n\n\n```csharp\npublic bool IsUserCreated\n\n```",
    "metadata": {
      "id": "dataset",
      "title": "dataset",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/dataset.md",
      "chunkIndex": "code-context-2",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public string Name\n",
    "metadata": {
      "id": "dataset",
      "title": "dataset",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/dataset.md",
      "chunkIndex": "code-3",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ion context. Historical Data Providers and DataSet Providers use this to configure the DataSet as it's read from the local file system, determining the contained Symbols.\n\n### IsDynamic\n```csharp\npublic bool IsDynamic\n```\nReturns true if the DataSet has any entries defined in its `DynamicDateRanges` property.\n\n### IsUserCreated\n```csharp\npublic bool IsUserCreated\n```\nReturns true if the DataSet was created by the user via the New DataSet Wizard, false if created by a DataSet Provider.\n\n### Name\n"
    }
  },
  {
    "pageContent": "ion context. Historical Data Providers and DataSet Providers use this to configure the DataSet as it's read from the local file system, determining the contained Symbols.\n\n### IsDynamic\n```csharp\npublic bool IsDynamic\n```\nReturns true if the DataSet has any entries defined in its `DynamicDateRanges` property.\n\n### IsUserCreated\n```csharp\npublic bool IsUserCreated\n```\nReturns true if the DataSet was created by the user via the New DataSet Wizard, false if created by a DataSet Provider.\n\n### Name\n\n\n```csharp\npublic string Name\n\n```",
    "metadata": {
      "id": "dataset",
      "title": "dataset",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/dataset.md",
      "chunkIndex": "code-context-3",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public List<string> Symbols\n",
    "metadata": {
      "id": "dataset",
      "title": "dataset",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/dataset.md",
      "chunkIndex": "code-4",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ntained Symbols.\n\n### IsDynamic\n```csharp\npublic bool IsDynamic\n```\nReturns true if the DataSet has any entries defined in its `DynamicDateRanges` property.\n\n### IsUserCreated\n```csharp\npublic bool IsUserCreated\n```\nReturns true if the DataSet was created by the user via the New DataSet Wizard, false if created by a DataSet Provider.\n\n### Name\n```csharp\npublic string Name\n```\nContains the DataSet name, either user-entered in the New DataSet Wizard or assigned by a DataSet Provider.\n\n### Symbols\n"
    }
  },
  {
    "pageContent": "ntained Symbols.\n\n### IsDynamic\n```csharp\npublic bool IsDynamic\n```\nReturns true if the DataSet has any entries defined in its `DynamicDateRanges` property.\n\n### IsUserCreated\n```csharp\npublic bool IsUserCreated\n```\nReturns true if the DataSet was created by the user via the New DataSet Wizard, false if created by a DataSet Provider.\n\n### Name\n```csharp\npublic string Name\n```\nContains the DataSet name, either user-entered in the New DataSet Wizard or assigned by a DataSet Provider.\n\n### Symbols\n\n\n```csharp\npublic List<string> Symbols\n\n```",
    "metadata": {
      "id": "dataset",
      "title": "dataset",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/dataset.md",
      "chunkIndex": "code-context-4",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public string SymbolString\n",
    "metadata": {
      "id": "dataset",
      "title": "dataset",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/dataset.md",
      "chunkIndex": "code-5",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ed in its `DynamicDateRanges` property.\n\n### IsUserCreated\n```csharp\npublic bool IsUserCreated\n```\nReturns true if the DataSet was created by the user via the New DataSet Wizard, false if created by a DataSet Provider.\n\n### Name\n```csharp\npublic string Name\n```\nContains the DataSet name, either user-entered in the New DataSet Wizard or assigned by a DataSet Provider.\n\n### Symbols\n```csharp\npublic List<string> Symbols\n```\nA List of strings containing the symbols in the DataSet.\n\n### SymbolString\n"
    }
  },
  {
    "pageContent": "ed in its `DynamicDateRanges` property.\n\n### IsUserCreated\n```csharp\npublic bool IsUserCreated\n```\nReturns true if the DataSet was created by the user via the New DataSet Wizard, false if created by a DataSet Provider.\n\n### Name\n```csharp\npublic string Name\n```\nContains the DataSet name, either user-entered in the New DataSet Wizard or assigned by a DataSet Provider.\n\n### Symbols\n```csharp\npublic List<string> Symbols\n```\nA List of strings containing the symbols in the DataSet.\n\n### SymbolString\n\n\n```csharp\npublic string SymbolString\n\n```",
    "metadata": {
      "id": "dataset",
      "title": "dataset",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/dataset.md",
      "chunkIndex": "code-context-5",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public Dictionary<string, DateRange> DynamicDateRanges\n",
    "metadata": {
      "id": "dataset",
      "title": "dataset",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/dataset.md",
      "chunkIndex": "code-6",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": " the New DataSet Wizard, false if created by a DataSet Provider.\n\n### Name\n```csharp\npublic string Name\n```\nContains the DataSet name, either user-entered in the New DataSet Wizard or assigned by a DataSet Provider.\n\n### Symbols\n```csharp\npublic List<string> Symbols\n```\nA List of strings containing the symbols in the DataSet.\n\n### SymbolString\n```csharp\npublic string SymbolString\n```\nAccesses the Symbols as a single, comma-delimited string.\n\n## Members for Derived Classes\n\n### DynamicDateRanges\n"
    }
  },
  {
    "pageContent": " the New DataSet Wizard, false if created by a DataSet Provider.\n\n### Name\n```csharp\npublic string Name\n```\nContains the DataSet name, either user-entered in the New DataSet Wizard or assigned by a DataSet Provider.\n\n### Symbols\n```csharp\npublic List<string> Symbols\n```\nA List of strings containing the symbols in the DataSet.\n\n### SymbolString\n```csharp\npublic string SymbolString\n```\nAccesses the Symbols as a single, comma-delimited string.\n\n## Members for Derived Classes\n\n### DynamicDateRanges\n\n\n```csharp\npublic Dictionary<string, DateRange> DynamicDateRanges\n\n```",
    "metadata": {
      "id": "dataset",
      "title": "dataset",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/dataset.md",
      "chunkIndex": "code-context-6",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public virtual BarHistory GetHistory(string symbol, HistoryScale scale, DateTime startDate, DateTime endDate, int maxBars, GetHistoryControlBlock cb)\n",
    "metadata": {
      "id": "dataset",
      "title": "dataset",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/dataset.md",
      "chunkIndex": "code-7",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "s as a single, comma-delimited string.\n\n## Members for Derived Classes\n\n### DynamicDateRanges\n```csharp\npublic Dictionary<string, DateRange> DynamicDateRanges\n```\nDictionary of `DateRange` instances, keyed by symbol, representing when specific symbols should be considered part of the DataSet. Absence of an entry means the symbol is always part of the DataSet. Used by the WL8 backtester to restrict trades to specified date ranges, enabling modeling of actual stock market indices.\n\n### GetHistory\n"
    }
  },
  {
    "pageContent": "s as a single, comma-delimited string.\n\n## Members for Derived Classes\n\n### DynamicDateRanges\n```csharp\npublic Dictionary<string, DateRange> DynamicDateRanges\n```\nDictionary of `DateRange` instances, keyed by symbol, representing when specific symbols should be considered part of the DataSet. Absence of an entry means the symbol is always part of the DataSet. Used by the WL8 backtester to restrict trades to specified date ranges, enabling modeling of actual stock market indices.\n\n### GetHistory\n\n\n```csharp\npublic virtual BarHistory GetHistory(string symbol, HistoryScale scale, DateTime startDate, DateTime endDate, int maxBars, GetHistoryControlBlock cb)\n\n```",
    "metadata": {
      "id": "dataset",
      "title": "dataset",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/dataset.md",
      "chunkIndex": "code-context-7",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public Bitmap Glyph\n",
    "metadata": {
      "id": "dataset",
      "title": "dataset",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/dataset.md",
      "chunkIndex": "code-8",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "s to specified date ranges, enabling modeling of actual stock market indices.\n\n### GetHistory\n```csharp\npublic virtual BarHistory GetHistory(string symbol, HistoryScale scale, DateTime startDate, DateTime endDate, int maxBars, GetHistoryControlBlock cb)\n```\nOverride this method (when `ShouldReturnOwnData` is true) to return historical data as a `BarHistory` instance for the specified parameters. If `maxBars` is non-zero, return that many bars; otherwise use the date range parameters.\n\n### Glyph\n"
    }
  },
  {
    "pageContent": "s to specified date ranges, enabling modeling of actual stock market indices.\n\n### GetHistory\n```csharp\npublic virtual BarHistory GetHistory(string symbol, HistoryScale scale, DateTime startDate, DateTime endDate, int maxBars, GetHistoryControlBlock cb)\n```\nOverride this method (when `ShouldReturnOwnData` is true) to return historical data as a `BarHistory` instance for the specified parameters. If `maxBars` is non-zero, return that many bars; otherwise use the date range parameters.\n\n### Glyph\n\n\n```csharp\npublic Bitmap Glyph\n\n```",
    "metadata": {
      "id": "dataset",
      "title": "dataset",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/dataset.md",
      "chunkIndex": "code-context-8",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public virtual void PostDataLoad(BarHistory bh)\n",
    "metadata": {
      "id": "dataset",
      "title": "dataset",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/dataset.md",
      "chunkIndex": "code-9",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "nt maxBars, GetHistoryControlBlock cb)\n```\nOverride this method (when `ShouldReturnOwnData` is true) to return historical data as a `BarHistory` instance for the specified parameters. If `maxBars` is non-zero, return that many bars; otherwise use the date range parameters.\n\n### Glyph\n```csharp\npublic Bitmap Glyph\n```\nOptional `System.Drawing.Bitmap` to represent the DataSet in the WL8 DataSet tree. Defaults to the associated Historical Data Provider's Glyph or a generic image.\n\n### PostDataLoad\n"
    }
  },
  {
    "pageContent": "nt maxBars, GetHistoryControlBlock cb)\n```\nOverride this method (when `ShouldReturnOwnData` is true) to return historical data as a `BarHistory` instance for the specified parameters. If `maxBars` is non-zero, return that many bars; otherwise use the date range parameters.\n\n### Glyph\n```csharp\npublic Bitmap Glyph\n```\nOptional `System.Drawing.Bitmap` to represent the DataSet in the WL8 DataSet tree. Defaults to the associated Historical Data Provider's Glyph or a generic image.\n\n### PostDataLoad\n\n\n```csharp\npublic virtual void PostDataLoad(BarHistory bh)\n\n```",
    "metadata": {
      "id": "dataset",
      "title": "dataset",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/dataset.md",
      "chunkIndex": "code-context-9",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public string PreferredDataProviderName\n",
    "metadata": {
      "id": "dataset",
      "title": "dataset",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/dataset.md",
      "chunkIndex": "code-10",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ublic Bitmap Glyph\n```\nOptional `System.Drawing.Bitmap` to represent the DataSet in the WL8 DataSet tree. Defaults to the associated Historical Data Provider's Glyph or a generic image.\n\n### PostDataLoad\n```csharp\npublic virtual void PostDataLoad(BarHistory bh)\n```\nCalled after `GetHistory`. Default implementation assigns `DynamicDateRanges` to the `BarHistory` instance. Override for additional processing, but call `base.PostDataLoad` to retain base functionality.\n\n### PreferredDataProviderName\n"
    }
  },
  {
    "pageContent": "ublic Bitmap Glyph\n```\nOptional `System.Drawing.Bitmap` to represent the DataSet in the WL8 DataSet tree. Defaults to the associated Historical Data Provider's Glyph or a generic image.\n\n### PostDataLoad\n```csharp\npublic virtual void PostDataLoad(BarHistory bh)\n```\nCalled after `GetHistory`. Default implementation assigns `DynamicDateRanges` to the `BarHistory` instance. Override for additional processing, but call `base.PostDataLoad` to retain base functionality.\n\n### PreferredDataProviderName\n\n\n```csharp\npublic string PreferredDataProviderName\n\n```",
    "metadata": {
      "id": "dataset",
      "title": "dataset",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/dataset.md",
      "chunkIndex": "code-context-10",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public bool ReadOnlySymbols\n",
    "metadata": {
      "id": "dataset",
      "title": "dataset",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/dataset.md",
      "chunkIndex": "code-11",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "arp\npublic virtual void PostDataLoad(BarHistory bh)\n```\nCalled after `GetHistory`. Default implementation assigns `DynamicDateRanges` to the `BarHistory` instance. Override for additional processing, but call `base.PostDataLoad` to retain base functionality.\n\n### PreferredDataProviderName\n```csharp\npublic string PreferredDataProviderName\n```\nAssociates the DataSet with a specific Historical Data Provider. WL8 will prioritize this provider when getting data for this DataSet.\n\n### ReadOnlySymbols\n"
    }
  },
  {
    "pageContent": "arp\npublic virtual void PostDataLoad(BarHistory bh)\n```\nCalled after `GetHistory`. Default implementation assigns `DynamicDateRanges` to the `BarHistory` instance. Override for additional processing, but call `base.PostDataLoad` to retain base functionality.\n\n### PreferredDataProviderName\n```csharp\npublic string PreferredDataProviderName\n```\nAssociates the DataSet with a specific Historical Data Provider. WL8 will prioritize this provider when getting data for this DataSet.\n\n### ReadOnlySymbols\n\n\n```csharp\npublic bool ReadOnlySymbols\n\n```",
    "metadata": {
      "id": "dataset",
      "title": "dataset",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/dataset.md",
      "chunkIndex": "code-context-11",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public virtual bool ShouldReturnOwnData\n",
    "metadata": {
      "id": "dataset",
      "title": "dataset",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/dataset.md",
      "chunkIndex": "code-12",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "cDateRanges` to the `BarHistory` instance. Override for additional processing, but call `base.PostDataLoad` to retain base functionality.\n\n### PreferredDataProviderName\n```csharp\npublic string PreferredDataProviderName\n```\nAssociates the DataSet with a specific Historical Data Provider. WL8 will prioritize this provider when getting data for this DataSet.\n\n### ReadOnlySymbols\n```csharp\npublic bool ReadOnlySymbols\n```\nDetermines if users can modify the DataSet's symbols.\n\n### ShouldReturnOwnData\n"
    }
  },
  {
    "pageContent": "cDateRanges` to the `BarHistory` instance. Override for additional processing, but call `base.PostDataLoad` to retain base functionality.\n\n### PreferredDataProviderName\n```csharp\npublic string PreferredDataProviderName\n```\nAssociates the DataSet with a specific Historical Data Provider. WL8 will prioritize this provider when getting data for this DataSet.\n\n### ReadOnlySymbols\n```csharp\npublic bool ReadOnlySymbols\n```\nDetermines if users can modify the DataSet's symbols.\n\n### ShouldReturnOwnData\n\n\n```csharp\npublic virtual bool ShouldReturnOwnData\n\n```",
    "metadata": {
      "id": "dataset",
      "title": "dataset",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/dataset.md",
      "chunkIndex": "code-context-12",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public virtual bool SupportsScale(HistoryScale scale)\n",
    "metadata": {
      "id": "dataset",
      "title": "dataset",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/dataset.md",
      "chunkIndex": "code-13",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ill prioritize this provider when getting data for this DataSet.\n\n### ReadOnlySymbols\n```csharp\npublic bool ReadOnlySymbols\n```\nDetermines if users can modify the DataSet's symbols.\n\n### ShouldReturnOwnData\n```csharp\npublic virtual bool ShouldReturnOwnData\n```\nOverride to return true if the DataSet should handle its own historical data retrieval. If false (default), WL8 uses its built-in Historical Data Providers mechanism. If true, implement `SupportsScale` and `GetHistory`.\n\n### SupportsScale\n"
    }
  },
  {
    "pageContent": "ill prioritize this provider when getting data for this DataSet.\n\n### ReadOnlySymbols\n```csharp\npublic bool ReadOnlySymbols\n```\nDetermines if users can modify the DataSet's symbols.\n\n### ShouldReturnOwnData\n```csharp\npublic virtual bool ShouldReturnOwnData\n```\nOverride to return true if the DataSet should handle its own historical data retrieval. If false (default), WL8 uses its built-in Historical Data Providers mechanism. If true, implement `SupportsScale` and `GetHistory`.\n\n### SupportsScale\n\n\n```csharp\npublic virtual bool SupportsScale(HistoryScale scale)\n\n```",
    "metadata": {
      "id": "dataset",
      "title": "dataset",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/dataset.md",
      "chunkIndex": "code-context-13",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public virtual List<string> TradableSymbols\n",
    "metadata": {
      "id": "dataset",
      "title": "dataset",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/dataset.md",
      "chunkIndex": "code-14",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "s.\n\n### ShouldReturnOwnData\n```csharp\npublic virtual bool ShouldReturnOwnData\n```\nOverride to return true if the DataSet should handle its own historical data retrieval. If false (default), WL8 uses its built-in Historical Data Providers mechanism. If true, implement `SupportsScale` and `GetHistory`.\n\n### SupportsScale\n```csharp\npublic virtual bool SupportsScale(HistoryScale scale)\n```\nWhen `ShouldReturnOwnData` is true, override to indicate support for the specified scale.\n\n### TradableSymbols\n"
    }
  },
  {
    "pageContent": "s.\n\n### ShouldReturnOwnData\n```csharp\npublic virtual bool ShouldReturnOwnData\n```\nOverride to return true if the DataSet should handle its own historical data retrieval. If false (default), WL8 uses its built-in Historical Data Providers mechanism. If true, implement `SupportsScale` and `GetHistory`.\n\n### SupportsScale\n```csharp\npublic virtual bool SupportsScale(HistoryScale scale)\n```\nWhen `ShouldReturnOwnData` is true, override to indicate support for the specified scale.\n\n### TradableSymbols\n\n\n```csharp\npublic virtual List<string> TradableSymbols\n\n```",
    "metadata": {
      "id": "dataset",
      "title": "dataset",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/dataset.md",
      "chunkIndex": "code-context-14",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public class CustomDataSet : DataSet\n{\n    public CustomDataSet()\n    {\n        Name = \"Custom Market Index\";\n        PreferredDataProviderName = \"MyDataProvider\";\n        ReadOnlySymbols = true;\n        \n        // Add symbols with their active date ranges\n        Symbols = new List<string> { \"AAPL\", \"MSFT\", \"GOOGL\" };\n        DynamicDateRanges = new Dictionary<string, DateRange>\n        {\n            { \"AAPL\", new DateRange(new DateTime(2000, 1, 1), DateTime.Now) },\n            { \"MSFT\", new DateRange(new DateTime(1990, 1, 1), DateTime.Now) }\n            // GOOGL has no range, so it's always considered active\n        };\n    }\n\n    public override bool ShouldReturnOwnData => true;\n\n    public override bool SupportsScale(HistoryScale scale)\n    {\n        return scale.Frequency == Frequency.Daily;\n    }\n\n    public override BarHistory GetHistory(string symbol, HistoryScale scale, \n        DateTime startDate, DateTime endDate, int maxBars, GetHistoryControlBlock cb)\n    {\n        // Implement custom historical data retrieval\n        var history = new BarHistory(symbol, scale);\n        // ... populate history\n        return history;\n    }\n}\n",
    "metadata": {
      "id": "dataset",
      "title": "dataset",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/dataset.md",
      "chunkIndex": "code-15",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "upportsScale` and `GetHistory`.\n\n### SupportsScale\n```csharp\npublic virtual bool SupportsScale(HistoryScale scale)\n```\nWhen `ShouldReturnOwnData` is true, override to indicate support for the specified scale.\n\n### TradableSymbols\n```csharp\npublic virtual List<string> TradableSymbols\n```\nBy default returns the same as `Symbols`. Override to return a subset of currently tradable symbols (e.g., excluding decommissioned stocks). Used by WL8 Strategy Monitor for symbol activation.\n\n## Usage Example\n\n"
    }
  },
  {
    "pageContent": "upportsScale` and `GetHistory`.\n\n### SupportsScale\n```csharp\npublic virtual bool SupportsScale(HistoryScale scale)\n```\nWhen `ShouldReturnOwnData` is true, override to indicate support for the specified scale.\n\n### TradableSymbols\n```csharp\npublic virtual List<string> TradableSymbols\n```\nBy default returns the same as `Symbols`. Override to return a subset of currently tradable symbols (e.g., excluding decommissioned stocks). Used by WL8 Strategy Monitor for symbol activation.\n\n## Usage Example\n\n\n\n```csharp\npublic class CustomDataSet : DataSet\n{\n    public CustomDataSet()\n    {\n        Name = \"Custom Market Index\";\n        PreferredDataProviderName = \"MyDataProvider\";\n        ReadOnlySymbols = true;\n        \n        // Add symbols with their active date ranges\n        Symbols = new List<string> { \"AAPL\", \"MSFT\", \"GOOGL\" };\n        DynamicDateRanges = new Dictionary<string, DateRange>\n        {\n            { \"AAPL\", new DateRange(new DateTime(2000, 1, 1), DateTime.Now) },\n            { \"MSFT\", new DateRange(new DateTime(1990, 1, 1), DateTime.Now) }\n            // GOOGL has no range, so it's always considered active\n        };\n    }\n\n    public override bool ShouldReturnOwnData => true;\n\n    public override bool SupportsScale(HistoryScale scale)\n    {\n        return scale.Frequency == Frequency.Daily;\n    }\n\n    public override BarHistory GetHistory(string symbol, HistoryScale scale, \n        DateTime startDate, DateTime endDate, int maxBars, GetHistoryControlBlock cb)\n    {\n        // Implement custom historical data retrieval\n        var history = new BarHistory(symbol, scale);\n        // ... populate history\n        return history;\n    }\n}\n\n```",
    "metadata": {
      "id": "dataset",
      "title": "dataset",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/dataset.md",
      "chunkIndex": "code-context-15",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "# DateRange Class\n\n**Namespace:** WealthLab.Core  \n**Parent:** Object\n\nRepresents a range of date/time values.\n\n## Constructors\n\n",
    "metadata": {
      "id": "date-range",
      "title": "date-range",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/date-range.md",
      "chunkIndex": 0,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n`DateRange` provides two constructors:\n- A parameterless constructor\n- A constructor that assigns values to the `StartDate` and `EndDate` properties\n\n## Members\n\n### EndDate\n",
    "metadata": {
      "id": "date-range",
      "title": "date-range",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/date-range.md",
      "chunkIndex": 1,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nThe ending date of the date range.\n\n### StartDate\n",
    "metadata": {
      "id": "date-range",
      "title": "date-range",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/date-range.md",
      "chunkIndex": 2,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nThe starting date of the date range.\n\n### IsDateInRange\n",
    "metadata": {
      "id": "date-range",
      "title": "date-range",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/date-range.md",
      "chunkIndex": 3,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns true if the specified `DateTime` lies within the start and end date range.\n\n## Usage Example\n\n",
    "metadata": {
      "id": "date-range",
      "title": "date-range",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/date-range.md",
      "chunkIndex": 4,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "public DateRange()\npublic DateRange(DateTime sd, DateTime ed)\n",
    "metadata": {
      "id": "date-range",
      "title": "date-range",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/date-range.md",
      "chunkIndex": "code-0",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "# DateRange Class\n\n**Namespace:** WealthLab.Core  \n**Parent:** Object\n\nRepresents a range of date/time values.\n\n## Constructors\n\n"
    }
  },
  {
    "pageContent": "# DateRange Class\n\n**Namespace:** WealthLab.Core  \n**Parent:** Object\n\nRepresents a range of date/time values.\n\n## Constructors\n\n\n\n```csharp\npublic DateRange()\npublic DateRange(DateTime sd, DateTime ed)\n\n```",
    "metadata": {
      "id": "date-range",
      "title": "date-range",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/date-range.md",
      "chunkIndex": "code-context-0",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public DateTime EndDate\n",
    "metadata": {
      "id": "date-range",
      "title": "date-range",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/date-range.md",
      "chunkIndex": "code-1",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "# DateRange Class\n\n**Namespace:** WealthLab.Core  \n**Parent:** Object\n\nRepresents a range of date/time values.\n\n## Constructors\n\n```csharp\npublic DateRange()\npublic DateRange(DateTime sd, DateTime ed)\n```\n\n`DateRange` provides two constructors:\n- A parameterless constructor\n- A constructor that assigns values to the `StartDate` and `EndDate` properties\n\n## Members\n\n### EndDate\n"
    }
  },
  {
    "pageContent": "# DateRange Class\n\n**Namespace:** WealthLab.Core  \n**Parent:** Object\n\nRepresents a range of date/time values.\n\n## Constructors\n\n```csharp\npublic DateRange()\npublic DateRange(DateTime sd, DateTime ed)\n```\n\n`DateRange` provides two constructors:\n- A parameterless constructor\n- A constructor that assigns values to the `StartDate` and `EndDate` properties\n\n## Members\n\n### EndDate\n\n\n```csharp\npublic DateTime EndDate\n\n```",
    "metadata": {
      "id": "date-range",
      "title": "date-range",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/date-range.md",
      "chunkIndex": "code-context-1",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public DateTime StartDate\n",
    "metadata": {
      "id": "date-range",
      "title": "date-range",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/date-range.md",
      "chunkIndex": "code-2",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "# DateRange Class\n\n**Namespace:** WealthLab.Core  \n**Parent:** Object\n\nRepresents a range of date/time values.\n\n## Constructors\n\n```csharp\npublic DateRange()\npublic DateRange(DateTime sd, DateTime ed)\n```\n\n`DateRange` provides two constructors:\n- A parameterless constructor\n- A constructor that assigns values to the `StartDate` and `EndDate` properties\n\n## Members\n\n### EndDate\n```csharp\npublic DateTime EndDate\n```\nThe ending date of the date range.\n\n### StartDate\n"
    }
  },
  {
    "pageContent": "# DateRange Class\n\n**Namespace:** WealthLab.Core  \n**Parent:** Object\n\nRepresents a range of date/time values.\n\n## Constructors\n\n```csharp\npublic DateRange()\npublic DateRange(DateTime sd, DateTime ed)\n```\n\n`DateRange` provides two constructors:\n- A parameterless constructor\n- A constructor that assigns values to the `StartDate` and `EndDate` properties\n\n## Members\n\n### EndDate\n```csharp\npublic DateTime EndDate\n```\nThe ending date of the date range.\n\n### StartDate\n\n\n```csharp\npublic DateTime StartDate\n\n```",
    "metadata": {
      "id": "date-range",
      "title": "date-range",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/date-range.md",
      "chunkIndex": "code-context-2",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public bool IsDateInRange(DateTime dt)\n",
    "metadata": {
      "id": "date-range",
      "title": "date-range",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/date-range.md",
      "chunkIndex": "code-3",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "bject\n\nRepresents a range of date/time values.\n\n## Constructors\n\n```csharp\npublic DateRange()\npublic DateRange(DateTime sd, DateTime ed)\n```\n\n`DateRange` provides two constructors:\n- A parameterless constructor\n- A constructor that assigns values to the `StartDate` and `EndDate` properties\n\n## Members\n\n### EndDate\n```csharp\npublic DateTime EndDate\n```\nThe ending date of the date range.\n\n### StartDate\n```csharp\npublic DateTime StartDate\n```\nThe starting date of the date range.\n\n### IsDateInRange\n"
    }
  },
  {
    "pageContent": "bject\n\nRepresents a range of date/time values.\n\n## Constructors\n\n```csharp\npublic DateRange()\npublic DateRange(DateTime sd, DateTime ed)\n```\n\n`DateRange` provides two constructors:\n- A parameterless constructor\n- A constructor that assigns values to the `StartDate` and `EndDate` properties\n\n## Members\n\n### EndDate\n```csharp\npublic DateTime EndDate\n```\nThe ending date of the date range.\n\n### StartDate\n```csharp\npublic DateTime StartDate\n```\nThe starting date of the date range.\n\n### IsDateInRange\n\n\n```csharp\npublic bool IsDateInRange(DateTime dt)\n\n```",
    "metadata": {
      "id": "date-range",
      "title": "date-range",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/date-range.md",
      "chunkIndex": "code-context-3",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "// Create a date range for the year 2023\nvar range = new DateRange(\n    new DateTime(2023, 1, 1),\n    new DateTime(2023, 12, 31)\n);\n\n// Check if a date falls within the range\nDateTime testDate = new DateTime(2023, 6, 15);\nbool isInRange = range.IsDateInRange(testDate); // Returns true\n\n// Check a date outside the range\nDateTime outsideDate = new DateTime(2024, 1, 1);\nbool isOutside = range.IsDateInRange(outsideDate); // Returns false\n\n// Use in a DataSet for symbol date ranges\nvar dataSet = new DataSet();\ndataSet.DynamicDateRanges = new Dictionary<string, DateRange>\n{\n    { \"AAPL\", new DateRange(\n        new DateTime(2000, 1, 1),\n        DateTime.Now\n    )}\n};\n",
    "metadata": {
      "id": "date-range",
      "title": "date-range",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/date-range.md",
      "chunkIndex": "code-4",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "rovides two constructors:\n- A parameterless constructor\n- A constructor that assigns values to the `StartDate` and `EndDate` properties\n\n## Members\n\n### EndDate\n```csharp\npublic DateTime EndDate\n```\nThe ending date of the date range.\n\n### StartDate\n```csharp\npublic DateTime StartDate\n```\nThe starting date of the date range.\n\n### IsDateInRange\n```csharp\npublic bool IsDateInRange(DateTime dt)\n```\nReturns true if the specified `DateTime` lies within the start and end date range.\n\n## Usage Example\n\n"
    }
  },
  {
    "pageContent": "rovides two constructors:\n- A parameterless constructor\n- A constructor that assigns values to the `StartDate` and `EndDate` properties\n\n## Members\n\n### EndDate\n```csharp\npublic DateTime EndDate\n```\nThe ending date of the date range.\n\n### StartDate\n```csharp\npublic DateTime StartDate\n```\nThe starting date of the date range.\n\n### IsDateInRange\n```csharp\npublic bool IsDateInRange(DateTime dt)\n```\nReturns true if the specified `DateTime` lies within the start and end date range.\n\n## Usage Example\n\n\n\n```csharp\n// Create a date range for the year 2023\nvar range = new DateRange(\n    new DateTime(2023, 1, 1),\n    new DateTime(2023, 12, 31)\n);\n\n// Check if a date falls within the range\nDateTime testDate = new DateTime(2023, 6, 15);\nbool isInRange = range.IsDateInRange(testDate); // Returns true\n\n// Check a date outside the range\nDateTime outsideDate = new DateTime(2024, 1, 1);\nbool isOutside = range.IsDateInRange(outsideDate); // Returns false\n\n// Use in a DataSet for symbol date ranges\nvar dataSet = new DataSet();\ndataSet.DynamicDateRanges = new Dictionary<string, DateRange>\n{\n    { \"AAPL\", new DateRange(\n        new DateTime(2000, 1, 1),\n        DateTime.Now\n    )}\n};\n\n```",
    "metadata": {
      "id": "date-range",
      "title": "date-range",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/date-range.md",
      "chunkIndex": "code-context-4",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "# DateTime Extension Methods\n\n**Namespace:** WealthLab.Core\n\nA collection of DateTime extension methods that assist with typical trading functions related to date and time. These methods can be called using standard method syntax on DateTime objects.\n\n## Calendar Methods\n\n### CalendarDaysBetweenDates\n",
    "metadata": {
      "id": "date-time-extensions",
      "title": "date-time-extensions",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/date-time-extensions.md",
      "chunkIndex": 0,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the number of calendar days between dates. Result is positive if `toDate` is in the future, zero for same date, or negative.\n\n**Notes:**\n- String dates must use \"yyyyMMdd\" format (e.g., \"20210416\")\n- Integer dates must use yyyyMMdd format (e.g., 20210416)\n\n### WeekOfYear\n",
    "metadata": {
      "id": "date-time-extensions",
      "title": "date-time-extensions",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/date-time-extensions.md",
      "chunkIndex": 1,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the week number (1-52/53) for the year.\n\n**Notes:**\n- Week #1 is the first full week in January (Sunday to Saturday)\n- Early January dates may belong to the last week of the previous year unless January 1st is a Sunday\n\n## Trading Day Methods\n\n### GetNextTradingDate\n",
    "metadata": {
      "id": "date-time-extensions",
      "title": "date-time-extensions",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/date-time-extensions.md",
      "chunkIndex": 2,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the DateTime of the next trading day. Time component is preserved if present. Useful for determining week/month end signals.\n\n### IsTradingDay\n",
    "metadata": {
      "id": "date-time-extensions",
      "title": "date-time-extensions",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/date-time-extensions.md",
      "chunkIndex": 3,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns true if the market trades on the specified day (time is ignored).\n\n### IsHoliday\n",
    "metadata": {
      "id": "date-time-extensions",
      "title": "date-time-extensions",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/date-time-extensions.md",
      "chunkIndex": 4,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns true if the date is a holiday for the specified `BarHistory`.\n\n### IsWeekend\n",
    "metadata": {
      "id": "date-time-extensions",
      "title": "date-time-extensions",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/date-time-extensions.md",
      "chunkIndex": 5,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns true if the date falls on Saturday or Sunday. Used in trading day calculations.\n\n### PreviousTradingDay\n",
    "metadata": {
      "id": "date-time-extensions",
      "title": "date-time-extensions",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/date-time-extensions.md",
      "chunkIndex": 6,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the DateTime of the previous trading day. Time component is preserved if present.\n\n## Trading Period Methods\n\n### IsLastTradingDayOfMonth\n",
    "metadata": {
      "id": "date-time-extensions",
      "title": "date-time-extensions",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/date-time-extensions.md",
      "chunkIndex": 7,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns true if the date is the last trading day of a calendar month.\n\n### IsLastTradingDayOfWeek\n",
    "metadata": {
      "id": "date-time-extensions",
      "title": "date-time-extensions",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/date-time-extensions.md",
      "chunkIndex": 8,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns true if the date is the last trading day of a calendar week.\n\n## Options-Related Methods\n\n### IsOptionExpiry\n",
    "metadata": {
      "id": "date-time-extensions",
      "title": "date-time-extensions",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/date-time-extensions.md",
      "chunkIndex": 9,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns true if the date is a monthly option expiration day:\n- Base version checks if date is third Friday of month\n- `BarHistory` version accounts for holidays (returns true for Thursday if Friday is a holiday)\n\n### NextOptionExpiryDate\n",
    "metadata": {
      "id": "date-time-extensions",
      "title": "date-time-extensions",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/date-time-extensions.md",
      "chunkIndex": 10,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns DateTime of next monthly options expiration date.\n\n**Notes:**\n- Returns current date if it's an expiry date\n- Returns Thursday's date if expiry Friday is a holiday\n\n## Time Methods\n\n### GetTime\n",
    "metadata": {
      "id": "date-time-extensions",
      "title": "date-time-extensions",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/date-time-extensions.md",
      "chunkIndex": 11,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns 24-hour 'HHmm' integer from time component (seconds ignored). Useful for time-of-day trading filters.\n\nExamples:\n- 9:35 am → 935\n- 12:00 pm → 1200\n- 3:50 pm → 1550\n\n## Usage Examples\n\n",
    "metadata": {
      "id": "date-time-extensions",
      "title": "date-time-extensions",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/date-time-extensions.md",
      "chunkIndex": 12,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "public static int CalendarDaysBetweenDates(this DateTime fromDate, DateTime toDate)\npublic static int CalendarDaysBetweenDates(this int fromDate, int toDate)\npublic static int CalendarDaysBetweenDates(this string fromDate, string toDate)\n",
    "metadata": {
      "id": "date-time-extensions",
      "title": "date-time-extensions",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/date-time-extensions.md",
      "chunkIndex": "code-0",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "# DateTime Extension Methods\n\n**Namespace:** WealthLab.Core\n\nA collection of DateTime extension methods that assist with typical trading functions related to date and time. These methods can be called using standard method syntax on DateTime objects.\n\n## Calendar Methods\n\n### CalendarDaysBetweenDates\n"
    }
  },
  {
    "pageContent": "# DateTime Extension Methods\n\n**Namespace:** WealthLab.Core\n\nA collection of DateTime extension methods that assist with typical trading functions related to date and time. These methods can be called using standard method syntax on DateTime objects.\n\n## Calendar Methods\n\n### CalendarDaysBetweenDates\n\n\n```csharp\npublic static int CalendarDaysBetweenDates(this DateTime fromDate, DateTime toDate)\npublic static int CalendarDaysBetweenDates(this int fromDate, int toDate)\npublic static int CalendarDaysBetweenDates(this string fromDate, string toDate)\n\n```",
    "metadata": {
      "id": "date-time-extensions",
      "title": "date-time-extensions",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/date-time-extensions.md",
      "chunkIndex": "code-context-0",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public static int WeekOfYear(this DateTime dte)\n",
    "metadata": {
      "id": "date-time-extensions",
      "title": "date-time-extensions",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/date-time-extensions.md",
      "chunkIndex": "code-1",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ndarDaysBetweenDates(this DateTime fromDate, DateTime toDate)\npublic static int CalendarDaysBetweenDates(this int fromDate, int toDate)\npublic static int CalendarDaysBetweenDates(this string fromDate, string toDate)\n```\nReturns the number of calendar days between dates. Result is positive if `toDate` is in the future, zero for same date, or negative.\n\n**Notes:**\n- String dates must use \"yyyyMMdd\" format (e.g., \"20210416\")\n- Integer dates must use yyyyMMdd format (e.g., 20210416)\n\n### WeekOfYear\n"
    }
  },
  {
    "pageContent": "ndarDaysBetweenDates(this DateTime fromDate, DateTime toDate)\npublic static int CalendarDaysBetweenDates(this int fromDate, int toDate)\npublic static int CalendarDaysBetweenDates(this string fromDate, string toDate)\n```\nReturns the number of calendar days between dates. Result is positive if `toDate` is in the future, zero for same date, or negative.\n\n**Notes:**\n- String dates must use \"yyyyMMdd\" format (e.g., \"20210416\")\n- Integer dates must use yyyyMMdd format (e.g., 20210416)\n\n### WeekOfYear\n\n\n```csharp\npublic static int WeekOfYear(this DateTime dte)\n\n```",
    "metadata": {
      "id": "date-time-extensions",
      "title": "date-time-extensions",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/date-time-extensions.md",
      "chunkIndex": "code-context-1",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public static DateTime GetNextTradingDate(this DateTime dt1, BarHistory bars)\npublic static DateTime GetNextTradingDate(this DateTime dt, MarketDetails mkt)\n",
    "metadata": {
      "id": "date-time-extensions",
      "title": "date-time-extensions",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/date-time-extensions.md",
      "chunkIndex": "code-2",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "e, or negative.\n\n**Notes:**\n- String dates must use \"yyyyMMdd\" format (e.g., \"20210416\")\n- Integer dates must use yyyyMMdd format (e.g., 20210416)\n\n### WeekOfYear\n```csharp\npublic static int WeekOfYear(this DateTime dte)\n```\nReturns the week number (1-52/53) for the year.\n\n**Notes:**\n- Week #1 is the first full week in January (Sunday to Saturday)\n- Early January dates may belong to the last week of the previous year unless January 1st is a Sunday\n\n## Trading Day Methods\n\n### GetNextTradingDate\n"
    }
  },
  {
    "pageContent": "e, or negative.\n\n**Notes:**\n- String dates must use \"yyyyMMdd\" format (e.g., \"20210416\")\n- Integer dates must use yyyyMMdd format (e.g., 20210416)\n\n### WeekOfYear\n```csharp\npublic static int WeekOfYear(this DateTime dte)\n```\nReturns the week number (1-52/53) for the year.\n\n**Notes:**\n- Week #1 is the first full week in January (Sunday to Saturday)\n- Early January dates may belong to the last week of the previous year unless January 1st is a Sunday\n\n## Trading Day Methods\n\n### GetNextTradingDate\n\n\n```csharp\npublic static DateTime GetNextTradingDate(this DateTime dt1, BarHistory bars)\npublic static DateTime GetNextTradingDate(this DateTime dt, MarketDetails mkt)\n\n```",
    "metadata": {
      "id": "date-time-extensions",
      "title": "date-time-extensions",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/date-time-extensions.md",
      "chunkIndex": "code-context-2",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public static bool IsTradingDay(this DateTime dt, BarHistory bars)\n",
    "metadata": {
      "id": "date-time-extensions",
      "title": "date-time-extensions",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/date-time-extensions.md",
      "chunkIndex": "code-3",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "anuary (Sunday to Saturday)\n- Early January dates may belong to the last week of the previous year unless January 1st is a Sunday\n\n## Trading Day Methods\n\n### GetNextTradingDate\n```csharp\npublic static DateTime GetNextTradingDate(this DateTime dt1, BarHistory bars)\npublic static DateTime GetNextTradingDate(this DateTime dt, MarketDetails mkt)\n```\nReturns the DateTime of the next trading day. Time component is preserved if present. Useful for determining week/month end signals.\n\n### IsTradingDay\n"
    }
  },
  {
    "pageContent": "anuary (Sunday to Saturday)\n- Early January dates may belong to the last week of the previous year unless January 1st is a Sunday\n\n## Trading Day Methods\n\n### GetNextTradingDate\n```csharp\npublic static DateTime GetNextTradingDate(this DateTime dt1, BarHistory bars)\npublic static DateTime GetNextTradingDate(this DateTime dt, MarketDetails mkt)\n```\nReturns the DateTime of the next trading day. Time component is preserved if present. Useful for determining week/month end signals.\n\n### IsTradingDay\n\n\n```csharp\npublic static bool IsTradingDay(this DateTime dt, BarHistory bars)\n\n```",
    "metadata": {
      "id": "date-time-extensions",
      "title": "date-time-extensions",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/date-time-extensions.md",
      "chunkIndex": "code-context-3",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public static bool IsHoliday(this DateTime dt, BarHistory bars)\n",
    "metadata": {
      "id": "date-time-extensions",
      "title": "date-time-extensions",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/date-time-extensions.md",
      "chunkIndex": "code-4",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ingDate\n```csharp\npublic static DateTime GetNextTradingDate(this DateTime dt1, BarHistory bars)\npublic static DateTime GetNextTradingDate(this DateTime dt, MarketDetails mkt)\n```\nReturns the DateTime of the next trading day. Time component is preserved if present. Useful for determining week/month end signals.\n\n### IsTradingDay\n```csharp\npublic static bool IsTradingDay(this DateTime dt, BarHistory bars)\n```\nReturns true if the market trades on the specified day (time is ignored).\n\n### IsHoliday\n"
    }
  },
  {
    "pageContent": "ingDate\n```csharp\npublic static DateTime GetNextTradingDate(this DateTime dt1, BarHistory bars)\npublic static DateTime GetNextTradingDate(this DateTime dt, MarketDetails mkt)\n```\nReturns the DateTime of the next trading day. Time component is preserved if present. Useful for determining week/month end signals.\n\n### IsTradingDay\n```csharp\npublic static bool IsTradingDay(this DateTime dt, BarHistory bars)\n```\nReturns true if the market trades on the specified day (time is ignored).\n\n### IsHoliday\n\n\n```csharp\npublic static bool IsHoliday(this DateTime dt, BarHistory bars)\n\n```",
    "metadata": {
      "id": "date-time-extensions",
      "title": "date-time-extensions",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/date-time-extensions.md",
      "chunkIndex": "code-context-4",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public static bool IsWeekend(this DateTime dt)\n",
    "metadata": {
      "id": "date-time-extensions",
      "title": "date-time-extensions",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/date-time-extensions.md",
      "chunkIndex": "code-5",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "etails mkt)\n```\nReturns the DateTime of the next trading day. Time component is preserved if present. Useful for determining week/month end signals.\n\n### IsTradingDay\n```csharp\npublic static bool IsTradingDay(this DateTime dt, BarHistory bars)\n```\nReturns true if the market trades on the specified day (time is ignored).\n\n### IsHoliday\n```csharp\npublic static bool IsHoliday(this DateTime dt, BarHistory bars)\n```\nReturns true if the date is a holiday for the specified `BarHistory`.\n\n### IsWeekend\n"
    }
  },
  {
    "pageContent": "etails mkt)\n```\nReturns the DateTime of the next trading day. Time component is preserved if present. Useful for determining week/month end signals.\n\n### IsTradingDay\n```csharp\npublic static bool IsTradingDay(this DateTime dt, BarHistory bars)\n```\nReturns true if the market trades on the specified day (time is ignored).\n\n### IsHoliday\n```csharp\npublic static bool IsHoliday(this DateTime dt, BarHistory bars)\n```\nReturns true if the date is a holiday for the specified `BarHistory`.\n\n### IsWeekend\n\n\n```csharp\npublic static bool IsWeekend(this DateTime dt)\n\n```",
    "metadata": {
      "id": "date-time-extensions",
      "title": "date-time-extensions",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/date-time-extensions.md",
      "chunkIndex": "code-context-5",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public static DateTime PreviousTradingDay(this DateTime dt, MarketDetails md)\n",
    "metadata": {
      "id": "date-time-extensions",
      "title": "date-time-extensions",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/date-time-extensions.md",
      "chunkIndex": "code-6",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "arp\npublic static bool IsTradingDay(this DateTime dt, BarHistory bars)\n```\nReturns true if the market trades on the specified day (time is ignored).\n\n### IsHoliday\n```csharp\npublic static bool IsHoliday(this DateTime dt, BarHistory bars)\n```\nReturns true if the date is a holiday for the specified `BarHistory`.\n\n### IsWeekend\n```csharp\npublic static bool IsWeekend(this DateTime dt)\n```\nReturns true if the date falls on Saturday or Sunday. Used in trading day calculations.\n\n### PreviousTradingDay\n"
    }
  },
  {
    "pageContent": "arp\npublic static bool IsTradingDay(this DateTime dt, BarHistory bars)\n```\nReturns true if the market trades on the specified day (time is ignored).\n\n### IsHoliday\n```csharp\npublic static bool IsHoliday(this DateTime dt, BarHistory bars)\n```\nReturns true if the date is a holiday for the specified `BarHistory`.\n\n### IsWeekend\n```csharp\npublic static bool IsWeekend(this DateTime dt)\n```\nReturns true if the date falls on Saturday or Sunday. Used in trading day calculations.\n\n### PreviousTradingDay\n\n\n```csharp\npublic static DateTime PreviousTradingDay(this DateTime dt, MarketDetails md)\n\n```",
    "metadata": {
      "id": "date-time-extensions",
      "title": "date-time-extensions",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/date-time-extensions.md",
      "chunkIndex": "code-context-6",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public static bool IsLastTradingDayOfMonth(this DateTime dt, BarHistory bars)\n",
    "metadata": {
      "id": "date-time-extensions",
      "title": "date-time-extensions",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/date-time-extensions.md",
      "chunkIndex": "code-7",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "```\nReturns true if the date is a holiday for the specified `BarHistory`.\n\n### IsWeekend\n```csharp\npublic static bool IsWeekend(this DateTime dt)\n```\nReturns true if the date falls on Saturday or Sunday. Used in trading day calculations.\n\n### PreviousTradingDay\n```csharp\npublic static DateTime PreviousTradingDay(this DateTime dt, MarketDetails md)\n```\nReturns the DateTime of the previous trading day. Time component is preserved if present.\n\n## Trading Period Methods\n\n### IsLastTradingDayOfMonth\n"
    }
  },
  {
    "pageContent": "```\nReturns true if the date is a holiday for the specified `BarHistory`.\n\n### IsWeekend\n```csharp\npublic static bool IsWeekend(this DateTime dt)\n```\nReturns true if the date falls on Saturday or Sunday. Used in trading day calculations.\n\n### PreviousTradingDay\n```csharp\npublic static DateTime PreviousTradingDay(this DateTime dt, MarketDetails md)\n```\nReturns the DateTime of the previous trading day. Time component is preserved if present.\n\n## Trading Period Methods\n\n### IsLastTradingDayOfMonth\n\n\n```csharp\npublic static bool IsLastTradingDayOfMonth(this DateTime dt, BarHistory bars)\n\n```",
    "metadata": {
      "id": "date-time-extensions",
      "title": "date-time-extensions",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/date-time-extensions.md",
      "chunkIndex": "code-context-7",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public static bool IsLastTradingDayOfWeek(this DateTime dt, BarHistory bars)\n",
    "metadata": {
      "id": "date-time-extensions",
      "title": "date-time-extensions",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/date-time-extensions.md",
      "chunkIndex": "code-8",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ay or Sunday. Used in trading day calculations.\n\n### PreviousTradingDay\n```csharp\npublic static DateTime PreviousTradingDay(this DateTime dt, MarketDetails md)\n```\nReturns the DateTime of the previous trading day. Time component is preserved if present.\n\n## Trading Period Methods\n\n### IsLastTradingDayOfMonth\n```csharp\npublic static bool IsLastTradingDayOfMonth(this DateTime dt, BarHistory bars)\n```\nReturns true if the date is the last trading day of a calendar month.\n\n### IsLastTradingDayOfWeek\n"
    }
  },
  {
    "pageContent": "ay or Sunday. Used in trading day calculations.\n\n### PreviousTradingDay\n```csharp\npublic static DateTime PreviousTradingDay(this DateTime dt, MarketDetails md)\n```\nReturns the DateTime of the previous trading day. Time component is preserved if present.\n\n## Trading Period Methods\n\n### IsLastTradingDayOfMonth\n```csharp\npublic static bool IsLastTradingDayOfMonth(this DateTime dt, BarHistory bars)\n```\nReturns true if the date is the last trading day of a calendar month.\n\n### IsLastTradingDayOfWeek\n\n\n```csharp\npublic static bool IsLastTradingDayOfWeek(this DateTime dt, BarHistory bars)\n\n```",
    "metadata": {
      "id": "date-time-extensions",
      "title": "date-time-extensions",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/date-time-extensions.md",
      "chunkIndex": "code-context-8",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public static bool IsOptionExpiry(this DateTime date)\npublic static bool IsOptionExpiry(this DateTime date, BarHistory bars)\n",
    "metadata": {
      "id": "date-time-extensions",
      "title": "date-time-extensions",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/date-time-extensions.md",
      "chunkIndex": "code-9",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": " day. Time component is preserved if present.\n\n## Trading Period Methods\n\n### IsLastTradingDayOfMonth\n```csharp\npublic static bool IsLastTradingDayOfMonth(this DateTime dt, BarHistory bars)\n```\nReturns true if the date is the last trading day of a calendar month.\n\n### IsLastTradingDayOfWeek\n```csharp\npublic static bool IsLastTradingDayOfWeek(this DateTime dt, BarHistory bars)\n```\nReturns true if the date is the last trading day of a calendar week.\n\n## Options-Related Methods\n\n### IsOptionExpiry\n"
    }
  },
  {
    "pageContent": " day. Time component is preserved if present.\n\n## Trading Period Methods\n\n### IsLastTradingDayOfMonth\n```csharp\npublic static bool IsLastTradingDayOfMonth(this DateTime dt, BarHistory bars)\n```\nReturns true if the date is the last trading day of a calendar month.\n\n### IsLastTradingDayOfWeek\n```csharp\npublic static bool IsLastTradingDayOfWeek(this DateTime dt, BarHistory bars)\n```\nReturns true if the date is the last trading day of a calendar week.\n\n## Options-Related Methods\n\n### IsOptionExpiry\n\n\n```csharp\npublic static bool IsOptionExpiry(this DateTime date)\npublic static bool IsOptionExpiry(this DateTime date, BarHistory bars)\n\n```",
    "metadata": {
      "id": "date-time-extensions",
      "title": "date-time-extensions",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/date-time-extensions.md",
      "chunkIndex": "code-context-9",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public static DateTime NextOptionExpiryDate(this DateTime date, BarHistory bars)\n",
    "metadata": {
      "id": "date-time-extensions",
      "title": "date-time-extensions",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/date-time-extensions.md",
      "chunkIndex": "code-10",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": ")\n```\nReturns true if the date is the last trading day of a calendar week.\n\n## Options-Related Methods\n\n### IsOptionExpiry\n```csharp\npublic static bool IsOptionExpiry(this DateTime date)\npublic static bool IsOptionExpiry(this DateTime date, BarHistory bars)\n```\nReturns true if the date is a monthly option expiration day:\n- Base version checks if date is third Friday of month\n- `BarHistory` version accounts for holidays (returns true for Thursday if Friday is a holiday)\n\n### NextOptionExpiryDate\n"
    }
  },
  {
    "pageContent": ")\n```\nReturns true if the date is the last trading day of a calendar week.\n\n## Options-Related Methods\n\n### IsOptionExpiry\n```csharp\npublic static bool IsOptionExpiry(this DateTime date)\npublic static bool IsOptionExpiry(this DateTime date, BarHistory bars)\n```\nReturns true if the date is a monthly option expiration day:\n- Base version checks if date is third Friday of month\n- `BarHistory` version accounts for holidays (returns true for Thursday if Friday is a holiday)\n\n### NextOptionExpiryDate\n\n\n```csharp\npublic static DateTime NextOptionExpiryDate(this DateTime date, BarHistory bars)\n\n```",
    "metadata": {
      "id": "date-time-extensions",
      "title": "date-time-extensions",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/date-time-extensions.md",
      "chunkIndex": "code-context-10",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public static int GetTime(this DateTime dt)\n",
    "metadata": {
      "id": "date-time-extensions",
      "title": "date-time-extensions",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/date-time-extensions.md",
      "chunkIndex": "code-11",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ly option expiration day:\n- Base version checks if date is third Friday of month\n- `BarHistory` version accounts for holidays (returns true for Thursday if Friday is a holiday)\n\n### NextOptionExpiryDate\n```csharp\npublic static DateTime NextOptionExpiryDate(this DateTime date, BarHistory bars)\n```\nReturns DateTime of next monthly options expiration date.\n\n**Notes:**\n- Returns current date if it's an expiry date\n- Returns Thursday's date if expiry Friday is a holiday\n\n## Time Methods\n\n### GetTime\n"
    }
  },
  {
    "pageContent": "ly option expiration day:\n- Base version checks if date is third Friday of month\n- `BarHistory` version accounts for holidays (returns true for Thursday if Friday is a holiday)\n\n### NextOptionExpiryDate\n```csharp\npublic static DateTime NextOptionExpiryDate(this DateTime date, BarHistory bars)\n```\nReturns DateTime of next monthly options expiration date.\n\n**Notes:**\n- Returns current date if it's an expiry date\n- Returns Thursday's date if expiry Friday is a holiday\n\n## Time Methods\n\n### GetTime\n\n\n```csharp\npublic static int GetTime(this DateTime dt)\n\n```",
    "metadata": {
      "id": "date-time-extensions",
      "title": "date-time-extensions",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/date-time-extensions.md",
      "chunkIndex": "code-context-11",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "// Calendar days calculation\nDateTime start = DateTime.Now;\nDateTime end = start.AddDays(10);\nint days = start.CalendarDaysBetweenDates(end); // Returns 10\n\n// Trading day checks\nvar bars = GetBarHistory(); // Your BarHistory instance\nDateTime today = DateTime.Now;\nif (today.IsTradingDay(bars) && !today.IsHoliday(bars))\n{\n    // Execute trading logic\n}\n\n// Options expiry\nif (today.IsOptionExpiry(bars))\n{\n    // Handle options expiration\n}\n\n// Time-based trading\nint currentTime = DateTime.Now.GetTime();\nif (currentTime >= 930 && currentTime <= 1600)\n{\n    // Regular trading hours logic\n}\n\n// Period end signals\nif (today.IsLastTradingDayOfMonth(bars))\n{\n    // Execute end-of-month strategy\n}\n",
    "metadata": {
      "id": "date-time-extensions",
      "title": "date-time-extensions",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/date-time-extensions.md",
      "chunkIndex": "code-12",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ryDate(this DateTime date, BarHistory bars)\n```\nReturns DateTime of next monthly options expiration date.\n\n**Notes:**\n- Returns current date if it's an expiry date\n- Returns Thursday's date if expiry Friday is a holiday\n\n## Time Methods\n\n### GetTime\n```csharp\npublic static int GetTime(this DateTime dt)\n```\nReturns 24-hour 'HHmm' integer from time component (seconds ignored). Useful for time-of-day trading filters.\n\nExamples:\n- 9:35 am → 935\n- 12:00 pm → 1200\n- 3:50 pm → 1550\n\n## Usage Examples\n\n"
    }
  },
  {
    "pageContent": "ryDate(this DateTime date, BarHistory bars)\n```\nReturns DateTime of next monthly options expiration date.\n\n**Notes:**\n- Returns current date if it's an expiry date\n- Returns Thursday's date if expiry Friday is a holiday\n\n## Time Methods\n\n### GetTime\n```csharp\npublic static int GetTime(this DateTime dt)\n```\nReturns 24-hour 'HHmm' integer from time component (seconds ignored). Useful for time-of-day trading filters.\n\nExamples:\n- 9:35 am → 935\n- 12:00 pm → 1200\n- 3:50 pm → 1550\n\n## Usage Examples\n\n\n\n```csharp\n// Calendar days calculation\nDateTime start = DateTime.Now;\nDateTime end = start.AddDays(10);\nint days = start.CalendarDaysBetweenDates(end); // Returns 10\n\n// Trading day checks\nvar bars = GetBarHistory(); // Your BarHistory instance\nDateTime today = DateTime.Now;\nif (today.IsTradingDay(bars) && !today.IsHoliday(bars))\n{\n    // Execute trading logic\n}\n\n// Options expiry\nif (today.IsOptionExpiry(bars))\n{\n    // Handle options expiration\n}\n\n// Time-based trading\nint currentTime = DateTime.Now.GetTime();\nif (currentTime >= 930 && currentTime <= 1600)\n{\n    // Regular trading hours logic\n}\n\n// Period end signals\nif (today.IsLastTradingDayOfMonth(bars))\n{\n    // Execute end-of-month strategy\n}\n\n```",
    "metadata": {
      "id": "date-time-extensions",
      "title": "date-time-extensions",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/date-time-extensions.md",
      "chunkIndex": "code-context-12",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "# DrawingObjectLine Class\n\n**Namespace:** WealthLab.ChartWPF  \n**Parent:** Object\n\nRepresents a component line in a chart drawing object. This class provides functionality for rendering and manipulating lines within chart drawings.\n\n## Properties\n\n### Appearance Properties\n\n### Color\n",
    "metadata": {
      "id": "drawing-object-line",
      "title": "drawing-object-line",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/drawing-object-line.md",
      "chunkIndex": 0,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nThe line's color. Initializes to `WLColor.Transparent`. If set to a different color, overrides the parent drawing object's color.\n\n### LineStyle\n",
    "metadata": {
      "id": "drawing-object-line",
      "title": "drawing-object-line",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/drawing-object-line.md",
      "chunkIndex": 1,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nSpecifies the style used when rendering the line.\n\n### LineWidth\n",
    "metadata": {
      "id": "drawing-object-line",
      "title": "drawing-object-line",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/drawing-object-line.md",
      "chunkIndex": 2,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nSpecifies the width of the line when rendering.\n\n### IsVisible\n",
    "metadata": {
      "id": "drawing-object-line",
      "title": "drawing-object-line",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/drawing-object-line.md",
      "chunkIndex": 3,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nControls whether the line should be rendered.\n\n## Extension Properties\n\n### ExtendLeft\n",
    "metadata": {
      "id": "drawing-object-line",
      "title": "drawing-object-line",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/drawing-object-line.md",
      "chunkIndex": 4,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nControls whether the line extends beyond its `LeftHandle` when rendered.\n\n### ExtendRight\n",
    "metadata": {
      "id": "drawing-object-line",
      "title": "drawing-object-line",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/drawing-object-line.md",
      "chunkIndex": 5,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nControls whether the line extends beyond its `RightHandle` when rendered.\n\n### CanChangeExtendLeft\n",
    "metadata": {
      "id": "drawing-object-line",
      "title": "drawing-object-line",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/drawing-object-line.md",
      "chunkIndex": 6,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nControls whether the `ExtendLeft` property can be modified when the user changes the \"Extend Left\" Parameter of the Parent drawing object.\n\n### CanChangeExtendRight\n",
    "metadata": {
      "id": "drawing-object-line",
      "title": "drawing-object-line",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/drawing-object-line.md",
      "chunkIndex": 7,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nControls whether the `ExtendRight` property can be modified when the user changes the \"Extend Right\" Parameter of the Parent drawing object.\n\n### CanChangeLineStyle\n",
    "metadata": {
      "id": "drawing-object-line",
      "title": "drawing-object-line",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/drawing-object-line.md",
      "chunkIndex": 8,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nControls whether the `LineStyle` property can be modified when the user changes the \"Line Style\" Parameter of the Parent drawing object.\n\n## Handle Properties\n\n### Handle1\n",
    "metadata": {
      "id": "drawing-object-line",
      "title": "drawing-object-line",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/drawing-object-line.md",
      "chunkIndex": 9,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nOne of the two `Handle` instances that define this line.\n\n### Handle2\n",
    "metadata": {
      "id": "drawing-object-line",
      "title": "drawing-object-line",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/drawing-object-line.md",
      "chunkIndex": 10,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nOne of the two `Handle` instances that define this line.\n\n### LeftHandle\n",
    "metadata": {
      "id": "drawing-object-line",
      "title": "drawing-object-line",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/drawing-object-line.md",
      "chunkIndex": 11,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the left side `Handle` of the line.\n\n### RightHandle\n",
    "metadata": {
      "id": "drawing-object-line",
      "title": "drawing-object-line",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/drawing-object-line.md",
      "chunkIndex": 12,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the right side `Handle` of the line.\n\n## Interaction Properties\n\n### IsDraggable\n",
    "metadata": {
      "id": "drawing-object-line",
      "title": "drawing-object-line",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/drawing-object-line.md",
      "chunkIndex": 13,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nControls whether the user can drag the line with the mouse.\n\n### Parent\n",
    "metadata": {
      "id": "drawing-object-line",
      "title": "drawing-object-line",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/drawing-object-line.md",
      "chunkIndex": 14,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the chart drawing object (instance of `DrawingObjectBase`) that this line belongs to.\n\n## Methods\n\n### FixHandleOrder\n",
    "metadata": {
      "id": "drawing-object-line",
      "title": "drawing-object-line",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/drawing-object-line.md",
      "chunkIndex": 15,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nChecks the positions of `Handle1` and `Handle2` and swaps them if `Handle1` has a greater DateTime than `Handle2`.\n\n### InViewport\n",
    "metadata": {
      "id": "drawing-object-line",
      "title": "drawing-object-line",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/drawing-object-line.md",
      "chunkIndex": 16,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns whether any portion of the line is visible within the specified index range.\n\n### IsVertical\n",
    "metadata": {
      "id": "drawing-object-line",
      "title": "drawing-object-line",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/drawing-object-line.md",
      "chunkIndex": 17,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns whether the line is vertical.\n\n### Render\n",
    "metadata": {
      "id": "drawing-object-line",
      "title": "drawing-object-line",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/drawing-object-line.md",
      "chunkIndex": 18,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nRenders the line to the specified `DrawingContext` using the specified `Pen`.\n\n### SolveForY\n",
    "metadata": {
      "id": "drawing-object-line",
      "title": "drawing-object-line",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/drawing-object-line.md",
      "chunkIndex": 19,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the y-axis value where the line intersects the specified DateTime.\n\n## Usage Example\n\n",
    "metadata": {
      "id": "drawing-object-line",
      "title": "drawing-object-line",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/drawing-object-line.md",
      "chunkIndex": 20,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "public WLColor Color\n",
    "metadata": {
      "id": "drawing-object-line",
      "title": "drawing-object-line",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/drawing-object-line.md",
      "chunkIndex": "code-0",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "# DrawingObjectLine Class\n\n**Namespace:** WealthLab.ChartWPF  \n**Parent:** Object\n\nRepresents a component line in a chart drawing object. This class provides functionality for rendering and manipulating lines within chart drawings.\n\n## Properties\n\n### Appearance Properties\n\n### Color\n"
    }
  },
  {
    "pageContent": "# DrawingObjectLine Class\n\n**Namespace:** WealthLab.ChartWPF  \n**Parent:** Object\n\nRepresents a component line in a chart drawing object. This class provides functionality for rendering and manipulating lines within chart drawings.\n\n## Properties\n\n### Appearance Properties\n\n### Color\n\n\n```csharp\npublic WLColor Color\n\n```",
    "metadata": {
      "id": "drawing-object-line",
      "title": "drawing-object-line",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/drawing-object-line.md",
      "chunkIndex": "code-context-0",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public LineStyles LineStyle\n",
    "metadata": {
      "id": "drawing-object-line",
      "title": "drawing-object-line",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/drawing-object-line.md",
      "chunkIndex": "code-1",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "# DrawingObjectLine Class\n\n**Namespace:** WealthLab.ChartWPF  \n**Parent:** Object\n\nRepresents a component line in a chart drawing object. This class provides functionality for rendering and manipulating lines within chart drawings.\n\n## Properties\n\n### Appearance Properties\n\n### Color\n```csharp\npublic WLColor Color\n```\nThe line's color. Initializes to `WLColor.Transparent`. If set to a different color, overrides the parent drawing object's color.\n\n### LineStyle\n"
    }
  },
  {
    "pageContent": "# DrawingObjectLine Class\n\n**Namespace:** WealthLab.ChartWPF  \n**Parent:** Object\n\nRepresents a component line in a chart drawing object. This class provides functionality for rendering and manipulating lines within chart drawings.\n\n## Properties\n\n### Appearance Properties\n\n### Color\n```csharp\npublic WLColor Color\n```\nThe line's color. Initializes to `WLColor.Transparent`. If set to a different color, overrides the parent drawing object's color.\n\n### LineStyle\n\n\n```csharp\npublic LineStyles LineStyle\n\n```",
    "metadata": {
      "id": "drawing-object-line",
      "title": "drawing-object-line",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/drawing-object-line.md",
      "chunkIndex": "code-context-1",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public int LineWidth\n",
    "metadata": {
      "id": "drawing-object-line",
      "title": "drawing-object-line",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/drawing-object-line.md",
      "chunkIndex": "code-2",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "** Object\n\nRepresents a component line in a chart drawing object. This class provides functionality for rendering and manipulating lines within chart drawings.\n\n## Properties\n\n### Appearance Properties\n\n### Color\n```csharp\npublic WLColor Color\n```\nThe line's color. Initializes to `WLColor.Transparent`. If set to a different color, overrides the parent drawing object's color.\n\n### LineStyle\n```csharp\npublic LineStyles LineStyle\n```\nSpecifies the style used when rendering the line.\n\n### LineWidth\n"
    }
  },
  {
    "pageContent": "** Object\n\nRepresents a component line in a chart drawing object. This class provides functionality for rendering and manipulating lines within chart drawings.\n\n## Properties\n\n### Appearance Properties\n\n### Color\n```csharp\npublic WLColor Color\n```\nThe line's color. Initializes to `WLColor.Transparent`. If set to a different color, overrides the parent drawing object's color.\n\n### LineStyle\n```csharp\npublic LineStyles LineStyle\n```\nSpecifies the style used when rendering the line.\n\n### LineWidth\n\n\n```csharp\npublic int LineWidth\n\n```",
    "metadata": {
      "id": "drawing-object-line",
      "title": "drawing-object-line",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/drawing-object-line.md",
      "chunkIndex": "code-context-2",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public bool IsVisible\n",
    "metadata": {
      "id": "drawing-object-line",
      "title": "drawing-object-line",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/drawing-object-line.md",
      "chunkIndex": "code-3",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "y for rendering and manipulating lines within chart drawings.\n\n## Properties\n\n### Appearance Properties\n\n### Color\n```csharp\npublic WLColor Color\n```\nThe line's color. Initializes to `WLColor.Transparent`. If set to a different color, overrides the parent drawing object's color.\n\n### LineStyle\n```csharp\npublic LineStyles LineStyle\n```\nSpecifies the style used when rendering the line.\n\n### LineWidth\n```csharp\npublic int LineWidth\n```\nSpecifies the width of the line when rendering.\n\n### IsVisible\n"
    }
  },
  {
    "pageContent": "y for rendering and manipulating lines within chart drawings.\n\n## Properties\n\n### Appearance Properties\n\n### Color\n```csharp\npublic WLColor Color\n```\nThe line's color. Initializes to `WLColor.Transparent`. If set to a different color, overrides the parent drawing object's color.\n\n### LineStyle\n```csharp\npublic LineStyles LineStyle\n```\nSpecifies the style used when rendering the line.\n\n### LineWidth\n```csharp\npublic int LineWidth\n```\nSpecifies the width of the line when rendering.\n\n### IsVisible\n\n\n```csharp\npublic bool IsVisible\n\n```",
    "metadata": {
      "id": "drawing-object-line",
      "title": "drawing-object-line",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/drawing-object-line.md",
      "chunkIndex": "code-context-3",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public bool ExtendLeft\n",
    "metadata": {
      "id": "drawing-object-line",
      "title": "drawing-object-line",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/drawing-object-line.md",
      "chunkIndex": "code-4",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "p\npublic WLColor Color\n```\nThe line's color. Initializes to `WLColor.Transparent`. If set to a different color, overrides the parent drawing object's color.\n\n### LineStyle\n```csharp\npublic LineStyles LineStyle\n```\nSpecifies the style used when rendering the line.\n\n### LineWidth\n```csharp\npublic int LineWidth\n```\nSpecifies the width of the line when rendering.\n\n### IsVisible\n```csharp\npublic bool IsVisible\n```\nControls whether the line should be rendered.\n\n## Extension Properties\n\n### ExtendLeft\n"
    }
  },
  {
    "pageContent": "p\npublic WLColor Color\n```\nThe line's color. Initializes to `WLColor.Transparent`. If set to a different color, overrides the parent drawing object's color.\n\n### LineStyle\n```csharp\npublic LineStyles LineStyle\n```\nSpecifies the style used when rendering the line.\n\n### LineWidth\n```csharp\npublic int LineWidth\n```\nSpecifies the width of the line when rendering.\n\n### IsVisible\n```csharp\npublic bool IsVisible\n```\nControls whether the line should be rendered.\n\n## Extension Properties\n\n### ExtendLeft\n\n\n```csharp\npublic bool ExtendLeft\n\n```",
    "metadata": {
      "id": "drawing-object-line",
      "title": "drawing-object-line",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/drawing-object-line.md",
      "chunkIndex": "code-context-4",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public bool ExtendRight\n",
    "metadata": {
      "id": "drawing-object-line",
      "title": "drawing-object-line",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/drawing-object-line.md",
      "chunkIndex": "code-5",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "arent drawing object's color.\n\n### LineStyle\n```csharp\npublic LineStyles LineStyle\n```\nSpecifies the style used when rendering the line.\n\n### LineWidth\n```csharp\npublic int LineWidth\n```\nSpecifies the width of the line when rendering.\n\n### IsVisible\n```csharp\npublic bool IsVisible\n```\nControls whether the line should be rendered.\n\n## Extension Properties\n\n### ExtendLeft\n```csharp\npublic bool ExtendLeft\n```\nControls whether the line extends beyond its `LeftHandle` when rendered.\n\n### ExtendRight\n"
    }
  },
  {
    "pageContent": "arent drawing object's color.\n\n### LineStyle\n```csharp\npublic LineStyles LineStyle\n```\nSpecifies the style used when rendering the line.\n\n### LineWidth\n```csharp\npublic int LineWidth\n```\nSpecifies the width of the line when rendering.\n\n### IsVisible\n```csharp\npublic bool IsVisible\n```\nControls whether the line should be rendered.\n\n## Extension Properties\n\n### ExtendLeft\n```csharp\npublic bool ExtendLeft\n```\nControls whether the line extends beyond its `LeftHandle` when rendered.\n\n### ExtendRight\n\n\n```csharp\npublic bool ExtendRight\n\n```",
    "metadata": {
      "id": "drawing-object-line",
      "title": "drawing-object-line",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/drawing-object-line.md",
      "chunkIndex": "code-context-5",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public bool CanChangeExtendLeft\n",
    "metadata": {
      "id": "drawing-object-line",
      "title": "drawing-object-line",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/drawing-object-line.md",
      "chunkIndex": "code-6",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "\n### LineWidth\n```csharp\npublic int LineWidth\n```\nSpecifies the width of the line when rendering.\n\n### IsVisible\n```csharp\npublic bool IsVisible\n```\nControls whether the line should be rendered.\n\n## Extension Properties\n\n### ExtendLeft\n```csharp\npublic bool ExtendLeft\n```\nControls whether the line extends beyond its `LeftHandle` when rendered.\n\n### ExtendRight\n```csharp\npublic bool ExtendRight\n```\nControls whether the line extends beyond its `RightHandle` when rendered.\n\n### CanChangeExtendLeft\n"
    }
  },
  {
    "pageContent": "\n### LineWidth\n```csharp\npublic int LineWidth\n```\nSpecifies the width of the line when rendering.\n\n### IsVisible\n```csharp\npublic bool IsVisible\n```\nControls whether the line should be rendered.\n\n## Extension Properties\n\n### ExtendLeft\n```csharp\npublic bool ExtendLeft\n```\nControls whether the line extends beyond its `LeftHandle` when rendered.\n\n### ExtendRight\n```csharp\npublic bool ExtendRight\n```\nControls whether the line extends beyond its `RightHandle` when rendered.\n\n### CanChangeExtendLeft\n\n\n```csharp\npublic bool CanChangeExtendLeft\n\n```",
    "metadata": {
      "id": "drawing-object-line",
      "title": "drawing-object-line",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/drawing-object-line.md",
      "chunkIndex": "code-context-6",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public bool CanChangeExtendRight\n",
    "metadata": {
      "id": "drawing-object-line",
      "title": "drawing-object-line",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/drawing-object-line.md",
      "chunkIndex": "code-7",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "operties\n\n### ExtendLeft\n```csharp\npublic bool ExtendLeft\n```\nControls whether the line extends beyond its `LeftHandle` when rendered.\n\n### ExtendRight\n```csharp\npublic bool ExtendRight\n```\nControls whether the line extends beyond its `RightHandle` when rendered.\n\n### CanChangeExtendLeft\n```csharp\npublic bool CanChangeExtendLeft\n```\nControls whether the `ExtendLeft` property can be modified when the user changes the \"Extend Left\" Parameter of the Parent drawing object.\n\n### CanChangeExtendRight\n"
    }
  },
  {
    "pageContent": "operties\n\n### ExtendLeft\n```csharp\npublic bool ExtendLeft\n```\nControls whether the line extends beyond its `LeftHandle` when rendered.\n\n### ExtendRight\n```csharp\npublic bool ExtendRight\n```\nControls whether the line extends beyond its `RightHandle` when rendered.\n\n### CanChangeExtendLeft\n```csharp\npublic bool CanChangeExtendLeft\n```\nControls whether the `ExtendLeft` property can be modified when the user changes the \"Extend Left\" Parameter of the Parent drawing object.\n\n### CanChangeExtendRight\n\n\n```csharp\npublic bool CanChangeExtendRight\n\n```",
    "metadata": {
      "id": "drawing-object-line",
      "title": "drawing-object-line",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/drawing-object-line.md",
      "chunkIndex": "code-context-7",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public bool CanChangeLineStyle\n",
    "metadata": {
      "id": "drawing-object-line",
      "title": "drawing-object-line",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/drawing-object-line.md",
      "chunkIndex": "code-8",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ine extends beyond its `RightHandle` when rendered.\n\n### CanChangeExtendLeft\n```csharp\npublic bool CanChangeExtendLeft\n```\nControls whether the `ExtendLeft` property can be modified when the user changes the \"Extend Left\" Parameter of the Parent drawing object.\n\n### CanChangeExtendRight\n```csharp\npublic bool CanChangeExtendRight\n```\nControls whether the `ExtendRight` property can be modified when the user changes the \"Extend Right\" Parameter of the Parent drawing object.\n\n### CanChangeLineStyle\n"
    }
  },
  {
    "pageContent": "ine extends beyond its `RightHandle` when rendered.\n\n### CanChangeExtendLeft\n```csharp\npublic bool CanChangeExtendLeft\n```\nControls whether the `ExtendLeft` property can be modified when the user changes the \"Extend Left\" Parameter of the Parent drawing object.\n\n### CanChangeExtendRight\n```csharp\npublic bool CanChangeExtendRight\n```\nControls whether the `ExtendRight` property can be modified when the user changes the \"Extend Right\" Parameter of the Parent drawing object.\n\n### CanChangeLineStyle\n\n\n```csharp\npublic bool CanChangeLineStyle\n\n```",
    "metadata": {
      "id": "drawing-object-line",
      "title": "drawing-object-line",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/drawing-object-line.md",
      "chunkIndex": "code-context-8",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public Handle Handle1\n",
    "metadata": {
      "id": "drawing-object-line",
      "title": "drawing-object-line",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/drawing-object-line.md",
      "chunkIndex": "code-9",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "eft\" Parameter of the Parent drawing object.\n\n### CanChangeExtendRight\n```csharp\npublic bool CanChangeExtendRight\n```\nControls whether the `ExtendRight` property can be modified when the user changes the \"Extend Right\" Parameter of the Parent drawing object.\n\n### CanChangeLineStyle\n```csharp\npublic bool CanChangeLineStyle\n```\nControls whether the `LineStyle` property can be modified when the user changes the \"Line Style\" Parameter of the Parent drawing object.\n\n## Handle Properties\n\n### Handle1\n"
    }
  },
  {
    "pageContent": "eft\" Parameter of the Parent drawing object.\n\n### CanChangeExtendRight\n```csharp\npublic bool CanChangeExtendRight\n```\nControls whether the `ExtendRight` property can be modified when the user changes the \"Extend Right\" Parameter of the Parent drawing object.\n\n### CanChangeLineStyle\n```csharp\npublic bool CanChangeLineStyle\n```\nControls whether the `LineStyle` property can be modified when the user changes the \"Line Style\" Parameter of the Parent drawing object.\n\n## Handle Properties\n\n### Handle1\n\n\n```csharp\npublic Handle Handle1\n\n```",
    "metadata": {
      "id": "drawing-object-line",
      "title": "drawing-object-line",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/drawing-object-line.md",
      "chunkIndex": "code-context-9",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public Handle Handle2\n",
    "metadata": {
      "id": "drawing-object-line",
      "title": "drawing-object-line",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/drawing-object-line.md",
      "chunkIndex": "code-10",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ndRight\n```\nControls whether the `ExtendRight` property can be modified when the user changes the \"Extend Right\" Parameter of the Parent drawing object.\n\n### CanChangeLineStyle\n```csharp\npublic bool CanChangeLineStyle\n```\nControls whether the `LineStyle` property can be modified when the user changes the \"Line Style\" Parameter of the Parent drawing object.\n\n## Handle Properties\n\n### Handle1\n```csharp\npublic Handle Handle1\n```\nOne of the two `Handle` instances that define this line.\n\n### Handle2\n"
    }
  },
  {
    "pageContent": "ndRight\n```\nControls whether the `ExtendRight` property can be modified when the user changes the \"Extend Right\" Parameter of the Parent drawing object.\n\n### CanChangeLineStyle\n```csharp\npublic bool CanChangeLineStyle\n```\nControls whether the `LineStyle` property can be modified when the user changes the \"Line Style\" Parameter of the Parent drawing object.\n\n## Handle Properties\n\n### Handle1\n```csharp\npublic Handle Handle1\n```\nOne of the two `Handle` instances that define this line.\n\n### Handle2\n\n\n```csharp\npublic Handle Handle2\n\n```",
    "metadata": {
      "id": "drawing-object-line",
      "title": "drawing-object-line",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/drawing-object-line.md",
      "chunkIndex": "code-context-10",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public Handle LeftHandle\n",
    "metadata": {
      "id": "drawing-object-line",
      "title": "drawing-object-line",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/drawing-object-line.md",
      "chunkIndex": "code-11",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ht\" Parameter of the Parent drawing object.\n\n### CanChangeLineStyle\n```csharp\npublic bool CanChangeLineStyle\n```\nControls whether the `LineStyle` property can be modified when the user changes the \"Line Style\" Parameter of the Parent drawing object.\n\n## Handle Properties\n\n### Handle1\n```csharp\npublic Handle Handle1\n```\nOne of the two `Handle` instances that define this line.\n\n### Handle2\n```csharp\npublic Handle Handle2\n```\nOne of the two `Handle` instances that define this line.\n\n### LeftHandle\n"
    }
  },
  {
    "pageContent": "ht\" Parameter of the Parent drawing object.\n\n### CanChangeLineStyle\n```csharp\npublic bool CanChangeLineStyle\n```\nControls whether the `LineStyle` property can be modified when the user changes the \"Line Style\" Parameter of the Parent drawing object.\n\n## Handle Properties\n\n### Handle1\n```csharp\npublic Handle Handle1\n```\nOne of the two `Handle` instances that define this line.\n\n### Handle2\n```csharp\npublic Handle Handle2\n```\nOne of the two `Handle` instances that define this line.\n\n### LeftHandle\n\n\n```csharp\npublic Handle LeftHandle\n\n```",
    "metadata": {
      "id": "drawing-object-line",
      "title": "drawing-object-line",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/drawing-object-line.md",
      "chunkIndex": "code-context-11",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public Handle RightHandle\n",
    "metadata": {
      "id": "drawing-object-line",
      "title": "drawing-object-line",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/drawing-object-line.md",
      "chunkIndex": "code-12",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ineStyle\n```\nControls whether the `LineStyle` property can be modified when the user changes the \"Line Style\" Parameter of the Parent drawing object.\n\n## Handle Properties\n\n### Handle1\n```csharp\npublic Handle Handle1\n```\nOne of the two `Handle` instances that define this line.\n\n### Handle2\n```csharp\npublic Handle Handle2\n```\nOne of the two `Handle` instances that define this line.\n\n### LeftHandle\n```csharp\npublic Handle LeftHandle\n```\nReturns the left side `Handle` of the line.\n\n### RightHandle\n"
    }
  },
  {
    "pageContent": "ineStyle\n```\nControls whether the `LineStyle` property can be modified when the user changes the \"Line Style\" Parameter of the Parent drawing object.\n\n## Handle Properties\n\n### Handle1\n```csharp\npublic Handle Handle1\n```\nOne of the two `Handle` instances that define this line.\n\n### Handle2\n```csharp\npublic Handle Handle2\n```\nOne of the two `Handle` instances that define this line.\n\n### LeftHandle\n```csharp\npublic Handle LeftHandle\n```\nReturns the left side `Handle` of the line.\n\n### RightHandle\n\n\n```csharp\npublic Handle RightHandle\n\n```",
    "metadata": {
      "id": "drawing-object-line",
      "title": "drawing-object-line",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/drawing-object-line.md",
      "chunkIndex": "code-context-12",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public bool IsDraggable\n",
    "metadata": {
      "id": "drawing-object-line",
      "title": "drawing-object-line",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/drawing-object-line.md",
      "chunkIndex": "code-13",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "rent drawing object.\n\n## Handle Properties\n\n### Handle1\n```csharp\npublic Handle Handle1\n```\nOne of the two `Handle` instances that define this line.\n\n### Handle2\n```csharp\npublic Handle Handle2\n```\nOne of the two `Handle` instances that define this line.\n\n### LeftHandle\n```csharp\npublic Handle LeftHandle\n```\nReturns the left side `Handle` of the line.\n\n### RightHandle\n```csharp\npublic Handle RightHandle\n```\nReturns the right side `Handle` of the line.\n\n## Interaction Properties\n\n### IsDraggable\n"
    }
  },
  {
    "pageContent": "rent drawing object.\n\n## Handle Properties\n\n### Handle1\n```csharp\npublic Handle Handle1\n```\nOne of the two `Handle` instances that define this line.\n\n### Handle2\n```csharp\npublic Handle Handle2\n```\nOne of the two `Handle` instances that define this line.\n\n### LeftHandle\n```csharp\npublic Handle LeftHandle\n```\nReturns the left side `Handle` of the line.\n\n### RightHandle\n```csharp\npublic Handle RightHandle\n```\nReturns the right side `Handle` of the line.\n\n## Interaction Properties\n\n### IsDraggable\n\n\n```csharp\npublic bool IsDraggable\n\n```",
    "metadata": {
      "id": "drawing-object-line",
      "title": "drawing-object-line",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/drawing-object-line.md",
      "chunkIndex": "code-context-13",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public DrawingObjectBase Parent\n",
    "metadata": {
      "id": "drawing-object-line",
      "title": "drawing-object-line",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/drawing-object-line.md",
      "chunkIndex": "code-14",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ndle` instances that define this line.\n\n### Handle2\n```csharp\npublic Handle Handle2\n```\nOne of the two `Handle` instances that define this line.\n\n### LeftHandle\n```csharp\npublic Handle LeftHandle\n```\nReturns the left side `Handle` of the line.\n\n### RightHandle\n```csharp\npublic Handle RightHandle\n```\nReturns the right side `Handle` of the line.\n\n## Interaction Properties\n\n### IsDraggable\n```csharp\npublic bool IsDraggable\n```\nControls whether the user can drag the line with the mouse.\n\n### Parent\n"
    }
  },
  {
    "pageContent": "ndle` instances that define this line.\n\n### Handle2\n```csharp\npublic Handle Handle2\n```\nOne of the two `Handle` instances that define this line.\n\n### LeftHandle\n```csharp\npublic Handle LeftHandle\n```\nReturns the left side `Handle` of the line.\n\n### RightHandle\n```csharp\npublic Handle RightHandle\n```\nReturns the right side `Handle` of the line.\n\n## Interaction Properties\n\n### IsDraggable\n```csharp\npublic bool IsDraggable\n```\nControls whether the user can drag the line with the mouse.\n\n### Parent\n\n\n```csharp\npublic DrawingObjectBase Parent\n\n```",
    "metadata": {
      "id": "drawing-object-line",
      "title": "drawing-object-line",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/drawing-object-line.md",
      "chunkIndex": "code-context-14",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public void FixHandleOrder()\n",
    "metadata": {
      "id": "drawing-object-line",
      "title": "drawing-object-line",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/drawing-object-line.md",
      "chunkIndex": "code-15",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ublic Handle LeftHandle\n```\nReturns the left side `Handle` of the line.\n\n### RightHandle\n```csharp\npublic Handle RightHandle\n```\nReturns the right side `Handle` of the line.\n\n## Interaction Properties\n\n### IsDraggable\n```csharp\npublic bool IsDraggable\n```\nControls whether the user can drag the line with the mouse.\n\n### Parent\n```csharp\npublic DrawingObjectBase Parent\n```\nReturns the chart drawing object (instance of `DrawingObjectBase`) that this line belongs to.\n\n## Methods\n\n### FixHandleOrder\n"
    }
  },
  {
    "pageContent": "ublic Handle LeftHandle\n```\nReturns the left side `Handle` of the line.\n\n### RightHandle\n```csharp\npublic Handle RightHandle\n```\nReturns the right side `Handle` of the line.\n\n## Interaction Properties\n\n### IsDraggable\n```csharp\npublic bool IsDraggable\n```\nControls whether the user can drag the line with the mouse.\n\n### Parent\n```csharp\npublic DrawingObjectBase Parent\n```\nReturns the chart drawing object (instance of `DrawingObjectBase`) that this line belongs to.\n\n## Methods\n\n### FixHandleOrder\n\n\n```csharp\npublic void FixHandleOrder()\n\n```",
    "metadata": {
      "id": "drawing-object-line",
      "title": "drawing-object-line",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/drawing-object-line.md",
      "chunkIndex": "code-context-15",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public bool InViewport(int startX, int endX)\n",
    "metadata": {
      "id": "drawing-object-line",
      "title": "drawing-object-line",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/drawing-object-line.md",
      "chunkIndex": "code-16",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "\n## Interaction Properties\n\n### IsDraggable\n```csharp\npublic bool IsDraggable\n```\nControls whether the user can drag the line with the mouse.\n\n### Parent\n```csharp\npublic DrawingObjectBase Parent\n```\nReturns the chart drawing object (instance of `DrawingObjectBase`) that this line belongs to.\n\n## Methods\n\n### FixHandleOrder\n```csharp\npublic void FixHandleOrder()\n```\nChecks the positions of `Handle1` and `Handle2` and swaps them if `Handle1` has a greater DateTime than `Handle2`.\n\n### InViewport\n"
    }
  },
  {
    "pageContent": "\n## Interaction Properties\n\n### IsDraggable\n```csharp\npublic bool IsDraggable\n```\nControls whether the user can drag the line with the mouse.\n\n### Parent\n```csharp\npublic DrawingObjectBase Parent\n```\nReturns the chart drawing object (instance of `DrawingObjectBase`) that this line belongs to.\n\n## Methods\n\n### FixHandleOrder\n```csharp\npublic void FixHandleOrder()\n```\nChecks the positions of `Handle1` and `Handle2` and swaps them if `Handle1` has a greater DateTime than `Handle2`.\n\n### InViewport\n\n\n```csharp\npublic bool InViewport(int startX, int endX)\n\n```",
    "metadata": {
      "id": "drawing-object-line",
      "title": "drawing-object-line",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/drawing-object-line.md",
      "chunkIndex": "code-context-16",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public bool IsVertical\n",
    "metadata": {
      "id": "drawing-object-line",
      "title": "drawing-object-line",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/drawing-object-line.md",
      "chunkIndex": "code-17",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "arp\npublic DrawingObjectBase Parent\n```\nReturns the chart drawing object (instance of `DrawingObjectBase`) that this line belongs to.\n\n## Methods\n\n### FixHandleOrder\n```csharp\npublic void FixHandleOrder()\n```\nChecks the positions of `Handle1` and `Handle2` and swaps them if `Handle1` has a greater DateTime than `Handle2`.\n\n### InViewport\n```csharp\npublic bool InViewport(int startX, int endX)\n```\nReturns whether any portion of the line is visible within the specified index range.\n\n### IsVertical\n"
    }
  },
  {
    "pageContent": "arp\npublic DrawingObjectBase Parent\n```\nReturns the chart drawing object (instance of `DrawingObjectBase`) that this line belongs to.\n\n## Methods\n\n### FixHandleOrder\n```csharp\npublic void FixHandleOrder()\n```\nChecks the positions of `Handle1` and `Handle2` and swaps them if `Handle1` has a greater DateTime than `Handle2`.\n\n### InViewport\n```csharp\npublic bool InViewport(int startX, int endX)\n```\nReturns whether any portion of the line is visible within the specified index range.\n\n### IsVertical\n\n\n```csharp\npublic bool IsVertical\n\n```",
    "metadata": {
      "id": "drawing-object-line",
      "title": "drawing-object-line",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/drawing-object-line.md",
      "chunkIndex": "code-context-17",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public void Render(DrawingContext dc, Pen pen)\n",
    "metadata": {
      "id": "drawing-object-line",
      "title": "drawing-object-line",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/drawing-object-line.md",
      "chunkIndex": "code-18",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "DrawingObjectBase`) that this line belongs to.\n\n## Methods\n\n### FixHandleOrder\n```csharp\npublic void FixHandleOrder()\n```\nChecks the positions of `Handle1` and `Handle2` and swaps them if `Handle1` has a greater DateTime than `Handle2`.\n\n### InViewport\n```csharp\npublic bool InViewport(int startX, int endX)\n```\nReturns whether any portion of the line is visible within the specified index range.\n\n### IsVertical\n```csharp\npublic bool IsVertical\n```\nReturns whether the line is vertical.\n\n### Render\n"
    }
  },
  {
    "pageContent": "DrawingObjectBase`) that this line belongs to.\n\n## Methods\n\n### FixHandleOrder\n```csharp\npublic void FixHandleOrder()\n```\nChecks the positions of `Handle1` and `Handle2` and swaps them if `Handle1` has a greater DateTime than `Handle2`.\n\n### InViewport\n```csharp\npublic bool InViewport(int startX, int endX)\n```\nReturns whether any portion of the line is visible within the specified index range.\n\n### IsVertical\n```csharp\npublic bool IsVertical\n```\nReturns whether the line is vertical.\n\n### Render\n\n\n```csharp\npublic void Render(DrawingContext dc, Pen pen)\n\n```",
    "metadata": {
      "id": "drawing-object-line",
      "title": "drawing-object-line",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/drawing-object-line.md",
      "chunkIndex": "code-context-18",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public double SolveForY(DateTime dt)\n",
    "metadata": {
      "id": "drawing-object-line",
      "title": "drawing-object-line",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/drawing-object-line.md",
      "chunkIndex": "code-19",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "` and `Handle2` and swaps them if `Handle1` has a greater DateTime than `Handle2`.\n\n### InViewport\n```csharp\npublic bool InViewport(int startX, int endX)\n```\nReturns whether any portion of the line is visible within the specified index range.\n\n### IsVertical\n```csharp\npublic bool IsVertical\n```\nReturns whether the line is vertical.\n\n### Render\n```csharp\npublic void Render(DrawingContext dc, Pen pen)\n```\nRenders the line to the specified `DrawingContext` using the specified `Pen`.\n\n### SolveForY\n"
    }
  },
  {
    "pageContent": "` and `Handle2` and swaps them if `Handle1` has a greater DateTime than `Handle2`.\n\n### InViewport\n```csharp\npublic bool InViewport(int startX, int endX)\n```\nReturns whether any portion of the line is visible within the specified index range.\n\n### IsVertical\n```csharp\npublic bool IsVertical\n```\nReturns whether the line is vertical.\n\n### Render\n```csharp\npublic void Render(DrawingContext dc, Pen pen)\n```\nRenders the line to the specified `DrawingContext` using the specified `Pen`.\n\n### SolveForY\n\n\n```csharp\npublic double SolveForY(DateTime dt)\n\n```",
    "metadata": {
      "id": "drawing-object-line",
      "title": "drawing-object-line",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/drawing-object-line.md",
      "chunkIndex": "code-context-19",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "// Create a trend line on a chart\nvar line = new DrawingObjectLine\n{\n    Color = WLColor.Blue,\n    LineWidth = 2,\n    LineStyle = LineStyles.Solid,\n    ExtendRight = true,\n    IsDraggable = true\n};\n\n// Set up the handles\nline.Handle1 = new Handle(DateTime.Now.AddDays(-10), 100.0);\nline.Handle2 = new Handle(DateTime.Now, 120.0);\n\n// Ensure handles are in correct order\nline.FixHandleOrder();\n\n// Calculate intersection at a specific date\nDateTime intersectDate = DateTime.Now.AddDays(-5);\ndouble yValue = line.SolveForY(intersectDate);\n\n// Render the line\nusing (var pen = new Pen(line.Color, line.LineWidth))\n{\n    line.Render(drawingContext, pen);\n}\n",
    "metadata": {
      "id": "drawing-object-line",
      "title": "drawing-object-line",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/drawing-object-line.md",
      "chunkIndex": "code-20",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "nt endX)\n```\nReturns whether any portion of the line is visible within the specified index range.\n\n### IsVertical\n```csharp\npublic bool IsVertical\n```\nReturns whether the line is vertical.\n\n### Render\n```csharp\npublic void Render(DrawingContext dc, Pen pen)\n```\nRenders the line to the specified `DrawingContext` using the specified `Pen`.\n\n### SolveForY\n```csharp\npublic double SolveForY(DateTime dt)\n```\nReturns the y-axis value where the line intersects the specified DateTime.\n\n## Usage Example\n\n"
    }
  },
  {
    "pageContent": "nt endX)\n```\nReturns whether any portion of the line is visible within the specified index range.\n\n### IsVertical\n```csharp\npublic bool IsVertical\n```\nReturns whether the line is vertical.\n\n### Render\n```csharp\npublic void Render(DrawingContext dc, Pen pen)\n```\nRenders the line to the specified `DrawingContext` using the specified `Pen`.\n\n### SolveForY\n```csharp\npublic double SolveForY(DateTime dt)\n```\nReturns the y-axis value where the line intersects the specified DateTime.\n\n## Usage Example\n\n\n\n```csharp\n// Create a trend line on a chart\nvar line = new DrawingObjectLine\n{\n    Color = WLColor.Blue,\n    LineWidth = 2,\n    LineStyle = LineStyles.Solid,\n    ExtendRight = true,\n    IsDraggable = true\n};\n\n// Set up the handles\nline.Handle1 = new Handle(DateTime.Now.AddDays(-10), 100.0);\nline.Handle2 = new Handle(DateTime.Now, 120.0);\n\n// Ensure handles are in correct order\nline.FixHandleOrder();\n\n// Calculate intersection at a specific date\nDateTime intersectDate = DateTime.Now.AddDays(-5);\ndouble yValue = line.SolveForY(intersectDate);\n\n// Render the line\nusing (var pen = new Pen(line.Color, line.LineWidth))\n{\n    line.Render(drawingContext, pen);\n}\n\n```",
    "metadata": {
      "id": "drawing-object-line",
      "title": "drawing-object-line",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/drawing-object-line.md",
      "chunkIndex": "code-context-20",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "# WealthLab Enums\n\n**Namespace:** WealthLab.Core\n\nThis document covers the various enumerated types used throughout the WealthLab .NET Framework.\n\n## Data Related Enums\n\n### Frequency\n",
    "metadata": {
      "id": "enums",
      "title": "enums",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/enums.md",
      "chunkIndex": 0,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nRepresents the frequency of historical data.\n\n### PriceComponent\n",
    "metadata": {
      "id": "enums",
      "title": "enums",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/enums.md",
      "chunkIndex": 1,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nRepresents the components of historical data and derived averaging components.\n\n## Trading Related Enums\n\n### OrderType\n",
    "metadata": {
      "id": "enums",
      "title": "enums",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/enums.md",
      "chunkIndex": 2,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nSpecifies order types for backtester or broker submission.\n\n**Notes:**\n- `Limit`: Executes when price penetrates below (long entry/short exit) or above (short entry/long exit)\n- `Stop`: Executes when price penetrates above (long entry/short exit) or below (short entry/long exit)\n- `StopLimit`: Like Stop with Limit price constraint\n- `LimitMove`: Like Limit but won't execute if price opens beyond order Price\n- `MarketClose`: Executes at bar's closing price\n- `LimitClose`: Like MarketClose with Limit price constraint\n- `FixedPrice`: Executes exactly at specified price within bar's OHLC range\n\n### PositionType\n",
    "metadata": {
      "id": "enums",
      "title": "enums",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/enums.md",
      "chunkIndex": 3,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nSpecifies position direction.\n\n### SignalStatus\n",
    "metadata": {
      "id": "enums",
      "title": "enums",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/enums.md",
      "chunkIndex": 4,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nRepresents possible order states during its lifecycle.\n\n### TransactionType\n",
    "metadata": {
      "id": "enums",
      "title": "enums",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/enums.md",
      "chunkIndex": 5,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nSpecifies transaction or order type.\n\n### TrailingStopType\n",
    "metadata": {
      "id": "enums",
      "title": "enums",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/enums.md",
      "chunkIndex": 6,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nDetermines trailing stop calculation method.\n\n## Strategy Related Enums\n\n### OptimizationRunType\n",
    "metadata": {
      "id": "enums",
      "title": "enums",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/enums.md",
      "chunkIndex": 7,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nSpecifies optimization run types.\n\n### StrategyExecutionMode\n",
    "metadata": {
      "id": "enums",
      "title": "enums",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/enums.md",
      "chunkIndex": 8,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nRepresents backtester operation mode.\n\n### ParameterType\n",
    "metadata": {
      "id": "enums",
      "title": "enums",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/enums.md",
      "chunkIndex": 9,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nRepresents parameter types for Strategies and Indicators.\n\n**Notes:**\n- Strategies only support `Int32` and `Double`\n- `Text`: Multiline string field in UI\n- `StringChoice`: Dropdown with discrete values\n- `IndicatorSource`: Flags parameter to use source from another indicator\n\n## Technical Analysis Enums\n\n### PeakTroughType\n",
    "metadata": {
      "id": "enums",
      "title": "enums",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/enums.md",
      "chunkIndex": 10,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nSpecifies peak or trough type for `PeakTrough` class.\n\n### PeakTroughReversalType\n",
    "metadata": {
      "id": "enums",
      "title": "enums",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/enums.md",
      "chunkIndex": 11,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nDetermines peak/trough reversal calculation method.\n\n## Visualization Enums\n\n### LineStyle\n",
    "metadata": {
      "id": "enums",
      "title": "enums",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/enums.md",
      "chunkIndex": 12,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nDescribes line drawing styles.\n\n### PlotStyle\n",
    "metadata": {
      "id": "enums",
      "title": "enums",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/enums.md",
      "chunkIndex": 13,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nRepresents indicator plotting styles.\n\n**Notes:**\n- `BooleanDots`: Plots in price pane, dots above price bar for values > 0\n- `Bands`: Renders filled bands using source and companion indicators\n- `ZigZag`: Best for sporadic values with NaN gaps\n- `Blocks`: Outlined blocks for value ranges\n- `GradientBlocks`: Blocks with gradient fill\n\n### TextShape\n",
    "metadata": {
      "id": "enums",
      "title": "enums",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/enums.md",
      "chunkIndex": 14,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nProvides special symbols for `DrawBarAnnotation()`.\n\n### VerticalAlignment\n",
    "metadata": {
      "id": "enums",
      "title": "enums",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/enums.md",
      "chunkIndex": 15,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nSpecifies vertical alignment for `DrawTextVAlign()`. ",
    "metadata": {
      "id": "enums",
      "title": "enums",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/enums.md",
      "chunkIndex": 16,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "public enum Frequency\n{\n    Daily,\n    Weekly,\n    Monthly,\n    Quarterly,\n    Yearly,\n    Tick,\n    Second,\n    Minute,\n    Volume,\n    Hour,\n    NDays,\n    WeeklyStartDay\n}\n",
    "metadata": {
      "id": "enums",
      "title": "enums",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/enums.md",
      "chunkIndex": "code-0",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "# WealthLab Enums\n\n**Namespace:** WealthLab.Core\n\nThis document covers the various enumerated types used throughout the WealthLab .NET Framework.\n\n## Data Related Enums\n\n### Frequency\n"
    }
  },
  {
    "pageContent": "# WealthLab Enums\n\n**Namespace:** WealthLab.Core\n\nThis document covers the various enumerated types used throughout the WealthLab .NET Framework.\n\n## Data Related Enums\n\n### Frequency\n\n\n```csharp\npublic enum Frequency\n{\n    Daily,\n    Weekly,\n    Monthly,\n    Quarterly,\n    Yearly,\n    Tick,\n    Second,\n    Minute,\n    Volume,\n    Hour,\n    NDays,\n    WeeklyStartDay\n}\n\n```",
    "metadata": {
      "id": "enums",
      "title": "enums",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/enums.md",
      "chunkIndex": "code-context-0",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public enum PriceComponent\n{\n    Open,\n    High,\n    Low,\n    Close,\n    Volume,\n    AveragePriceOHLC,\n    AveragePriceHLC,\n    AveragePriceHL,\n    AveragePriceOC,\n    AveragePriceHLCC\n}\n",
    "metadata": {
      "id": "enums",
      "title": "enums",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/enums.md",
      "chunkIndex": "code-1",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "# WealthLab Enums\n\n**Namespace:** WealthLab.Core\n\nThis document covers the various enumerated types used throughout the WealthLab .NET Framework.\n\n## Data Related Enums\n\n### Frequency\n```csharp\npublic enum Frequency\n{\n    Daily,\n    Weekly,\n    Monthly,\n    Quarterly,\n    Yearly,\n    Tick,\n    Second,\n    Minute,\n    Volume,\n    Hour,\n    NDays,\n    WeeklyStartDay\n}\n```\nRepresents the frequency of historical data.\n\n### PriceComponent\n"
    }
  },
  {
    "pageContent": "# WealthLab Enums\n\n**Namespace:** WealthLab.Core\n\nThis document covers the various enumerated types used throughout the WealthLab .NET Framework.\n\n## Data Related Enums\n\n### Frequency\n```csharp\npublic enum Frequency\n{\n    Daily,\n    Weekly,\n    Monthly,\n    Quarterly,\n    Yearly,\n    Tick,\n    Second,\n    Minute,\n    Volume,\n    Hour,\n    NDays,\n    WeeklyStartDay\n}\n```\nRepresents the frequency of historical data.\n\n### PriceComponent\n\n\n```csharp\npublic enum PriceComponent\n{\n    Open,\n    High,\n    Low,\n    Close,\n    Volume,\n    AveragePriceOHLC,\n    AveragePriceHLC,\n    AveragePriceHL,\n    AveragePriceOC,\n    AveragePriceHLCC\n}\n\n```",
    "metadata": {
      "id": "enums",
      "title": "enums",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/enums.md",
      "chunkIndex": "code-context-1",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public enum OrderType\n{\n    Market,\n    Limit,\n    Stop,\n    FixedPrice,\n    LimitMove,\n    MarketClose,\n    LimitClose,\n    StopLimit\n}\n",
    "metadata": {
      "id": "enums",
      "title": "enums",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/enums.md",
      "chunkIndex": "code-2",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "uarterly,\n    Yearly,\n    Tick,\n    Second,\n    Minute,\n    Volume,\n    Hour,\n    NDays,\n    WeeklyStartDay\n}\n```\nRepresents the frequency of historical data.\n\n### PriceComponent\n```csharp\npublic enum PriceComponent\n{\n    Open,\n    High,\n    Low,\n    Close,\n    Volume,\n    AveragePriceOHLC,\n    AveragePriceHLC,\n    AveragePriceHL,\n    AveragePriceOC,\n    AveragePriceHLCC\n}\n```\nRepresents the components of historical data and derived averaging components.\n\n## Trading Related Enums\n\n### OrderType\n"
    }
  },
  {
    "pageContent": "uarterly,\n    Yearly,\n    Tick,\n    Second,\n    Minute,\n    Volume,\n    Hour,\n    NDays,\n    WeeklyStartDay\n}\n```\nRepresents the frequency of historical data.\n\n### PriceComponent\n```csharp\npublic enum PriceComponent\n{\n    Open,\n    High,\n    Low,\n    Close,\n    Volume,\n    AveragePriceOHLC,\n    AveragePriceHLC,\n    AveragePriceHL,\n    AveragePriceOC,\n    AveragePriceHLCC\n}\n```\nRepresents the components of historical data and derived averaging components.\n\n## Trading Related Enums\n\n### OrderType\n\n\n```csharp\npublic enum OrderType\n{\n    Market,\n    Limit,\n    Stop,\n    FixedPrice,\n    LimitMove,\n    MarketClose,\n    LimitClose,\n    StopLimit\n}\n\n```",
    "metadata": {
      "id": "enums",
      "title": "enums",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/enums.md",
      "chunkIndex": "code-context-2",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public enum PositionType\n{\n    Long,\n    Short\n}\n",
    "metadata": {
      "id": "enums",
      "title": "enums",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/enums.md",
      "chunkIndex": "code-3",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "low (long entry/short exit) or above (short entry/long exit)\n- `Stop`: Executes when price penetrates above (long entry/short exit) or below (short entry/long exit)\n- `StopLimit`: Like Stop with Limit price constraint\n- `LimitMove`: Like Limit but won't execute if price opens beyond order Price\n- `MarketClose`: Executes at bar's closing price\n- `LimitClose`: Like MarketClose with Limit price constraint\n- `FixedPrice`: Executes exactly at specified price within bar's OHLC range\n\n### PositionType\n"
    }
  },
  {
    "pageContent": "low (long entry/short exit) or above (short entry/long exit)\n- `Stop`: Executes when price penetrates above (long entry/short exit) or below (short entry/long exit)\n- `StopLimit`: Like Stop with Limit price constraint\n- `LimitMove`: Like Limit but won't execute if price opens beyond order Price\n- `MarketClose`: Executes at bar's closing price\n- `LimitClose`: Like MarketClose with Limit price constraint\n- `FixedPrice`: Executes exactly at specified price within bar's OHLC range\n\n### PositionType\n\n\n```csharp\npublic enum PositionType\n{\n    Long,\n    Short\n}\n\n```",
    "metadata": {
      "id": "enums",
      "title": "enums",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/enums.md",
      "chunkIndex": "code-context-3",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public enum SignalStatus\n{\n    Staged,\n    Placed,\n    Active,\n    Filled,\n    PartialFilled,\n    CancelPending,\n    Canceled,\n    Error,\n    WaitForClose,\n    Published,\n    FinalOrder,\n    HeldForReview,\n    Killed\n}\n",
    "metadata": {
      "id": "enums",
      "title": "enums",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/enums.md",
      "chunkIndex": "code-4",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ng entry/short exit) or below (short entry/long exit)\n- `StopLimit`: Like Stop with Limit price constraint\n- `LimitMove`: Like Limit but won't execute if price opens beyond order Price\n- `MarketClose`: Executes at bar's closing price\n- `LimitClose`: Like MarketClose with Limit price constraint\n- `FixedPrice`: Executes exactly at specified price within bar's OHLC range\n\n### PositionType\n```csharp\npublic enum PositionType\n{\n    Long,\n    Short\n}\n```\nSpecifies position direction.\n\n### SignalStatus\n"
    }
  },
  {
    "pageContent": "ng entry/short exit) or below (short entry/long exit)\n- `StopLimit`: Like Stop with Limit price constraint\n- `LimitMove`: Like Limit but won't execute if price opens beyond order Price\n- `MarketClose`: Executes at bar's closing price\n- `LimitClose`: Like MarketClose with Limit price constraint\n- `FixedPrice`: Executes exactly at specified price within bar's OHLC range\n\n### PositionType\n```csharp\npublic enum PositionType\n{\n    Long,\n    Short\n}\n```\nSpecifies position direction.\n\n### SignalStatus\n\n\n```csharp\npublic enum SignalStatus\n{\n    Staged,\n    Placed,\n    Active,\n    Filled,\n    PartialFilled,\n    CancelPending,\n    Canceled,\n    Error,\n    WaitForClose,\n    Published,\n    FinalOrder,\n    HeldForReview,\n    Killed\n}\n\n```",
    "metadata": {
      "id": "enums",
      "title": "enums",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/enums.md",
      "chunkIndex": "code-context-4",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public enum TransactionType\n{\n    Buy,\n    Sell,\n    Short,\n    Cover\n}\n",
    "metadata": {
      "id": "enums",
      "title": "enums",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/enums.md",
      "chunkIndex": "code-5",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": ": Executes exactly at specified price within bar's OHLC range\n\n### PositionType\n```csharp\npublic enum PositionType\n{\n    Long,\n    Short\n}\n```\nSpecifies position direction.\n\n### SignalStatus\n```csharp\npublic enum SignalStatus\n{\n    Staged,\n    Placed,\n    Active,\n    Filled,\n    PartialFilled,\n    CancelPending,\n    Canceled,\n    Error,\n    WaitForClose,\n    Published,\n    FinalOrder,\n    HeldForReview,\n    Killed\n}\n```\nRepresents possible order states during its lifecycle.\n\n### TransactionType\n"
    }
  },
  {
    "pageContent": ": Executes exactly at specified price within bar's OHLC range\n\n### PositionType\n```csharp\npublic enum PositionType\n{\n    Long,\n    Short\n}\n```\nSpecifies position direction.\n\n### SignalStatus\n```csharp\npublic enum SignalStatus\n{\n    Staged,\n    Placed,\n    Active,\n    Filled,\n    PartialFilled,\n    CancelPending,\n    Canceled,\n    Error,\n    WaitForClose,\n    Published,\n    FinalOrder,\n    HeldForReview,\n    Killed\n}\n```\nRepresents possible order states during its lifecycle.\n\n### TransactionType\n\n\n```csharp\npublic enum TransactionType\n{\n    Buy,\n    Sell,\n    Short,\n    Cover\n}\n\n```",
    "metadata": {
      "id": "enums",
      "title": "enums",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/enums.md",
      "chunkIndex": "code-context-5",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public enum TrailingStopType\n{\n    PercentC,    // Percentage using closing price\n    PointC,      // Fixed amount using closing price\n    PercentHL,   // Percentage using highs/lows\n    PointHL,     // Fixed amount using highs/lows\n    ATR          // Variable amount using ATR\n}\n",
    "metadata": {
      "id": "enums",
      "title": "enums",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/enums.md",
      "chunkIndex": "code-6",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ecifies position direction.\n\n### SignalStatus\n```csharp\npublic enum SignalStatus\n{\n    Staged,\n    Placed,\n    Active,\n    Filled,\n    PartialFilled,\n    CancelPending,\n    Canceled,\n    Error,\n    WaitForClose,\n    Published,\n    FinalOrder,\n    HeldForReview,\n    Killed\n}\n```\nRepresents possible order states during its lifecycle.\n\n### TransactionType\n```csharp\npublic enum TransactionType\n{\n    Buy,\n    Sell,\n    Short,\n    Cover\n}\n```\nSpecifies transaction or order type.\n\n### TrailingStopType\n"
    }
  },
  {
    "pageContent": "ecifies position direction.\n\n### SignalStatus\n```csharp\npublic enum SignalStatus\n{\n    Staged,\n    Placed,\n    Active,\n    Filled,\n    PartialFilled,\n    CancelPending,\n    Canceled,\n    Error,\n    WaitForClose,\n    Published,\n    FinalOrder,\n    HeldForReview,\n    Killed\n}\n```\nRepresents possible order states during its lifecycle.\n\n### TransactionType\n```csharp\npublic enum TransactionType\n{\n    Buy,\n    Sell,\n    Short,\n    Cover\n}\n```\nSpecifies transaction or order type.\n\n### TrailingStopType\n\n\n```csharp\npublic enum TrailingStopType\n{\n    PercentC,    // Percentage using closing price\n    PointC,      // Fixed amount using closing price\n    PercentHL,   // Percentage using highs/lows\n    PointHL,     // Fixed amount using highs/lows\n    ATR          // Variable amount using ATR\n}\n\n```",
    "metadata": {
      "id": "enums",
      "title": "enums",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/enums.md",
      "chunkIndex": "code-context-6",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public enum OptimizationRunType\n{\n    None,\n    Standard,\n    WFO,\n    SymbolBySymbol\n}\n",
    "metadata": {
      "id": "enums",
      "title": "enums",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/enums.md",
      "chunkIndex": "code-7",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "\n{\n    Buy,\n    Sell,\n    Short,\n    Cover\n}\n```\nSpecifies transaction or order type.\n\n### TrailingStopType\n```csharp\npublic enum TrailingStopType\n{\n    PercentC,    // Percentage using closing price\n    PointC,      // Fixed amount using closing price\n    PercentHL,   // Percentage using highs/lows\n    PointHL,     // Fixed amount using highs/lows\n    ATR          // Variable amount using ATR\n}\n```\nDetermines trailing stop calculation method.\n\n## Strategy Related Enums\n\n### OptimizationRunType\n"
    }
  },
  {
    "pageContent": "\n{\n    Buy,\n    Sell,\n    Short,\n    Cover\n}\n```\nSpecifies transaction or order type.\n\n### TrailingStopType\n```csharp\npublic enum TrailingStopType\n{\n    PercentC,    // Percentage using closing price\n    PointC,      // Fixed amount using closing price\n    PercentHL,   // Percentage using highs/lows\n    PointHL,     // Fixed amount using highs/lows\n    ATR          // Variable amount using ATR\n}\n```\nDetermines trailing stop calculation method.\n\n## Strategy Related Enums\n\n### OptimizationRunType\n\n\n```csharp\npublic enum OptimizationRunType\n{\n    None,\n    Standard,\n    WFO,\n    SymbolBySymbol\n}\n\n```",
    "metadata": {
      "id": "enums",
      "title": "enums",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/enums.md",
      "chunkIndex": "code-context-7",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public enum StrategyExecutionMode\n{\n    Strategy,\n    Optimization,\n    StreamingChart,\n    StrategyMonitor,\n    Rankings,\n    Evolver\n}\n",
    "metadata": {
      "id": "enums",
      "title": "enums",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/enums.md",
      "chunkIndex": "code-8",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "   // Percentage using closing price\n    PointC,      // Fixed amount using closing price\n    PercentHL,   // Percentage using highs/lows\n    PointHL,     // Fixed amount using highs/lows\n    ATR          // Variable amount using ATR\n}\n```\nDetermines trailing stop calculation method.\n\n## Strategy Related Enums\n\n### OptimizationRunType\n```csharp\npublic enum OptimizationRunType\n{\n    None,\n    Standard,\n    WFO,\n    SymbolBySymbol\n}\n```\nSpecifies optimization run types.\n\n### StrategyExecutionMode\n"
    }
  },
  {
    "pageContent": "   // Percentage using closing price\n    PointC,      // Fixed amount using closing price\n    PercentHL,   // Percentage using highs/lows\n    PointHL,     // Fixed amount using highs/lows\n    ATR          // Variable amount using ATR\n}\n```\nDetermines trailing stop calculation method.\n\n## Strategy Related Enums\n\n### OptimizationRunType\n```csharp\npublic enum OptimizationRunType\n{\n    None,\n    Standard,\n    WFO,\n    SymbolBySymbol\n}\n```\nSpecifies optimization run types.\n\n### StrategyExecutionMode\n\n\n```csharp\npublic enum StrategyExecutionMode\n{\n    Strategy,\n    Optimization,\n    StreamingChart,\n    StrategyMonitor,\n    Rankings,\n    Evolver\n}\n\n```",
    "metadata": {
      "id": "enums",
      "title": "enums",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/enums.md",
      "chunkIndex": "code-context-8",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public enum ParameterType\n{\n    Int32,\n    Double,\n    String,\n    Boolean,\n    TimeSeries,\n    BarHistory,\n    Color,\n    LineStyle,\n    Text,\n    Font,\n    StringChoice,\n    Indicator,\n    Smoother,\n    IndicatorSource,\n    PriceComponent,\n    DataSet,\n    ColorWpfDeprecated,\n    HistoryScale,\n    Date,\n    Password,\n    Label,\n    SmootherType,\n    IndicatorTSSource\n}\n",
    "metadata": {
      "id": "enums",
      "title": "enums",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/enums.md",
      "chunkIndex": "code-9",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "Variable amount using ATR\n}\n```\nDetermines trailing stop calculation method.\n\n## Strategy Related Enums\n\n### OptimizationRunType\n```csharp\npublic enum OptimizationRunType\n{\n    None,\n    Standard,\n    WFO,\n    SymbolBySymbol\n}\n```\nSpecifies optimization run types.\n\n### StrategyExecutionMode\n```csharp\npublic enum StrategyExecutionMode\n{\n    Strategy,\n    Optimization,\n    StreamingChart,\n    StrategyMonitor,\n    Rankings,\n    Evolver\n}\n```\nRepresents backtester operation mode.\n\n### ParameterType\n"
    }
  },
  {
    "pageContent": "Variable amount using ATR\n}\n```\nDetermines trailing stop calculation method.\n\n## Strategy Related Enums\n\n### OptimizationRunType\n```csharp\npublic enum OptimizationRunType\n{\n    None,\n    Standard,\n    WFO,\n    SymbolBySymbol\n}\n```\nSpecifies optimization run types.\n\n### StrategyExecutionMode\n```csharp\npublic enum StrategyExecutionMode\n{\n    Strategy,\n    Optimization,\n    StreamingChart,\n    StrategyMonitor,\n    Rankings,\n    Evolver\n}\n```\nRepresents backtester operation mode.\n\n### ParameterType\n\n\n```csharp\npublic enum ParameterType\n{\n    Int32,\n    Double,\n    String,\n    Boolean,\n    TimeSeries,\n    BarHistory,\n    Color,\n    LineStyle,\n    Text,\n    Font,\n    StringChoice,\n    Indicator,\n    Smoother,\n    IndicatorSource,\n    PriceComponent,\n    DataSet,\n    ColorWpfDeprecated,\n    HistoryScale,\n    Date,\n    Password,\n    Label,\n    SmootherType,\n    IndicatorTSSource\n}\n\n```",
    "metadata": {
      "id": "enums",
      "title": "enums",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/enums.md",
      "chunkIndex": "code-context-9",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public enum PeakTroughType\n{\n    Peak,\n    Trough\n}\n",
    "metadata": {
      "id": "enums",
      "title": "enums",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/enums.md",
      "chunkIndex": "code-10",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "IndicatorSource,\n    PriceComponent,\n    DataSet,\n    ColorWpfDeprecated,\n    HistoryScale,\n    Date,\n    Password,\n    Label,\n    SmootherType,\n    IndicatorTSSource\n}\n```\nRepresents parameter types for Strategies and Indicators.\n\n**Notes:**\n- Strategies only support `Int32` and `Double`\n- `Text`: Multiline string field in UI\n- `StringChoice`: Dropdown with discrete values\n- `IndicatorSource`: Flags parameter to use source from another indicator\n\n## Technical Analysis Enums\n\n### PeakTroughType\n"
    }
  },
  {
    "pageContent": "IndicatorSource,\n    PriceComponent,\n    DataSet,\n    ColorWpfDeprecated,\n    HistoryScale,\n    Date,\n    Password,\n    Label,\n    SmootherType,\n    IndicatorTSSource\n}\n```\nRepresents parameter types for Strategies and Indicators.\n\n**Notes:**\n- Strategies only support `Int32` and `Double`\n- `Text`: Multiline string field in UI\n- `StringChoice`: Dropdown with discrete values\n- `IndicatorSource`: Flags parameter to use source from another indicator\n\n## Technical Analysis Enums\n\n### PeakTroughType\n\n\n```csharp\npublic enum PeakTroughType\n{\n    Peak,\n    Trough\n}\n\n```",
    "metadata": {
      "id": "enums",
      "title": "enums",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/enums.md",
      "chunkIndex": "code-context-10",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public enum PeakTroughReversalType\n{\n    Percent,\n    Point,\n    ATR,\n    ATRPercent\n}\n",
    "metadata": {
      "id": "enums",
      "title": "enums",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/enums.md",
      "chunkIndex": "code-11",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": " IndicatorTSSource\n}\n```\nRepresents parameter types for Strategies and Indicators.\n\n**Notes:**\n- Strategies only support `Int32` and `Double`\n- `Text`: Multiline string field in UI\n- `StringChoice`: Dropdown with discrete values\n- `IndicatorSource`: Flags parameter to use source from another indicator\n\n## Technical Analysis Enums\n\n### PeakTroughType\n```csharp\npublic enum PeakTroughType\n{\n    Peak,\n    Trough\n}\n```\nSpecifies peak or trough type for `PeakTrough` class.\n\n### PeakTroughReversalType\n"
    }
  },
  {
    "pageContent": " IndicatorTSSource\n}\n```\nRepresents parameter types for Strategies and Indicators.\n\n**Notes:**\n- Strategies only support `Int32` and `Double`\n- `Text`: Multiline string field in UI\n- `StringChoice`: Dropdown with discrete values\n- `IndicatorSource`: Flags parameter to use source from another indicator\n\n## Technical Analysis Enums\n\n### PeakTroughType\n```csharp\npublic enum PeakTroughType\n{\n    Peak,\n    Trough\n}\n```\nSpecifies peak or trough type for `PeakTrough` class.\n\n### PeakTroughReversalType\n\n\n```csharp\npublic enum PeakTroughReversalType\n{\n    Percent,\n    Point,\n    ATR,\n    ATRPercent\n}\n\n```",
    "metadata": {
      "id": "enums",
      "title": "enums",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/enums.md",
      "chunkIndex": "code-context-11",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public enum LineStyle\n{\n    Solid,\n    Dashed,\n    Dotted\n}\n",
    "metadata": {
      "id": "enums",
      "title": "enums",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/enums.md",
      "chunkIndex": "code-12",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "oice`: Dropdown with discrete values\n- `IndicatorSource`: Flags parameter to use source from another indicator\n\n## Technical Analysis Enums\n\n### PeakTroughType\n```csharp\npublic enum PeakTroughType\n{\n    Peak,\n    Trough\n}\n```\nSpecifies peak or trough type for `PeakTrough` class.\n\n### PeakTroughReversalType\n```csharp\npublic enum PeakTroughReversalType\n{\n    Percent,\n    Point,\n    ATR,\n    ATRPercent\n}\n```\nDetermines peak/trough reversal calculation method.\n\n## Visualization Enums\n\n### LineStyle\n"
    }
  },
  {
    "pageContent": "oice`: Dropdown with discrete values\n- `IndicatorSource`: Flags parameter to use source from another indicator\n\n## Technical Analysis Enums\n\n### PeakTroughType\n```csharp\npublic enum PeakTroughType\n{\n    Peak,\n    Trough\n}\n```\nSpecifies peak or trough type for `PeakTrough` class.\n\n### PeakTroughReversalType\n```csharp\npublic enum PeakTroughReversalType\n{\n    Percent,\n    Point,\n    ATR,\n    ATRPercent\n}\n```\nDetermines peak/trough reversal calculation method.\n\n## Visualization Enums\n\n### LineStyle\n\n\n```csharp\npublic enum LineStyle\n{\n    Solid,\n    Dashed,\n    Dotted\n}\n\n```",
    "metadata": {
      "id": "enums",
      "title": "enums",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/enums.md",
      "chunkIndex": "code-context-12",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public enum PlotStyle\n{\n    Line,\n    Histogram,\n    Dots,\n    ThickLine,\n    ThickHistogram,\n    DottedLine,\n    DashedLine,\n    BooleanDots,\n    Bands,\n    ZigZag,\n    Blocks,\n    GradientBlocks,\n    BarHistory,\n    BarChart,\n    HistogramTwoColor,\n    Oscillator,\n    Cloud,\n    Mountain\n}\n",
    "metadata": {
      "id": "enums",
      "title": "enums",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/enums.md",
      "chunkIndex": "code-13",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ical Analysis Enums\n\n### PeakTroughType\n```csharp\npublic enum PeakTroughType\n{\n    Peak,\n    Trough\n}\n```\nSpecifies peak or trough type for `PeakTrough` class.\n\n### PeakTroughReversalType\n```csharp\npublic enum PeakTroughReversalType\n{\n    Percent,\n    Point,\n    ATR,\n    ATRPercent\n}\n```\nDetermines peak/trough reversal calculation method.\n\n## Visualization Enums\n\n### LineStyle\n```csharp\npublic enum LineStyle\n{\n    Solid,\n    Dashed,\n    Dotted\n}\n```\nDescribes line drawing styles.\n\n### PlotStyle\n"
    }
  },
  {
    "pageContent": "ical Analysis Enums\n\n### PeakTroughType\n```csharp\npublic enum PeakTroughType\n{\n    Peak,\n    Trough\n}\n```\nSpecifies peak or trough type for `PeakTrough` class.\n\n### PeakTroughReversalType\n```csharp\npublic enum PeakTroughReversalType\n{\n    Percent,\n    Point,\n    ATR,\n    ATRPercent\n}\n```\nDetermines peak/trough reversal calculation method.\n\n## Visualization Enums\n\n### LineStyle\n```csharp\npublic enum LineStyle\n{\n    Solid,\n    Dashed,\n    Dotted\n}\n```\nDescribes line drawing styles.\n\n### PlotStyle\n\n\n```csharp\npublic enum PlotStyle\n{\n    Line,\n    Histogram,\n    Dots,\n    ThickLine,\n    ThickHistogram,\n    DottedLine,\n    DashedLine,\n    BooleanDots,\n    Bands,\n    ZigZag,\n    Blocks,\n    GradientBlocks,\n    BarHistory,\n    BarChart,\n    HistogramTwoColor,\n    Oscillator,\n    Cloud,\n    Mountain\n}\n\n```",
    "metadata": {
      "id": "enums",
      "title": "enums",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/enums.md",
      "chunkIndex": "code-context-13",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public enum TextShape\n{\n    TriangleUp,\n    TriangleDown,\n    TriangleHollowUp,\n    TriangleHollowDown,\n    SquareFilled,\n    SquareHollow,\n    SquareLeftTick,\n    SquareRightTick,\n    CircleHollow,\n    CircleFilled,\n    CircleCrosshair,\n    CircleWithX,\n    DiamondFilled,\n    DiamondHollow,\n    HexagonFilled,\n    HexagonHollow,\n    ArrowUp,\n    ArrowDown,\n    ArrowRight,\n    ArrowLeft,\n    ArrowRightLeft,\n    StarFilled,\n    StarHollow,\n    Star8Points\n}\n",
    "metadata": {
      "id": "enums",
      "title": "enums",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/enums.md",
      "chunkIndex": "code-14",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ands,\n    ZigZag,\n    Blocks,\n    GradientBlocks,\n    BarHistory,\n    BarChart,\n    HistogramTwoColor,\n    Oscillator,\n    Cloud,\n    Mountain\n}\n```\nRepresents indicator plotting styles.\n\n**Notes:**\n- `BooleanDots`: Plots in price pane, dots above price bar for values > 0\n- `Bands`: Renders filled bands using source and companion indicators\n- `ZigZag`: Best for sporadic values with NaN gaps\n- `Blocks`: Outlined blocks for value ranges\n- `GradientBlocks`: Blocks with gradient fill\n\n### TextShape\n"
    }
  },
  {
    "pageContent": "ands,\n    ZigZag,\n    Blocks,\n    GradientBlocks,\n    BarHistory,\n    BarChart,\n    HistogramTwoColor,\n    Oscillator,\n    Cloud,\n    Mountain\n}\n```\nRepresents indicator plotting styles.\n\n**Notes:**\n- `BooleanDots`: Plots in price pane, dots above price bar for values > 0\n- `Bands`: Renders filled bands using source and companion indicators\n- `ZigZag`: Best for sporadic values with NaN gaps\n- `Blocks`: Outlined blocks for value ranges\n- `GradientBlocks`: Blocks with gradient fill\n\n### TextShape\n\n\n```csharp\npublic enum TextShape\n{\n    TriangleUp,\n    TriangleDown,\n    TriangleHollowUp,\n    TriangleHollowDown,\n    SquareFilled,\n    SquareHollow,\n    SquareLeftTick,\n    SquareRightTick,\n    CircleHollow,\n    CircleFilled,\n    CircleCrosshair,\n    CircleWithX,\n    DiamondFilled,\n    DiamondHollow,\n    HexagonFilled,\n    HexagonHollow,\n    ArrowUp,\n    ArrowDown,\n    ArrowRight,\n    ArrowLeft,\n    ArrowRightLeft,\n    StarFilled,\n    StarHollow,\n    Star8Points\n}\n\n```",
    "metadata": {
      "id": "enums",
      "title": "enums",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/enums.md",
      "chunkIndex": "code-context-14",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public enum VerticalAlignment\n{\n    Bottom,\n    Center,\n    Top\n}\n",
    "metadata": {
      "id": "enums",
      "title": "enums",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/enums.md",
      "chunkIndex": "code-15",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "\n    TriangleDown,\n    TriangleHollowUp,\n    TriangleHollowDown,\n    SquareFilled,\n    SquareHollow,\n    SquareLeftTick,\n    SquareRightTick,\n    CircleHollow,\n    CircleFilled,\n    CircleCrosshair,\n    CircleWithX,\n    DiamondFilled,\n    DiamondHollow,\n    HexagonFilled,\n    HexagonHollow,\n    ArrowUp,\n    ArrowDown,\n    ArrowRight,\n    ArrowLeft,\n    ArrowRightLeft,\n    StarFilled,\n    StarHollow,\n    Star8Points\n}\n```\nProvides special symbols for `DrawBarAnnotation()`.\n\n### VerticalAlignment\n"
    }
  },
  {
    "pageContent": "\n    TriangleDown,\n    TriangleHollowUp,\n    TriangleHollowDown,\n    SquareFilled,\n    SquareHollow,\n    SquareLeftTick,\n    SquareRightTick,\n    CircleHollow,\n    CircleFilled,\n    CircleCrosshair,\n    CircleWithX,\n    DiamondFilled,\n    DiamondHollow,\n    HexagonFilled,\n    HexagonHollow,\n    ArrowUp,\n    ArrowDown,\n    ArrowRight,\n    ArrowLeft,\n    ArrowRightLeft,\n    StarFilled,\n    StarHollow,\n    Star8Points\n}\n```\nProvides special symbols for `DrawBarAnnotation()`.\n\n### VerticalAlignment\n\n\n```csharp\npublic enum VerticalAlignment\n{\n    Bottom,\n    Center,\n    Top\n}\n\n```",
    "metadata": {
      "id": "enums",
      "title": "enums",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/enums.md",
      "chunkIndex": "code-context-15",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "# EventDataCollection Class\n\n**Namespace:** WealthLab.Data  \n**Parent:** Object\n\nContains a list of `EventDataPoint` instances read from persistent storage and passed to an Event Data Provider's `ConvertEventItems` method.\n\n## Constructor\n\n",
    "metadata": {
      "id": "event-data-collection",
      "title": "event-data-collection",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/event-data-collection.md",
      "chunkIndex": 0,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nCreates a new instance of an `EventDataCollection` for the specified symbol.\n\n## Members\n\n### DataPoints\n",
    "metadata": {
      "id": "event-data-collection",
      "title": "event-data-collection",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/event-data-collection.md",
      "chunkIndex": 1,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nThe List of `EventDataPoint` instances contained in this collection.\n\n### RecentItemDate\n",
    "metadata": {
      "id": "event-data-collection",
      "title": "event-data-collection",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/event-data-collection.md",
      "chunkIndex": 2,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the most recent Date of the `EventDataPoint` instances in this collection.\n\n### Symbol\n",
    "metadata": {
      "id": "event-data-collection",
      "title": "event-data-collection",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/event-data-collection.md",
      "chunkIndex": 3,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nThe symbol associated with these `EventDataPoint` instances.\n\n### UpdateDate\n",
    "metadata": {
      "id": "event-data-collection",
      "title": "event-data-collection",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/event-data-collection.md",
      "chunkIndex": 4,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nContains the date/time when the `EventDataCollection` was most recently saved to persistent storage.\n\n## Usage Example\n\n",
    "metadata": {
      "id": "event-data-collection",
      "title": "event-data-collection",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/event-data-collection.md",
      "chunkIndex": 5,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\nThis example demonstrates:\n- Creating an event collection\n- Adding event data points\n- Accessing collection properties\n- Processing events in the collection ",
    "metadata": {
      "id": "event-data-collection",
      "title": "event-data-collection",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/event-data-collection.md",
      "chunkIndex": 6,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "public EventDataCollection(string symbol)\n",
    "metadata": {
      "id": "event-data-collection",
      "title": "event-data-collection",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/event-data-collection.md",
      "chunkIndex": "code-0",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "# EventDataCollection Class\n\n**Namespace:** WealthLab.Data  \n**Parent:** Object\n\nContains a list of `EventDataPoint` instances read from persistent storage and passed to an Event Data Provider's `ConvertEventItems` method.\n\n## Constructor\n\n"
    }
  },
  {
    "pageContent": "# EventDataCollection Class\n\n**Namespace:** WealthLab.Data  \n**Parent:** Object\n\nContains a list of `EventDataPoint` instances read from persistent storage and passed to an Event Data Provider's `ConvertEventItems` method.\n\n## Constructor\n\n\n\n```csharp\npublic EventDataCollection(string symbol)\n\n```",
    "metadata": {
      "id": "event-data-collection",
      "title": "event-data-collection",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/event-data-collection.md",
      "chunkIndex": "code-context-0",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public List<EventDataPoint> DataPoints\n",
    "metadata": {
      "id": "event-data-collection",
      "title": "event-data-collection",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/event-data-collection.md",
      "chunkIndex": "code-1",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "# EventDataCollection Class\n\n**Namespace:** WealthLab.Data  \n**Parent:** Object\n\nContains a list of `EventDataPoint` instances read from persistent storage and passed to an Event Data Provider's `ConvertEventItems` method.\n\n## Constructor\n\n```csharp\npublic EventDataCollection(string symbol)\n```\nCreates a new instance of an `EventDataCollection` for the specified symbol.\n\n## Members\n\n### DataPoints\n"
    }
  },
  {
    "pageContent": "# EventDataCollection Class\n\n**Namespace:** WealthLab.Data  \n**Parent:** Object\n\nContains a list of `EventDataPoint` instances read from persistent storage and passed to an Event Data Provider's `ConvertEventItems` method.\n\n## Constructor\n\n```csharp\npublic EventDataCollection(string symbol)\n```\nCreates a new instance of an `EventDataCollection` for the specified symbol.\n\n## Members\n\n### DataPoints\n\n\n```csharp\npublic List<EventDataPoint> DataPoints\n\n```",
    "metadata": {
      "id": "event-data-collection",
      "title": "event-data-collection",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/event-data-collection.md",
      "chunkIndex": "code-context-1",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public DateTime RecentItemDate\n",
    "metadata": {
      "id": "event-data-collection",
      "title": "event-data-collection",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/event-data-collection.md",
      "chunkIndex": "code-2",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": " WealthLab.Data  \n**Parent:** Object\n\nContains a list of `EventDataPoint` instances read from persistent storage and passed to an Event Data Provider's `ConvertEventItems` method.\n\n## Constructor\n\n```csharp\npublic EventDataCollection(string symbol)\n```\nCreates a new instance of an `EventDataCollection` for the specified symbol.\n\n## Members\n\n### DataPoints\n```csharp\npublic List<EventDataPoint> DataPoints\n```\nThe List of `EventDataPoint` instances contained in this collection.\n\n### RecentItemDate\n"
    }
  },
  {
    "pageContent": " WealthLab.Data  \n**Parent:** Object\n\nContains a list of `EventDataPoint` instances read from persistent storage and passed to an Event Data Provider's `ConvertEventItems` method.\n\n## Constructor\n\n```csharp\npublic EventDataCollection(string symbol)\n```\nCreates a new instance of an `EventDataCollection` for the specified symbol.\n\n## Members\n\n### DataPoints\n```csharp\npublic List<EventDataPoint> DataPoints\n```\nThe List of `EventDataPoint` instances contained in this collection.\n\n### RecentItemDate\n\n\n```csharp\npublic DateTime RecentItemDate\n\n```",
    "metadata": {
      "id": "event-data-collection",
      "title": "event-data-collection",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/event-data-collection.md",
      "chunkIndex": "code-context-2",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public string Symbol\n",
    "metadata": {
      "id": "event-data-collection",
      "title": "event-data-collection",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/event-data-collection.md",
      "chunkIndex": "code-3",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": " Provider's `ConvertEventItems` method.\n\n## Constructor\n\n```csharp\npublic EventDataCollection(string symbol)\n```\nCreates a new instance of an `EventDataCollection` for the specified symbol.\n\n## Members\n\n### DataPoints\n```csharp\npublic List<EventDataPoint> DataPoints\n```\nThe List of `EventDataPoint` instances contained in this collection.\n\n### RecentItemDate\n```csharp\npublic DateTime RecentItemDate\n```\nReturns the most recent Date of the `EventDataPoint` instances in this collection.\n\n### Symbol\n"
    }
  },
  {
    "pageContent": " Provider's `ConvertEventItems` method.\n\n## Constructor\n\n```csharp\npublic EventDataCollection(string symbol)\n```\nCreates a new instance of an `EventDataCollection` for the specified symbol.\n\n## Members\n\n### DataPoints\n```csharp\npublic List<EventDataPoint> DataPoints\n```\nThe List of `EventDataPoint` instances contained in this collection.\n\n### RecentItemDate\n```csharp\npublic DateTime RecentItemDate\n```\nReturns the most recent Date of the `EventDataPoint` instances in this collection.\n\n### Symbol\n\n\n```csharp\npublic string Symbol\n\n```",
    "metadata": {
      "id": "event-data-collection",
      "title": "event-data-collection",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/event-data-collection.md",
      "chunkIndex": "code-context-3",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public DateTime UpdateDate\n",
    "metadata": {
      "id": "event-data-collection",
      "title": "event-data-collection",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/event-data-collection.md",
      "chunkIndex": "code-4",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "\nCreates a new instance of an `EventDataCollection` for the specified symbol.\n\n## Members\n\n### DataPoints\n```csharp\npublic List<EventDataPoint> DataPoints\n```\nThe List of `EventDataPoint` instances contained in this collection.\n\n### RecentItemDate\n```csharp\npublic DateTime RecentItemDate\n```\nReturns the most recent Date of the `EventDataPoint` instances in this collection.\n\n### Symbol\n```csharp\npublic string Symbol\n```\nThe symbol associated with these `EventDataPoint` instances.\n\n### UpdateDate\n"
    }
  },
  {
    "pageContent": "\nCreates a new instance of an `EventDataCollection` for the specified symbol.\n\n## Members\n\n### DataPoints\n```csharp\npublic List<EventDataPoint> DataPoints\n```\nThe List of `EventDataPoint` instances contained in this collection.\n\n### RecentItemDate\n```csharp\npublic DateTime RecentItemDate\n```\nReturns the most recent Date of the `EventDataPoint` instances in this collection.\n\n### Symbol\n```csharp\npublic string Symbol\n```\nThe symbol associated with these `EventDataPoint` instances.\n\n### UpdateDate\n\n\n```csharp\npublic DateTime UpdateDate\n\n```",
    "metadata": {
      "id": "event-data-collection",
      "title": "event-data-collection",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/event-data-collection.md",
      "chunkIndex": "code-context-4",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "// Create a new collection for AAPL events\nvar events = new EventDataCollection(\"AAPL\");\n\n// Add event data points\nevents.DataPoints.Add(new EventDataPoint\n{\n    Date = DateTime.Now,\n    Name = \"dividend\",\n    Value = 0.88\n});\n\n// Check most recent event date\nDateTime lastEvent = events.RecentItemDate;\n\n// Access symbol and last update time\nstring symbol = events.Symbol;\nDateTime lastUpdate = events.UpdateDate;\n\n// Process all events\nforeach (var eventPoint in events.DataPoints)\n{\n    // Handle each event\n    if (eventPoint.Name == \"dividend\")\n    {\n        // Process dividend event\n        double dividendAmount = eventPoint.Value;\n        // ...\n    }\n}\n",
    "metadata": {
      "id": "event-data-collection",
      "title": "event-data-collection",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/event-data-collection.md",
      "chunkIndex": "code-5",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "e List of `EventDataPoint` instances contained in this collection.\n\n### RecentItemDate\n```csharp\npublic DateTime RecentItemDate\n```\nReturns the most recent Date of the `EventDataPoint` instances in this collection.\n\n### Symbol\n```csharp\npublic string Symbol\n```\nThe symbol associated with these `EventDataPoint` instances.\n\n### UpdateDate\n```csharp\npublic DateTime UpdateDate\n```\nContains the date/time when the `EventDataCollection` was most recently saved to persistent storage.\n\n## Usage Example\n\n"
    }
  },
  {
    "pageContent": "e List of `EventDataPoint` instances contained in this collection.\n\n### RecentItemDate\n```csharp\npublic DateTime RecentItemDate\n```\nReturns the most recent Date of the `EventDataPoint` instances in this collection.\n\n### Symbol\n```csharp\npublic string Symbol\n```\nThe symbol associated with these `EventDataPoint` instances.\n\n### UpdateDate\n```csharp\npublic DateTime UpdateDate\n```\nContains the date/time when the `EventDataCollection` was most recently saved to persistent storage.\n\n## Usage Example\n\n\n\n```csharp\n// Create a new collection for AAPL events\nvar events = new EventDataCollection(\"AAPL\");\n\n// Add event data points\nevents.DataPoints.Add(new EventDataPoint\n{\n    Date = DateTime.Now,\n    Name = \"dividend\",\n    Value = 0.88\n});\n\n// Check most recent event date\nDateTime lastEvent = events.RecentItemDate;\n\n// Access symbol and last update time\nstring symbol = events.Symbol;\nDateTime lastUpdate = events.UpdateDate;\n\n// Process all events\nforeach (var eventPoint in events.DataPoints)\n{\n    // Handle each event\n    if (eventPoint.Name == \"dividend\")\n    {\n        // Process dividend event\n        double dividendAmount = eventPoint.Value;\n        // ...\n    }\n}\n\n```",
    "metadata": {
      "id": "event-data-collection",
      "title": "event-data-collection",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/event-data-collection.md",
      "chunkIndex": "code-context-5",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "# EventDataPoint Class\n\n**Namespace:** WealthLab.Data  \n**Parent:** Object\n\nRepresents a single piece of event data, such as fundamental data (dividends, splits, earnings), analyst ratings, or chart patterns. WealthLab supports multiple Event Data Providers, both built-in and via extensions, each supplying its own set of historical event data.\n\nAccess event data through the `EventDataPoints` property or `GetEventDataPoints` method of the `BarHistory` class.\n\n## Constructors\n\n",
    "metadata": {
      "id": "event-data-point",
      "title": "event-data-point",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/event-data-point.md",
      "chunkIndex": 0,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nProvides:\n- A parameterless constructor\n- A constructor that assigns values to `Name`, `Date`, and optionally `Value` properties\n\n## Core Properties\n\n### Data\n",
    "metadata": {
      "id": "event-data-point",
      "title": "event-data-point",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/event-data-point.md",
      "chunkIndex": 1,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nContains provider-specific string data. Consult provider's extension documentation for details on usage.\n\n### Date\n",
    "metadata": {
      "id": "event-data-point",
      "title": "event-data-point",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/event-data-point.md",
      "chunkIndex": 2,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nThe date when the event data item was reported.\n\n### Name\n",
    "metadata": {
      "id": "event-data-point",
      "title": "event-data-point",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/event-data-point.md",
      "chunkIndex": 3,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nDescribes the event type (e.g., \"Split\", \"Dividend\", \"Analyst Rating\").\n\n### Value\n",
    "metadata": {
      "id": "event-data-point",
      "title": "event-data-point",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/event-data-point.md",
      "chunkIndex": 4,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nThe numeric value associated with the event (e.g., 2 for a 2:1 split, 1.5 for a $1.50 dividend).\n\n### ProviderName\n",
    "metadata": {
      "id": "event-data-point",
      "title": "event-data-point",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/event-data-point.md",
      "chunkIndex": 5,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nThe name of the Event Data Provider that generated this event.\n\n## Detail Properties\n\n### Details\n",
    "metadata": {
      "id": "event-data-point",
      "title": "event-data-point",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/event-data-point.md",
      "chunkIndex": 6,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nDictionary containing item-specific information.\n\n### HasDetailItems\n",
    "metadata": {
      "id": "event-data-point",
      "title": "event-data-point",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/event-data-point.md",
      "chunkIndex": 7,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns true if the instance's Details Dictionary contains items.\n\n### ItemName\n",
    "metadata": {
      "id": "event-data-point",
      "title": "event-data-point",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/event-data-point.md",
      "chunkIndex": 8,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the event name with certain provider-specific prefixes removed.\n\n## Display Properties\n\n### Text\n",
    "metadata": {
      "id": "event-data-point",
      "title": "event-data-point",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/event-data-point.md",
      "chunkIndex": 9,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nDescriptive text for the event, typically combining `ItemName` and `Value`.\n\n### TooltipText\n",
    "metadata": {
      "id": "event-data-point",
      "title": "event-data-point",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/event-data-point.md",
      "chunkIndex": 10,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nText displayed in chart tooltips when hovering over the event's glyph icon. Combines `Text` with `ProviderName`.\n\n## Utility Methods\n\n### InCurrentRange\n",
    "metadata": {
      "id": "event-data-point",
      "title": "event-data-point",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/event-data-point.md",
      "chunkIndex": 11,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns true if the event's `Date` falls within the historical data currently in the specified `BarHistory`.\n\n## Members for Derived Classes\n\n### GetBarGlyph\n",
    "metadata": {
      "id": "event-data-point",
      "title": "event-data-point",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/event-data-point.md",
      "chunkIndex": 12,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nOverride to return a custom `BarGlyphBase`-derived instance for chart rendering.\n\n### Glyph\n",
    "metadata": {
      "id": "event-data-point",
      "title": "event-data-point",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/event-data-point.md",
      "chunkIndex": 13,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nOverride to return a custom `System.Drawing.Bitmap` for the event's chart icon. Default null causes procedural generation using `GlyphText` and `GlyphColor`.\n\n### GlyphColor\n",
    "metadata": {
      "id": "event-data-point",
      "title": "event-data-point",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/event-data-point.md",
      "chunkIndex": 14,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nBackground color for chart glyph icon. Default null causes color to be determined by `ItemName`.\n\n### GlyphText\n",
    "metadata": {
      "id": "event-data-point",
      "title": "event-data-point",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/event-data-point.md",
      "chunkIndex": 15,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nText rendered on the chart for this event. Default uses first character of `ItemName`.\n\n## Usage Examples\n\n",
    "metadata": {
      "id": "event-data-point",
      "title": "event-data-point",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/event-data-point.md",
      "chunkIndex": 16,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "public EventDataPoint()\npublic EventDataPoint(string name, DateTime dt, double value = 0)\n",
    "metadata": {
      "id": "event-data-point",
      "title": "event-data-point",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/event-data-point.md",
      "chunkIndex": "code-0",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "# EventDataPoint Class\n\n**Namespace:** WealthLab.Data  \n**Parent:** Object\n\nRepresents a single piece of event data, such as fundamental data (dividends, splits, earnings), analyst ratings, or chart patterns. WealthLab supports multiple Event Data Providers, both built-in and via extensions, each supplying its own set of historical event data.\n\nAccess event data through the `EventDataPoints` property or `GetEventDataPoints` method of the `BarHistory` class.\n\n## Constructors\n\n"
    }
  },
  {
    "pageContent": "# EventDataPoint Class\n\n**Namespace:** WealthLab.Data  \n**Parent:** Object\n\nRepresents a single piece of event data, such as fundamental data (dividends, splits, earnings), analyst ratings, or chart patterns. WealthLab supports multiple Event Data Providers, both built-in and via extensions, each supplying its own set of historical event data.\n\nAccess event data through the `EventDataPoints` property or `GetEventDataPoints` method of the `BarHistory` class.\n\n## Constructors\n\n\n\n```csharp\npublic EventDataPoint()\npublic EventDataPoint(string name, DateTime dt, double value = 0)\n\n```",
    "metadata": {
      "id": "event-data-point",
      "title": "event-data-point",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/event-data-point.md",
      "chunkIndex": "code-context-0",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public string Data\n",
    "metadata": {
      "id": "event-data-point",
      "title": "event-data-point",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/event-data-point.md",
      "chunkIndex": "code-1",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "Data Providers, both built-in and via extensions, each supplying its own set of historical event data.\n\nAccess event data through the `EventDataPoints` property or `GetEventDataPoints` method of the `BarHistory` class.\n\n## Constructors\n\n```csharp\npublic EventDataPoint()\npublic EventDataPoint(string name, DateTime dt, double value = 0)\n```\nProvides:\n- A parameterless constructor\n- A constructor that assigns values to `Name`, `Date`, and optionally `Value` properties\n\n## Core Properties\n\n### Data\n"
    }
  },
  {
    "pageContent": "Data Providers, both built-in and via extensions, each supplying its own set of historical event data.\n\nAccess event data through the `EventDataPoints` property or `GetEventDataPoints` method of the `BarHistory` class.\n\n## Constructors\n\n```csharp\npublic EventDataPoint()\npublic EventDataPoint(string name, DateTime dt, double value = 0)\n```\nProvides:\n- A parameterless constructor\n- A constructor that assigns values to `Name`, `Date`, and optionally `Value` properties\n\n## Core Properties\n\n### Data\n\n\n```csharp\npublic string Data\n\n```",
    "metadata": {
      "id": "event-data-point",
      "title": "event-data-point",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/event-data-point.md",
      "chunkIndex": "code-context-1",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public DateTime Date\n",
    "metadata": {
      "id": "event-data-point",
      "title": "event-data-point",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/event-data-point.md",
      "chunkIndex": "code-2",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ts` property or `GetEventDataPoints` method of the `BarHistory` class.\n\n## Constructors\n\n```csharp\npublic EventDataPoint()\npublic EventDataPoint(string name, DateTime dt, double value = 0)\n```\nProvides:\n- A parameterless constructor\n- A constructor that assigns values to `Name`, `Date`, and optionally `Value` properties\n\n## Core Properties\n\n### Data\n```csharp\npublic string Data\n```\nContains provider-specific string data. Consult provider's extension documentation for details on usage.\n\n### Date\n"
    }
  },
  {
    "pageContent": "ts` property or `GetEventDataPoints` method of the `BarHistory` class.\n\n## Constructors\n\n```csharp\npublic EventDataPoint()\npublic EventDataPoint(string name, DateTime dt, double value = 0)\n```\nProvides:\n- A parameterless constructor\n- A constructor that assigns values to `Name`, `Date`, and optionally `Value` properties\n\n## Core Properties\n\n### Data\n```csharp\npublic string Data\n```\nContains provider-specific string data. Consult provider's extension documentation for details on usage.\n\n### Date\n\n\n```csharp\npublic DateTime Date\n\n```",
    "metadata": {
      "id": "event-data-point",
      "title": "event-data-point",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/event-data-point.md",
      "chunkIndex": "code-context-2",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public string Name\n",
    "metadata": {
      "id": "event-data-point",
      "title": "event-data-point",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/event-data-point.md",
      "chunkIndex": "code-3",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "sharp\npublic EventDataPoint()\npublic EventDataPoint(string name, DateTime dt, double value = 0)\n```\nProvides:\n- A parameterless constructor\n- A constructor that assigns values to `Name`, `Date`, and optionally `Value` properties\n\n## Core Properties\n\n### Data\n```csharp\npublic string Data\n```\nContains provider-specific string data. Consult provider's extension documentation for details on usage.\n\n### Date\n```csharp\npublic DateTime Date\n```\nThe date when the event data item was reported.\n\n### Name\n"
    }
  },
  {
    "pageContent": "sharp\npublic EventDataPoint()\npublic EventDataPoint(string name, DateTime dt, double value = 0)\n```\nProvides:\n- A parameterless constructor\n- A constructor that assigns values to `Name`, `Date`, and optionally `Value` properties\n\n## Core Properties\n\n### Data\n```csharp\npublic string Data\n```\nContains provider-specific string data. Consult provider's extension documentation for details on usage.\n\n### Date\n```csharp\npublic DateTime Date\n```\nThe date when the event data item was reported.\n\n### Name\n\n\n```csharp\npublic string Name\n\n```",
    "metadata": {
      "id": "event-data-point",
      "title": "event-data-point",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/event-data-point.md",
      "chunkIndex": "code-context-3",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public double Value\n",
    "metadata": {
      "id": "event-data-point",
      "title": "event-data-point",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/event-data-point.md",
      "chunkIndex": "code-4",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "rameterless constructor\n- A constructor that assigns values to `Name`, `Date`, and optionally `Value` properties\n\n## Core Properties\n\n### Data\n```csharp\npublic string Data\n```\nContains provider-specific string data. Consult provider's extension documentation for details on usage.\n\n### Date\n```csharp\npublic DateTime Date\n```\nThe date when the event data item was reported.\n\n### Name\n```csharp\npublic string Name\n```\nDescribes the event type (e.g., \"Split\", \"Dividend\", \"Analyst Rating\").\n\n### Value\n"
    }
  },
  {
    "pageContent": "rameterless constructor\n- A constructor that assigns values to `Name`, `Date`, and optionally `Value` properties\n\n## Core Properties\n\n### Data\n```csharp\npublic string Data\n```\nContains provider-specific string data. Consult provider's extension documentation for details on usage.\n\n### Date\n```csharp\npublic DateTime Date\n```\nThe date when the event data item was reported.\n\n### Name\n```csharp\npublic string Name\n```\nDescribes the event type (e.g., \"Split\", \"Dividend\", \"Analyst Rating\").\n\n### Value\n\n\n```csharp\npublic double Value\n\n```",
    "metadata": {
      "id": "event-data-point",
      "title": "event-data-point",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/event-data-point.md",
      "chunkIndex": "code-context-4",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public string ProviderName\n",
    "metadata": {
      "id": "event-data-point",
      "title": "event-data-point",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/event-data-point.md",
      "chunkIndex": "code-5",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "arp\npublic string Data\n```\nContains provider-specific string data. Consult provider's extension documentation for details on usage.\n\n### Date\n```csharp\npublic DateTime Date\n```\nThe date when the event data item was reported.\n\n### Name\n```csharp\npublic string Name\n```\nDescribes the event type (e.g., \"Split\", \"Dividend\", \"Analyst Rating\").\n\n### Value\n```csharp\npublic double Value\n```\nThe numeric value associated with the event (e.g., 2 for a 2:1 split, 1.5 for a $1.50 dividend).\n\n### ProviderName\n"
    }
  },
  {
    "pageContent": "arp\npublic string Data\n```\nContains provider-specific string data. Consult provider's extension documentation for details on usage.\n\n### Date\n```csharp\npublic DateTime Date\n```\nThe date when the event data item was reported.\n\n### Name\n```csharp\npublic string Name\n```\nDescribes the event type (e.g., \"Split\", \"Dividend\", \"Analyst Rating\").\n\n### Value\n```csharp\npublic double Value\n```\nThe numeric value associated with the event (e.g., 2 for a 2:1 split, 1.5 for a $1.50 dividend).\n\n### ProviderName\n\n\n```csharp\npublic string ProviderName\n\n```",
    "metadata": {
      "id": "event-data-point",
      "title": "event-data-point",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/event-data-point.md",
      "chunkIndex": "code-context-5",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public Dictionary<string, string> Details\n",
    "metadata": {
      "id": "event-data-point",
      "title": "event-data-point",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/event-data-point.md",
      "chunkIndex": "code-6",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "te\n```csharp\npublic DateTime Date\n```\nThe date when the event data item was reported.\n\n### Name\n```csharp\npublic string Name\n```\nDescribes the event type (e.g., \"Split\", \"Dividend\", \"Analyst Rating\").\n\n### Value\n```csharp\npublic double Value\n```\nThe numeric value associated with the event (e.g., 2 for a 2:1 split, 1.5 for a $1.50 dividend).\n\n### ProviderName\n```csharp\npublic string ProviderName\n```\nThe name of the Event Data Provider that generated this event.\n\n## Detail Properties\n\n### Details\n"
    }
  },
  {
    "pageContent": "te\n```csharp\npublic DateTime Date\n```\nThe date when the event data item was reported.\n\n### Name\n```csharp\npublic string Name\n```\nDescribes the event type (e.g., \"Split\", \"Dividend\", \"Analyst Rating\").\n\n### Value\n```csharp\npublic double Value\n```\nThe numeric value associated with the event (e.g., 2 for a 2:1 split, 1.5 for a $1.50 dividend).\n\n### ProviderName\n```csharp\npublic string ProviderName\n```\nThe name of the Event Data Provider that generated this event.\n\n## Detail Properties\n\n### Details\n\n\n```csharp\npublic Dictionary<string, string> Details\n\n```",
    "metadata": {
      "id": "event-data-point",
      "title": "event-data-point",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/event-data-point.md",
      "chunkIndex": "code-context-6",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public bool HasDetailItems\n",
    "metadata": {
      "id": "event-data-point",
      "title": "event-data-point",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/event-data-point.md",
      "chunkIndex": "code-7",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "```\nDescribes the event type (e.g., \"Split\", \"Dividend\", \"Analyst Rating\").\n\n### Value\n```csharp\npublic double Value\n```\nThe numeric value associated with the event (e.g., 2 for a 2:1 split, 1.5 for a $1.50 dividend).\n\n### ProviderName\n```csharp\npublic string ProviderName\n```\nThe name of the Event Data Provider that generated this event.\n\n## Detail Properties\n\n### Details\n```csharp\npublic Dictionary<string, string> Details\n```\nDictionary containing item-specific information.\n\n### HasDetailItems\n"
    }
  },
  {
    "pageContent": "```\nDescribes the event type (e.g., \"Split\", \"Dividend\", \"Analyst Rating\").\n\n### Value\n```csharp\npublic double Value\n```\nThe numeric value associated with the event (e.g., 2 for a 2:1 split, 1.5 for a $1.50 dividend).\n\n### ProviderName\n```csharp\npublic string ProviderName\n```\nThe name of the Event Data Provider that generated this event.\n\n## Detail Properties\n\n### Details\n```csharp\npublic Dictionary<string, string> Details\n```\nDictionary containing item-specific information.\n\n### HasDetailItems\n\n\n```csharp\npublic bool HasDetailItems\n\n```",
    "metadata": {
      "id": "event-data-point",
      "title": "event-data-point",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/event-data-point.md",
      "chunkIndex": "code-context-7",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public string ItemName\n",
    "metadata": {
      "id": "event-data-point",
      "title": "event-data-point",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/event-data-point.md",
      "chunkIndex": "code-8",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "The numeric value associated with the event (e.g., 2 for a 2:1 split, 1.5 for a $1.50 dividend).\n\n### ProviderName\n```csharp\npublic string ProviderName\n```\nThe name of the Event Data Provider that generated this event.\n\n## Detail Properties\n\n### Details\n```csharp\npublic Dictionary<string, string> Details\n```\nDictionary containing item-specific information.\n\n### HasDetailItems\n```csharp\npublic bool HasDetailItems\n```\nReturns true if the instance's Details Dictionary contains items.\n\n### ItemName\n"
    }
  },
  {
    "pageContent": "The numeric value associated with the event (e.g., 2 for a 2:1 split, 1.5 for a $1.50 dividend).\n\n### ProviderName\n```csharp\npublic string ProviderName\n```\nThe name of the Event Data Provider that generated this event.\n\n## Detail Properties\n\n### Details\n```csharp\npublic Dictionary<string, string> Details\n```\nDictionary containing item-specific information.\n\n### HasDetailItems\n```csharp\npublic bool HasDetailItems\n```\nReturns true if the instance's Details Dictionary contains items.\n\n### ItemName\n\n\n```csharp\npublic string ItemName\n\n```",
    "metadata": {
      "id": "event-data-point",
      "title": "event-data-point",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/event-data-point.md",
      "chunkIndex": "code-context-8",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public virtual string Text\n",
    "metadata": {
      "id": "event-data-point",
      "title": "event-data-point",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/event-data-point.md",
      "chunkIndex": "code-9",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "viderName\n```\nThe name of the Event Data Provider that generated this event.\n\n## Detail Properties\n\n### Details\n```csharp\npublic Dictionary<string, string> Details\n```\nDictionary containing item-specific information.\n\n### HasDetailItems\n```csharp\npublic bool HasDetailItems\n```\nReturns true if the instance's Details Dictionary contains items.\n\n### ItemName\n```csharp\npublic string ItemName\n```\nReturns the event name with certain provider-specific prefixes removed.\n\n## Display Properties\n\n### Text\n"
    }
  },
  {
    "pageContent": "viderName\n```\nThe name of the Event Data Provider that generated this event.\n\n## Detail Properties\n\n### Details\n```csharp\npublic Dictionary<string, string> Details\n```\nDictionary containing item-specific information.\n\n### HasDetailItems\n```csharp\npublic bool HasDetailItems\n```\nReturns true if the instance's Details Dictionary contains items.\n\n### ItemName\n```csharp\npublic string ItemName\n```\nReturns the event name with certain provider-specific prefixes removed.\n\n## Display Properties\n\n### Text\n\n\n```csharp\npublic virtual string Text\n\n```",
    "metadata": {
      "id": "event-data-point",
      "title": "event-data-point",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/event-data-point.md",
      "chunkIndex": "code-context-9",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public string TooltipText\n",
    "metadata": {
      "id": "event-data-point",
      "title": "event-data-point",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/event-data-point.md",
      "chunkIndex": "code-10",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "onary<string, string> Details\n```\nDictionary containing item-specific information.\n\n### HasDetailItems\n```csharp\npublic bool HasDetailItems\n```\nReturns true if the instance's Details Dictionary contains items.\n\n### ItemName\n```csharp\npublic string ItemName\n```\nReturns the event name with certain provider-specific prefixes removed.\n\n## Display Properties\n\n### Text\n```csharp\npublic virtual string Text\n```\nDescriptive text for the event, typically combining `ItemName` and `Value`.\n\n### TooltipText\n"
    }
  },
  {
    "pageContent": "onary<string, string> Details\n```\nDictionary containing item-specific information.\n\n### HasDetailItems\n```csharp\npublic bool HasDetailItems\n```\nReturns true if the instance's Details Dictionary contains items.\n\n### ItemName\n```csharp\npublic string ItemName\n```\nReturns the event name with certain provider-specific prefixes removed.\n\n## Display Properties\n\n### Text\n```csharp\npublic virtual string Text\n```\nDescriptive text for the event, typically combining `ItemName` and `Value`.\n\n### TooltipText\n\n\n```csharp\npublic string TooltipText\n\n```",
    "metadata": {
      "id": "event-data-point",
      "title": "event-data-point",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/event-data-point.md",
      "chunkIndex": "code-context-10",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public bool InCurrentRange(BarHistory bh)\n",
    "metadata": {
      "id": "event-data-point",
      "title": "event-data-point",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/event-data-point.md",
      "chunkIndex": "code-11",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": " contains items.\n\n### ItemName\n```csharp\npublic string ItemName\n```\nReturns the event name with certain provider-specific prefixes removed.\n\n## Display Properties\n\n### Text\n```csharp\npublic virtual string Text\n```\nDescriptive text for the event, typically combining `ItemName` and `Value`.\n\n### TooltipText\n```csharp\npublic string TooltipText\n```\nText displayed in chart tooltips when hovering over the event's glyph icon. Combines `Text` with `ProviderName`.\n\n## Utility Methods\n\n### InCurrentRange\n"
    }
  },
  {
    "pageContent": " contains items.\n\n### ItemName\n```csharp\npublic string ItemName\n```\nReturns the event name with certain provider-specific prefixes removed.\n\n## Display Properties\n\n### Text\n```csharp\npublic virtual string Text\n```\nDescriptive text for the event, typically combining `ItemName` and `Value`.\n\n### TooltipText\n```csharp\npublic string TooltipText\n```\nText displayed in chart tooltips when hovering over the event's glyph icon. Combines `Text` with `ProviderName`.\n\n## Utility Methods\n\n### InCurrentRange\n\n\n```csharp\npublic bool InCurrentRange(BarHistory bh)\n\n```",
    "metadata": {
      "id": "event-data-point",
      "title": "event-data-point",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/event-data-point.md",
      "chunkIndex": "code-context-11",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public virtual object GetBarGlyph()\n",
    "metadata": {
      "id": "event-data-point",
      "title": "event-data-point",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/event-data-point.md",
      "chunkIndex": "code-12",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "Descriptive text for the event, typically combining `ItemName` and `Value`.\n\n### TooltipText\n```csharp\npublic string TooltipText\n```\nText displayed in chart tooltips when hovering over the event's glyph icon. Combines `Text` with `ProviderName`.\n\n## Utility Methods\n\n### InCurrentRange\n```csharp\npublic bool InCurrentRange(BarHistory bh)\n```\nReturns true if the event's `Date` falls within the historical data currently in the specified `BarHistory`.\n\n## Members for Derived Classes\n\n### GetBarGlyph\n"
    }
  },
  {
    "pageContent": "Descriptive text for the event, typically combining `ItemName` and `Value`.\n\n### TooltipText\n```csharp\npublic string TooltipText\n```\nText displayed in chart tooltips when hovering over the event's glyph icon. Combines `Text` with `ProviderName`.\n\n## Utility Methods\n\n### InCurrentRange\n```csharp\npublic bool InCurrentRange(BarHistory bh)\n```\nReturns true if the event's `Date` falls within the historical data currently in the specified `BarHistory`.\n\n## Members for Derived Classes\n\n### GetBarGlyph\n\n\n```csharp\npublic virtual object GetBarGlyph()\n\n```",
    "metadata": {
      "id": "event-data-point",
      "title": "event-data-point",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/event-data-point.md",
      "chunkIndex": "code-context-12",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public virtual Bitmap Glyph\n",
    "metadata": {
      "id": "event-data-point",
      "title": "event-data-point",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/event-data-point.md",
      "chunkIndex": "code-13",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "layed in chart tooltips when hovering over the event's glyph icon. Combines `Text` with `ProviderName`.\n\n## Utility Methods\n\n### InCurrentRange\n```csharp\npublic bool InCurrentRange(BarHistory bh)\n```\nReturns true if the event's `Date` falls within the historical data currently in the specified `BarHistory`.\n\n## Members for Derived Classes\n\n### GetBarGlyph\n```csharp\npublic virtual object GetBarGlyph()\n```\nOverride to return a custom `BarGlyphBase`-derived instance for chart rendering.\n\n### Glyph\n"
    }
  },
  {
    "pageContent": "layed in chart tooltips when hovering over the event's glyph icon. Combines `Text` with `ProviderName`.\n\n## Utility Methods\n\n### InCurrentRange\n```csharp\npublic bool InCurrentRange(BarHistory bh)\n```\nReturns true if the event's `Date` falls within the historical data currently in the specified `BarHistory`.\n\n## Members for Derived Classes\n\n### GetBarGlyph\n```csharp\npublic virtual object GetBarGlyph()\n```\nOverride to return a custom `BarGlyphBase`-derived instance for chart rendering.\n\n### Glyph\n\n\n```csharp\npublic virtual Bitmap Glyph\n\n```",
    "metadata": {
      "id": "event-data-point",
      "title": "event-data-point",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/event-data-point.md",
      "chunkIndex": "code-context-13",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public virtual Color? GlyphColor\n",
    "metadata": {
      "id": "event-data-point",
      "title": "event-data-point",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/event-data-point.md",
      "chunkIndex": "code-14",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "the event's `Date` falls within the historical data currently in the specified `BarHistory`.\n\n## Members for Derived Classes\n\n### GetBarGlyph\n```csharp\npublic virtual object GetBarGlyph()\n```\nOverride to return a custom `BarGlyphBase`-derived instance for chart rendering.\n\n### Glyph\n```csharp\npublic virtual Bitmap Glyph\n```\nOverride to return a custom `System.Drawing.Bitmap` for the event's chart icon. Default null causes procedural generation using `GlyphText` and `GlyphColor`.\n\n### GlyphColor\n"
    }
  },
  {
    "pageContent": "the event's `Date` falls within the historical data currently in the specified `BarHistory`.\n\n## Members for Derived Classes\n\n### GetBarGlyph\n```csharp\npublic virtual object GetBarGlyph()\n```\nOverride to return a custom `BarGlyphBase`-derived instance for chart rendering.\n\n### Glyph\n```csharp\npublic virtual Bitmap Glyph\n```\nOverride to return a custom `System.Drawing.Bitmap` for the event's chart icon. Default null causes procedural generation using `GlyphText` and `GlyphColor`.\n\n### GlyphColor\n\n\n```csharp\npublic virtual Color? GlyphColor\n\n```",
    "metadata": {
      "id": "event-data-point",
      "title": "event-data-point",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/event-data-point.md",
      "chunkIndex": "code-context-14",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public virtual string GlyphText\n",
    "metadata": {
      "id": "event-data-point",
      "title": "event-data-point",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/event-data-point.md",
      "chunkIndex": "code-15",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "virtual object GetBarGlyph()\n```\nOverride to return a custom `BarGlyphBase`-derived instance for chart rendering.\n\n### Glyph\n```csharp\npublic virtual Bitmap Glyph\n```\nOverride to return a custom `System.Drawing.Bitmap` for the event's chart icon. Default null causes procedural generation using `GlyphText` and `GlyphColor`.\n\n### GlyphColor\n```csharp\npublic virtual Color? GlyphColor\n```\nBackground color for chart glyph icon. Default null causes color to be determined by `ItemName`.\n\n### GlyphText\n"
    }
  },
  {
    "pageContent": "virtual object GetBarGlyph()\n```\nOverride to return a custom `BarGlyphBase`-derived instance for chart rendering.\n\n### Glyph\n```csharp\npublic virtual Bitmap Glyph\n```\nOverride to return a custom `System.Drawing.Bitmap` for the event's chart icon. Default null causes procedural generation using `GlyphText` and `GlyphColor`.\n\n### GlyphColor\n```csharp\npublic virtual Color? GlyphColor\n```\nBackground color for chart glyph icon. Default null causes color to be determined by `ItemName`.\n\n### GlyphText\n\n\n```csharp\npublic virtual string GlyphText\n\n```",
    "metadata": {
      "id": "event-data-point",
      "title": "event-data-point",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/event-data-point.md",
      "chunkIndex": "code-context-15",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "// Create a dividend event\nvar dividendEvent = new EventDataPoint(\"dividend\", DateTime.Now, 1.50)\n{\n    ProviderName = \"MyDataProvider\",\n    Data = \"Q3 2023 Dividend\"\n};\n\n// Add custom details\ndividendEvent.Details[\"Type\"] = \"Regular Cash\";\ndividendEvent.Details[\"Currency\"] = \"USD\";\n\n// Create a stock split event\nvar splitEvent = new EventDataPoint\n{\n    Name = \"split\",\n    Date = DateTime.Now,\n    Value = 2.0,  // 2:1 split\n    Data = \"Stock Split 2:1\"\n};\n\n// Check if event is in current chart range\nvar bars = GetBarHistory(); // Your BarHistory instance\nif (splitEvent.InCurrentRange(bars))\n{\n    Console.WriteLine($\"Split Event: {splitEvent.Text}\");\n    Console.WriteLine($\"Tooltip: {splitEvent.TooltipText}\");\n}\n\n// Custom event data point with custom glyph\npublic class CustomEvent : EventDataPoint\n{\n    public override Bitmap Glyph => LoadCustomBitmap();\n    \n    public override Color? GlyphColor => Color.Purple;\n    \n    public override string GlyphText => \"C\";\n    \n    private Bitmap LoadCustomBitmap()\n    {\n        // Return custom bitmap for chart icon\n        return new Bitmap(\"path/to/icon.png\");\n    }\n}\n",
    "metadata": {
      "id": "event-data-point",
      "title": "event-data-point",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/event-data-point.md",
      "chunkIndex": "code-16",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "map Glyph\n```\nOverride to return a custom `System.Drawing.Bitmap` for the event's chart icon. Default null causes procedural generation using `GlyphText` and `GlyphColor`.\n\n### GlyphColor\n```csharp\npublic virtual Color? GlyphColor\n```\nBackground color for chart glyph icon. Default null causes color to be determined by `ItemName`.\n\n### GlyphText\n```csharp\npublic virtual string GlyphText\n```\nText rendered on the chart for this event. Default uses first character of `ItemName`.\n\n## Usage Examples\n\n"
    }
  },
  {
    "pageContent": "map Glyph\n```\nOverride to return a custom `System.Drawing.Bitmap` for the event's chart icon. Default null causes procedural generation using `GlyphText` and `GlyphColor`.\n\n### GlyphColor\n```csharp\npublic virtual Color? GlyphColor\n```\nBackground color for chart glyph icon. Default null causes color to be determined by `ItemName`.\n\n### GlyphText\n```csharp\npublic virtual string GlyphText\n```\nText rendered on the chart for this event. Default uses first character of `ItemName`.\n\n## Usage Examples\n\n\n\n```csharp\n// Create a dividend event\nvar dividendEvent = new EventDataPoint(\"dividend\", DateTime.Now, 1.50)\n{\n    ProviderName = \"MyDataProvider\",\n    Data = \"Q3 2023 Dividend\"\n};\n\n// Add custom details\ndividendEvent.Details[\"Type\"] = \"Regular Cash\";\ndividendEvent.Details[\"Currency\"] = \"USD\";\n\n// Create a stock split event\nvar splitEvent = new EventDataPoint\n{\n    Name = \"split\",\n    Date = DateTime.Now,\n    Value = 2.0,  // 2:1 split\n    Data = \"Stock Split 2:1\"\n};\n\n// Check if event is in current chart range\nvar bars = GetBarHistory(); // Your BarHistory instance\nif (splitEvent.InCurrentRange(bars))\n{\n    Console.WriteLine($\"Split Event: {splitEvent.Text}\");\n    Console.WriteLine($\"Tooltip: {splitEvent.TooltipText}\");\n}\n\n// Custom event data point with custom glyph\npublic class CustomEvent : EventDataPoint\n{\n    public override Bitmap Glyph => LoadCustomBitmap();\n    \n    public override Color? GlyphColor => Color.Purple;\n    \n    public override string GlyphText => \"C\";\n    \n    private Bitmap LoadCustomBitmap()\n    {\n        // Return custom bitmap for chart icon\n        return new Bitmap(\"path/to/icon.png\");\n    }\n}\n\n```",
    "metadata": {
      "id": "event-data-point",
      "title": "event-data-point",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/event-data-point.md",
      "chunkIndex": "code-context-16",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "# Handle Class\n\n**Namespace:** WealthLab.ChartWPF  \n**Parent:** Object\n\nThe `Handle` class represents interactive handles of chart drawing objects. These handles can typically be grabbed and dragged across the chart with the mouse.\n\n## Properties\n\n### Chart Data Properties\n\n### Bars\n",
    "metadata": {
      "id": "handle",
      "title": "handle",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/handle.md",
      "chunkIndex": 0,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the `BarHistory` being charted in the chart where this drawing object is drawn.\n\n### DateTime\n",
    "metadata": {
      "id": "handle",
      "title": "handle",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/handle.md",
      "chunkIndex": 1,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nThe date/time that this handle is pegged to within its source historical data.\n\n### Index\n",
    "metadata": {
      "id": "handle",
      "title": "handle",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/handle.md",
      "chunkIndex": 2,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the index into the `BarHistory` that this handle is pegged to. Returns -1 if the handle's DateTime doesn't map to the current data range.\n\n### Value\n",
    "metadata": {
      "id": "handle",
      "title": "handle",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/handle.md",
      "chunkIndex": 3,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nThe y-axis value of the handle.\n\n## Behavior Properties\n\n### SnapToPrice\n",
    "metadata": {
      "id": "handle",
      "title": "handle",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/handle.md",
      "chunkIndex": 4,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nWhen true, the handle snaps to the nearest OHLC price value in the price pane, or nearest TimeSeries value in other panes during mouse movement.\n\n### Visible\n",
    "metadata": {
      "id": "handle",
      "title": "handle",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/handle.md",
      "chunkIndex": 5,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nControls whether the handle should be rendered when the user hovers over its drawing object.\n\n### Parent\n",
    "metadata": {
      "id": "handle",
      "title": "handle",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/handle.md",
      "chunkIndex": 6,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the chart drawing object (instance of `DrawingObjectBase`) that this Handle belongs to.\n\n## Usage Example\n\n",
    "metadata": {
      "id": "handle",
      "title": "handle",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/handle.md",
      "chunkIndex": 7,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\nThis example demonstrates:\n- Creating handles for a trend line\n- Setting handle properties for interaction\n- Using handles for rendering\n- Handling out-of-range scenarios ",
    "metadata": {
      "id": "handle",
      "title": "handle",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/handle.md",
      "chunkIndex": 8,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "public BarHistory Bars\n",
    "metadata": {
      "id": "handle",
      "title": "handle",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/handle.md",
      "chunkIndex": "code-0",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "# Handle Class\n\n**Namespace:** WealthLab.ChartWPF  \n**Parent:** Object\n\nThe `Handle` class represents interactive handles of chart drawing objects. These handles can typically be grabbed and dragged across the chart with the mouse.\n\n## Properties\n\n### Chart Data Properties\n\n### Bars\n"
    }
  },
  {
    "pageContent": "# Handle Class\n\n**Namespace:** WealthLab.ChartWPF  \n**Parent:** Object\n\nThe `Handle` class represents interactive handles of chart drawing objects. These handles can typically be grabbed and dragged across the chart with the mouse.\n\n## Properties\n\n### Chart Data Properties\n\n### Bars\n\n\n```csharp\npublic BarHistory Bars\n\n```",
    "metadata": {
      "id": "handle",
      "title": "handle",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/handle.md",
      "chunkIndex": "code-context-0",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public DateTime DateTime\n",
    "metadata": {
      "id": "handle",
      "title": "handle",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/handle.md",
      "chunkIndex": "code-1",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "# Handle Class\n\n**Namespace:** WealthLab.ChartWPF  \n**Parent:** Object\n\nThe `Handle` class represents interactive handles of chart drawing objects. These handles can typically be grabbed and dragged across the chart with the mouse.\n\n## Properties\n\n### Chart Data Properties\n\n### Bars\n```csharp\npublic BarHistory Bars\n```\nReturns the `BarHistory` being charted in the chart where this drawing object is drawn.\n\n### DateTime\n"
    }
  },
  {
    "pageContent": "# Handle Class\n\n**Namespace:** WealthLab.ChartWPF  \n**Parent:** Object\n\nThe `Handle` class represents interactive handles of chart drawing objects. These handles can typically be grabbed and dragged across the chart with the mouse.\n\n## Properties\n\n### Chart Data Properties\n\n### Bars\n```csharp\npublic BarHistory Bars\n```\nReturns the `BarHistory` being charted in the chart where this drawing object is drawn.\n\n### DateTime\n\n\n```csharp\npublic DateTime DateTime\n\n```",
    "metadata": {
      "id": "handle",
      "title": "handle",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/handle.md",
      "chunkIndex": "code-context-1",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public int Index\n",
    "metadata": {
      "id": "handle",
      "title": "handle",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/handle.md",
      "chunkIndex": "code-2",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "**Parent:** Object\n\nThe `Handle` class represents interactive handles of chart drawing objects. These handles can typically be grabbed and dragged across the chart with the mouse.\n\n## Properties\n\n### Chart Data Properties\n\n### Bars\n```csharp\npublic BarHistory Bars\n```\nReturns the `BarHistory` being charted in the chart where this drawing object is drawn.\n\n### DateTime\n```csharp\npublic DateTime DateTime\n```\nThe date/time that this handle is pegged to within its source historical data.\n\n### Index\n"
    }
  },
  {
    "pageContent": "**Parent:** Object\n\nThe `Handle` class represents interactive handles of chart drawing objects. These handles can typically be grabbed and dragged across the chart with the mouse.\n\n## Properties\n\n### Chart Data Properties\n\n### Bars\n```csharp\npublic BarHistory Bars\n```\nReturns the `BarHistory` being charted in the chart where this drawing object is drawn.\n\n### DateTime\n```csharp\npublic DateTime DateTime\n```\nThe date/time that this handle is pegged to within its source historical data.\n\n### Index\n\n\n```csharp\npublic int Index\n\n```",
    "metadata": {
      "id": "handle",
      "title": "handle",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/handle.md",
      "chunkIndex": "code-context-2",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public double Value\n",
    "metadata": {
      "id": "handle",
      "title": "handle",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/handle.md",
      "chunkIndex": "code-3",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "erties\n\n### Chart Data Properties\n\n### Bars\n```csharp\npublic BarHistory Bars\n```\nReturns the `BarHistory` being charted in the chart where this drawing object is drawn.\n\n### DateTime\n```csharp\npublic DateTime DateTime\n```\nThe date/time that this handle is pegged to within its source historical data.\n\n### Index\n```csharp\npublic int Index\n```\nReturns the index into the `BarHistory` that this handle is pegged to. Returns -1 if the handle's DateTime doesn't map to the current data range.\n\n### Value\n"
    }
  },
  {
    "pageContent": "erties\n\n### Chart Data Properties\n\n### Bars\n```csharp\npublic BarHistory Bars\n```\nReturns the `BarHistory` being charted in the chart where this drawing object is drawn.\n\n### DateTime\n```csharp\npublic DateTime DateTime\n```\nThe date/time that this handle is pegged to within its source historical data.\n\n### Index\n```csharp\npublic int Index\n```\nReturns the index into the `BarHistory` that this handle is pegged to. Returns -1 if the handle's DateTime doesn't map to the current data range.\n\n### Value\n\n\n```csharp\npublic double Value\n\n```",
    "metadata": {
      "id": "handle",
      "title": "handle",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/handle.md",
      "chunkIndex": "code-context-3",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public bool SnapToPrice\n",
    "metadata": {
      "id": "handle",
      "title": "handle",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/handle.md",
      "chunkIndex": "code-4",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "eing charted in the chart where this drawing object is drawn.\n\n### DateTime\n```csharp\npublic DateTime DateTime\n```\nThe date/time that this handle is pegged to within its source historical data.\n\n### Index\n```csharp\npublic int Index\n```\nReturns the index into the `BarHistory` that this handle is pegged to. Returns -1 if the handle's DateTime doesn't map to the current data range.\n\n### Value\n```csharp\npublic double Value\n```\nThe y-axis value of the handle.\n\n## Behavior Properties\n\n### SnapToPrice\n"
    }
  },
  {
    "pageContent": "eing charted in the chart where this drawing object is drawn.\n\n### DateTime\n```csharp\npublic DateTime DateTime\n```\nThe date/time that this handle is pegged to within its source historical data.\n\n### Index\n```csharp\npublic int Index\n```\nReturns the index into the `BarHistory` that this handle is pegged to. Returns -1 if the handle's DateTime doesn't map to the current data range.\n\n### Value\n```csharp\npublic double Value\n```\nThe y-axis value of the handle.\n\n## Behavior Properties\n\n### SnapToPrice\n\n\n```csharp\npublic bool SnapToPrice\n\n```",
    "metadata": {
      "id": "handle",
      "title": "handle",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/handle.md",
      "chunkIndex": "code-context-4",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public bool Visible\n",
    "metadata": {
      "id": "handle",
      "title": "handle",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/handle.md",
      "chunkIndex": "code-5",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "## Index\n```csharp\npublic int Index\n```\nReturns the index into the `BarHistory` that this handle is pegged to. Returns -1 if the handle's DateTime doesn't map to the current data range.\n\n### Value\n```csharp\npublic double Value\n```\nThe y-axis value of the handle.\n\n## Behavior Properties\n\n### SnapToPrice\n```csharp\npublic bool SnapToPrice\n```\nWhen true, the handle snaps to the nearest OHLC price value in the price pane, or nearest TimeSeries value in other panes during mouse movement.\n\n### Visible\n"
    }
  },
  {
    "pageContent": "## Index\n```csharp\npublic int Index\n```\nReturns the index into the `BarHistory` that this handle is pegged to. Returns -1 if the handle's DateTime doesn't map to the current data range.\n\n### Value\n```csharp\npublic double Value\n```\nThe y-axis value of the handle.\n\n## Behavior Properties\n\n### SnapToPrice\n```csharp\npublic bool SnapToPrice\n```\nWhen true, the handle snaps to the nearest OHLC price value in the price pane, or nearest TimeSeries value in other panes during mouse movement.\n\n### Visible\n\n\n```csharp\npublic bool Visible\n\n```",
    "metadata": {
      "id": "handle",
      "title": "handle",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/handle.md",
      "chunkIndex": "code-context-5",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public DrawingObjectBase Parent\n",
    "metadata": {
      "id": "handle",
      "title": "handle",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/handle.md",
      "chunkIndex": "code-6",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ateTime doesn't map to the current data range.\n\n### Value\n```csharp\npublic double Value\n```\nThe y-axis value of the handle.\n\n## Behavior Properties\n\n### SnapToPrice\n```csharp\npublic bool SnapToPrice\n```\nWhen true, the handle snaps to the nearest OHLC price value in the price pane, or nearest TimeSeries value in other panes during mouse movement.\n\n### Visible\n```csharp\npublic bool Visible\n```\nControls whether the handle should be rendered when the user hovers over its drawing object.\n\n### Parent\n"
    }
  },
  {
    "pageContent": "ateTime doesn't map to the current data range.\n\n### Value\n```csharp\npublic double Value\n```\nThe y-axis value of the handle.\n\n## Behavior Properties\n\n### SnapToPrice\n```csharp\npublic bool SnapToPrice\n```\nWhen true, the handle snaps to the nearest OHLC price value in the price pane, or nearest TimeSeries value in other panes during mouse movement.\n\n### Visible\n```csharp\npublic bool Visible\n```\nControls whether the handle should be rendered when the user hovers over its drawing object.\n\n### Parent\n\n\n```csharp\npublic DrawingObjectBase Parent\n\n```",
    "metadata": {
      "id": "handle",
      "title": "handle",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/handle.md",
      "chunkIndex": "code-context-6",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "// Create a trend line with two handles\npublic class TrendLine : DrawingObjectBase\n{\n    private Handle _startHandle;\n    private Handle _endHandle;\n    \n    public TrendLine(BarHistory bars)\n    {\n        // Initialize start handle\n        _startHandle = new Handle\n        {\n            DateTime = bars.DateTimes[0],\n            Value = bars.Low[0],\n            SnapToPrice = true,\n            Visible = true\n        };\n        \n        // Initialize end handle\n        _endHandle = new Handle\n        {\n            DateTime = bars.DateTimes[bars.Count - 1],\n            Value = bars.High[bars.Count - 1],\n            SnapToPrice = true,\n            Visible = true\n        };\n    }\n    \n    public override void Render(DrawingContext dc)\n    {\n        // Only render if both handles are in valid range\n        if (_startHandle.Index >= 0 && _endHandle.Index >= 0)\n        {\n            // Draw line between handles\n            Point start = new Point(\n                ConvertDateTimeToX(_startHandle.DateTime),\n                ConvertValueToY(_startHandle.Value)\n            );\n            \n            Point end = new Point(\n                ConvertDateTimeToX(_endHandle.DateTime),\n                ConvertValueToY(_endHandle.Value)\n            );\n            \n            dc.DrawLine(new Pen(Brushes.Blue, 2), start, end);\n        }\n    }\n}\n\n// Usage\nvar trendLine = new TrendLine(barHistory);\nchart.AddDrawingObject(trendLine);\n",
    "metadata": {
      "id": "handle",
      "title": "handle",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/handle.md",
      "chunkIndex": "code-7",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ice\n```csharp\npublic bool SnapToPrice\n```\nWhen true, the handle snaps to the nearest OHLC price value in the price pane, or nearest TimeSeries value in other panes during mouse movement.\n\n### Visible\n```csharp\npublic bool Visible\n```\nControls whether the handle should be rendered when the user hovers over its drawing object.\n\n### Parent\n```csharp\npublic DrawingObjectBase Parent\n```\nReturns the chart drawing object (instance of `DrawingObjectBase`) that this Handle belongs to.\n\n## Usage Example\n\n"
    }
  },
  {
    "pageContent": "ice\n```csharp\npublic bool SnapToPrice\n```\nWhen true, the handle snaps to the nearest OHLC price value in the price pane, or nearest TimeSeries value in other panes during mouse movement.\n\n### Visible\n```csharp\npublic bool Visible\n```\nControls whether the handle should be rendered when the user hovers over its drawing object.\n\n### Parent\n```csharp\npublic DrawingObjectBase Parent\n```\nReturns the chart drawing object (instance of `DrawingObjectBase`) that this Handle belongs to.\n\n## Usage Example\n\n\n\n```csharp\n// Create a trend line with two handles\npublic class TrendLine : DrawingObjectBase\n{\n    private Handle _startHandle;\n    private Handle _endHandle;\n    \n    public TrendLine(BarHistory bars)\n    {\n        // Initialize start handle\n        _startHandle = new Handle\n        {\n            DateTime = bars.DateTimes[0],\n            Value = bars.Low[0],\n            SnapToPrice = true,\n            Visible = true\n        };\n        \n        // Initialize end handle\n        _endHandle = new Handle\n        {\n            DateTime = bars.DateTimes[bars.Count - 1],\n            Value = bars.High[bars.Count - 1],\n            SnapToPrice = true,\n            Visible = true\n        };\n    }\n    \n    public override void Render(DrawingContext dc)\n    {\n        // Only render if both handles are in valid range\n        if (_startHandle.Index >= 0 && _endHandle.Index >= 0)\n        {\n            // Draw line between handles\n            Point start = new Point(\n                ConvertDateTimeToX(_startHandle.DateTime),\n                ConvertValueToY(_startHandle.Value)\n            );\n            \n            Point end = new Point(\n                ConvertDateTimeToX(_endHandle.DateTime),\n                ConvertValueToY(_endHandle.Value)\n            );\n            \n            dc.DrawLine(new Pen(Brushes.Blue, 2), start, end);\n        }\n    }\n}\n\n// Usage\nvar trendLine = new TrendLine(barHistory);\nchart.AddDrawingObject(trendLine);\n\n```",
    "metadata": {
      "id": "handle",
      "title": "handle",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/handle.md",
      "chunkIndex": "code-context-7",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "# HeikinAshi Class\n\n**Namespace:** WealthLab.Core  \n**Parent:** Object\n\nA static utility class that converts standard candlestick data into Heikin-Ashi format. Heikin-Ashi candlesticks are a modified form of candlestick charting that aims to reduce noise and better identify trends.\n\n## Static Methods\n\n### Convert\n",
    "metadata": {
      "id": "heikin-ashi",
      "title": "heikin-ashi",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/heikin-ashi.md",
      "chunkIndex": 0,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\nConverts a standard `BarHistory` instance into its Heikin-Ashi equivalent.\n\n**Parameters:**\n- `bars`: Source `BarHistory` to convert\n- `smoother`: Smoothing indicator to use (default: \"TEMA\")\n- `period`: Smoothing period (default: 21)\n- `candleSmoothing`: Candle smoothing formula to use (default: \"Valcu\")\n\n**Notes:**\n- When `candleSmoothing` is not \"Valcu\", the \"Vervoort\" formula is used\n- The smoothed version helps reduce noise further than standard Heikin-Ashi\n\n## Heikin-Ashi Calculation\n\nHeikin-Ashi candlesticks are calculated using the following formulas:\n\n",
    "metadata": {
      "id": "heikin-ashi",
      "title": "heikin-ashi",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/heikin-ashi.md",
      "chunkIndex": 1,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n## Usage Examples\n\n### Basic Conversion\n",
    "metadata": {
      "id": "heikin-ashi",
      "title": "heikin-ashi",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/heikin-ashi.md",
      "chunkIndex": 2,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n### Smoothed Conversion\n",
    "metadata": {
      "id": "heikin-ashi",
      "title": "heikin-ashi",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/heikin-ashi.md",
      "chunkIndex": 3,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n### Trading Strategy Example\n",
    "metadata": {
      "id": "heikin-ashi",
      "title": "heikin-ashi",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/heikin-ashi.md",
      "chunkIndex": 4,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\nThis example demonstrates:\n- Basic Heikin-Ashi conversion\n- Using Heikin-Ashi for trend identification\n- Entry signals based on candle color changes\n- Exit signals based on trend reversal patterns ",
    "metadata": {
      "id": "heikin-ashi",
      "title": "heikin-ashi",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/heikin-ashi.md",
      "chunkIndex": 5,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "public static BarHistory Convert(BarHistory bars)\npublic static BarHistory Convert(BarHistory bars, string smoother = \"TEMA\", int period = 21, string candleSmoothing = \"Valcu\")\n",
    "metadata": {
      "id": "heikin-ashi",
      "title": "heikin-ashi",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/heikin-ashi.md",
      "chunkIndex": "code-0",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "# HeikinAshi Class\n\n**Namespace:** WealthLab.Core  \n**Parent:** Object\n\nA static utility class that converts standard candlestick data into Heikin-Ashi format. Heikin-Ashi candlesticks are a modified form of candlestick charting that aims to reduce noise and better identify trends.\n\n## Static Methods\n\n### Convert\n"
    }
  },
  {
    "pageContent": "# HeikinAshi Class\n\n**Namespace:** WealthLab.Core  \n**Parent:** Object\n\nA static utility class that converts standard candlestick data into Heikin-Ashi format. Heikin-Ashi candlesticks are a modified form of candlestick charting that aims to reduce noise and better identify trends.\n\n## Static Methods\n\n### Convert\n\n\n```csharp\npublic static BarHistory Convert(BarHistory bars)\npublic static BarHistory Convert(BarHistory bars, string smoother = \"TEMA\", int period = 21, string candleSmoothing = \"Valcu\")\n\n```",
    "metadata": {
      "id": "heikin-ashi",
      "title": "heikin-ashi",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/heikin-ashi.md",
      "chunkIndex": "code-context-0",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "HA_Close = (Open + High + Low + Close) / 4\nHA_Open = (Previous HA_Open + Previous HA_Close) / 2\nHA_High = Max(High, HA_Open, HA_Close)\nHA_Low = Min(Low, HA_Open, HA_Close)\n",
    "metadata": {
      "id": "heikin-ashi",
      "title": "heikin-ashi",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/heikin-ashi.md",
      "chunkIndex": "code-1",
      "contentType": "code",
      "language": "text",
      "chunkType": "code_block",
      "context": "valent.\n\n**Parameters:**\n- `bars`: Source `BarHistory` to convert\n- `smoother`: Smoothing indicator to use (default: \"TEMA\")\n- `period`: Smoothing period (default: 21)\n- `candleSmoothing`: Candle smoothing formula to use (default: \"Valcu\")\n\n**Notes:**\n- When `candleSmoothing` is not \"Valcu\", the \"Vervoort\" formula is used\n- The smoothed version helps reduce noise further than standard Heikin-Ashi\n\n## Heikin-Ashi Calculation\n\nHeikin-Ashi candlesticks are calculated using the following formulas:\n\n"
    }
  },
  {
    "pageContent": "valent.\n\n**Parameters:**\n- `bars`: Source `BarHistory` to convert\n- `smoother`: Smoothing indicator to use (default: \"TEMA\")\n- `period`: Smoothing period (default: 21)\n- `candleSmoothing`: Candle smoothing formula to use (default: \"Valcu\")\n\n**Notes:**\n- When `candleSmoothing` is not \"Valcu\", the \"Vervoort\" formula is used\n- The smoothed version helps reduce noise further than standard Heikin-Ashi\n\n## Heikin-Ashi Calculation\n\nHeikin-Ashi candlesticks are calculated using the following formulas:\n\n\n\n```text\nHA_Close = (Open + High + Low + Close) / 4\nHA_Open = (Previous HA_Open + Previous HA_Close) / 2\nHA_High = Max(High, HA_Open, HA_Close)\nHA_Low = Min(Low, HA_Open, HA_Close)\n\n```",
    "metadata": {
      "id": "heikin-ashi",
      "title": "heikin-ashi",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/heikin-ashi.md",
      "chunkIndex": "code-context-1",
      "contentType": "mixed",
      "language": "text",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public class MyStrategy : UserStrategyBase\n{\n    public override void Initialize(BarHistory bars)\n    {\n        // Convert to basic Heikin-Ashi\n        BarHistory heikinAshi = HeikinAshi.Convert(bars);\n        PlotBarHistory(heikinAshi, \"HA\");\n    }\n}\n",
    "metadata": {
      "id": "heikin-ashi",
      "title": "heikin-ashi",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/heikin-ashi.md",
      "chunkIndex": "code-2",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "(default: \"Valcu\")\n\n**Notes:**\n- When `candleSmoothing` is not \"Valcu\", the \"Vervoort\" formula is used\n- The smoothed version helps reduce noise further than standard Heikin-Ashi\n\n## Heikin-Ashi Calculation\n\nHeikin-Ashi candlesticks are calculated using the following formulas:\n\n```\nHA_Close = (Open + High + Low + Close) / 4\nHA_Open = (Previous HA_Open + Previous HA_Close) / 2\nHA_High = Max(High, HA_Open, HA_Close)\nHA_Low = Min(Low, HA_Open, HA_Close)\n```\n\n## Usage Examples\n\n### Basic Conversion\n"
    }
  },
  {
    "pageContent": "(default: \"Valcu\")\n\n**Notes:**\n- When `candleSmoothing` is not \"Valcu\", the \"Vervoort\" formula is used\n- The smoothed version helps reduce noise further than standard Heikin-Ashi\n\n## Heikin-Ashi Calculation\n\nHeikin-Ashi candlesticks are calculated using the following formulas:\n\n```\nHA_Close = (Open + High + Low + Close) / 4\nHA_Open = (Previous HA_Open + Previous HA_Close) / 2\nHA_High = Max(High, HA_Open, HA_Close)\nHA_Low = Min(Low, HA_Open, HA_Close)\n```\n\n## Usage Examples\n\n### Basic Conversion\n\n\n```csharp\npublic class MyStrategy : UserStrategyBase\n{\n    public override void Initialize(BarHistory bars)\n    {\n        // Convert to basic Heikin-Ashi\n        BarHistory heikinAshi = HeikinAshi.Convert(bars);\n        PlotBarHistory(heikinAshi, \"HA\");\n    }\n}\n\n```",
    "metadata": {
      "id": "heikin-ashi",
      "title": "heikin-ashi",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/heikin-ashi.md",
      "chunkIndex": "code-context-2",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public class MyStrategy : UserStrategyBase\n{\n    public override void Initialize(BarHistory bars)\n    {\n        // Convert with custom smoothing parameters\n        BarHistory smoothedHA = HeikinAshi.Convert(\n            bars,\n            smoother: \"EMA\",      // Use EMA for smoothing\n            period: 14,           // 14-period smoothing\n            candleSmoothing: \"Vervoort\"  // Use Vervoort formula\n        );\n        \n        PlotBarHistory(smoothedHA, \"Smoothed HA\");\n    }\n}\n",
    "metadata": {
      "id": "heikin-ashi",
      "title": "heikin-ashi",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/heikin-ashi.md",
      "chunkIndex": "code-3",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": " = (Open + High + Low + Close) / 4\nHA_Open = (Previous HA_Open + Previous HA_Close) / 2\nHA_High = Max(High, HA_Open, HA_Close)\nHA_Low = Min(Low, HA_Open, HA_Close)\n```\n\n## Usage Examples\n\n### Basic Conversion\n```csharp\npublic class MyStrategy : UserStrategyBase\n{\n    public override void Initialize(BarHistory bars)\n    {\n        // Convert to basic Heikin-Ashi\n        BarHistory heikinAshi = HeikinAshi.Convert(bars);\n        PlotBarHistory(heikinAshi, \"HA\");\n    }\n}\n```\n\n### Smoothed Conversion\n"
    }
  },
  {
    "pageContent": " = (Open + High + Low + Close) / 4\nHA_Open = (Previous HA_Open + Previous HA_Close) / 2\nHA_High = Max(High, HA_Open, HA_Close)\nHA_Low = Min(Low, HA_Open, HA_Close)\n```\n\n## Usage Examples\n\n### Basic Conversion\n```csharp\npublic class MyStrategy : UserStrategyBase\n{\n    public override void Initialize(BarHistory bars)\n    {\n        // Convert to basic Heikin-Ashi\n        BarHistory heikinAshi = HeikinAshi.Convert(bars);\n        PlotBarHistory(heikinAshi, \"HA\");\n    }\n}\n```\n\n### Smoothed Conversion\n\n\n```csharp\npublic class MyStrategy : UserStrategyBase\n{\n    public override void Initialize(BarHistory bars)\n    {\n        // Convert with custom smoothing parameters\n        BarHistory smoothedHA = HeikinAshi.Convert(\n            bars,\n            smoother: \"EMA\",      // Use EMA for smoothing\n            period: 14,           // 14-period smoothing\n            candleSmoothing: \"Vervoort\"  // Use Vervoort formula\n        );\n        \n        PlotBarHistory(smoothedHA, \"Smoothed HA\");\n    }\n}\n\n```",
    "metadata": {
      "id": "heikin-ashi",
      "title": "heikin-ashi",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/heikin-ashi.md",
      "chunkIndex": "code-context-3",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public class HeikinAshiStrategy : UserStrategyBase\n{\n    public override void Initialize(BarHistory bars)\n    {\n        // Create Heikin-Ashi version of the data\n        BarHistory ha = HeikinAshi.Convert(bars);\n        PlotBarHistory(ha, \"HA\");\n    }\n\n    public override void Execute(BarHistory bars, int idx)\n    {\n        if (idx < 1) return;\n        \n        BarHistory ha = HeikinAshi.Convert(bars);\n        \n        // Long entry: Previous red candle followed by green candle\n        bool prevRedCandle = ha.Open[idx-1] > ha.Close[idx-1];\n        bool currGreenCandle = ha.Open[idx] < ha.Close[idx];\n        \n        if (prevRedCandle && currGreenCandle && !HasOpenPositions())\n        {\n            Buy();\n        }\n        \n        // Exit: First red candle after green\n        bool wasGreen = ha.Open[idx-1] < ha.Close[idx-1];\n        bool nowRed = ha.Open[idx] > ha.Close[idx];\n        \n        if (wasGreen && nowRed && HasOpenPositions())\n        {\n            SellAll();\n        }\n    }\n}\n",
    "metadata": {
      "id": "heikin-ashi",
      "title": "heikin-ashi",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/heikin-ashi.md",
      "chunkIndex": "code-4",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "egy : UserStrategyBase\n{\n    public override void Initialize(BarHistory bars)\n    {\n        // Convert with custom smoothing parameters\n        BarHistory smoothedHA = HeikinAshi.Convert(\n            bars,\n            smoother: \"EMA\",      // Use EMA for smoothing\n            period: 14,           // 14-period smoothing\n            candleSmoothing: \"Vervoort\"  // Use Vervoort formula\n        );\n        \n        PlotBarHistory(smoothedHA, \"Smoothed HA\");\n    }\n}\n```\n\n### Trading Strategy Example\n"
    }
  },
  {
    "pageContent": "egy : UserStrategyBase\n{\n    public override void Initialize(BarHistory bars)\n    {\n        // Convert with custom smoothing parameters\n        BarHistory smoothedHA = HeikinAshi.Convert(\n            bars,\n            smoother: \"EMA\",      // Use EMA for smoothing\n            period: 14,           // 14-period smoothing\n            candleSmoothing: \"Vervoort\"  // Use Vervoort formula\n        );\n        \n        PlotBarHistory(smoothedHA, \"Smoothed HA\");\n    }\n}\n```\n\n### Trading Strategy Example\n\n\n```csharp\npublic class HeikinAshiStrategy : UserStrategyBase\n{\n    public override void Initialize(BarHistory bars)\n    {\n        // Create Heikin-Ashi version of the data\n        BarHistory ha = HeikinAshi.Convert(bars);\n        PlotBarHistory(ha, \"HA\");\n    }\n\n    public override void Execute(BarHistory bars, int idx)\n    {\n        if (idx < 1) return;\n        \n        BarHistory ha = HeikinAshi.Convert(bars);\n        \n        // Long entry: Previous red candle followed by green candle\n        bool prevRedCandle = ha.Open[idx-1] > ha.Close[idx-1];\n        bool currGreenCandle = ha.Open[idx] < ha.Close[idx];\n        \n        if (prevRedCandle && currGreenCandle && !HasOpenPositions())\n        {\n            Buy();\n        }\n        \n        // Exit: First red candle after green\n        bool wasGreen = ha.Open[idx-1] < ha.Close[idx-1];\n        bool nowRed = ha.Open[idx] > ha.Close[idx];\n        \n        if (wasGreen && nowRed && HasOpenPositions())\n        {\n            SellAll();\n        }\n    }\n}\n\n```",
    "metadata": {
      "id": "heikin-ashi",
      "title": "heikin-ashi",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/heikin-ashi.md",
      "chunkIndex": "code-context-4",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "# HistoricalDataPoint Class\n\n**Namespace:** WealthLab.Core  \n**Parent:** Object\n\nThe `HistoricalDataPoint` class represents a single data point on a WealthLab 8 chart, consisting of an x-axis index value and a y-axis value. This class is commonly used when working with chart data points and plotting functions.\n\n## Properties\n\n### Index\n",
    "metadata": {
      "id": "historical-data-point",
      "title": "historical-data-point",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/historical-data-point.md",
      "chunkIndex": 0,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nThe x-axis value, representing the index into the `BarHistory` instance being charted.\n\n### Value\n",
    "metadata": {
      "id": "historical-data-point",
      "title": "historical-data-point",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/historical-data-point.md",
      "chunkIndex": 1,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nThe y-axis value at the specified index.\n\n## Usage Examples\n\n### Basic Point Creation\n",
    "metadata": {
      "id": "historical-data-point",
      "title": "historical-data-point",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/historical-data-point.md",
      "chunkIndex": 2,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n### Working with Collections\n",
    "metadata": {
      "id": "historical-data-point",
      "title": "historical-data-point",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/historical-data-point.md",
      "chunkIndex": 3,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n### Using with Chart Plotting\n",
    "metadata": {
      "id": "historical-data-point",
      "title": "historical-data-point",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/historical-data-point.md",
      "chunkIndex": 4,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n### Finding Specific Points\n",
    "metadata": {
      "id": "historical-data-point",
      "title": "historical-data-point",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/historical-data-point.md",
      "chunkIndex": 5,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\nThis example demonstrates:\n- Creating individual data points\n- Working with collections of data points\n- Using points for chart analysis\n- Finding specific patterns in price data ",
    "metadata": {
      "id": "historical-data-point",
      "title": "historical-data-point",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/historical-data-point.md",
      "chunkIndex": 6,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "public int Index\n",
    "metadata": {
      "id": "historical-data-point",
      "title": "historical-data-point",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/historical-data-point.md",
      "chunkIndex": "code-0",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "# HistoricalDataPoint Class\n\n**Namespace:** WealthLab.Core  \n**Parent:** Object\n\nThe `HistoricalDataPoint` class represents a single data point on a WealthLab 8 chart, consisting of an x-axis index value and a y-axis value. This class is commonly used when working with chart data points and plotting functions.\n\n## Properties\n\n### Index\n"
    }
  },
  {
    "pageContent": "# HistoricalDataPoint Class\n\n**Namespace:** WealthLab.Core  \n**Parent:** Object\n\nThe `HistoricalDataPoint` class represents a single data point on a WealthLab 8 chart, consisting of an x-axis index value and a y-axis value. This class is commonly used when working with chart data points and plotting functions.\n\n## Properties\n\n### Index\n\n\n```csharp\npublic int Index\n\n```",
    "metadata": {
      "id": "historical-data-point",
      "title": "historical-data-point",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/historical-data-point.md",
      "chunkIndex": "code-context-0",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public double Value\n",
    "metadata": {
      "id": "historical-data-point",
      "title": "historical-data-point",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/historical-data-point.md",
      "chunkIndex": "code-1",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "# HistoricalDataPoint Class\n\n**Namespace:** WealthLab.Core  \n**Parent:** Object\n\nThe `HistoricalDataPoint` class represents a single data point on a WealthLab 8 chart, consisting of an x-axis index value and a y-axis value. This class is commonly used when working with chart data points and plotting functions.\n\n## Properties\n\n### Index\n```csharp\npublic int Index\n```\nThe x-axis value, representing the index into the `BarHistory` instance being charted.\n\n### Value\n"
    }
  },
  {
    "pageContent": "# HistoricalDataPoint Class\n\n**Namespace:** WealthLab.Core  \n**Parent:** Object\n\nThe `HistoricalDataPoint` class represents a single data point on a WealthLab 8 chart, consisting of an x-axis index value and a y-axis value. This class is commonly used when working with chart data points and plotting functions.\n\n## Properties\n\n### Index\n```csharp\npublic int Index\n```\nThe x-axis value, representing the index into the `BarHistory` instance being charted.\n\n### Value\n\n\n```csharp\npublic double Value\n\n```",
    "metadata": {
      "id": "historical-data-point",
      "title": "historical-data-point",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/historical-data-point.md",
      "chunkIndex": "code-context-1",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "// Create a data point at index 10 with value 100.5\nvar point = new HistoricalDataPoint\n{\n    Index = 10,\n    Value = 100.5\n};\n",
    "metadata": {
      "id": "historical-data-point",
      "title": "historical-data-point",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/historical-data-point.md",
      "chunkIndex": "code-2",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "istoricalDataPoint` class represents a single data point on a WealthLab 8 chart, consisting of an x-axis index value and a y-axis value. This class is commonly used when working with chart data points and plotting functions.\n\n## Properties\n\n### Index\n```csharp\npublic int Index\n```\nThe x-axis value, representing the index into the `BarHistory` instance being charted.\n\n### Value\n```csharp\npublic double Value\n```\nThe y-axis value at the specified index.\n\n## Usage Examples\n\n### Basic Point Creation\n"
    }
  },
  {
    "pageContent": "istoricalDataPoint` class represents a single data point on a WealthLab 8 chart, consisting of an x-axis index value and a y-axis value. This class is commonly used when working with chart data points and plotting functions.\n\n## Properties\n\n### Index\n```csharp\npublic int Index\n```\nThe x-axis value, representing the index into the `BarHistory` instance being charted.\n\n### Value\n```csharp\npublic double Value\n```\nThe y-axis value at the specified index.\n\n## Usage Examples\n\n### Basic Point Creation\n\n\n```csharp\n// Create a data point at index 10 with value 100.5\nvar point = new HistoricalDataPoint\n{\n    Index = 10,\n    Value = 100.5\n};\n\n```",
    "metadata": {
      "id": "historical-data-point",
      "title": "historical-data-point",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/historical-data-point.md",
      "chunkIndex": "code-context-2",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "// Create a list of historical data points\nvar points = new List<HistoricalDataPoint>();\n\n// Add points for a simple moving average\nfor (int i = 0; i < bars.Count; i++)\n{\n    points.Add(new HistoricalDataPoint\n    {\n        Index = i,\n        Value = bars.Close[i]\n    });\n}\n",
    "metadata": {
      "id": "historical-data-point",
      "title": "historical-data-point",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/historical-data-point.md",
      "chunkIndex": "code-3",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "orking with chart data points and plotting functions.\n\n## Properties\n\n### Index\n```csharp\npublic int Index\n```\nThe x-axis value, representing the index into the `BarHistory` instance being charted.\n\n### Value\n```csharp\npublic double Value\n```\nThe y-axis value at the specified index.\n\n## Usage Examples\n\n### Basic Point Creation\n```csharp\n// Create a data point at index 10 with value 100.5\nvar point = new HistoricalDataPoint\n{\n    Index = 10,\n    Value = 100.5\n};\n```\n\n### Working with Collections\n"
    }
  },
  {
    "pageContent": "orking with chart data points and plotting functions.\n\n## Properties\n\n### Index\n```csharp\npublic int Index\n```\nThe x-axis value, representing the index into the `BarHistory` instance being charted.\n\n### Value\n```csharp\npublic double Value\n```\nThe y-axis value at the specified index.\n\n## Usage Examples\n\n### Basic Point Creation\n```csharp\n// Create a data point at index 10 with value 100.5\nvar point = new HistoricalDataPoint\n{\n    Index = 10,\n    Value = 100.5\n};\n```\n\n### Working with Collections\n\n\n```csharp\n// Create a list of historical data points\nvar points = new List<HistoricalDataPoint>();\n\n// Add points for a simple moving average\nfor (int i = 0; i < bars.Count; i++)\n{\n    points.Add(new HistoricalDataPoint\n    {\n        Index = i,\n        Value = bars.Close[i]\n    });\n}\n\n```",
    "metadata": {
      "id": "historical-data-point",
      "title": "historical-data-point",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/historical-data-point.md",
      "chunkIndex": "code-context-3",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public class MyStrategy : UserStrategyBase\n{\n    public override void Initialize(BarHistory bars)\n    {\n        // Create points for custom indicator\n        var dataPoints = new List<HistoricalDataPoint>();\n        \n        for (int i = 0; i < bars.Count; i++)\n        {\n            // Calculate some custom value\n            double customValue = (bars.High[i] + bars.Low[i]) / 2;\n            \n            dataPoints.Add(new HistoricalDataPoint\n            {\n                Index = i,\n                Value = customValue\n            });\n        }\n        \n        // Use points for plotting or analysis\n        foreach (var point in dataPoints)\n        {\n            // Access point data\n            int barIndex = point.Index;\n            double yValue = point.Value;\n            \n            // Use in calculations or plotting\n        }\n    }\n}\n",
    "metadata": {
      "id": "historical-data-point",
      "title": "historical-data-point",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/historical-data-point.md",
      "chunkIndex": "code-4",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "Creation\n```csharp\n// Create a data point at index 10 with value 100.5\nvar point = new HistoricalDataPoint\n{\n    Index = 10,\n    Value = 100.5\n};\n```\n\n### Working with Collections\n```csharp\n// Create a list of historical data points\nvar points = new List<HistoricalDataPoint>();\n\n// Add points for a simple moving average\nfor (int i = 0; i < bars.Count; i++)\n{\n    points.Add(new HistoricalDataPoint\n    {\n        Index = i,\n        Value = bars.Close[i]\n    });\n}\n```\n\n### Using with Chart Plotting\n"
    }
  },
  {
    "pageContent": "Creation\n```csharp\n// Create a data point at index 10 with value 100.5\nvar point = new HistoricalDataPoint\n{\n    Index = 10,\n    Value = 100.5\n};\n```\n\n### Working with Collections\n```csharp\n// Create a list of historical data points\nvar points = new List<HistoricalDataPoint>();\n\n// Add points for a simple moving average\nfor (int i = 0; i < bars.Count; i++)\n{\n    points.Add(new HistoricalDataPoint\n    {\n        Index = i,\n        Value = bars.Close[i]\n    });\n}\n```\n\n### Using with Chart Plotting\n\n\n```csharp\npublic class MyStrategy : UserStrategyBase\n{\n    public override void Initialize(BarHistory bars)\n    {\n        // Create points for custom indicator\n        var dataPoints = new List<HistoricalDataPoint>();\n        \n        for (int i = 0; i < bars.Count; i++)\n        {\n            // Calculate some custom value\n            double customValue = (bars.High[i] + bars.Low[i]) / 2;\n            \n            dataPoints.Add(new HistoricalDataPoint\n            {\n                Index = i,\n                Value = customValue\n            });\n        }\n        \n        // Use points for plotting or analysis\n        foreach (var point in dataPoints)\n        {\n            // Access point data\n            int barIndex = point.Index;\n            double yValue = point.Value;\n            \n            // Use in calculations or plotting\n        }\n    }\n}\n\n```",
    "metadata": {
      "id": "historical-data-point",
      "title": "historical-data-point",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/historical-data-point.md",
      "chunkIndex": "code-context-4",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public List<HistoricalDataPoint> FindPeaks(BarHistory bars)\n{\n    var peaks = new List<HistoricalDataPoint>();\n    \n    // Skip first and last bars\n    for (int i = 1; i < bars.Count - 1; i++)\n    {\n        // Check if current bar is a peak\n        if (bars.High[i] > bars.High[i-1] && \n            bars.High[i] > bars.High[i+1])\n        {\n            peaks.Add(new HistoricalDataPoint\n            {\n                Index = i,\n                Value = bars.High[i]\n            });\n        }\n    }\n    \n    return peaks;\n}\n",
    "metadata": {
      "id": "historical-data-point",
      "title": "historical-data-point",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/historical-data-point.md",
      "chunkIndex": "code-5",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "            \n            dataPoints.Add(new HistoricalDataPoint\n            {\n                Index = i,\n                Value = customValue\n            });\n        }\n        \n        // Use points for plotting or analysis\n        foreach (var point in dataPoints)\n        {\n            // Access point data\n            int barIndex = point.Index;\n            double yValue = point.Value;\n            \n            // Use in calculations or plotting\n        }\n    }\n}\n```\n\n### Finding Specific Points\n"
    }
  },
  {
    "pageContent": "            \n            dataPoints.Add(new HistoricalDataPoint\n            {\n                Index = i,\n                Value = customValue\n            });\n        }\n        \n        // Use points for plotting or analysis\n        foreach (var point in dataPoints)\n        {\n            // Access point data\n            int barIndex = point.Index;\n            double yValue = point.Value;\n            \n            // Use in calculations or plotting\n        }\n    }\n}\n```\n\n### Finding Specific Points\n\n\n```csharp\npublic List<HistoricalDataPoint> FindPeaks(BarHistory bars)\n{\n    var peaks = new List<HistoricalDataPoint>();\n    \n    // Skip first and last bars\n    for (int i = 1; i < bars.Count - 1; i++)\n    {\n        // Check if current bar is a peak\n        if (bars.High[i] > bars.High[i-1] && \n            bars.High[i] > bars.High[i+1])\n        {\n            peaks.Add(new HistoricalDataPoint\n            {\n                Index = i,\n                Value = bars.High[i]\n            });\n        }\n    }\n    \n    return peaks;\n}\n\n```",
    "metadata": {
      "id": "historical-data-point",
      "title": "historical-data-point",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/historical-data-point.md",
      "chunkIndex": "code-context-5",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "# HistoryScale Class\n\n**Namespace:** WealthLab.Core  \n**Parent:** Object\n\nThe `HistoryScale` class represents a data time scale for historical market data, such as daily, weekly, or intraday intervals. It provides a unified way to specify and work with different time frequencies in WealthLab 8.\n\n## Constructors\n\n### HistoryScale\n",
    "metadata": {
      "id": "history-scale",
      "title": "history-scale",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/history-scale.md",
      "chunkIndex": 0,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\nCreates a new instance of `HistoryScale`.\n\n**Parameters:**\n- `scale`: A `Frequency` enum value specifying the base time scale\n- `interval`: Optional interval for intraday scales (Tick, Second, Minute)\n\n## Properties\n\n### Description\n",
    "metadata": {
      "id": "history-scale",
      "title": "history-scale",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/history-scale.md",
      "chunkIndex": 1,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns a human-readable description of the scale (e.g., \"Daily\", \"5-Minute\", \"Weekly\").\n\n### Frequency\n",
    "metadata": {
      "id": "history-scale",
      "title": "history-scale",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/history-scale.md",
      "chunkIndex": 2,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nThe base frequency of the scale as a `Frequency` enum value. Possible values:\n- `Daily`\n- `Weekly`\n- `Monthly`\n- `Quarterly`\n- `Yearly`\n- `Tick`\n- `Second`\n- `Minute`\n\n### Interval\n",
    "metadata": {
      "id": "history-scale",
      "title": "history-scale",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/history-scale.md",
      "chunkIndex": 3,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nThe time interval for intraday scales (Tick, Second, Minute). For example, a value of 5 with `Frequency.Minute` represents 5-minute bars.\n\n### IsIntraday\n",
    "metadata": {
      "id": "history-scale",
      "title": "history-scale",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/history-scale.md",
      "chunkIndex": 4,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns true if this scale represents an intraday timeframe (Tick, Second, or Minute).\n\n## Static Properties\n\n",
    "metadata": {
      "id": "history-scale",
      "title": "history-scale",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/history-scale.md",
      "chunkIndex": 5,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\nConvenient static properties for commonly used scales. These can be used instead of creating new instances.\n\n## Usage Examples\n\n### Basic Scale Creation\n",
    "metadata": {
      "id": "history-scale",
      "title": "history-scale",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/history-scale.md",
      "chunkIndex": 6,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n### Using with BarHistory\n",
    "metadata": {
      "id": "history-scale",
      "title": "history-scale",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/history-scale.md",
      "chunkIndex": 7,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n### Scale Comparison\n",
    "metadata": {
      "id": "history-scale",
      "title": "history-scale",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/history-scale.md",
      "chunkIndex": 8,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n### Creating Custom Scales\n",
    "metadata": {
      "id": "history-scale",
      "title": "history-scale",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/history-scale.md",
      "chunkIndex": 9,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\nThis example demonstrates:\n- Creating various time scales\n- Using static helpers\n- Scale comparison and validation\n- Managing multiple scales ",
    "metadata": {
      "id": "history-scale",
      "title": "history-scale",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/history-scale.md",
      "chunkIndex": 10,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "public HistoryScale(Frequency scale, int interval = 0)\n",
    "metadata": {
      "id": "history-scale",
      "title": "history-scale",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/history-scale.md",
      "chunkIndex": "code-0",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "# HistoryScale Class\n\n**Namespace:** WealthLab.Core  \n**Parent:** Object\n\nThe `HistoryScale` class represents a data time scale for historical market data, such as daily, weekly, or intraday intervals. It provides a unified way to specify and work with different time frequencies in WealthLab 8.\n\n## Constructors\n\n### HistoryScale\n"
    }
  },
  {
    "pageContent": "# HistoryScale Class\n\n**Namespace:** WealthLab.Core  \n**Parent:** Object\n\nThe `HistoryScale` class represents a data time scale for historical market data, such as daily, weekly, or intraday intervals. It provides a unified way to specify and work with different time frequencies in WealthLab 8.\n\n## Constructors\n\n### HistoryScale\n\n\n```csharp\npublic HistoryScale(Frequency scale, int interval = 0)\n\n```",
    "metadata": {
      "id": "history-scale",
      "title": "history-scale",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/history-scale.md",
      "chunkIndex": "code-context-0",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public string Description\n",
    "metadata": {
      "id": "history-scale",
      "title": "history-scale",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/history-scale.md",
      "chunkIndex": "code-1",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "storical market data, such as daily, weekly, or intraday intervals. It provides a unified way to specify and work with different time frequencies in WealthLab 8.\n\n## Constructors\n\n### HistoryScale\n```csharp\npublic HistoryScale(Frequency scale, int interval = 0)\n```\n\nCreates a new instance of `HistoryScale`.\n\n**Parameters:**\n- `scale`: A `Frequency` enum value specifying the base time scale\n- `interval`: Optional interval for intraday scales (Tick, Second, Minute)\n\n## Properties\n\n### Description\n"
    }
  },
  {
    "pageContent": "storical market data, such as daily, weekly, or intraday intervals. It provides a unified way to specify and work with different time frequencies in WealthLab 8.\n\n## Constructors\n\n### HistoryScale\n```csharp\npublic HistoryScale(Frequency scale, int interval = 0)\n```\n\nCreates a new instance of `HistoryScale`.\n\n**Parameters:**\n- `scale`: A `Frequency` enum value specifying the base time scale\n- `interval`: Optional interval for intraday scales (Tick, Second, Minute)\n\n## Properties\n\n### Description\n\n\n```csharp\npublic string Description\n\n```",
    "metadata": {
      "id": "history-scale",
      "title": "history-scale",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/history-scale.md",
      "chunkIndex": "code-context-1",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public Frequency Frequency\n",
    "metadata": {
      "id": "history-scale",
      "title": "history-scale",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/history-scale.md",
      "chunkIndex": "code-2",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "s in WealthLab 8.\n\n## Constructors\n\n### HistoryScale\n```csharp\npublic HistoryScale(Frequency scale, int interval = 0)\n```\n\nCreates a new instance of `HistoryScale`.\n\n**Parameters:**\n- `scale`: A `Frequency` enum value specifying the base time scale\n- `interval`: Optional interval for intraday scales (Tick, Second, Minute)\n\n## Properties\n\n### Description\n```csharp\npublic string Description\n```\nReturns a human-readable description of the scale (e.g., \"Daily\", \"5-Minute\", \"Weekly\").\n\n### Frequency\n"
    }
  },
  {
    "pageContent": "s in WealthLab 8.\n\n## Constructors\n\n### HistoryScale\n```csharp\npublic HistoryScale(Frequency scale, int interval = 0)\n```\n\nCreates a new instance of `HistoryScale`.\n\n**Parameters:**\n- `scale`: A `Frequency` enum value specifying the base time scale\n- `interval`: Optional interval for intraday scales (Tick, Second, Minute)\n\n## Properties\n\n### Description\n```csharp\npublic string Description\n```\nReturns a human-readable description of the scale (e.g., \"Daily\", \"5-Minute\", \"Weekly\").\n\n### Frequency\n\n\n```csharp\npublic Frequency Frequency\n\n```",
    "metadata": {
      "id": "history-scale",
      "title": "history-scale",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/history-scale.md",
      "chunkIndex": "code-context-2",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public int Interval\n",
    "metadata": {
      "id": "history-scale",
      "title": "history-scale",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/history-scale.md",
      "chunkIndex": "code-3",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ifying the base time scale\n- `interval`: Optional interval for intraday scales (Tick, Second, Minute)\n\n## Properties\n\n### Description\n```csharp\npublic string Description\n```\nReturns a human-readable description of the scale (e.g., \"Daily\", \"5-Minute\", \"Weekly\").\n\n### Frequency\n```csharp\npublic Frequency Frequency\n```\nThe base frequency of the scale as a `Frequency` enum value. Possible values:\n- `Daily`\n- `Weekly`\n- `Monthly`\n- `Quarterly`\n- `Yearly`\n- `Tick`\n- `Second`\n- `Minute`\n\n### Interval\n"
    }
  },
  {
    "pageContent": "ifying the base time scale\n- `interval`: Optional interval for intraday scales (Tick, Second, Minute)\n\n## Properties\n\n### Description\n```csharp\npublic string Description\n```\nReturns a human-readable description of the scale (e.g., \"Daily\", \"5-Minute\", \"Weekly\").\n\n### Frequency\n```csharp\npublic Frequency Frequency\n```\nThe base frequency of the scale as a `Frequency` enum value. Possible values:\n- `Daily`\n- `Weekly`\n- `Monthly`\n- `Quarterly`\n- `Yearly`\n- `Tick`\n- `Second`\n- `Minute`\n\n### Interval\n\n\n```csharp\npublic int Interval\n\n```",
    "metadata": {
      "id": "history-scale",
      "title": "history-scale",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/history-scale.md",
      "chunkIndex": "code-context-3",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public bool IsIntraday\n",
    "metadata": {
      "id": "history-scale",
      "title": "history-scale",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/history-scale.md",
      "chunkIndex": "code-4",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "n-readable description of the scale (e.g., \"Daily\", \"5-Minute\", \"Weekly\").\n\n### Frequency\n```csharp\npublic Frequency Frequency\n```\nThe base frequency of the scale as a `Frequency` enum value. Possible values:\n- `Daily`\n- `Weekly`\n- `Monthly`\n- `Quarterly`\n- `Yearly`\n- `Tick`\n- `Second`\n- `Minute`\n\n### Interval\n```csharp\npublic int Interval\n```\nThe time interval for intraday scales (Tick, Second, Minute). For example, a value of 5 with `Frequency.Minute` represents 5-minute bars.\n\n### IsIntraday\n"
    }
  },
  {
    "pageContent": "n-readable description of the scale (e.g., \"Daily\", \"5-Minute\", \"Weekly\").\n\n### Frequency\n```csharp\npublic Frequency Frequency\n```\nThe base frequency of the scale as a `Frequency` enum value. Possible values:\n- `Daily`\n- `Weekly`\n- `Monthly`\n- `Quarterly`\n- `Yearly`\n- `Tick`\n- `Second`\n- `Minute`\n\n### Interval\n```csharp\npublic int Interval\n```\nThe time interval for intraday scales (Tick, Second, Minute). For example, a value of 5 with `Frequency.Minute` represents 5-minute bars.\n\n### IsIntraday\n\n\n```csharp\npublic bool IsIntraday\n\n```",
    "metadata": {
      "id": "history-scale",
      "title": "history-scale",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/history-scale.md",
      "chunkIndex": "code-context-4",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public static HistoryScale Daily = new HistoryScale(Frequency.Daily)\npublic static HistoryScale Weekly = new HistoryScale(Frequency.Weekly)\npublic static HistoryScale Monthly = new HistoryScale(Frequency.Monthly)\npublic static HistoryScale Quarterly = new HistoryScale(Frequency.Quarterly)\npublic static HistoryScale Yearly = new HistoryScale(Frequency.Yearly)\n",
    "metadata": {
      "id": "history-scale",
      "title": "history-scale",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/history-scale.md",
      "chunkIndex": "code-5",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "cy of the scale as a `Frequency` enum value. Possible values:\n- `Daily`\n- `Weekly`\n- `Monthly`\n- `Quarterly`\n- `Yearly`\n- `Tick`\n- `Second`\n- `Minute`\n\n### Interval\n```csharp\npublic int Interval\n```\nThe time interval for intraday scales (Tick, Second, Minute). For example, a value of 5 with `Frequency.Minute` represents 5-minute bars.\n\n### IsIntraday\n```csharp\npublic bool IsIntraday\n```\nReturns true if this scale represents an intraday timeframe (Tick, Second, or Minute).\n\n## Static Properties\n\n"
    }
  },
  {
    "pageContent": "cy of the scale as a `Frequency` enum value. Possible values:\n- `Daily`\n- `Weekly`\n- `Monthly`\n- `Quarterly`\n- `Yearly`\n- `Tick`\n- `Second`\n- `Minute`\n\n### Interval\n```csharp\npublic int Interval\n```\nThe time interval for intraday scales (Tick, Second, Minute). For example, a value of 5 with `Frequency.Minute` represents 5-minute bars.\n\n### IsIntraday\n```csharp\npublic bool IsIntraday\n```\nReturns true if this scale represents an intraday timeframe (Tick, Second, or Minute).\n\n## Static Properties\n\n\n\n```csharp\npublic static HistoryScale Daily = new HistoryScale(Frequency.Daily)\npublic static HistoryScale Weekly = new HistoryScale(Frequency.Weekly)\npublic static HistoryScale Monthly = new HistoryScale(Frequency.Monthly)\npublic static HistoryScale Quarterly = new HistoryScale(Frequency.Quarterly)\npublic static HistoryScale Yearly = new HistoryScale(Frequency.Yearly)\n\n```",
    "metadata": {
      "id": "history-scale",
      "title": "history-scale",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/history-scale.md",
      "chunkIndex": "code-context-5",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "// Create a 5-minute scale\nvar fiveMin = new HistoryScale(Frequency.Minute, 5);\n\n// Create a daily scale\nvar daily = new HistoryScale(Frequency.Daily);\n\n// Use static helper\nvar weekly = HistoryScale.Weekly;\n",
    "metadata": {
      "id": "history-scale",
      "title": "history-scale",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/history-scale.md",
      "chunkIndex": "code-6",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ryScale Daily = new HistoryScale(Frequency.Daily)\npublic static HistoryScale Weekly = new HistoryScale(Frequency.Weekly)\npublic static HistoryScale Monthly = new HistoryScale(Frequency.Monthly)\npublic static HistoryScale Quarterly = new HistoryScale(Frequency.Quarterly)\npublic static HistoryScale Yearly = new HistoryScale(Frequency.Yearly)\n```\n\nConvenient static properties for commonly used scales. These can be used instead of creating new instances.\n\n## Usage Examples\n\n### Basic Scale Creation\n"
    }
  },
  {
    "pageContent": "ryScale Daily = new HistoryScale(Frequency.Daily)\npublic static HistoryScale Weekly = new HistoryScale(Frequency.Weekly)\npublic static HistoryScale Monthly = new HistoryScale(Frequency.Monthly)\npublic static HistoryScale Quarterly = new HistoryScale(Frequency.Quarterly)\npublic static HistoryScale Yearly = new HistoryScale(Frequency.Yearly)\n```\n\nConvenient static properties for commonly used scales. These can be used instead of creating new instances.\n\n## Usage Examples\n\n### Basic Scale Creation\n\n\n```csharp\n// Create a 5-minute scale\nvar fiveMin = new HistoryScale(Frequency.Minute, 5);\n\n// Create a daily scale\nvar daily = new HistoryScale(Frequency.Daily);\n\n// Use static helper\nvar weekly = HistoryScale.Weekly;\n\n```",
    "metadata": {
      "id": "history-scale",
      "title": "history-scale",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/history-scale.md",
      "chunkIndex": "code-context-6",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public class MyStrategy : UserStrategyBase\n{\n    public override void Initialize(BarHistory bars)\n    {\n        // Check if we're working with intraday data\n        if (bars.Scale.IsIntraday)\n        {\n            if (bars.Scale.Frequency == Frequency.Minute)\n            {\n                int interval = bars.Scale.Interval;\n                Debug.WriteLine($\"Working with {interval}-minute data\");\n            }\n        }\n        \n        // Get scale description\n        Debug.WriteLine($\"Data Scale: {bars.Scale.Description}\");\n    }\n}\n",
    "metadata": {
      "id": "history-scale",
      "title": "history-scale",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/history-scale.md",
      "chunkIndex": "code-7",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "(Frequency.Quarterly)\npublic static HistoryScale Yearly = new HistoryScale(Frequency.Yearly)\n```\n\nConvenient static properties for commonly used scales. These can be used instead of creating new instances.\n\n## Usage Examples\n\n### Basic Scale Creation\n```csharp\n// Create a 5-minute scale\nvar fiveMin = new HistoryScale(Frequency.Minute, 5);\n\n// Create a daily scale\nvar daily = new HistoryScale(Frequency.Daily);\n\n// Use static helper\nvar weekly = HistoryScale.Weekly;\n```\n\n### Using with BarHistory\n"
    }
  },
  {
    "pageContent": "(Frequency.Quarterly)\npublic static HistoryScale Yearly = new HistoryScale(Frequency.Yearly)\n```\n\nConvenient static properties for commonly used scales. These can be used instead of creating new instances.\n\n## Usage Examples\n\n### Basic Scale Creation\n```csharp\n// Create a 5-minute scale\nvar fiveMin = new HistoryScale(Frequency.Minute, 5);\n\n// Create a daily scale\nvar daily = new HistoryScale(Frequency.Daily);\n\n// Use static helper\nvar weekly = HistoryScale.Weekly;\n```\n\n### Using with BarHistory\n\n\n```csharp\npublic class MyStrategy : UserStrategyBase\n{\n    public override void Initialize(BarHistory bars)\n    {\n        // Check if we're working with intraday data\n        if (bars.Scale.IsIntraday)\n        {\n            if (bars.Scale.Frequency == Frequency.Minute)\n            {\n                int interval = bars.Scale.Interval;\n                Debug.WriteLine($\"Working with {interval}-minute data\");\n            }\n        }\n        \n        // Get scale description\n        Debug.WriteLine($\"Data Scale: {bars.Scale.Description}\");\n    }\n}\n\n```",
    "metadata": {
      "id": "history-scale",
      "title": "history-scale",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/history-scale.md",
      "chunkIndex": "code-context-7",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public bool IsValidScale(HistoryScale scale)\n{\n    // Check for specific timeframes\n    if (scale.Frequency == Frequency.Daily)\n        return true;\n        \n    if (scale.IsIntraday && scale.Interval >= 5)\n        return true;\n        \n    return false;\n}\n",
    "metadata": {
      "id": "history-scale",
      "title": "history-scale",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/history-scale.md",
      "chunkIndex": "code-8",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "void Initialize(BarHistory bars)\n    {\n        // Check if we're working with intraday data\n        if (bars.Scale.IsIntraday)\n        {\n            if (bars.Scale.Frequency == Frequency.Minute)\n            {\n                int interval = bars.Scale.Interval;\n                Debug.WriteLine($\"Working with {interval}-minute data\");\n            }\n        }\n        \n        // Get scale description\n        Debug.WriteLine($\"Data Scale: {bars.Scale.Description}\");\n    }\n}\n```\n\n### Scale Comparison\n"
    }
  },
  {
    "pageContent": "void Initialize(BarHistory bars)\n    {\n        // Check if we're working with intraday data\n        if (bars.Scale.IsIntraday)\n        {\n            if (bars.Scale.Frequency == Frequency.Minute)\n            {\n                int interval = bars.Scale.Interval;\n                Debug.WriteLine($\"Working with {interval}-minute data\");\n            }\n        }\n        \n        // Get scale description\n        Debug.WriteLine($\"Data Scale: {bars.Scale.Description}\");\n    }\n}\n```\n\n### Scale Comparison\n\n\n```csharp\npublic bool IsValidScale(HistoryScale scale)\n{\n    // Check for specific timeframes\n    if (scale.Frequency == Frequency.Daily)\n        return true;\n        \n    if (scale.IsIntraday && scale.Interval >= 5)\n        return true;\n        \n    return false;\n}\n\n```",
    "metadata": {
      "id": "history-scale",
      "title": "history-scale",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/history-scale.md",
      "chunkIndex": "code-context-8",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public class ScaleManager\n{\n    public Dictionary<string, HistoryScale> GetCommonScales()\n    {\n        return new Dictionary<string, HistoryScale>\n        {\n            { \"1min\", new HistoryScale(Frequency.Minute, 1) },\n            { \"5min\", new HistoryScale(Frequency.Minute, 5) },\n            { \"15min\", new HistoryScale(Frequency.Minute, 15) },\n            { \"30min\", new HistoryScale(Frequency.Minute, 30) },\n            { \"60min\", new HistoryScale(Frequency.Minute, 60) },\n            { \"D\", HistoryScale.Daily },\n            { \"W\", HistoryScale.Weekly },\n            { \"M\", HistoryScale.Monthly }\n        };\n    }\n}\n",
    "metadata": {
      "id": "history-scale",
      "title": "history-scale",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/history-scale.md",
      "chunkIndex": "code-9",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ing with {interval}-minute data\");\n            }\n        }\n        \n        // Get scale description\n        Debug.WriteLine($\"Data Scale: {bars.Scale.Description}\");\n    }\n}\n```\n\n### Scale Comparison\n```csharp\npublic bool IsValidScale(HistoryScale scale)\n{\n    // Check for specific timeframes\n    if (scale.Frequency == Frequency.Daily)\n        return true;\n        \n    if (scale.IsIntraday && scale.Interval >= 5)\n        return true;\n        \n    return false;\n}\n```\n\n### Creating Custom Scales\n"
    }
  },
  {
    "pageContent": "ing with {interval}-minute data\");\n            }\n        }\n        \n        // Get scale description\n        Debug.WriteLine($\"Data Scale: {bars.Scale.Description}\");\n    }\n}\n```\n\n### Scale Comparison\n```csharp\npublic bool IsValidScale(HistoryScale scale)\n{\n    // Check for specific timeframes\n    if (scale.Frequency == Frequency.Daily)\n        return true;\n        \n    if (scale.IsIntraday && scale.Interval >= 5)\n        return true;\n        \n    return false;\n}\n```\n\n### Creating Custom Scales\n\n\n```csharp\npublic class ScaleManager\n{\n    public Dictionary<string, HistoryScale> GetCommonScales()\n    {\n        return new Dictionary<string, HistoryScale>\n        {\n            { \"1min\", new HistoryScale(Frequency.Minute, 1) },\n            { \"5min\", new HistoryScale(Frequency.Minute, 5) },\n            { \"15min\", new HistoryScale(Frequency.Minute, 15) },\n            { \"30min\", new HistoryScale(Frequency.Minute, 30) },\n            { \"60min\", new HistoryScale(Frequency.Minute, 60) },\n            { \"D\", HistoryScale.Daily },\n            { \"W\", HistoryScale.Weekly },\n            { \"M\", HistoryScale.Monthly }\n        };\n    }\n}\n\n```",
    "metadata": {
      "id": "history-scale",
      "title": "history-scale",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/history-scale.md",
      "chunkIndex": "code-context-9",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "# IBulkUpdateHost Interface\n\n**Namespace:** WealthLab.Data\n\nThe `IBulkUpdateHost` interface is part of the Historical Data Provider extension API. It provides methods for communicating with WealthLab 8 during a Provider Update operation, allowing providers to report progress and completion status.\n\n## Methods\n\n### BulkUpdateCompleted\n",
    "metadata": {
      "id": "ibulk-update-host",
      "title": "ibulk-update-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/ibulk-update-host.md",
      "chunkIndex": 0,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nNotifies WealthLab 8 that the Historical Provider update operation has completed.\n\n### WriteToBulkUpdateLog\n",
    "metadata": {
      "id": "ibulk-update-host",
      "title": "ibulk-update-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/ibulk-update-host.md",
      "chunkIndex": 1,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nWrites a message to the WealthLab 8 Data Manager Historical Provider update log.\n\n**Parameters:**\n- `msg`: The message to write to the update log\n\n## Usage Examples\n\n### Basic Provider Update\n",
    "metadata": {
      "id": "ibulk-update-host",
      "title": "ibulk-update-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/ibulk-update-host.md",
      "chunkIndex": 2,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n### Progress Reporting\n",
    "metadata": {
      "id": "ibulk-update-host",
      "title": "ibulk-update-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/ibulk-update-host.md",
      "chunkIndex": 3,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n### Error Handling\n",
    "metadata": {
      "id": "ibulk-update-host",
      "title": "ibulk-update-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/ibulk-update-host.md",
      "chunkIndex": 4,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\nThis example demonstrates:\n- Proper update flow control\n- Progress reporting\n- Error handling and logging\n- Completion notification ",
    "metadata": {
      "id": "ibulk-update-host",
      "title": "ibulk-update-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/ibulk-update-host.md",
      "chunkIndex": 5,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "void BulkUpdateCompleted()\n",
    "metadata": {
      "id": "ibulk-update-host",
      "title": "ibulk-update-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/ibulk-update-host.md",
      "chunkIndex": "code-0",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "# IBulkUpdateHost Interface\n\n**Namespace:** WealthLab.Data\n\nThe `IBulkUpdateHost` interface is part of the Historical Data Provider extension API. It provides methods for communicating with WealthLab 8 during a Provider Update operation, allowing providers to report progress and completion status.\n\n## Methods\n\n### BulkUpdateCompleted\n"
    }
  },
  {
    "pageContent": "# IBulkUpdateHost Interface\n\n**Namespace:** WealthLab.Data\n\nThe `IBulkUpdateHost` interface is part of the Historical Data Provider extension API. It provides methods for communicating with WealthLab 8 during a Provider Update operation, allowing providers to report progress and completion status.\n\n## Methods\n\n### BulkUpdateCompleted\n\n\n```csharp\nvoid BulkUpdateCompleted()\n\n```",
    "metadata": {
      "id": "ibulk-update-host",
      "title": "ibulk-update-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/ibulk-update-host.md",
      "chunkIndex": "code-context-0",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "void WriteToBulkUpdateLog(string msg)\n",
    "metadata": {
      "id": "ibulk-update-host",
      "title": "ibulk-update-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/ibulk-update-host.md",
      "chunkIndex": "code-1",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "# IBulkUpdateHost Interface\n\n**Namespace:** WealthLab.Data\n\nThe `IBulkUpdateHost` interface is part of the Historical Data Provider extension API. It provides methods for communicating with WealthLab 8 during a Provider Update operation, allowing providers to report progress and completion status.\n\n## Methods\n\n### BulkUpdateCompleted\n```csharp\nvoid BulkUpdateCompleted()\n```\nNotifies WealthLab 8 that the Historical Provider update operation has completed.\n\n### WriteToBulkUpdateLog\n"
    }
  },
  {
    "pageContent": "# IBulkUpdateHost Interface\n\n**Namespace:** WealthLab.Data\n\nThe `IBulkUpdateHost` interface is part of the Historical Data Provider extension API. It provides methods for communicating with WealthLab 8 during a Provider Update operation, allowing providers to report progress and completion status.\n\n## Methods\n\n### BulkUpdateCompleted\n```csharp\nvoid BulkUpdateCompleted()\n```\nNotifies WealthLab 8 that the Historical Provider update operation has completed.\n\n### WriteToBulkUpdateLog\n\n\n```csharp\nvoid WriteToBulkUpdateLog(string msg)\n\n```",
    "metadata": {
      "id": "ibulk-update-host",
      "title": "ibulk-update-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/ibulk-update-host.md",
      "chunkIndex": "code-context-1",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public class MyHistoricalProvider : ProviderBase\n{\n    public override void Update(IBulkUpdateHost host)\n    {\n        try\n        {\n            // Log start of update\n            host.WriteToBulkUpdateLog(\"Starting data update...\");\n            \n            // Perform update operations\n            UpdateSymbol(\"AAPL\", host);\n            UpdateSymbol(\"MSFT\", host);\n            \n            // Log completion\n            host.WriteToBulkUpdateLog(\"Update completed successfully\");\n            host.BulkUpdateCompleted();\n        }\n        catch (Exception ex)\n        {\n            host.WriteToBulkUpdateLog($\"Error during update: {ex.Message}\");\n            throw;\n        }\n    }\n    \n    private void UpdateSymbol(string symbol, IBulkUpdateHost host)\n    {\n        host.WriteToBulkUpdateLog($\"Updating {symbol}...\");\n        // Update implementation\n    }\n}\n",
    "metadata": {
      "id": "ibulk-update-host",
      "title": "ibulk-update-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/ibulk-update-host.md",
      "chunkIndex": "code-2",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "eration, allowing providers to report progress and completion status.\n\n## Methods\n\n### BulkUpdateCompleted\n```csharp\nvoid BulkUpdateCompleted()\n```\nNotifies WealthLab 8 that the Historical Provider update operation has completed.\n\n### WriteToBulkUpdateLog\n```csharp\nvoid WriteToBulkUpdateLog(string msg)\n```\nWrites a message to the WealthLab 8 Data Manager Historical Provider update log.\n\n**Parameters:**\n- `msg`: The message to write to the update log\n\n## Usage Examples\n\n### Basic Provider Update\n"
    }
  },
  {
    "pageContent": "eration, allowing providers to report progress and completion status.\n\n## Methods\n\n### BulkUpdateCompleted\n```csharp\nvoid BulkUpdateCompleted()\n```\nNotifies WealthLab 8 that the Historical Provider update operation has completed.\n\n### WriteToBulkUpdateLog\n```csharp\nvoid WriteToBulkUpdateLog(string msg)\n```\nWrites a message to the WealthLab 8 Data Manager Historical Provider update log.\n\n**Parameters:**\n- `msg`: The message to write to the update log\n\n## Usage Examples\n\n### Basic Provider Update\n\n\n```csharp\npublic class MyHistoricalProvider : ProviderBase\n{\n    public override void Update(IBulkUpdateHost host)\n    {\n        try\n        {\n            // Log start of update\n            host.WriteToBulkUpdateLog(\"Starting data update...\");\n            \n            // Perform update operations\n            UpdateSymbol(\"AAPL\", host);\n            UpdateSymbol(\"MSFT\", host);\n            \n            // Log completion\n            host.WriteToBulkUpdateLog(\"Update completed successfully\");\n            host.BulkUpdateCompleted();\n        }\n        catch (Exception ex)\n        {\n            host.WriteToBulkUpdateLog($\"Error during update: {ex.Message}\");\n            throw;\n        }\n    }\n    \n    private void UpdateSymbol(string symbol, IBulkUpdateHost host)\n    {\n        host.WriteToBulkUpdateLog($\"Updating {symbol}...\");\n        // Update implementation\n    }\n}\n\n```",
    "metadata": {
      "id": "ibulk-update-host",
      "title": "ibulk-update-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/ibulk-update-host.md",
      "chunkIndex": "code-context-2",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public class ProgressTrackingProvider : ProviderBase\n{\n    public override void Update(IBulkUpdateHost host)\n    {\n        var symbols = new[] { \"AAPL\", \"MSFT\", \"GOOGL\", \"AMZN\" };\n        int total = symbols.Length;\n        \n        host.WriteToBulkUpdateLog($\"Beginning update for {total} symbols\");\n        \n        for (int i = 0; i < symbols.Length; i++)\n        {\n            string symbol = symbols[i];\n            int percent = ((i + 1) * 100) / total;\n            \n            host.WriteToBulkUpdateLog($\"Processing {symbol} ({percent}% complete)\");\n            \n            // Update implementation\n            \n            if (i == symbols.Length - 1)\n            {\n                host.WriteToBulkUpdateLog(\"All symbols processed\");\n                host.BulkUpdateCompleted();\n            }\n        }\n    }\n}\n",
    "metadata": {
      "id": "ibulk-update-host",
      "title": "ibulk-update-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/ibulk-update-host.md",
      "chunkIndex": "code-3",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "  // Log completion\n            host.WriteToBulkUpdateLog(\"Update completed successfully\");\n            host.BulkUpdateCompleted();\n        }\n        catch (Exception ex)\n        {\n            host.WriteToBulkUpdateLog($\"Error during update: {ex.Message}\");\n            throw;\n        }\n    }\n    \n    private void UpdateSymbol(string symbol, IBulkUpdateHost host)\n    {\n        host.WriteToBulkUpdateLog($\"Updating {symbol}...\");\n        // Update implementation\n    }\n}\n```\n\n### Progress Reporting\n"
    }
  },
  {
    "pageContent": "  // Log completion\n            host.WriteToBulkUpdateLog(\"Update completed successfully\");\n            host.BulkUpdateCompleted();\n        }\n        catch (Exception ex)\n        {\n            host.WriteToBulkUpdateLog($\"Error during update: {ex.Message}\");\n            throw;\n        }\n    }\n    \n    private void UpdateSymbol(string symbol, IBulkUpdateHost host)\n    {\n        host.WriteToBulkUpdateLog($\"Updating {symbol}...\");\n        // Update implementation\n    }\n}\n```\n\n### Progress Reporting\n\n\n```csharp\npublic class ProgressTrackingProvider : ProviderBase\n{\n    public override void Update(IBulkUpdateHost host)\n    {\n        var symbols = new[] { \"AAPL\", \"MSFT\", \"GOOGL\", \"AMZN\" };\n        int total = symbols.Length;\n        \n        host.WriteToBulkUpdateLog($\"Beginning update for {total} symbols\");\n        \n        for (int i = 0; i < symbols.Length; i++)\n        {\n            string symbol = symbols[i];\n            int percent = ((i + 1) * 100) / total;\n            \n            host.WriteToBulkUpdateLog($\"Processing {symbol} ({percent}% complete)\");\n            \n            // Update implementation\n            \n            if (i == symbols.Length - 1)\n            {\n                host.WriteToBulkUpdateLog(\"All symbols processed\");\n                host.BulkUpdateCompleted();\n            }\n        }\n    }\n}\n\n```",
    "metadata": {
      "id": "ibulk-update-host",
      "title": "ibulk-update-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/ibulk-update-host.md",
      "chunkIndex": "code-context-3",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public class RobustProvider : ProviderBase\n{\n    public override void Update(IBulkUpdateHost host)\n    {\n        var symbols = GetSymbols();\n        var failedSymbols = new List<string>();\n        \n        foreach (string symbol in symbols)\n        {\n            try\n            {\n                host.WriteToBulkUpdateLog($\"Processing {symbol}\");\n                UpdateSymbol(symbol);\n            }\n            catch (Exception ex)\n            {\n                host.WriteToBulkUpdateLog($\"Error updating {symbol}: {ex.Message}\");\n                failedSymbols.Add(symbol);\n                continue;\n            }\n        }\n        \n        // Report results\n        if (failedSymbols.Any())\n        {\n            host.WriteToBulkUpdateLog($\"Update completed with {failedSymbols.Count} failures:\");\n            foreach (var symbol in failedSymbols)\n            {\n                host.WriteToBulkUpdateLog($\"- Failed: {symbol}\");\n            }\n        }\n        else\n        {\n            host.WriteToBulkUpdateLog(\"Update completed successfully\");\n        }\n        \n        host.BulkUpdateCompleted();\n    }\n}\n",
    "metadata": {
      "id": "ibulk-update-host",
      "title": "ibulk-update-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/ibulk-update-host.md",
      "chunkIndex": "code-4",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "s.Length; i++)\n        {\n            string symbol = symbols[i];\n            int percent = ((i + 1) * 100) / total;\n            \n            host.WriteToBulkUpdateLog($\"Processing {symbol} ({percent}% complete)\");\n            \n            // Update implementation\n            \n            if (i == symbols.Length - 1)\n            {\n                host.WriteToBulkUpdateLog(\"All symbols processed\");\n                host.BulkUpdateCompleted();\n            }\n        }\n    }\n}\n```\n\n### Error Handling\n"
    }
  },
  {
    "pageContent": "s.Length; i++)\n        {\n            string symbol = symbols[i];\n            int percent = ((i + 1) * 100) / total;\n            \n            host.WriteToBulkUpdateLog($\"Processing {symbol} ({percent}% complete)\");\n            \n            // Update implementation\n            \n            if (i == symbols.Length - 1)\n            {\n                host.WriteToBulkUpdateLog(\"All symbols processed\");\n                host.BulkUpdateCompleted();\n            }\n        }\n    }\n}\n```\n\n### Error Handling\n\n\n```csharp\npublic class RobustProvider : ProviderBase\n{\n    public override void Update(IBulkUpdateHost host)\n    {\n        var symbols = GetSymbols();\n        var failedSymbols = new List<string>();\n        \n        foreach (string symbol in symbols)\n        {\n            try\n            {\n                host.WriteToBulkUpdateLog($\"Processing {symbol}\");\n                UpdateSymbol(symbol);\n            }\n            catch (Exception ex)\n            {\n                host.WriteToBulkUpdateLog($\"Error updating {symbol}: {ex.Message}\");\n                failedSymbols.Add(symbol);\n                continue;\n            }\n        }\n        \n        // Report results\n        if (failedSymbols.Any())\n        {\n            host.WriteToBulkUpdateLog($\"Update completed with {failedSymbols.Count} failures:\");\n            foreach (var symbol in failedSymbols)\n            {\n                host.WriteToBulkUpdateLog($\"- Failed: {symbol}\");\n            }\n        }\n        else\n        {\n            host.WriteToBulkUpdateLog(\"Update completed successfully\");\n        }\n        \n        host.BulkUpdateCompleted();\n    }\n}\n\n```",
    "metadata": {
      "id": "ibulk-update-host",
      "title": "ibulk-update-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/ibulk-update-host.md",
      "chunkIndex": "code-context-4",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "# IChart Interface\n\n**Namespace:** WealthLab.WPF\n\nThe `IChart` interface enables communication between WealthLab 8 and charts within `ChildWindow` instances. The `WealthLab.WPF.Chart` class implements this interface by default. When implementing a custom `ChildWindow` in a WealthLab extension that contains a chart, you should override the `Chart` property to return an instance of this interface.\n\n## Methods\n\n### ChartThisSymbol\n",
    "metadata": {
      "id": "ichart",
      "title": "ichart",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/ichart.md",
      "chunkIndex": 0,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nCalled by WealthLab 8 when a user clicks a symbol in the DataSet tree.\n\n**Parameters:**\n- `symbol`: The symbol to chart\n- `ds`: The parent DataSet containing the symbol\n\n### PushKey\n",
    "metadata": {
      "id": "ichart",
      "title": "ichart",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/ichart.md",
      "chunkIndex": 1,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nCalled by WealthLab 8 when the chart is visible and the user presses a key. The default `Chart` class implementation handles:\n- Character input for the symbol entry field\n- Special keystrokes (backspace, control+left/right arrow)\n\n## Usage Examples\n\n### Basic Chart Implementation\n",
    "metadata": {
      "id": "ichart",
      "title": "ichart",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/ichart.md",
      "chunkIndex": 2,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n### Advanced Chart Implementation\n",
    "metadata": {
      "id": "ichart",
      "title": "ichart",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/ichart.md",
      "chunkIndex": 3,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\nThis example demonstrates:\n- Basic chart window implementation\n- Advanced features with data caching\n- Custom keyboard handling\n- Error handling\n- UI state management\n\n### Extension Integration\n",
    "metadata": {
      "id": "ichart",
      "title": "ichart",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/ichart.md",
      "chunkIndex": 4,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\nThis example demonstrates:\n- Registering a custom chart window\n- Integration with WealthLab's extension system ",
    "metadata": {
      "id": "ichart",
      "title": "ichart",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/ichart.md",
      "chunkIndex": 5,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "void ChartThisSymbol(string symbol, DataSet ds)\n",
    "metadata": {
      "id": "ichart",
      "title": "ichart",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/ichart.md",
      "chunkIndex": "code-0",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "# IChart Interface\n\n**Namespace:** WealthLab.WPF\n\nThe `IChart` interface enables communication between WealthLab 8 and charts within `ChildWindow` instances. The `WealthLab.WPF.Chart` class implements this interface by default. When implementing a custom `ChildWindow` in a WealthLab extension that contains a chart, you should override the `Chart` property to return an instance of this interface.\n\n## Methods\n\n### ChartThisSymbol\n"
    }
  },
  {
    "pageContent": "# IChart Interface\n\n**Namespace:** WealthLab.WPF\n\nThe `IChart` interface enables communication between WealthLab 8 and charts within `ChildWindow` instances. The `WealthLab.WPF.Chart` class implements this interface by default. When implementing a custom `ChildWindow` in a WealthLab extension that contains a chart, you should override the `Chart` property to return an instance of this interface.\n\n## Methods\n\n### ChartThisSymbol\n\n\n```csharp\nvoid ChartThisSymbol(string symbol, DataSet ds)\n\n```",
    "metadata": {
      "id": "ichart",
      "title": "ichart",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/ichart.md",
      "chunkIndex": "code-context-0",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "void PushKey(Key key)\n",
    "metadata": {
      "id": "ichart",
      "title": "ichart",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/ichart.md",
      "chunkIndex": "code-1",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": ".Chart` class implements this interface by default. When implementing a custom `ChildWindow` in a WealthLab extension that contains a chart, you should override the `Chart` property to return an instance of this interface.\n\n## Methods\n\n### ChartThisSymbol\n```csharp\nvoid ChartThisSymbol(string symbol, DataSet ds)\n```\nCalled by WealthLab 8 when a user clicks a symbol in the DataSet tree.\n\n**Parameters:**\n- `symbol`: The symbol to chart\n- `ds`: The parent DataSet containing the symbol\n\n### PushKey\n"
    }
  },
  {
    "pageContent": ".Chart` class implements this interface by default. When implementing a custom `ChildWindow` in a WealthLab extension that contains a chart, you should override the `Chart` property to return an instance of this interface.\n\n## Methods\n\n### ChartThisSymbol\n```csharp\nvoid ChartThisSymbol(string symbol, DataSet ds)\n```\nCalled by WealthLab 8 when a user clicks a symbol in the DataSet tree.\n\n**Parameters:**\n- `symbol`: The symbol to chart\n- `ds`: The parent DataSet containing the symbol\n\n### PushKey\n\n\n```csharp\nvoid PushKey(Key key)\n\n```",
    "metadata": {
      "id": "ichart",
      "title": "ichart",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/ichart.md",
      "chunkIndex": "code-context-1",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public class CustomChart : ChildWindow, IChart\n{\n    private Chart _chart;\n    \n    public CustomChart()\n    {\n        _chart = new Chart();\n        Content = _chart;\n    }\n    \n    public void ChartThisSymbol(string symbol, DataSet ds)\n    {\n        // Load and display the symbol data\n        var bars = GetHistory(symbol, ds);\n        _chart.DisplayData(bars);\n    }\n    \n    public void PushKey(Key key)\n    {\n        // Handle keyboard input\n        switch (key)\n        {\n            case Key.Left:\n                if (Keyboard.Modifiers == ModifierKeys.Control)\n                    _chart.ScrollLeft();\n                break;\n                \n            case Key.Right:\n                if (Keyboard.Modifiers == ModifierKeys.Control)\n                    _chart.ScrollRight();\n                break;\n                \n            default:\n                // Pass character to symbol input\n                if (char.IsLetterOrDigit((char)key))\n                    _chart.SymbolInput.Text += (char)key;\n                break;\n        }\n    }\n}\n",
    "metadata": {
      "id": "ichart",
      "title": "ichart",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/ichart.md",
      "chunkIndex": "code-2",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "\nCalled by WealthLab 8 when a user clicks a symbol in the DataSet tree.\n\n**Parameters:**\n- `symbol`: The symbol to chart\n- `ds`: The parent DataSet containing the symbol\n\n### PushKey\n```csharp\nvoid PushKey(Key key)\n```\nCalled by WealthLab 8 when the chart is visible and the user presses a key. The default `Chart` class implementation handles:\n- Character input for the symbol entry field\n- Special keystrokes (backspace, control+left/right arrow)\n\n## Usage Examples\n\n### Basic Chart Implementation\n"
    }
  },
  {
    "pageContent": "\nCalled by WealthLab 8 when a user clicks a symbol in the DataSet tree.\n\n**Parameters:**\n- `symbol`: The symbol to chart\n- `ds`: The parent DataSet containing the symbol\n\n### PushKey\n```csharp\nvoid PushKey(Key key)\n```\nCalled by WealthLab 8 when the chart is visible and the user presses a key. The default `Chart` class implementation handles:\n- Character input for the symbol entry field\n- Special keystrokes (backspace, control+left/right arrow)\n\n## Usage Examples\n\n### Basic Chart Implementation\n\n\n```csharp\npublic class CustomChart : ChildWindow, IChart\n{\n    private Chart _chart;\n    \n    public CustomChart()\n    {\n        _chart = new Chart();\n        Content = _chart;\n    }\n    \n    public void ChartThisSymbol(string symbol, DataSet ds)\n    {\n        // Load and display the symbol data\n        var bars = GetHistory(symbol, ds);\n        _chart.DisplayData(bars);\n    }\n    \n    public void PushKey(Key key)\n    {\n        // Handle keyboard input\n        switch (key)\n        {\n            case Key.Left:\n                if (Keyboard.Modifiers == ModifierKeys.Control)\n                    _chart.ScrollLeft();\n                break;\n                \n            case Key.Right:\n                if (Keyboard.Modifiers == ModifierKeys.Control)\n                    _chart.ScrollRight();\n                break;\n                \n            default:\n                // Pass character to symbol input\n                if (char.IsLetterOrDigit((char)key))\n                    _chart.SymbolInput.Text += (char)key;\n                break;\n        }\n    }\n}\n\n```",
    "metadata": {
      "id": "ichart",
      "title": "ichart",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/ichart.md",
      "chunkIndex": "code-context-2",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public class AdvancedChart : ChildWindow, IChart\n{\n    private readonly Chart _chart;\n    private readonly Dictionary<string, BarHistory> _cachedData;\n    \n    public AdvancedChart()\n    {\n        _chart = new Chart();\n        _cachedData = new Dictionary<string, BarHistory>();\n        \n        InitializeComponents();\n    }\n    \n    public void ChartThisSymbol(string symbol, DataSet ds)\n    {\n        try\n        {\n            // Check cache first\n            if (_cachedData.TryGetValue(symbol, out var cachedBars))\n            {\n                _chart.DisplayData(cachedBars);\n                return;\n            }\n            \n            // Load new data\n            var bars = GetHistory(symbol, ds);\n            \n            // Cache the data\n            _cachedData[symbol] = bars;\n            \n            // Display\n            _chart.DisplayData(bars);\n            \n            // Update UI elements\n            UpdateTitle($\"Chart: {symbol}\");\n            EnableTradingControls(ds.IsTradable(symbol));\n        }\n        catch (Exception ex)\n        {\n            MessageBox.Show($\"Error loading chart for {symbol}: {ex.Message}\");\n        }\n    }\n    \n    public void PushKey(Key key)\n    {\n        // Handle keyboard shortcuts\n        if (Keyboard.Modifiers == ModifierKeys.Control)\n        {\n            switch (key)\n            {\n                case Key.Left:\n                    _chart.ScrollLeft();\n                    break;\n                    \n                case Key.Right:\n                    _chart.ScrollRight();\n                    break;\n                    \n                case Key.Up:\n                    _chart.ZoomIn();\n                    break;\n                    \n                case Key.Down:\n                    _chart.ZoomOut();\n                    break;\n                    \n                case Key.R:\n                    RefreshCurrentSymbol();\n                    break;\n            }\n            return;\n        }\n        \n        // Handle regular input\n        if (char.IsLetterOrDigit((char)key))\n        {\n            _chart.SymbolInput.Text += (char)key;\n            AutoCompleteSymbol();\n        }\n        else if (key == Key.Back && _chart.SymbolInput.Text.Length > 0)\n        {\n            _chart.SymbolInput.Text = _chart.SymbolInput.Text.Substring(0, _chart.SymbolInput.Text.Length - 1);\n        }\n    }\n    \n    private void AutoCompleteSymbol()\n    {\n        // Implement symbol auto-completion logic\n    }\n    \n    private void RefreshCurrentSymbol()\n    {\n        // Implement refresh logic\n    }\n}\n",
    "metadata": {
      "id": "ichart",
      "title": "ichart",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/ichart.md",
      "chunkIndex": "code-3",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "   _chart.ScrollLeft();\n                break;\n                \n            case Key.Right:\n                if (Keyboard.Modifiers == ModifierKeys.Control)\n                    _chart.ScrollRight();\n                break;\n                \n            default:\n                // Pass character to symbol input\n                if (char.IsLetterOrDigit((char)key))\n                    _chart.SymbolInput.Text += (char)key;\n                break;\n        }\n    }\n}\n```\n\n### Advanced Chart Implementation\n"
    }
  },
  {
    "pageContent": "   _chart.ScrollLeft();\n                break;\n                \n            case Key.Right:\n                if (Keyboard.Modifiers == ModifierKeys.Control)\n                    _chart.ScrollRight();\n                break;\n                \n            default:\n                // Pass character to symbol input\n                if (char.IsLetterOrDigit((char)key))\n                    _chart.SymbolInput.Text += (char)key;\n                break;\n        }\n    }\n}\n```\n\n### Advanced Chart Implementation\n\n\n```csharp\npublic class AdvancedChart : ChildWindow, IChart\n{\n    private readonly Chart _chart;\n    private readonly Dictionary<string, BarHistory> _cachedData;\n    \n    public AdvancedChart()\n    {\n        _chart = new Chart();\n        _cachedData = new Dictionary<string, BarHistory>();\n        \n        InitializeComponents();\n    }\n    \n    public void ChartThisSymbol(string symbol, DataSet ds)\n    {\n        try\n        {\n            // Check cache first\n            if (_cachedData.TryGetValue(symbol, out var cachedBars))\n            {\n                _chart.DisplayData(cachedBars);\n                return;\n            }\n            \n            // Load new data\n            var bars = GetHistory(symbol, ds);\n            \n            // Cache the data\n            _cachedData[symbol] = bars;\n            \n            // Display\n            _chart.DisplayData(bars);\n            \n            // Update UI elements\n            UpdateTitle($\"Chart: {symbol}\");\n            EnableTradingControls(ds.IsTradable(symbol));\n        }\n        catch (Exception ex)\n        {\n            MessageBox.Show($\"Error loading chart for {symbol}: {ex.Message}\");\n        }\n    }\n    \n    public void PushKey(Key key)\n    {\n        // Handle keyboard shortcuts\n        if (Keyboard.Modifiers == ModifierKeys.Control)\n        {\n            switch (key)\n            {\n                case Key.Left:\n                    _chart.ScrollLeft();\n                    break;\n                    \n                case Key.Right:\n                    _chart.ScrollRight();\n                    break;\n                    \n                case Key.Up:\n                    _chart.ZoomIn();\n                    break;\n                    \n                case Key.Down:\n                    _chart.ZoomOut();\n                    break;\n                    \n                case Key.R:\n                    RefreshCurrentSymbol();\n                    break;\n            }\n            return;\n        }\n        \n        // Handle regular input\n        if (char.IsLetterOrDigit((char)key))\n        {\n            _chart.SymbolInput.Text += (char)key;\n            AutoCompleteSymbol();\n        }\n        else if (key == Key.Back && _chart.SymbolInput.Text.Length > 0)\n        {\n            _chart.SymbolInput.Text = _chart.SymbolInput.Text.Substring(0, _chart.SymbolInput.Text.Length - 1);\n        }\n    }\n    \n    private void AutoCompleteSymbol()\n    {\n        // Implement symbol auto-completion logic\n    }\n    \n    private void RefreshCurrentSymbol()\n    {\n        // Implement refresh logic\n    }\n}\n\n```",
    "metadata": {
      "id": "ichart",
      "title": "ichart",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/ichart.md",
      "chunkIndex": "code-context-3",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public class CustomExtension : WealthLab.Extension\n{\n    public override void Initialize()\n    {\n        // Register custom chart window\n        RegisterChildWindow(\"CustomChart\", () => new CustomChart());\n    }\n}\n",
    "metadata": {
      "id": "ichart",
      "title": "ichart",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/ichart.md",
      "chunkIndex": "code-4",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "nput.Text = _chart.SymbolInput.Text.Substring(0, _chart.SymbolInput.Text.Length - 1);\n        }\n    }\n    \n    private void AutoCompleteSymbol()\n    {\n        // Implement symbol auto-completion logic\n    }\n    \n    private void RefreshCurrentSymbol()\n    {\n        // Implement refresh logic\n    }\n}\n```\n\nThis example demonstrates:\n- Basic chart window implementation\n- Advanced features with data caching\n- Custom keyboard handling\n- Error handling\n- UI state management\n\n### Extension Integration\n"
    }
  },
  {
    "pageContent": "nput.Text = _chart.SymbolInput.Text.Substring(0, _chart.SymbolInput.Text.Length - 1);\n        }\n    }\n    \n    private void AutoCompleteSymbol()\n    {\n        // Implement symbol auto-completion logic\n    }\n    \n    private void RefreshCurrentSymbol()\n    {\n        // Implement refresh logic\n    }\n}\n```\n\nThis example demonstrates:\n- Basic chart window implementation\n- Advanced features with data caching\n- Custom keyboard handling\n- Error handling\n- UI state management\n\n### Extension Integration\n\n\n```csharp\npublic class CustomExtension : WealthLab.Extension\n{\n    public override void Initialize()\n    {\n        // Register custom chart window\n        RegisterChildWindow(\"CustomChart\", () => new CustomChart());\n    }\n}\n\n```",
    "metadata": {
      "id": "ichart",
      "title": "ichart",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/ichart.md",
      "chunkIndex": "code-context-4",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "# ICustomSettingsEditor Interface\n\n**Namespace:** WealthLab.WPF\n\nThe `ICustomSettingsEditor` interface enables creation of custom settings editors for WealthLab 8 components such as Historical Data Providers or Broker Providers. To implement a custom editor:\n1. Create a WPF `UserControl` that implements this interface\n2. Create a class derived from `ObjectEditorBase` with the same name as your component\n3. Return your editor instance from that class's `GetCustomSettingsEditor` method\n\n## Properties\n\n### ConfigString\n",
    "metadata": {
      "id": "icustom-settings-editor",
      "title": "icustom-settings-editor",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/icustom-settings-editor.md",
      "chunkIndex": 0,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nRepresents the persisted configuration state of the editor.\n\n- **Get**: Should return a string representing the current UI state\n- **Set**: Should initialize the UI based on the provided configuration string\n\n### Host\n",
    "metadata": {
      "id": "icustom-settings-editor",
      "title": "icustom-settings-editor",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/icustom-settings-editor.md",
      "chunkIndex": 1,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nProvides access to the host control containing the editor panel. Call `Host.ConfigChanged()` whenever the user modifies any UI element in your editor.\n\n## Usage Examples\n\n### Basic Settings Editor\n",
    "metadata": {
      "id": "icustom-settings-editor",
      "title": "icustom-settings-editor",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/icustom-settings-editor.md",
      "chunkIndex": 2,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n### Editor Registration\n",
    "metadata": {
      "id": "icustom-settings-editor",
      "title": "icustom-settings-editor",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/icustom-settings-editor.md",
      "chunkIndex": 3,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n### Advanced Settings Editor\n",
    "metadata": {
      "id": "icustom-settings-editor",
      "title": "icustom-settings-editor",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/icustom-settings-editor.md",
      "chunkIndex": 4,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\nThis example demonstrates:\n- Creating a custom settings editor\n- Managing multiple control types\n- Serialization/deserialization of settings\n- Change notification handling\n- Proper editor registration\n\n### Validation Example\n",
    "metadata": {
      "id": "icustom-settings-editor",
      "title": "icustom-settings-editor",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/icustom-settings-editor.md",
      "chunkIndex": 5,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\nThis example demonstrates:\n- Input validation\n- Error reporting\n- Conditional configuration saving ",
    "metadata": {
      "id": "icustom-settings-editor",
      "title": "icustom-settings-editor",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/icustom-settings-editor.md",
      "chunkIndex": 6,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "string ConfigString { get; set; }\n",
    "metadata": {
      "id": "icustom-settings-editor",
      "title": "icustom-settings-editor",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/icustom-settings-editor.md",
      "chunkIndex": "code-0",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "r Interface\n\n**Namespace:** WealthLab.WPF\n\nThe `ICustomSettingsEditor` interface enables creation of custom settings editors for WealthLab 8 components such as Historical Data Providers or Broker Providers. To implement a custom editor:\n1. Create a WPF `UserControl` that implements this interface\n2. Create a class derived from `ObjectEditorBase` with the same name as your component\n3. Return your editor instance from that class's `GetCustomSettingsEditor` method\n\n## Properties\n\n### ConfigString\n"
    }
  },
  {
    "pageContent": "r Interface\n\n**Namespace:** WealthLab.WPF\n\nThe `ICustomSettingsEditor` interface enables creation of custom settings editors for WealthLab 8 components such as Historical Data Providers or Broker Providers. To implement a custom editor:\n1. Create a WPF `UserControl` that implements this interface\n2. Create a class derived from `ObjectEditorBase` with the same name as your component\n3. Return your editor instance from that class's `GetCustomSettingsEditor` method\n\n## Properties\n\n### ConfigString\n\n\n```csharp\nstring ConfigString { get; set; }\n\n```",
    "metadata": {
      "id": "icustom-settings-editor",
      "title": "icustom-settings-editor",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/icustom-settings-editor.md",
      "chunkIndex": "code-context-0",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "ICustomSettingsHost Host { get; }\n",
    "metadata": {
      "id": "icustom-settings-editor",
      "title": "icustom-settings-editor",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/icustom-settings-editor.md",
      "chunkIndex": "code-1",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": " that implements this interface\n2. Create a class derived from `ObjectEditorBase` with the same name as your component\n3. Return your editor instance from that class's `GetCustomSettingsEditor` method\n\n## Properties\n\n### ConfigString\n```csharp\nstring ConfigString { get; set; }\n```\nRepresents the persisted configuration state of the editor.\n\n- **Get**: Should return a string representing the current UI state\n- **Set**: Should initialize the UI based on the provided configuration string\n\n### Host\n"
    }
  },
  {
    "pageContent": " that implements this interface\n2. Create a class derived from `ObjectEditorBase` with the same name as your component\n3. Return your editor instance from that class's `GetCustomSettingsEditor` method\n\n## Properties\n\n### ConfigString\n```csharp\nstring ConfigString { get; set; }\n```\nRepresents the persisted configuration state of the editor.\n\n- **Get**: Should return a string representing the current UI state\n- **Set**: Should initialize the UI based on the provided configuration string\n\n### Host\n\n\n```csharp\nICustomSettingsHost Host { get; }\n\n```",
    "metadata": {
      "id": "icustom-settings-editor",
      "title": "icustom-settings-editor",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/icustom-settings-editor.md",
      "chunkIndex": "code-context-1",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public class MyProviderSettingsEditor : UserControl, ICustomSettingsEditor\n{\n    private TextBox apiKeyBox;\n    private CheckBox enableLoggingBox;\n    \n    public MyProviderSettingsEditor()\n    {\n        InitializeComponents();\n        \n        // Wire up change handlers\n        apiKeyBox.TextChanged += (s, e) => Host?.ConfigChanged();\n        enableLoggingBox.Checked += (s, e) => Host?.ConfigChanged();\n    }\n    \n    public string ConfigString\n    {\n        get\n        {\n            // Serialize settings to string\n            var config = new\n            {\n                ApiKey = apiKeyBox.Text,\n                EnableLogging = enableLoggingBox.IsChecked\n            };\n            return JsonSerializer.Serialize(config);\n        }\n        set\n        {\n            if (string.IsNullOrEmpty(value))\n                return;\n                \n            // Deserialize and populate UI\n            var config = JsonSerializer.Deserialize<dynamic>(value);\n            apiKeyBox.Text = config.ApiKey;\n            enableLoggingBox.IsChecked = config.EnableLogging;\n        }\n    }\n    \n    public ICustomSettingsHost Host { get; private set; }\n    \n    private void InitializeComponents()\n    {\n        var panel = new StackPanel();\n        \n        // API Key input\n        panel.Children.Add(new Label { Content = \"API Key:\" });\n        apiKeyBox = new TextBox();\n        panel.Children.Add(apiKeyBox);\n        \n        // Logging toggle\n        enableLoggingBox = new CheckBox { Content = \"Enable Logging\" };\n        panel.Children.Add(enableLoggingBox);\n        \n        Content = panel;\n    }\n}\n",
    "metadata": {
      "id": "icustom-settings-editor",
      "title": "icustom-settings-editor",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/icustom-settings-editor.md",
      "chunkIndex": "code-2",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "tring ConfigString { get; set; }\n```\nRepresents the persisted configuration state of the editor.\n\n- **Get**: Should return a string representing the current UI state\n- **Set**: Should initialize the UI based on the provided configuration string\n\n### Host\n```csharp\nICustomSettingsHost Host { get; }\n```\nProvides access to the host control containing the editor panel. Call `Host.ConfigChanged()` whenever the user modifies any UI element in your editor.\n\n## Usage Examples\n\n### Basic Settings Editor\n"
    }
  },
  {
    "pageContent": "tring ConfigString { get; set; }\n```\nRepresents the persisted configuration state of the editor.\n\n- **Get**: Should return a string representing the current UI state\n- **Set**: Should initialize the UI based on the provided configuration string\n\n### Host\n```csharp\nICustomSettingsHost Host { get; }\n```\nProvides access to the host control containing the editor panel. Call `Host.ConfigChanged()` whenever the user modifies any UI element in your editor.\n\n## Usage Examples\n\n### Basic Settings Editor\n\n\n```csharp\npublic class MyProviderSettingsEditor : UserControl, ICustomSettingsEditor\n{\n    private TextBox apiKeyBox;\n    private CheckBox enableLoggingBox;\n    \n    public MyProviderSettingsEditor()\n    {\n        InitializeComponents();\n        \n        // Wire up change handlers\n        apiKeyBox.TextChanged += (s, e) => Host?.ConfigChanged();\n        enableLoggingBox.Checked += (s, e) => Host?.ConfigChanged();\n    }\n    \n    public string ConfigString\n    {\n        get\n        {\n            // Serialize settings to string\n            var config = new\n            {\n                ApiKey = apiKeyBox.Text,\n                EnableLogging = enableLoggingBox.IsChecked\n            };\n            return JsonSerializer.Serialize(config);\n        }\n        set\n        {\n            if (string.IsNullOrEmpty(value))\n                return;\n                \n            // Deserialize and populate UI\n            var config = JsonSerializer.Deserialize<dynamic>(value);\n            apiKeyBox.Text = config.ApiKey;\n            enableLoggingBox.IsChecked = config.EnableLogging;\n        }\n    }\n    \n    public ICustomSettingsHost Host { get; private set; }\n    \n    private void InitializeComponents()\n    {\n        var panel = new StackPanel();\n        \n        // API Key input\n        panel.Children.Add(new Label { Content = \"API Key:\" });\n        apiKeyBox = new TextBox();\n        panel.Children.Add(apiKeyBox);\n        \n        // Logging toggle\n        enableLoggingBox = new CheckBox { Content = \"Enable Logging\" };\n        panel.Children.Add(enableLoggingBox);\n        \n        Content = panel;\n    }\n}\n\n```",
    "metadata": {
      "id": "icustom-settings-editor",
      "title": "icustom-settings-editor",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/icustom-settings-editor.md",
      "chunkIndex": "code-context-2",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public class MyProviderEditor : ObjectEditorBase\n{\n    public override string Name => \"MyProvider\";\n    \n    public override FrameworkElement GetCustomSettingsEditor()\n    {\n        return new MyProviderSettingsEditor();\n    }\n}\n",
    "metadata": {
      "id": "icustom-settings-editor",
      "title": "icustom-settings-editor",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/icustom-settings-editor.md",
      "chunkIndex": "code-3",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "private set; }\n    \n    private void InitializeComponents()\n    {\n        var panel = new StackPanel();\n        \n        // API Key input\n        panel.Children.Add(new Label { Content = \"API Key:\" });\n        apiKeyBox = new TextBox();\n        panel.Children.Add(apiKeyBox);\n        \n        // Logging toggle\n        enableLoggingBox = new CheckBox { Content = \"Enable Logging\" };\n        panel.Children.Add(enableLoggingBox);\n        \n        Content = panel;\n    }\n}\n```\n\n### Editor Registration\n"
    }
  },
  {
    "pageContent": "private set; }\n    \n    private void InitializeComponents()\n    {\n        var panel = new StackPanel();\n        \n        // API Key input\n        panel.Children.Add(new Label { Content = \"API Key:\" });\n        apiKeyBox = new TextBox();\n        panel.Children.Add(apiKeyBox);\n        \n        // Logging toggle\n        enableLoggingBox = new CheckBox { Content = \"Enable Logging\" };\n        panel.Children.Add(enableLoggingBox);\n        \n        Content = panel;\n    }\n}\n```\n\n### Editor Registration\n\n\n```csharp\npublic class MyProviderEditor : ObjectEditorBase\n{\n    public override string Name => \"MyProvider\";\n    \n    public override FrameworkElement GetCustomSettingsEditor()\n    {\n        return new MyProviderSettingsEditor();\n    }\n}\n\n```",
    "metadata": {
      "id": "icustom-settings-editor",
      "title": "icustom-settings-editor",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/icustom-settings-editor.md",
      "chunkIndex": "code-context-3",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public class AdvancedProviderSettingsEditor : UserControl, ICustomSettingsEditor\n{\n    private readonly Dictionary<string, Control> _controls;\n    private bool _isInitializing;\n    \n    public AdvancedProviderSettingsEditor()\n    {\n        _controls = new Dictionary<string, Control>();\n        _isInitializing = false;\n        \n        InitializeComponents();\n    }\n    \n    public string ConfigString\n    {\n        get\n        {\n            var settings = new Dictionary<string, object>();\n            \n            foreach (var kvp in _controls)\n            {\n                settings[kvp.Key] = GetControlValue(kvp.Value);\n            }\n            \n            return JsonSerializer.Serialize(settings);\n        }\n        set\n        {\n            if (string.IsNullOrEmpty(value))\n                return;\n                \n            try\n            {\n                _isInitializing = true;\n                var settings = JsonSerializer.Deserialize<Dictionary<string, object>>(value);\n                \n                foreach (var kvp in settings)\n                {\n                    if (_controls.TryGetValue(kvp.Key, out var control))\n                    {\n                        SetControlValue(control, kvp.Value);\n                    }\n                }\n            }\n            finally\n            {\n                _isInitializing = false;\n            }\n        }\n    }\n    \n    public ICustomSettingsHost Host { get; private set; }\n    \n    private void InitializeComponents()\n    {\n        var panel = new StackPanel();\n        \n        // Add various controls\n        AddTextSetting(panel, \"ApiKey\", \"API Key:\");\n        AddPasswordSetting(panel, \"Secret\", \"API Secret:\");\n        AddComboSetting(panel, \"Environment\", \"Environment:\", \n            new[] { \"Production\", \"Sandbox\" });\n        AddNumericSetting(panel, \"Timeout\", \"Timeout (seconds):\", 30);\n        AddCheckboxSetting(panel, \"EnableLogging\", \"Enable Logging\");\n        \n        Content = panel;\n    }\n    \n    private void AddTextSetting(Panel panel, string key, string label)\n    {\n        panel.Children.Add(new Label { Content = label });\n        var textBox = new TextBox();\n        textBox.TextChanged += (s, e) => \n        {\n            if (!_isInitializing)\n                Host?.ConfigChanged();\n        };\n        _controls[key] = textBox;\n        panel.Children.Add(textBox);\n    }\n    \n    private void AddPasswordSetting(Panel panel, string key, string label)\n    {\n        panel.Children.Add(new Label { Content = label });\n        var passwordBox = new PasswordBox();\n        passwordBox.PasswordChanged += (s, e) => \n        {\n            if (!_isInitializing)\n                Host?.ConfigChanged();\n        };\n        _controls[key] = passwordBox;\n        panel.Children.Add(passwordBox);\n    }\n    \n    private object GetControlValue(Control control)\n    {\n        return control switch\n        {\n            TextBox tb => tb.Text,\n            PasswordBox pb => pb.Password,\n            ComboBox cb => cb.SelectedItem,\n            CheckBox chk => chk.IsChecked,\n            NumericUpDown nud => nud.Value,\n            _ => null\n        };\n    }\n    \n    private void SetControlValue(Control control, object value)\n    {\n        switch (control)\n        {\n            case TextBox tb:\n                tb.Text = value?.ToString();\n                break;\n            case PasswordBox pb:\n                pb.Password = value?.ToString();\n                break;\n            case ComboBox cb:\n                cb.SelectedItem = value;\n                break;\n            case CheckBox chk:\n                chk.IsChecked = value as bool?;\n                break;\n            case NumericUpDown nud:\n                nud.Value = Convert.ToDecimal(value);\n                break;\n        }\n    }\n}\n",
    "metadata": {
      "id": "icustom-settings-editor",
      "title": "icustom-settings-editor",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/icustom-settings-editor.md",
      "chunkIndex": "code-4",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": ");\n        \n        // Logging toggle\n        enableLoggingBox = new CheckBox { Content = \"Enable Logging\" };\n        panel.Children.Add(enableLoggingBox);\n        \n        Content = panel;\n    }\n}\n```\n\n### Editor Registration\n```csharp\npublic class MyProviderEditor : ObjectEditorBase\n{\n    public override string Name => \"MyProvider\";\n    \n    public override FrameworkElement GetCustomSettingsEditor()\n    {\n        return new MyProviderSettingsEditor();\n    }\n}\n```\n\n### Advanced Settings Editor\n"
    }
  },
  {
    "pageContent": ");\n        \n        // Logging toggle\n        enableLoggingBox = new CheckBox { Content = \"Enable Logging\" };\n        panel.Children.Add(enableLoggingBox);\n        \n        Content = panel;\n    }\n}\n```\n\n### Editor Registration\n```csharp\npublic class MyProviderEditor : ObjectEditorBase\n{\n    public override string Name => \"MyProvider\";\n    \n    public override FrameworkElement GetCustomSettingsEditor()\n    {\n        return new MyProviderSettingsEditor();\n    }\n}\n```\n\n### Advanced Settings Editor\n\n\n```csharp\npublic class AdvancedProviderSettingsEditor : UserControl, ICustomSettingsEditor\n{\n    private readonly Dictionary<string, Control> _controls;\n    private bool _isInitializing;\n    \n    public AdvancedProviderSettingsEditor()\n    {\n        _controls = new Dictionary<string, Control>();\n        _isInitializing = false;\n        \n        InitializeComponents();\n    }\n    \n    public string ConfigString\n    {\n        get\n        {\n            var settings = new Dictionary<string, object>();\n            \n            foreach (var kvp in _controls)\n            {\n                settings[kvp.Key] = GetControlValue(kvp.Value);\n            }\n            \n            return JsonSerializer.Serialize(settings);\n        }\n        set\n        {\n            if (string.IsNullOrEmpty(value))\n                return;\n                \n            try\n            {\n                _isInitializing = true;\n                var settings = JsonSerializer.Deserialize<Dictionary<string, object>>(value);\n                \n                foreach (var kvp in settings)\n                {\n                    if (_controls.TryGetValue(kvp.Key, out var control))\n                    {\n                        SetControlValue(control, kvp.Value);\n                    }\n                }\n            }\n            finally\n            {\n                _isInitializing = false;\n            }\n        }\n    }\n    \n    public ICustomSettingsHost Host { get; private set; }\n    \n    private void InitializeComponents()\n    {\n        var panel = new StackPanel();\n        \n        // Add various controls\n        AddTextSetting(panel, \"ApiKey\", \"API Key:\");\n        AddPasswordSetting(panel, \"Secret\", \"API Secret:\");\n        AddComboSetting(panel, \"Environment\", \"Environment:\", \n            new[] { \"Production\", \"Sandbox\" });\n        AddNumericSetting(panel, \"Timeout\", \"Timeout (seconds):\", 30);\n        AddCheckboxSetting(panel, \"EnableLogging\", \"Enable Logging\");\n        \n        Content = panel;\n    }\n    \n    private void AddTextSetting(Panel panel, string key, string label)\n    {\n        panel.Children.Add(new Label { Content = label });\n        var textBox = new TextBox();\n        textBox.TextChanged += (s, e) => \n        {\n            if (!_isInitializing)\n                Host?.ConfigChanged();\n        };\n        _controls[key] = textBox;\n        panel.Children.Add(textBox);\n    }\n    \n    private void AddPasswordSetting(Panel panel, string key, string label)\n    {\n        panel.Children.Add(new Label { Content = label });\n        var passwordBox = new PasswordBox();\n        passwordBox.PasswordChanged += (s, e) => \n        {\n            if (!_isInitializing)\n                Host?.ConfigChanged();\n        };\n        _controls[key] = passwordBox;\n        panel.Children.Add(passwordBox);\n    }\n    \n    private object GetControlValue(Control control)\n    {\n        return control switch\n        {\n            TextBox tb => tb.Text,\n            PasswordBox pb => pb.Password,\n            ComboBox cb => cb.SelectedItem,\n            CheckBox chk => chk.IsChecked,\n            NumericUpDown nud => nud.Value,\n            _ => null\n        };\n    }\n    \n    private void SetControlValue(Control control, object value)\n    {\n        switch (control)\n        {\n            case TextBox tb:\n                tb.Text = value?.ToString();\n                break;\n            case PasswordBox pb:\n                pb.Password = value?.ToString();\n                break;\n            case ComboBox cb:\n                cb.SelectedItem = value;\n                break;\n            case CheckBox chk:\n                chk.IsChecked = value as bool?;\n                break;\n            case NumericUpDown nud:\n                nud.Value = Convert.ToDecimal(value);\n                break;\n        }\n    }\n}\n\n```",
    "metadata": {
      "id": "icustom-settings-editor",
      "title": "icustom-settings-editor",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/icustom-settings-editor.md",
      "chunkIndex": "code-context-4",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public class ValidatingSettingsEditor : UserControl, ICustomSettingsEditor\n{\n    private TextBox apiKeyBox;\n    private TextBox endpointBox;\n    private readonly ErrorProvider _errorProvider;\n    \n    public ValidatingSettingsEditor()\n    {\n        _errorProvider = new ErrorProvider();\n        InitializeComponents();\n    }\n    \n    public string ConfigString\n    {\n        get\n        {\n            if (!ValidateSettings())\n                return null;\n                \n            var config = new\n            {\n                ApiKey = apiKeyBox.Text,\n                Endpoint = endpointBox.Text\n            };\n            return JsonSerializer.Serialize(config);\n        }\n        set\n        {\n            if (string.IsNullOrEmpty(value))\n                return;\n                \n            var config = JsonSerializer.Deserialize<dynamic>(value);\n            apiKeyBox.Text = config.ApiKey;\n            endpointBox.Text = config.Endpoint;\n        }\n    }\n    \n    private bool ValidateSettings()\n    {\n        bool isValid = true;\n        \n        // Validate API Key\n        if (string.IsNullOrEmpty(apiKeyBox.Text))\n        {\n            _errorProvider.SetError(apiKeyBox, \"API Key is required\");\n            isValid = false;\n        }\n        else\n        {\n            _errorProvider.SetError(apiKeyBox, null);\n        }\n        \n        // Validate Endpoint\n        if (!Uri.TryCreate(endpointBox.Text, UriKind.Absolute, out _))\n        {\n            _errorProvider.SetError(endpointBox, \"Invalid endpoint URL\");\n            isValid = false;\n        }\n        else\n        {\n            _errorProvider.SetError(endpointBox, null);\n        }\n        \n        return isValid;\n    }\n}\n",
    "metadata": {
      "id": "icustom-settings-editor",
      "title": "icustom-settings-editor",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/icustom-settings-editor.md",
      "chunkIndex": "code-5",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "Item = value;\n                break;\n            case CheckBox chk:\n                chk.IsChecked = value as bool?;\n                break;\n            case NumericUpDown nud:\n                nud.Value = Convert.ToDecimal(value);\n                break;\n        }\n    }\n}\n```\n\nThis example demonstrates:\n- Creating a custom settings editor\n- Managing multiple control types\n- Serialization/deserialization of settings\n- Change notification handling\n- Proper editor registration\n\n### Validation Example\n"
    }
  },
  {
    "pageContent": "Item = value;\n                break;\n            case CheckBox chk:\n                chk.IsChecked = value as bool?;\n                break;\n            case NumericUpDown nud:\n                nud.Value = Convert.ToDecimal(value);\n                break;\n        }\n    }\n}\n```\n\nThis example demonstrates:\n- Creating a custom settings editor\n- Managing multiple control types\n- Serialization/deserialization of settings\n- Change notification handling\n- Proper editor registration\n\n### Validation Example\n\n\n```csharp\npublic class ValidatingSettingsEditor : UserControl, ICustomSettingsEditor\n{\n    private TextBox apiKeyBox;\n    private TextBox endpointBox;\n    private readonly ErrorProvider _errorProvider;\n    \n    public ValidatingSettingsEditor()\n    {\n        _errorProvider = new ErrorProvider();\n        InitializeComponents();\n    }\n    \n    public string ConfigString\n    {\n        get\n        {\n            if (!ValidateSettings())\n                return null;\n                \n            var config = new\n            {\n                ApiKey = apiKeyBox.Text,\n                Endpoint = endpointBox.Text\n            };\n            return JsonSerializer.Serialize(config);\n        }\n        set\n        {\n            if (string.IsNullOrEmpty(value))\n                return;\n                \n            var config = JsonSerializer.Deserialize<dynamic>(value);\n            apiKeyBox.Text = config.ApiKey;\n            endpointBox.Text = config.Endpoint;\n        }\n    }\n    \n    private bool ValidateSettings()\n    {\n        bool isValid = true;\n        \n        // Validate API Key\n        if (string.IsNullOrEmpty(apiKeyBox.Text))\n        {\n            _errorProvider.SetError(apiKeyBox, \"API Key is required\");\n            isValid = false;\n        }\n        else\n        {\n            _errorProvider.SetError(apiKeyBox, null);\n        }\n        \n        // Validate Endpoint\n        if (!Uri.TryCreate(endpointBox.Text, UriKind.Absolute, out _))\n        {\n            _errorProvider.SetError(endpointBox, \"Invalid endpoint URL\");\n            isValid = false;\n        }\n        else\n        {\n            _errorProvider.SetError(endpointBox, null);\n        }\n        \n        return isValid;\n    }\n}\n\n```",
    "metadata": {
      "id": "icustom-settings-editor",
      "title": "icustom-settings-editor",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/icustom-settings-editor.md",
      "chunkIndex": "code-context-5",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "# ICustomSettingsHost Interface\n\n**Namespace:** WealthLab.Data\n\nThe `ICustomSettingsHost` interface enables communication between a `CustomSettingsPanel` and the WealthLab 8 Data Manager. It provides a mechanism for notifying the host about configuration changes made in the user interface.\n\n## Methods\n\n### ConfigChanged\n",
    "metadata": {
      "id": "icustom-settings-host",
      "title": "icustom-settings-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/icustom-settings-host.md",
      "chunkIndex": 0,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nNotifies the WealthLab 8 Data Manager that the configuration has been modified.\n\n**Parameters:**\n- `config`: A string representing the current configuration state\n\n## Usage Examples\n\n### Basic Usage in CustomSettingsPanel\n",
    "metadata": {
      "id": "icustom-settings-host",
      "title": "icustom-settings-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/icustom-settings-host.md",
      "chunkIndex": 1,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n### Advanced Configuration Management\n",
    "metadata": {
      "id": "icustom-settings-host",
      "title": "icustom-settings-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/icustom-settings-host.md",
      "chunkIndex": 2,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n### Validation and Conditional Notification\n",
    "metadata": {
      "id": "icustom-settings-host",
      "title": "icustom-settings-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/icustom-settings-host.md",
      "chunkIndex": 3,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n## Best Practices\n\n1. Always validate configuration before calling `ConfigChanged()`\n2. Use a consistent serialization method (e.g., JSON)\n3. Handle different control types appropriately\n4. Provide clear feedback for invalid configurations\n5. Minimize unnecessary notifications\n\n## Potential Pitfalls\n\n- Avoid calling `ConfigChanged()` during initialization\n- Be careful with recursive event handling\n- Ensure thread-safety in complex scenarios\n- Handle null or empty configuration strings ",
    "metadata": {
      "id": "icustom-settings-host",
      "title": "icustom-settings-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/icustom-settings-host.md",
      "chunkIndex": 4,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "void ConfigChanged(string config)\n",
    "metadata": {
      "id": "icustom-settings-host",
      "title": "icustom-settings-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/icustom-settings-host.md",
      "chunkIndex": "code-0",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "# ICustomSettingsHost Interface\n\n**Namespace:** WealthLab.Data\n\nThe `ICustomSettingsHost` interface enables communication between a `CustomSettingsPanel` and the WealthLab 8 Data Manager. It provides a mechanism for notifying the host about configuration changes made in the user interface.\n\n## Methods\n\n### ConfigChanged\n"
    }
  },
  {
    "pageContent": "# ICustomSettingsHost Interface\n\n**Namespace:** WealthLab.Data\n\nThe `ICustomSettingsHost` interface enables communication between a `CustomSettingsPanel` and the WealthLab 8 Data Manager. It provides a mechanism for notifying the host about configuration changes made in the user interface.\n\n## Methods\n\n### ConfigChanged\n\n\n```csharp\nvoid ConfigChanged(string config)\n\n```",
    "metadata": {
      "id": "icustom-settings-host",
      "title": "icustom-settings-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/icustom-settings-host.md",
      "chunkIndex": "code-context-0",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public class MyProviderSettingsPanel : CustomSettingsPanel\n{\n    private TextBox apiKeyTextBox;\n    private CheckBox enableLoggingCheckBox;\n    \n    public MyProviderSettingsPanel()\n    {\n        // Create UI components\n        apiKeyTextBox = new TextBox();\n        enableLoggingCheckBox = new CheckBox();\n        \n        // Wire up change events\n        apiKeyTextBox.TextChanged += OnConfigurationChanged;\n        enableLoggingCheckBox.Checked += OnConfigurationChanged;\n        enableLoggingCheckBox.Unchecked += OnConfigurationChanged;\n    }\n    \n    private void OnConfigurationChanged(object sender, EventArgs e)\n    {\n        // Notify host of configuration change\n        SettingsHost?.ConfigChanged(GetConfigFromUI());\n    }\n    \n    public override string GetConfigFromUI()\n    {\n        // Serialize current UI state to configuration string\n        var config = new\n        {\n            ApiKey = apiKeyTextBox.Text,\n            EnableLogging = enableLoggingCheckBox.IsChecked\n        };\n        \n        return JsonSerializer.Serialize(config);\n    }\n}\n",
    "metadata": {
      "id": "icustom-settings-host",
      "title": "icustom-settings-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/icustom-settings-host.md",
      "chunkIndex": "code-1",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "terface enables communication between a `CustomSettingsPanel` and the WealthLab 8 Data Manager. It provides a mechanism for notifying the host about configuration changes made in the user interface.\n\n## Methods\n\n### ConfigChanged\n```csharp\nvoid ConfigChanged(string config)\n```\nNotifies the WealthLab 8 Data Manager that the configuration has been modified.\n\n**Parameters:**\n- `config`: A string representing the current configuration state\n\n## Usage Examples\n\n### Basic Usage in CustomSettingsPanel\n"
    }
  },
  {
    "pageContent": "terface enables communication between a `CustomSettingsPanel` and the WealthLab 8 Data Manager. It provides a mechanism for notifying the host about configuration changes made in the user interface.\n\n## Methods\n\n### ConfigChanged\n```csharp\nvoid ConfigChanged(string config)\n```\nNotifies the WealthLab 8 Data Manager that the configuration has been modified.\n\n**Parameters:**\n- `config`: A string representing the current configuration state\n\n## Usage Examples\n\n### Basic Usage in CustomSettingsPanel\n\n\n```csharp\npublic class MyProviderSettingsPanel : CustomSettingsPanel\n{\n    private TextBox apiKeyTextBox;\n    private CheckBox enableLoggingCheckBox;\n    \n    public MyProviderSettingsPanel()\n    {\n        // Create UI components\n        apiKeyTextBox = new TextBox();\n        enableLoggingCheckBox = new CheckBox();\n        \n        // Wire up change events\n        apiKeyTextBox.TextChanged += OnConfigurationChanged;\n        enableLoggingCheckBox.Checked += OnConfigurationChanged;\n        enableLoggingCheckBox.Unchecked += OnConfigurationChanged;\n    }\n    \n    private void OnConfigurationChanged(object sender, EventArgs e)\n    {\n        // Notify host of configuration change\n        SettingsHost?.ConfigChanged(GetConfigFromUI());\n    }\n    \n    public override string GetConfigFromUI()\n    {\n        // Serialize current UI state to configuration string\n        var config = new\n        {\n            ApiKey = apiKeyTextBox.Text,\n            EnableLogging = enableLoggingCheckBox.IsChecked\n        };\n        \n        return JsonSerializer.Serialize(config);\n    }\n}\n\n```",
    "metadata": {
      "id": "icustom-settings-host",
      "title": "icustom-settings-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/icustom-settings-host.md",
      "chunkIndex": "code-context-1",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public class ComplexProviderSettingsPanel : CustomSettingsPanel\n{\n    private Dictionary<string, Control> _configControls;\n    \n    public ComplexProviderSettingsPanel()\n    {\n        _configControls = new Dictionary<string, Control>();\n        InitializeComponents();\n    }\n    \n    private void InitializeComponents()\n    {\n        // Create and wire up various configuration controls\n        AddTextBoxSetting(\"ApiKey\", \"API Key\");\n        AddComboBoxSetting(\"Environment\", \"Environment\", \n            new[] { \"Production\", \"Staging\", \"Development\" });\n        AddNumericSetting(\"Timeout\", \"Connection Timeout\");\n        \n        // Add change handlers to all controls\n        foreach (var control in _configControls.Values)\n        {\n            if (control is TextBox tb)\n                tb.TextChanged += OnConfigurationChanged;\n            else if (control is ComboBox cb)\n                cb.SelectionChanged += OnConfigurationChanged;\n            // Add more control type handlers as needed\n        }\n    }\n    \n    private void OnConfigurationChanged(object sender, EventArgs e)\n    {\n        // Validate and notify host\n        string config = GetConfigFromUI();\n        if (!string.IsNullOrEmpty(config))\n        {\n            SettingsHost?.ConfigChanged(config);\n        }\n    }\n    \n    public override string GetConfigFromUI()\n    {\n        var config = new Dictionary<string, object>();\n        \n        foreach (var kvp in _configControls)\n        {\n            config[kvp.Key] = GetControlValue(kvp.Value);\n        }\n        \n        return JsonSerializer.Serialize(config);\n    }\n    \n    private object GetControlValue(Control control)\n    {\n        return control switch\n        {\n            TextBox tb => tb.Text,\n            ComboBox cb => cb.SelectedItem,\n            NumericUpDown nud => nud.Value,\n            CheckBox chk => chk.IsChecked,\n            _ => null\n        };\n    }\n}\n",
    "metadata": {
      "id": "icustom-settings-host",
      "title": "icustom-settings-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/icustom-settings-host.md",
      "chunkIndex": "code-2",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "entArgs e)\n    {\n        // Notify host of configuration change\n        SettingsHost?.ConfigChanged(GetConfigFromUI());\n    }\n    \n    public override string GetConfigFromUI()\n    {\n        // Serialize current UI state to configuration string\n        var config = new\n        {\n            ApiKey = apiKeyTextBox.Text,\n            EnableLogging = enableLoggingCheckBox.IsChecked\n        };\n        \n        return JsonSerializer.Serialize(config);\n    }\n}\n```\n\n### Advanced Configuration Management\n"
    }
  },
  {
    "pageContent": "entArgs e)\n    {\n        // Notify host of configuration change\n        SettingsHost?.ConfigChanged(GetConfigFromUI());\n    }\n    \n    public override string GetConfigFromUI()\n    {\n        // Serialize current UI state to configuration string\n        var config = new\n        {\n            ApiKey = apiKeyTextBox.Text,\n            EnableLogging = enableLoggingCheckBox.IsChecked\n        };\n        \n        return JsonSerializer.Serialize(config);\n    }\n}\n```\n\n### Advanced Configuration Management\n\n\n```csharp\npublic class ComplexProviderSettingsPanel : CustomSettingsPanel\n{\n    private Dictionary<string, Control> _configControls;\n    \n    public ComplexProviderSettingsPanel()\n    {\n        _configControls = new Dictionary<string, Control>();\n        InitializeComponents();\n    }\n    \n    private void InitializeComponents()\n    {\n        // Create and wire up various configuration controls\n        AddTextBoxSetting(\"ApiKey\", \"API Key\");\n        AddComboBoxSetting(\"Environment\", \"Environment\", \n            new[] { \"Production\", \"Staging\", \"Development\" });\n        AddNumericSetting(\"Timeout\", \"Connection Timeout\");\n        \n        // Add change handlers to all controls\n        foreach (var control in _configControls.Values)\n        {\n            if (control is TextBox tb)\n                tb.TextChanged += OnConfigurationChanged;\n            else if (control is ComboBox cb)\n                cb.SelectionChanged += OnConfigurationChanged;\n            // Add more control type handlers as needed\n        }\n    }\n    \n    private void OnConfigurationChanged(object sender, EventArgs e)\n    {\n        // Validate and notify host\n        string config = GetConfigFromUI();\n        if (!string.IsNullOrEmpty(config))\n        {\n            SettingsHost?.ConfigChanged(config);\n        }\n    }\n    \n    public override string GetConfigFromUI()\n    {\n        var config = new Dictionary<string, object>();\n        \n        foreach (var kvp in _configControls)\n        {\n            config[kvp.Key] = GetControlValue(kvp.Value);\n        }\n        \n        return JsonSerializer.Serialize(config);\n    }\n    \n    private object GetControlValue(Control control)\n    {\n        return control switch\n        {\n            TextBox tb => tb.Text,\n            ComboBox cb => cb.SelectedItem,\n            NumericUpDown nud => nud.Value,\n            CheckBox chk => chk.IsChecked,\n            _ => null\n        };\n    }\n}\n\n```",
    "metadata": {
      "id": "icustom-settings-host",
      "title": "icustom-settings-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/icustom-settings-host.md",
      "chunkIndex": "code-context-2",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public class SecureProviderSettingsPanel : CustomSettingsPanel\n{\n    private TextBox apiKeyTextBox;\n    private TextBox endpointTextBox;\n    \n    public SecureProviderSettingsPanel()\n    {\n        InitializeComponents();\n    }\n    \n    private void InitializeComponents()\n    {\n        apiKeyTextBox = new TextBox();\n        endpointTextBox = new TextBox();\n        \n        // Add change handlers\n        apiKeyTextBox.TextChanged += ValidateAndNotify;\n        endpointTextBox.TextChanged += ValidateAndNotify;\n    }\n    \n    private void ValidateAndNotify(object sender, EventArgs e)\n    {\n        // Perform validation before notifying\n        if (ValidateSettings())\n        {\n            string config = GetConfigFromUI();\n            SettingsHost?.ConfigChanged(config);\n        }\n    }\n    \n    private bool ValidateSettings()\n    {\n        bool isValid = true;\n        \n        // Validate API Key\n        if (string.IsNullOrWhiteSpace(apiKeyTextBox.Text))\n        {\n            // Show error or set validation state\n            isValid = false;\n        }\n        \n        // Validate Endpoint\n        if (!Uri.TryCreate(endpointTextBox.Text, UriKind.Absolute, out _))\n        {\n            // Show error or set validation state\n            isValid = false;\n        }\n        \n        return isValid;\n    }\n    \n    public override string GetConfigFromUI()\n    {\n        return JsonSerializer.Serialize(new\n        {\n            ApiKey = apiKeyTextBox.Text,\n            Endpoint = endpointTextBox.Text\n        });\n    }\n}\n",
    "metadata": {
      "id": "icustom-settings-host",
      "title": "icustom-settings-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/icustom-settings-host.md",
      "chunkIndex": "code-3",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "       {\n            config[kvp.Key] = GetControlValue(kvp.Value);\n        }\n        \n        return JsonSerializer.Serialize(config);\n    }\n    \n    private object GetControlValue(Control control)\n    {\n        return control switch\n        {\n            TextBox tb => tb.Text,\n            ComboBox cb => cb.SelectedItem,\n            NumericUpDown nud => nud.Value,\n            CheckBox chk => chk.IsChecked,\n            _ => null\n        };\n    }\n}\n```\n\n### Validation and Conditional Notification\n"
    }
  },
  {
    "pageContent": "       {\n            config[kvp.Key] = GetControlValue(kvp.Value);\n        }\n        \n        return JsonSerializer.Serialize(config);\n    }\n    \n    private object GetControlValue(Control control)\n    {\n        return control switch\n        {\n            TextBox tb => tb.Text,\n            ComboBox cb => cb.SelectedItem,\n            NumericUpDown nud => nud.Value,\n            CheckBox chk => chk.IsChecked,\n            _ => null\n        };\n    }\n}\n```\n\n### Validation and Conditional Notification\n\n\n```csharp\npublic class SecureProviderSettingsPanel : CustomSettingsPanel\n{\n    private TextBox apiKeyTextBox;\n    private TextBox endpointTextBox;\n    \n    public SecureProviderSettingsPanel()\n    {\n        InitializeComponents();\n    }\n    \n    private void InitializeComponents()\n    {\n        apiKeyTextBox = new TextBox();\n        endpointTextBox = new TextBox();\n        \n        // Add change handlers\n        apiKeyTextBox.TextChanged += ValidateAndNotify;\n        endpointTextBox.TextChanged += ValidateAndNotify;\n    }\n    \n    private void ValidateAndNotify(object sender, EventArgs e)\n    {\n        // Perform validation before notifying\n        if (ValidateSettings())\n        {\n            string config = GetConfigFromUI();\n            SettingsHost?.ConfigChanged(config);\n        }\n    }\n    \n    private bool ValidateSettings()\n    {\n        bool isValid = true;\n        \n        // Validate API Key\n        if (string.IsNullOrWhiteSpace(apiKeyTextBox.Text))\n        {\n            // Show error or set validation state\n            isValid = false;\n        }\n        \n        // Validate Endpoint\n        if (!Uri.TryCreate(endpointTextBox.Text, UriKind.Absolute, out _))\n        {\n            // Show error or set validation state\n            isValid = false;\n        }\n        \n        return isValid;\n    }\n    \n    public override string GetConfigFromUI()\n    {\n        return JsonSerializer.Serialize(new\n        {\n            ApiKey = apiKeyTextBox.Text,\n            Endpoint = endpointTextBox.Text\n        });\n    }\n}\n\n```",
    "metadata": {
      "id": "icustom-settings-host",
      "title": "icustom-settings-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/icustom-settings-host.md",
      "chunkIndex": "code-context-3",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "# IHost Interface\n\n**Namespace:** WealthLab.Core\n\nThe `IHost` interface provides access to core WealthLab 8 environment services and utilities. You can access the singleton instance through `WLHost.Instance`.\n\n## Logging and Messaging Methods\n\n### AddLogItem\n",
    "metadata": {
      "id": "ihost",
      "title": "ihost",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/ihost.md",
      "chunkIndex": 0,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nLogs a status update or exception to WealthLab's status bar and log viewer.\n\n**Parameters:**\n- `senderName`: Name of the extension or component\n- `msg`: Message to log\n- `color`: Color indicator for the log entry\n- `ex`: Optional exception details\n- `sender`: Optional sender instance (used primarily for streaming providers)\n\n### AddLogItemOrders\n",
    "metadata": {
      "id": "ihost",
      "title": "ihost",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/ihost.md",
      "chunkIndex": 1,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nLogs broker-related messages to the Order Manager and log viewer.\n\n## Environment and System Information\n\n### AppFolder\n",
    "metadata": {
      "id": "ihost",
      "title": "ihost",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/ihost.md",
      "chunkIndex": 2,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the WealthLab 8 installation directory.\n\n### DataFolder\n",
    "metadata": {
      "id": "ihost",
      "title": "ihost",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/ihost.md",
      "chunkIndex": 3,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the WealthLab 8 user data directory.\n\n### LocalUserName\n",
    "metadata": {
      "id": "ihost",
      "title": "ihost",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/ihost.md",
      "chunkIndex": 4,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the current user's name.\n\n### WLBuildNumber\n",
    "metadata": {
      "id": "ihost",
      "title": "ihost",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/ihost.md",
      "chunkIndex": 5,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the current WealthLab 8 build number.\n\n## Configuration and Settings\n\n### ExpertMode\n",
    "metadata": {
      "id": "ihost",
      "title": "ihost",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/ihost.md",
      "chunkIndex": 6,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nIndicates if WealthLab is running in Expert Mode.\n\n### OfflineMode\n",
    "metadata": {
      "id": "ihost",
      "title": "ihost",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/ihost.md",
      "chunkIndex": 7,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nIndicates if WealthLab is running in offline mode.\n\n### Settings\n",
    "metadata": {
      "id": "ihost",
      "title": "ihost",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/ihost.md",
      "chunkIndex": 8,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nProvides access to WealthLab settings management.\n\n## Data and Resource Management\n\n### DataSets\n",
    "metadata": {
      "id": "ihost",
      "title": "ihost",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/ihost.md",
      "chunkIndex": 9,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns a list of available DataSets.\n\n### FindDataSet\n",
    "metadata": {
      "id": "ihost",
      "title": "ihost",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/ihost.md",
      "chunkIndex": 10,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nSearches for a DataSet by name.\n\n### FindMarket\n",
    "metadata": {
      "id": "ihost",
      "title": "ihost",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/ihost.md",
      "chunkIndex": 11,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns market details for a given symbol.\n\n## Historical Data Retrieval\n\n### GetHistory\n",
    "metadata": {
      "id": "ihost",
      "title": "ihost",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/ihost.md",
      "chunkIndex": 12,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nRetrieves historical price data for a symbol.\n\n### GetHistories\n",
    "metadata": {
      "id": "ihost",
      "title": "ihost",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/ihost.md",
      "chunkIndex": 13,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nRetrieves historical price data for multiple symbols.\n\n## User Interaction Methods\n\n### DisplayMessage\n",
    "metadata": {
      "id": "ihost",
      "title": "ihost",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/ihost.md",
      "chunkIndex": 14,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nDisplays a message box to the user.\n\n### ConfigureItem\n",
    "metadata": {
      "id": "ihost",
      "title": "ihost",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/ihost.md",
      "chunkIndex": 15,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nShows a configuration dialog for a configurable object.\n\n### ConfigureParameters\n",
    "metadata": {
      "id": "ihost",
      "title": "ihost",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/ihost.md",
      "chunkIndex": 16,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nShows a configuration dialog for a parameter list.\n\n### ShowWaitStatus\n",
    "metadata": {
      "id": "ihost",
      "title": "ihost",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/ihost.md",
      "chunkIndex": 17,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nToggles hourglass/arrow cursor.\n\n## Extension and Platform Support\n\n### ExecutePlatformMethod\n",
    "metadata": {
      "id": "ihost",
      "title": "ihost",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/ihost.md",
      "chunkIndex": 18,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nExecutes platform-specific methods for cross-platform extensions.\n\n### InjectSourceCodeCompilerReferences\n",
    "metadata": {
      "id": "ihost",
      "title": "ihost",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/ihost.md",
      "chunkIndex": 19,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nAdds assembly references for dynamic source code compilation.\n\n## Usage Examples\n\n### Logging\n",
    "metadata": {
      "id": "ihost",
      "title": "ihost",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/ihost.md",
      "chunkIndex": 20,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n### Data Retrieval\n",
    "metadata": {
      "id": "ihost",
      "title": "ihost",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/ihost.md",
      "chunkIndex": 21,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n### Configuration\n",
    "metadata": {
      "id": "ihost",
      "title": "ihost",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/ihost.md",
      "chunkIndex": 22,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n### Cross-Platform Method Execution\n",
    "metadata": {
      "id": "ihost",
      "title": "ihost",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/ihost.md",
      "chunkIndex": 23,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n## Best Practices\n\n1. Use `WLHost.Instance` for accessing system services\n2. Log important events and errors\n3. Handle exceptions gracefully\n4. Use platform-specific methods carefully\n5. Respect user's Expert and Offline mode settings ",
    "metadata": {
      "id": "ihost",
      "title": "ihost",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/ihost.md",
      "chunkIndex": 24,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "void AddLogItem(\n    string senderName, \n    string msg, \n    WLColor color, \n    Exception ex = null, \n    object sender = null\n)\n",
    "metadata": {
      "id": "ihost",
      "title": "ihost",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/ihost.md",
      "chunkIndex": "code-0",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "# IHost Interface\n\n**Namespace:** WealthLab.Core\n\nThe `IHost` interface provides access to core WealthLab 8 environment services and utilities. You can access the singleton instance through `WLHost.Instance`.\n\n## Logging and Messaging Methods\n\n### AddLogItem\n"
    }
  },
  {
    "pageContent": "# IHost Interface\n\n**Namespace:** WealthLab.Core\n\nThe `IHost` interface provides access to core WealthLab 8 environment services and utilities. You can access the singleton instance through `WLHost.Instance`.\n\n## Logging and Messaging Methods\n\n### AddLogItem\n\n\n```csharp\nvoid AddLogItem(\n    string senderName, \n    string msg, \n    WLColor color, \n    Exception ex = null, \n    object sender = null\n)\n\n```",
    "metadata": {
      "id": "ihost",
      "title": "ihost",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/ihost.md",
      "chunkIndex": "code-context-0",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "void AddLogItemOrders(\n    string senderName, \n    string msg, \n    WLColor color, \n    Exception ex = null\n)\n",
    "metadata": {
      "id": "ihost",
      "title": "ihost",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/ihost.md",
      "chunkIndex": "code-1",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ogItem\n```csharp\nvoid AddLogItem(\n    string senderName, \n    string msg, \n    WLColor color, \n    Exception ex = null, \n    object sender = null\n)\n```\nLogs a status update or exception to WealthLab's status bar and log viewer.\n\n**Parameters:**\n- `senderName`: Name of the extension or component\n- `msg`: Message to log\n- `color`: Color indicator for the log entry\n- `ex`: Optional exception details\n- `sender`: Optional sender instance (used primarily for streaming providers)\n\n### AddLogItemOrders\n"
    }
  },
  {
    "pageContent": "ogItem\n```csharp\nvoid AddLogItem(\n    string senderName, \n    string msg, \n    WLColor color, \n    Exception ex = null, \n    object sender = null\n)\n```\nLogs a status update or exception to WealthLab's status bar and log viewer.\n\n**Parameters:**\n- `senderName`: Name of the extension or component\n- `msg`: Message to log\n- `color`: Color indicator for the log entry\n- `ex`: Optional exception details\n- `sender`: Optional sender instance (used primarily for streaming providers)\n\n### AddLogItemOrders\n\n\n```csharp\nvoid AddLogItemOrders(\n    string senderName, \n    string msg, \n    WLColor color, \n    Exception ex = null\n)\n\n```",
    "metadata": {
      "id": "ihost",
      "title": "ihost",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/ihost.md",
      "chunkIndex": "code-context-1",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "string AppFolder\n",
    "metadata": {
      "id": "ihost",
      "title": "ihost",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/ihost.md",
      "chunkIndex": "code-2",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "\n- `senderName`: Name of the extension or component\n- `msg`: Message to log\n- `color`: Color indicator for the log entry\n- `ex`: Optional exception details\n- `sender`: Optional sender instance (used primarily for streaming providers)\n\n### AddLogItemOrders\n```csharp\nvoid AddLogItemOrders(\n    string senderName, \n    string msg, \n    WLColor color, \n    Exception ex = null\n)\n```\nLogs broker-related messages to the Order Manager and log viewer.\n\n## Environment and System Information\n\n### AppFolder\n"
    }
  },
  {
    "pageContent": "\n- `senderName`: Name of the extension or component\n- `msg`: Message to log\n- `color`: Color indicator for the log entry\n- `ex`: Optional exception details\n- `sender`: Optional sender instance (used primarily for streaming providers)\n\n### AddLogItemOrders\n```csharp\nvoid AddLogItemOrders(\n    string senderName, \n    string msg, \n    WLColor color, \n    Exception ex = null\n)\n```\nLogs broker-related messages to the Order Manager and log viewer.\n\n## Environment and System Information\n\n### AppFolder\n\n\n```csharp\nstring AppFolder\n\n```",
    "metadata": {
      "id": "ihost",
      "title": "ihost",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/ihost.md",
      "chunkIndex": "code-context-2",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "string DataFolder\n",
    "metadata": {
      "id": "ihost",
      "title": "ihost",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/ihost.md",
      "chunkIndex": "code-3",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "dicator for the log entry\n- `ex`: Optional exception details\n- `sender`: Optional sender instance (used primarily for streaming providers)\n\n### AddLogItemOrders\n```csharp\nvoid AddLogItemOrders(\n    string senderName, \n    string msg, \n    WLColor color, \n    Exception ex = null\n)\n```\nLogs broker-related messages to the Order Manager and log viewer.\n\n## Environment and System Information\n\n### AppFolder\n```csharp\nstring AppFolder\n```\nReturns the WealthLab 8 installation directory.\n\n### DataFolder\n"
    }
  },
  {
    "pageContent": "dicator for the log entry\n- `ex`: Optional exception details\n- `sender`: Optional sender instance (used primarily for streaming providers)\n\n### AddLogItemOrders\n```csharp\nvoid AddLogItemOrders(\n    string senderName, \n    string msg, \n    WLColor color, \n    Exception ex = null\n)\n```\nLogs broker-related messages to the Order Manager and log viewer.\n\n## Environment and System Information\n\n### AppFolder\n```csharp\nstring AppFolder\n```\nReturns the WealthLab 8 installation directory.\n\n### DataFolder\n\n\n```csharp\nstring DataFolder\n\n```",
    "metadata": {
      "id": "ihost",
      "title": "ihost",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/ihost.md",
      "chunkIndex": "code-context-3",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "string LocalUserName\n",
    "metadata": {
      "id": "ihost",
      "title": "ihost",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/ihost.md",
      "chunkIndex": "code-4",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "e (used primarily for streaming providers)\n\n### AddLogItemOrders\n```csharp\nvoid AddLogItemOrders(\n    string senderName, \n    string msg, \n    WLColor color, \n    Exception ex = null\n)\n```\nLogs broker-related messages to the Order Manager and log viewer.\n\n## Environment and System Information\n\n### AppFolder\n```csharp\nstring AppFolder\n```\nReturns the WealthLab 8 installation directory.\n\n### DataFolder\n```csharp\nstring DataFolder\n```\nReturns the WealthLab 8 user data directory.\n\n### LocalUserName\n"
    }
  },
  {
    "pageContent": "e (used primarily for streaming providers)\n\n### AddLogItemOrders\n```csharp\nvoid AddLogItemOrders(\n    string senderName, \n    string msg, \n    WLColor color, \n    Exception ex = null\n)\n```\nLogs broker-related messages to the Order Manager and log viewer.\n\n## Environment and System Information\n\n### AppFolder\n```csharp\nstring AppFolder\n```\nReturns the WealthLab 8 installation directory.\n\n### DataFolder\n```csharp\nstring DataFolder\n```\nReturns the WealthLab 8 user data directory.\n\n### LocalUserName\n\n\n```csharp\nstring LocalUserName\n\n```",
    "metadata": {
      "id": "ihost",
      "title": "ihost",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/ihost.md",
      "chunkIndex": "code-context-4",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "int WLBuildNumber\n",
    "metadata": {
      "id": "ihost",
      "title": "ihost",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/ihost.md",
      "chunkIndex": "code-5",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "temOrders(\n    string senderName, \n    string msg, \n    WLColor color, \n    Exception ex = null\n)\n```\nLogs broker-related messages to the Order Manager and log viewer.\n\n## Environment and System Information\n\n### AppFolder\n```csharp\nstring AppFolder\n```\nReturns the WealthLab 8 installation directory.\n\n### DataFolder\n```csharp\nstring DataFolder\n```\nReturns the WealthLab 8 user data directory.\n\n### LocalUserName\n```csharp\nstring LocalUserName\n```\nReturns the current user's name.\n\n### WLBuildNumber\n"
    }
  },
  {
    "pageContent": "temOrders(\n    string senderName, \n    string msg, \n    WLColor color, \n    Exception ex = null\n)\n```\nLogs broker-related messages to the Order Manager and log viewer.\n\n## Environment and System Information\n\n### AppFolder\n```csharp\nstring AppFolder\n```\nReturns the WealthLab 8 installation directory.\n\n### DataFolder\n```csharp\nstring DataFolder\n```\nReturns the WealthLab 8 user data directory.\n\n### LocalUserName\n```csharp\nstring LocalUserName\n```\nReturns the current user's name.\n\n### WLBuildNumber\n\n\n```csharp\nint WLBuildNumber\n\n```",
    "metadata": {
      "id": "ihost",
      "title": "ihost",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/ihost.md",
      "chunkIndex": "code-context-5",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "bool ExpertMode\n",
    "metadata": {
      "id": "ihost",
      "title": "ihost",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/ihost.md",
      "chunkIndex": "code-6",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "sages to the Order Manager and log viewer.\n\n## Environment and System Information\n\n### AppFolder\n```csharp\nstring AppFolder\n```\nReturns the WealthLab 8 installation directory.\n\n### DataFolder\n```csharp\nstring DataFolder\n```\nReturns the WealthLab 8 user data directory.\n\n### LocalUserName\n```csharp\nstring LocalUserName\n```\nReturns the current user's name.\n\n### WLBuildNumber\n```csharp\nint WLBuildNumber\n```\nReturns the current WealthLab 8 build number.\n\n## Configuration and Settings\n\n### ExpertMode\n"
    }
  },
  {
    "pageContent": "sages to the Order Manager and log viewer.\n\n## Environment and System Information\n\n### AppFolder\n```csharp\nstring AppFolder\n```\nReturns the WealthLab 8 installation directory.\n\n### DataFolder\n```csharp\nstring DataFolder\n```\nReturns the WealthLab 8 user data directory.\n\n### LocalUserName\n```csharp\nstring LocalUserName\n```\nReturns the current user's name.\n\n### WLBuildNumber\n```csharp\nint WLBuildNumber\n```\nReturns the current WealthLab 8 build number.\n\n## Configuration and Settings\n\n### ExpertMode\n\n\n```csharp\nbool ExpertMode\n\n```",
    "metadata": {
      "id": "ihost",
      "title": "ihost",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/ihost.md",
      "chunkIndex": "code-context-6",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "bool OfflineMode\n",
    "metadata": {
      "id": "ihost",
      "title": "ihost",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/ihost.md",
      "chunkIndex": "code-7",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "```csharp\nstring AppFolder\n```\nReturns the WealthLab 8 installation directory.\n\n### DataFolder\n```csharp\nstring DataFolder\n```\nReturns the WealthLab 8 user data directory.\n\n### LocalUserName\n```csharp\nstring LocalUserName\n```\nReturns the current user's name.\n\n### WLBuildNumber\n```csharp\nint WLBuildNumber\n```\nReturns the current WealthLab 8 build number.\n\n## Configuration and Settings\n\n### ExpertMode\n```csharp\nbool ExpertMode\n```\nIndicates if WealthLab is running in Expert Mode.\n\n### OfflineMode\n"
    }
  },
  {
    "pageContent": "```csharp\nstring AppFolder\n```\nReturns the WealthLab 8 installation directory.\n\n### DataFolder\n```csharp\nstring DataFolder\n```\nReturns the WealthLab 8 user data directory.\n\n### LocalUserName\n```csharp\nstring LocalUserName\n```\nReturns the current user's name.\n\n### WLBuildNumber\n```csharp\nint WLBuildNumber\n```\nReturns the current WealthLab 8 build number.\n\n## Configuration and Settings\n\n### ExpertMode\n```csharp\nbool ExpertMode\n```\nIndicates if WealthLab is running in Expert Mode.\n\n### OfflineMode\n\n\n```csharp\nbool OfflineMode\n\n```",
    "metadata": {
      "id": "ihost",
      "title": "ihost",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/ihost.md",
      "chunkIndex": "code-context-7",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "SettingsManager Settings\n",
    "metadata": {
      "id": "ihost",
      "title": "ihost",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/ihost.md",
      "chunkIndex": "code-8",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "``csharp\nstring DataFolder\n```\nReturns the WealthLab 8 user data directory.\n\n### LocalUserName\n```csharp\nstring LocalUserName\n```\nReturns the current user's name.\n\n### WLBuildNumber\n```csharp\nint WLBuildNumber\n```\nReturns the current WealthLab 8 build number.\n\n## Configuration and Settings\n\n### ExpertMode\n```csharp\nbool ExpertMode\n```\nIndicates if WealthLab is running in Expert Mode.\n\n### OfflineMode\n```csharp\nbool OfflineMode\n```\nIndicates if WealthLab is running in offline mode.\n\n### Settings\n"
    }
  },
  {
    "pageContent": "``csharp\nstring DataFolder\n```\nReturns the WealthLab 8 user data directory.\n\n### LocalUserName\n```csharp\nstring LocalUserName\n```\nReturns the current user's name.\n\n### WLBuildNumber\n```csharp\nint WLBuildNumber\n```\nReturns the current WealthLab 8 build number.\n\n## Configuration and Settings\n\n### ExpertMode\n```csharp\nbool ExpertMode\n```\nIndicates if WealthLab is running in Expert Mode.\n\n### OfflineMode\n```csharp\nbool OfflineMode\n```\nIndicates if WealthLab is running in offline mode.\n\n### Settings\n\n\n```csharp\nSettingsManager Settings\n\n```",
    "metadata": {
      "id": "ihost",
      "title": "ihost",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/ihost.md",
      "chunkIndex": "code-context-8",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "List<DataSet> DataSets\n",
    "metadata": {
      "id": "ihost",
      "title": "ihost",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/ihost.md",
      "chunkIndex": "code-9",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "s the current user's name.\n\n### WLBuildNumber\n```csharp\nint WLBuildNumber\n```\nReturns the current WealthLab 8 build number.\n\n## Configuration and Settings\n\n### ExpertMode\n```csharp\nbool ExpertMode\n```\nIndicates if WealthLab is running in Expert Mode.\n\n### OfflineMode\n```csharp\nbool OfflineMode\n```\nIndicates if WealthLab is running in offline mode.\n\n### Settings\n```csharp\nSettingsManager Settings\n```\nProvides access to WealthLab settings management.\n\n## Data and Resource Management\n\n### DataSets\n"
    }
  },
  {
    "pageContent": "s the current user's name.\n\n### WLBuildNumber\n```csharp\nint WLBuildNumber\n```\nReturns the current WealthLab 8 build number.\n\n## Configuration and Settings\n\n### ExpertMode\n```csharp\nbool ExpertMode\n```\nIndicates if WealthLab is running in Expert Mode.\n\n### OfflineMode\n```csharp\nbool OfflineMode\n```\nIndicates if WealthLab is running in offline mode.\n\n### Settings\n```csharp\nSettingsManager Settings\n```\nProvides access to WealthLab settings management.\n\n## Data and Resource Management\n\n### DataSets\n\n\n```csharp\nList<DataSet> DataSets\n\n```",
    "metadata": {
      "id": "ihost",
      "title": "ihost",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/ihost.md",
      "chunkIndex": "code-context-9",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "DataSet FindDataSet(string name)\n",
    "metadata": {
      "id": "ihost",
      "title": "ihost",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/ihost.md",
      "chunkIndex": "code-10",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "rrent WealthLab 8 build number.\n\n## Configuration and Settings\n\n### ExpertMode\n```csharp\nbool ExpertMode\n```\nIndicates if WealthLab is running in Expert Mode.\n\n### OfflineMode\n```csharp\nbool OfflineMode\n```\nIndicates if WealthLab is running in offline mode.\n\n### Settings\n```csharp\nSettingsManager Settings\n```\nProvides access to WealthLab settings management.\n\n## Data and Resource Management\n\n### DataSets\n```csharp\nList<DataSet> DataSets\n```\nReturns a list of available DataSets.\n\n### FindDataSet\n"
    }
  },
  {
    "pageContent": "rrent WealthLab 8 build number.\n\n## Configuration and Settings\n\n### ExpertMode\n```csharp\nbool ExpertMode\n```\nIndicates if WealthLab is running in Expert Mode.\n\n### OfflineMode\n```csharp\nbool OfflineMode\n```\nIndicates if WealthLab is running in offline mode.\n\n### Settings\n```csharp\nSettingsManager Settings\n```\nProvides access to WealthLab settings management.\n\n## Data and Resource Management\n\n### DataSets\n```csharp\nList<DataSet> DataSets\n```\nReturns a list of available DataSets.\n\n### FindDataSet\n\n\n```csharp\nDataSet FindDataSet(string name)\n\n```",
    "metadata": {
      "id": "ihost",
      "title": "ihost",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/ihost.md",
      "chunkIndex": "code-context-10",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "MarketDetails FindMarket(string symbol)\n",
    "metadata": {
      "id": "ihost",
      "title": "ihost",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/ihost.md",
      "chunkIndex": "code-11",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "xpertMode\n```\nIndicates if WealthLab is running in Expert Mode.\n\n### OfflineMode\n```csharp\nbool OfflineMode\n```\nIndicates if WealthLab is running in offline mode.\n\n### Settings\n```csharp\nSettingsManager Settings\n```\nProvides access to WealthLab settings management.\n\n## Data and Resource Management\n\n### DataSets\n```csharp\nList<DataSet> DataSets\n```\nReturns a list of available DataSets.\n\n### FindDataSet\n```csharp\nDataSet FindDataSet(string name)\n```\nSearches for a DataSet by name.\n\n### FindMarket\n"
    }
  },
  {
    "pageContent": "xpertMode\n```\nIndicates if WealthLab is running in Expert Mode.\n\n### OfflineMode\n```csharp\nbool OfflineMode\n```\nIndicates if WealthLab is running in offline mode.\n\n### Settings\n```csharp\nSettingsManager Settings\n```\nProvides access to WealthLab settings management.\n\n## Data and Resource Management\n\n### DataSets\n```csharp\nList<DataSet> DataSets\n```\nReturns a list of available DataSets.\n\n### FindDataSet\n```csharp\nDataSet FindDataSet(string name)\n```\nSearches for a DataSet by name.\n\n### FindMarket\n\n\n```csharp\nMarketDetails FindMarket(string symbol)\n\n```",
    "metadata": {
      "id": "ihost",
      "title": "ihost",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/ihost.md",
      "chunkIndex": "code-context-11",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "BarHistory GetHistory(\n    string symbol, \n    HistoryScale scale, \n    DateTime startDate, \n    DateTime endDate, \n    int maxBars, \n    DataRequestOptions cb\n)\n",
    "metadata": {
      "id": "ihost",
      "title": "ihost",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/ihost.md",
      "chunkIndex": "code-12",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ng in offline mode.\n\n### Settings\n```csharp\nSettingsManager Settings\n```\nProvides access to WealthLab settings management.\n\n## Data and Resource Management\n\n### DataSets\n```csharp\nList<DataSet> DataSets\n```\nReturns a list of available DataSets.\n\n### FindDataSet\n```csharp\nDataSet FindDataSet(string name)\n```\nSearches for a DataSet by name.\n\n### FindMarket\n```csharp\nMarketDetails FindMarket(string symbol)\n```\nReturns market details for a given symbol.\n\n## Historical Data Retrieval\n\n### GetHistory\n"
    }
  },
  {
    "pageContent": "ng in offline mode.\n\n### Settings\n```csharp\nSettingsManager Settings\n```\nProvides access to WealthLab settings management.\n\n## Data and Resource Management\n\n### DataSets\n```csharp\nList<DataSet> DataSets\n```\nReturns a list of available DataSets.\n\n### FindDataSet\n```csharp\nDataSet FindDataSet(string name)\n```\nSearches for a DataSet by name.\n\n### FindMarket\n```csharp\nMarketDetails FindMarket(string symbol)\n```\nReturns market details for a given symbol.\n\n## Historical Data Retrieval\n\n### GetHistory\n\n\n```csharp\nBarHistory GetHistory(\n    string symbol, \n    HistoryScale scale, \n    DateTime startDate, \n    DateTime endDate, \n    int maxBars, \n    DataRequestOptions cb\n)\n\n```",
    "metadata": {
      "id": "ihost",
      "title": "ihost",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/ihost.md",
      "chunkIndex": "code-context-12",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "List<BarHistory> GetHistories(\n    List<string> symbols, \n    HistoryScale scale, \n    DateTime start, \n    DateTime end, \n    int maxBars, \n    DataRequestOptions hcb\n)\n",
    "metadata": {
      "id": "ihost",
      "title": "ihost",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/ihost.md",
      "chunkIndex": "code-13",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ets.\n\n### FindDataSet\n```csharp\nDataSet FindDataSet(string name)\n```\nSearches for a DataSet by name.\n\n### FindMarket\n```csharp\nMarketDetails FindMarket(string symbol)\n```\nReturns market details for a given symbol.\n\n## Historical Data Retrieval\n\n### GetHistory\n```csharp\nBarHistory GetHistory(\n    string symbol, \n    HistoryScale scale, \n    DateTime startDate, \n    DateTime endDate, \n    int maxBars, \n    DataRequestOptions cb\n)\n```\nRetrieves historical price data for a symbol.\n\n### GetHistories\n"
    }
  },
  {
    "pageContent": "ets.\n\n### FindDataSet\n```csharp\nDataSet FindDataSet(string name)\n```\nSearches for a DataSet by name.\n\n### FindMarket\n```csharp\nMarketDetails FindMarket(string symbol)\n```\nReturns market details for a given symbol.\n\n## Historical Data Retrieval\n\n### GetHistory\n```csharp\nBarHistory GetHistory(\n    string symbol, \n    HistoryScale scale, \n    DateTime startDate, \n    DateTime endDate, \n    int maxBars, \n    DataRequestOptions cb\n)\n```\nRetrieves historical price data for a symbol.\n\n### GetHistories\n\n\n```csharp\nList<BarHistory> GetHistories(\n    List<string> symbols, \n    HistoryScale scale, \n    DateTime start, \n    DateTime end, \n    int maxBars, \n    DataRequestOptions hcb\n)\n\n```",
    "metadata": {
      "id": "ihost",
      "title": "ihost",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/ihost.md",
      "chunkIndex": "code-context-13",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "void DisplayMessage(string msg)\n",
    "metadata": {
      "id": "ihost",
      "title": "ihost",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/ihost.md",
      "chunkIndex": "code-14",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "tory(\n    string symbol, \n    HistoryScale scale, \n    DateTime startDate, \n    DateTime endDate, \n    int maxBars, \n    DataRequestOptions cb\n)\n```\nRetrieves historical price data for a symbol.\n\n### GetHistories\n```csharp\nList<BarHistory> GetHistories(\n    List<string> symbols, \n    HistoryScale scale, \n    DateTime start, \n    DateTime end, \n    int maxBars, \n    DataRequestOptions hcb\n)\n```\nRetrieves historical price data for multiple symbols.\n\n## User Interaction Methods\n\n### DisplayMessage\n"
    }
  },
  {
    "pageContent": "tory(\n    string symbol, \n    HistoryScale scale, \n    DateTime startDate, \n    DateTime endDate, \n    int maxBars, \n    DataRequestOptions cb\n)\n```\nRetrieves historical price data for a symbol.\n\n### GetHistories\n```csharp\nList<BarHistory> GetHistories(\n    List<string> symbols, \n    HistoryScale scale, \n    DateTime start, \n    DateTime end, \n    int maxBars, \n    DataRequestOptions hcb\n)\n```\nRetrieves historical price data for multiple symbols.\n\n## User Interaction Methods\n\n### DisplayMessage\n\n\n```csharp\nvoid DisplayMessage(string msg)\n\n```",
    "metadata": {
      "id": "ihost",
      "title": "ihost",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/ihost.md",
      "chunkIndex": "code-context-14",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "bool ConfigureItem(Configurable c)\n",
    "metadata": {
      "id": "ihost",
      "title": "ihost",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/ihost.md",
      "chunkIndex": "code-15",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "  int maxBars, \n    DataRequestOptions cb\n)\n```\nRetrieves historical price data for a symbol.\n\n### GetHistories\n```csharp\nList<BarHistory> GetHistories(\n    List<string> symbols, \n    HistoryScale scale, \n    DateTime start, \n    DateTime end, \n    int maxBars, \n    DataRequestOptions hcb\n)\n```\nRetrieves historical price data for multiple symbols.\n\n## User Interaction Methods\n\n### DisplayMessage\n```csharp\nvoid DisplayMessage(string msg)\n```\nDisplays a message box to the user.\n\n### ConfigureItem\n"
    }
  },
  {
    "pageContent": "  int maxBars, \n    DataRequestOptions cb\n)\n```\nRetrieves historical price data for a symbol.\n\n### GetHistories\n```csharp\nList<BarHistory> GetHistories(\n    List<string> symbols, \n    HistoryScale scale, \n    DateTime start, \n    DateTime end, \n    int maxBars, \n    DataRequestOptions hcb\n)\n```\nRetrieves historical price data for multiple symbols.\n\n## User Interaction Methods\n\n### DisplayMessage\n```csharp\nvoid DisplayMessage(string msg)\n```\nDisplays a message box to the user.\n\n### ConfigureItem\n\n\n```csharp\nbool ConfigureItem(Configurable c)\n\n```",
    "metadata": {
      "id": "ihost",
      "title": "ihost",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/ihost.md",
      "chunkIndex": "code-context-15",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "bool ConfigureParameters(ParameterList pl, string title)\n",
    "metadata": {
      "id": "ihost",
      "title": "ihost",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/ihost.md",
      "chunkIndex": "code-16",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "History> GetHistories(\n    List<string> symbols, \n    HistoryScale scale, \n    DateTime start, \n    DateTime end, \n    int maxBars, \n    DataRequestOptions hcb\n)\n```\nRetrieves historical price data for multiple symbols.\n\n## User Interaction Methods\n\n### DisplayMessage\n```csharp\nvoid DisplayMessage(string msg)\n```\nDisplays a message box to the user.\n\n### ConfigureItem\n```csharp\nbool ConfigureItem(Configurable c)\n```\nShows a configuration dialog for a configurable object.\n\n### ConfigureParameters\n"
    }
  },
  {
    "pageContent": "History> GetHistories(\n    List<string> symbols, \n    HistoryScale scale, \n    DateTime start, \n    DateTime end, \n    int maxBars, \n    DataRequestOptions hcb\n)\n```\nRetrieves historical price data for multiple symbols.\n\n## User Interaction Methods\n\n### DisplayMessage\n```csharp\nvoid DisplayMessage(string msg)\n```\nDisplays a message box to the user.\n\n### ConfigureItem\n```csharp\nbool ConfigureItem(Configurable c)\n```\nShows a configuration dialog for a configurable object.\n\n### ConfigureParameters\n\n\n```csharp\nbool ConfigureParameters(ParameterList pl, string title)\n\n```",
    "metadata": {
      "id": "ihost",
      "title": "ihost",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/ihost.md",
      "chunkIndex": "code-context-16",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "void ShowWaitStatus(bool wait)\n",
    "metadata": {
      "id": "ihost",
      "title": "ihost",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/ihost.md",
      "chunkIndex": "code-17",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "equestOptions hcb\n)\n```\nRetrieves historical price data for multiple symbols.\n\n## User Interaction Methods\n\n### DisplayMessage\n```csharp\nvoid DisplayMessage(string msg)\n```\nDisplays a message box to the user.\n\n### ConfigureItem\n```csharp\nbool ConfigureItem(Configurable c)\n```\nShows a configuration dialog for a configurable object.\n\n### ConfigureParameters\n```csharp\nbool ConfigureParameters(ParameterList pl, string title)\n```\nShows a configuration dialog for a parameter list.\n\n### ShowWaitStatus\n"
    }
  },
  {
    "pageContent": "equestOptions hcb\n)\n```\nRetrieves historical price data for multiple symbols.\n\n## User Interaction Methods\n\n### DisplayMessage\n```csharp\nvoid DisplayMessage(string msg)\n```\nDisplays a message box to the user.\n\n### ConfigureItem\n```csharp\nbool ConfigureItem(Configurable c)\n```\nShows a configuration dialog for a configurable object.\n\n### ConfigureParameters\n```csharp\nbool ConfigureParameters(ParameterList pl, string title)\n```\nShows a configuration dialog for a parameter list.\n\n### ShowWaitStatus\n\n\n```csharp\nvoid ShowWaitStatus(bool wait)\n\n```",
    "metadata": {
      "id": "ihost",
      "title": "ihost",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/ihost.md",
      "chunkIndex": "code-context-17",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "object ExecutePlatformMethod(\n    string callerName, \n    string methodName, \n    object parameter\n)\n",
    "metadata": {
      "id": "ihost",
      "title": "ihost",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/ihost.md",
      "chunkIndex": "code-18",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "id DisplayMessage(string msg)\n```\nDisplays a message box to the user.\n\n### ConfigureItem\n```csharp\nbool ConfigureItem(Configurable c)\n```\nShows a configuration dialog for a configurable object.\n\n### ConfigureParameters\n```csharp\nbool ConfigureParameters(ParameterList pl, string title)\n```\nShows a configuration dialog for a parameter list.\n\n### ShowWaitStatus\n```csharp\nvoid ShowWaitStatus(bool wait)\n```\nToggles hourglass/arrow cursor.\n\n## Extension and Platform Support\n\n### ExecutePlatformMethod\n"
    }
  },
  {
    "pageContent": "id DisplayMessage(string msg)\n```\nDisplays a message box to the user.\n\n### ConfigureItem\n```csharp\nbool ConfigureItem(Configurable c)\n```\nShows a configuration dialog for a configurable object.\n\n### ConfigureParameters\n```csharp\nbool ConfigureParameters(ParameterList pl, string title)\n```\nShows a configuration dialog for a parameter list.\n\n### ShowWaitStatus\n```csharp\nvoid ShowWaitStatus(bool wait)\n```\nToggles hourglass/arrow cursor.\n\n## Extension and Platform Support\n\n### ExecutePlatformMethod\n\n\n```csharp\nobject ExecutePlatformMethod(\n    string callerName, \n    string methodName, \n    object parameter\n)\n\n```",
    "metadata": {
      "id": "ihost",
      "title": "ihost",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/ihost.md",
      "chunkIndex": "code-context-18",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "void InjectSourceCodeCompilerReferences(UniqueList<string> asmRef)\n",
    "metadata": {
      "id": "ihost",
      "title": "ihost",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/ihost.md",
      "chunkIndex": "code-19",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "`csharp\nbool ConfigureParameters(ParameterList pl, string title)\n```\nShows a configuration dialog for a parameter list.\n\n### ShowWaitStatus\n```csharp\nvoid ShowWaitStatus(bool wait)\n```\nToggles hourglass/arrow cursor.\n\n## Extension and Platform Support\n\n### ExecutePlatformMethod\n```csharp\nobject ExecutePlatformMethod(\n    string callerName, \n    string methodName, \n    object parameter\n)\n```\nExecutes platform-specific methods for cross-platform extensions.\n\n### InjectSourceCodeCompilerReferences\n"
    }
  },
  {
    "pageContent": "`csharp\nbool ConfigureParameters(ParameterList pl, string title)\n```\nShows a configuration dialog for a parameter list.\n\n### ShowWaitStatus\n```csharp\nvoid ShowWaitStatus(bool wait)\n```\nToggles hourglass/arrow cursor.\n\n## Extension and Platform Support\n\n### ExecutePlatformMethod\n```csharp\nobject ExecutePlatformMethod(\n    string callerName, \n    string methodName, \n    object parameter\n)\n```\nExecutes platform-specific methods for cross-platform extensions.\n\n### InjectSourceCodeCompilerReferences\n\n\n```csharp\nvoid InjectSourceCodeCompilerReferences(UniqueList<string> asmRef)\n\n```",
    "metadata": {
      "id": "ihost",
      "title": "ihost",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/ihost.md",
      "chunkIndex": "code-context-19",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public class MyExtension : Extension\n{\n    public void ProcessData()\n    {\n        try \n        {\n            // Processing logic\n            WLHost.Instance.AddLogItem(\n                \"MyExtension\", \n                \"Data processed successfully\", \n                WLColor.Green\n            );\n        }\n        catch (Exception ex)\n        {\n            WLHost.Instance.AddLogItem(\n                \"MyExtension\", \n                \"Error processing data\", \n                WLColor.Red, \n                ex\n            );\n        }\n    }\n}\n",
    "metadata": {
      "id": "ihost",
      "title": "ihost",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/ihost.md",
      "chunkIndex": "code-20",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "wait)\n```\nToggles hourglass/arrow cursor.\n\n## Extension and Platform Support\n\n### ExecutePlatformMethod\n```csharp\nobject ExecutePlatformMethod(\n    string callerName, \n    string methodName, \n    object parameter\n)\n```\nExecutes platform-specific methods for cross-platform extensions.\n\n### InjectSourceCodeCompilerReferences\n```csharp\nvoid InjectSourceCodeCompilerReferences(UniqueList<string> asmRef)\n```\nAdds assembly references for dynamic source code compilation.\n\n## Usage Examples\n\n### Logging\n"
    }
  },
  {
    "pageContent": "wait)\n```\nToggles hourglass/arrow cursor.\n\n## Extension and Platform Support\n\n### ExecutePlatformMethod\n```csharp\nobject ExecutePlatformMethod(\n    string callerName, \n    string methodName, \n    object parameter\n)\n```\nExecutes platform-specific methods for cross-platform extensions.\n\n### InjectSourceCodeCompilerReferences\n```csharp\nvoid InjectSourceCodeCompilerReferences(UniqueList<string> asmRef)\n```\nAdds assembly references for dynamic source code compilation.\n\n## Usage Examples\n\n### Logging\n\n\n```csharp\npublic class MyExtension : Extension\n{\n    public void ProcessData()\n    {\n        try \n        {\n            // Processing logic\n            WLHost.Instance.AddLogItem(\n                \"MyExtension\", \n                \"Data processed successfully\", \n                WLColor.Green\n            );\n        }\n        catch (Exception ex)\n        {\n            WLHost.Instance.AddLogItem(\n                \"MyExtension\", \n                \"Error processing data\", \n                WLColor.Red, \n                ex\n            );\n        }\n    }\n}\n\n```",
    "metadata": {
      "id": "ihost",
      "title": "ihost",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/ihost.md",
      "chunkIndex": "code-context-20",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public class StrategyHelper\n{\n    public BarHistory GetSymbolData(string symbol)\n    {\n        return WLHost.Instance.GetHistory(\n            symbol, \n            HistoryScale.Daily, \n            DateTime.Now.AddYears(-1), \n            DateTime.Now, \n            0, \n            null\n        );\n    }\n}\n",
    "metadata": {
      "id": "ihost",
      "title": "ihost",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/ihost.md",
      "chunkIndex": "code-21",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ta()\n    {\n        try \n        {\n            // Processing logic\n            WLHost.Instance.AddLogItem(\n                \"MyExtension\", \n                \"Data processed successfully\", \n                WLColor.Green\n            );\n        }\n        catch (Exception ex)\n        {\n            WLHost.Instance.AddLogItem(\n                \"MyExtension\", \n                \"Error processing data\", \n                WLColor.Red, \n                ex\n            );\n        }\n    }\n}\n```\n\n### Data Retrieval\n"
    }
  },
  {
    "pageContent": "ta()\n    {\n        try \n        {\n            // Processing logic\n            WLHost.Instance.AddLogItem(\n                \"MyExtension\", \n                \"Data processed successfully\", \n                WLColor.Green\n            );\n        }\n        catch (Exception ex)\n        {\n            WLHost.Instance.AddLogItem(\n                \"MyExtension\", \n                \"Error processing data\", \n                WLColor.Red, \n                ex\n            );\n        }\n    }\n}\n```\n\n### Data Retrieval\n\n\n```csharp\npublic class StrategyHelper\n{\n    public BarHistory GetSymbolData(string symbol)\n    {\n        return WLHost.Instance.GetHistory(\n            symbol, \n            HistoryScale.Daily, \n            DateTime.Now.AddYears(-1), \n            DateTime.Now, \n            0, \n            null\n        );\n    }\n}\n\n```",
    "metadata": {
      "id": "ihost",
      "title": "ihost",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/ihost.md",
      "chunkIndex": "code-context-21",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public class ProviderConfig\n{\n    public void ConfigureProvider()\n    {\n        var myProvider = new MyDataProvider();\n        \n        // Show configuration dialog\n        if (WLHost.Instance.ConfigureItem(myProvider))\n        {\n            // Configuration was modified\n            myProvider.SaveConfig();\n        }\n    }\n}\n",
    "metadata": {
      "id": "ihost",
      "title": "ihost",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/ihost.md",
      "chunkIndex": "code-22",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "\"MyExtension\", \n                \"Error processing data\", \n                WLColor.Red, \n                ex\n            );\n        }\n    }\n}\n```\n\n### Data Retrieval\n```csharp\npublic class StrategyHelper\n{\n    public BarHistory GetSymbolData(string symbol)\n    {\n        return WLHost.Instance.GetHistory(\n            symbol, \n            HistoryScale.Daily, \n            DateTime.Now.AddYears(-1), \n            DateTime.Now, \n            0, \n            null\n        );\n    }\n}\n```\n\n### Configuration\n"
    }
  },
  {
    "pageContent": "\"MyExtension\", \n                \"Error processing data\", \n                WLColor.Red, \n                ex\n            );\n        }\n    }\n}\n```\n\n### Data Retrieval\n```csharp\npublic class StrategyHelper\n{\n    public BarHistory GetSymbolData(string symbol)\n    {\n        return WLHost.Instance.GetHistory(\n            symbol, \n            HistoryScale.Daily, \n            DateTime.Now.AddYears(-1), \n            DateTime.Now, \n            0, \n            null\n        );\n    }\n}\n```\n\n### Configuration\n\n\n```csharp\npublic class ProviderConfig\n{\n    public void ConfigureProvider()\n    {\n        var myProvider = new MyDataProvider();\n        \n        // Show configuration dialog\n        if (WLHost.Instance.ConfigureItem(myProvider))\n        {\n            // Configuration was modified\n            myProvider.SaveConfig();\n        }\n    }\n}\n\n```",
    "metadata": {
      "id": "ihost",
      "title": "ihost",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/ihost.md",
      "chunkIndex": "code-context-22",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public class CoreLogic\n{\n    public void InitializePlatformSpecificUI()\n    {\n        // Execute a method in the platform-specific assembly\n        WLHost.Instance.ExecutePlatformMethod(\n            \"MyExtension\", \n            \"InitializeUI\", \n            null\n        );\n    }\n}\n",
    "metadata": {
      "id": "ihost",
      "title": "ihost",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/ihost.md",
      "chunkIndex": "code-23",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": ".Now.AddYears(-1), \n            DateTime.Now, \n            0, \n            null\n        );\n    }\n}\n```\n\n### Configuration\n```csharp\npublic class ProviderConfig\n{\n    public void ConfigureProvider()\n    {\n        var myProvider = new MyDataProvider();\n        \n        // Show configuration dialog\n        if (WLHost.Instance.ConfigureItem(myProvider))\n        {\n            // Configuration was modified\n            myProvider.SaveConfig();\n        }\n    }\n}\n```\n\n### Cross-Platform Method Execution\n"
    }
  },
  {
    "pageContent": ".Now.AddYears(-1), \n            DateTime.Now, \n            0, \n            null\n        );\n    }\n}\n```\n\n### Configuration\n```csharp\npublic class ProviderConfig\n{\n    public void ConfigureProvider()\n    {\n        var myProvider = new MyDataProvider();\n        \n        // Show configuration dialog\n        if (WLHost.Instance.ConfigureItem(myProvider))\n        {\n            // Configuration was modified\n            myProvider.SaveConfig();\n        }\n    }\n}\n```\n\n### Cross-Platform Method Execution\n\n\n```csharp\npublic class CoreLogic\n{\n    public void InitializePlatformSpecificUI()\n    {\n        // Execute a method in the platform-specific assembly\n        WLHost.Instance.ExecutePlatformMethod(\n            \"MyExtension\", \n            \"InitializeUI\", \n            null\n        );\n    }\n}\n\n```",
    "metadata": {
      "id": "ihost",
      "title": "ihost",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/ihost.md",
      "chunkIndex": "code-context-23",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "# IndicatorBase Class\n\n**Namespace:** WealthLab.Indicators  \n**Parent:** TimeSeries\n\nThe `IndicatorBase` class serves as the foundational class for creating custom indicators in WealthLab. Derived from `TimeSeries`, it provides a robust framework for developing technical analysis indicators with built-in support for parameter management, caching, and charting.\n\n## Key Characteristics\n\n- Manages a list of floating-point values keyed to a list of DateTimes\n- Supports indicator management subsystem in WealthLab\n- Essential for developers creating custom indicators\n\n## Calculation Methods\n\n### AssumeValuesOf\n",
    "metadata": {
      "id": "indicator-base",
      "title": "indicator-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/indicator-base.md",
      "chunkIndex": 0,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nCopies the values from the specified `TimeSeries` into the indicator's values, clearing existing values first.\n\n### CalculatePartialValue\n",
    "metadata": {
      "id": "indicator-base",
      "title": "indicator-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/indicator-base.md",
      "chunkIndex": 1,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nUsed for calculating partial updates in streaming charts. The calculated value should be assigned to the `StreamingValue` property.\n\n**Example (SMA Implementation):**\n",
    "metadata": {
      "id": "indicator-base",
      "title": "indicator-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/indicator-base.md",
      "chunkIndex": 2,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n### Populate\n",
    "metadata": {
      "id": "indicator-base",
      "title": "indicator-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/indicator-base.md",
      "chunkIndex": 3,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nAn abstract method called by WealthLab to populate the indicator with values. Each derived indicator class must provide its own implementation to calculate indicator values.\n\n## Parameters and Configuration\n\n### Parameters\n",
    "metadata": {
      "id": "indicator-base",
      "title": "indicator-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/indicator-base.md",
      "chunkIndex": 4,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns a list of `Parameter` instances that define the indicator's configurable parameters.\n\n## Companion Indicators\n\n### BandCompanion\n",
    "metadata": {
      "id": "indicator-base",
      "title": "indicator-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/indicator-base.md",
      "chunkIndex": 5,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the companion indicator (if applicable) using the same parameters as the source indicator. Used by the Bands plot style.\n\n### BandCompanionAbbreviation\n",
    "metadata": {
      "id": "indicator-base",
      "title": "indicator-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/indicator-base.md",
      "chunkIndex": 6,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the name of the indicator's band pair. For example, BBandUpper's companion is BBandLower.\n\n### Companions\n",
    "metadata": {
      "id": "indicator-base",
      "title": "indicator-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/indicator-base.md",
      "chunkIndex": 7,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns abbreviations of indicators considered part of this indicator's family. \n\n**Example:** Directional Movement indicators include ADX, ADXR, DIPlus, and DIMinus.\n\n## Descriptive Properties\n\n### Abbreviation\n",
    "metadata": {
      "id": "indicator-base",
      "title": "indicator-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/indicator-base.md",
      "chunkIndex": 8,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the indicator's abbreviation.\n\n### Name\n",
    "metadata": {
      "id": "indicator-base",
      "title": "indicator-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/indicator-base.md",
      "chunkIndex": 9,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the full name of the indicator.\n\n### HelpDescription\n",
    "metadata": {
      "id": "indicator-base",
      "title": "indicator-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/indicator-base.md",
      "chunkIndex": 10,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nProvides descriptive text about the indicator.\n\n### Color and Styling\n",
    "metadata": {
      "id": "indicator-base",
      "title": "indicator-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/indicator-base.md",
      "chunkIndex": 11,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nProperties for customizing the indicator's visual representation in charts and UI.\n\n## Functional Properties\n\n### ExtendedBarsRequired\n",
    "metadata": {
      "id": "indicator-base",
      "title": "indicator-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/indicator-base.md",
      "chunkIndex": 12,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nSpecifies the number of extended bars needed for the indicator, creating a projection area to the right of the chart.\n\n### IsOscillator\n",
    "metadata": {
      "id": "indicator-base",
      "title": "indicator-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/indicator-base.md",
      "chunkIndex": 13,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nIndicates if the indicator moves within a defined range (e.g., RSI, CMO).\n\n### IsSmoother\n",
    "metadata": {
      "id": "indicator-base",
      "title": "indicator-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/indicator-base.md",
      "chunkIndex": 14,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nIndicates if the indicator smooths source data (e.g., moving averages like SMA or EMA).\n\n## Usage Example: Creating a Custom Indicator\n\n",
    "metadata": {
      "id": "indicator-base",
      "title": "indicator-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/indicator-base.md",
      "chunkIndex": 15,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n## Best Practices\n\n1. Always implement the `Populate()` method with robust calculation logic\n2. Use `Parameters` for configurable indicator settings\n3. Handle edge cases and initial periods with `Double.NaN`\n4. Implement `CalculatePartialValue()` for streaming chart support\n5. Provide meaningful descriptions and default styling\n\n## Performance Considerations\n\n- Minimize computational complexity in `Populate()`\n- Use caching mechanisms when appropriate\n- Avoid redundant calculations ",
    "metadata": {
      "id": "indicator-base",
      "title": "indicator-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/indicator-base.md",
      "chunkIndex": 16,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "public void AssumeValuesOf(TimeSeries ts)\n",
    "metadata": {
      "id": "indicator-base",
      "title": "indicator-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/indicator-base.md",
      "chunkIndex": "code-0",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "erves as the foundational class for creating custom indicators in WealthLab. Derived from `TimeSeries`, it provides a robust framework for developing technical analysis indicators with built-in support for parameter management, caching, and charting.\n\n## Key Characteristics\n\n- Manages a list of floating-point values keyed to a list of DateTimes\n- Supports indicator management subsystem in WealthLab\n- Essential for developers creating custom indicators\n\n## Calculation Methods\n\n### AssumeValuesOf\n"
    }
  },
  {
    "pageContent": "erves as the foundational class for creating custom indicators in WealthLab. Derived from `TimeSeries`, it provides a robust framework for developing technical analysis indicators with built-in support for parameter management, caching, and charting.\n\n## Key Characteristics\n\n- Manages a list of floating-point values keyed to a list of DateTimes\n- Supports indicator management subsystem in WealthLab\n- Essential for developers creating custom indicators\n\n## Calculation Methods\n\n### AssumeValuesOf\n\n\n```csharp\npublic void AssumeValuesOf(TimeSeries ts)\n\n```",
    "metadata": {
      "id": "indicator-base",
      "title": "indicator-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/indicator-base.md",
      "chunkIndex": "code-context-0",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public virtual bool CalculatePartialValue()\n",
    "metadata": {
      "id": "indicator-base",
      "title": "indicator-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/indicator-base.md",
      "chunkIndex": "code-1",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "support for parameter management, caching, and charting.\n\n## Key Characteristics\n\n- Manages a list of floating-point values keyed to a list of DateTimes\n- Supports indicator management subsystem in WealthLab\n- Essential for developers creating custom indicators\n\n## Calculation Methods\n\n### AssumeValuesOf\n```csharp\npublic void AssumeValuesOf(TimeSeries ts)\n```\nCopies the values from the specified `TimeSeries` into the indicator's values, clearing existing values first.\n\n### CalculatePartialValue\n"
    }
  },
  {
    "pageContent": "support for parameter management, caching, and charting.\n\n## Key Characteristics\n\n- Manages a list of floating-point values keyed to a list of DateTimes\n- Supports indicator management subsystem in WealthLab\n- Essential for developers creating custom indicators\n\n## Calculation Methods\n\n### AssumeValuesOf\n```csharp\npublic void AssumeValuesOf(TimeSeries ts)\n```\nCopies the values from the specified `TimeSeries` into the indicator's values, clearing existing values first.\n\n### CalculatePartialValue\n\n\n```csharp\npublic virtual bool CalculatePartialValue()\n\n```",
    "metadata": {
      "id": "indicator-base",
      "title": "indicator-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/indicator-base.md",
      "chunkIndex": "code-context-1",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public override bool CalculatePartialValue()\n{\n    // Implement partial value calculation logic\n    StreamingValue = // Calculated streaming value\n    return true; // Indicates successful calculation\n}\n",
    "metadata": {
      "id": "indicator-base",
      "title": "indicator-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/indicator-base.md",
      "chunkIndex": "code-2",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "evelopers creating custom indicators\n\n## Calculation Methods\n\n### AssumeValuesOf\n```csharp\npublic void AssumeValuesOf(TimeSeries ts)\n```\nCopies the values from the specified `TimeSeries` into the indicator's values, clearing existing values first.\n\n### CalculatePartialValue\n```csharp\npublic virtual bool CalculatePartialValue()\n```\nUsed for calculating partial updates in streaming charts. The calculated value should be assigned to the `StreamingValue` property.\n\n**Example (SMA Implementation):**\n"
    }
  },
  {
    "pageContent": "evelopers creating custom indicators\n\n## Calculation Methods\n\n### AssumeValuesOf\n```csharp\npublic void AssumeValuesOf(TimeSeries ts)\n```\nCopies the values from the specified `TimeSeries` into the indicator's values, clearing existing values first.\n\n### CalculatePartialValue\n```csharp\npublic virtual bool CalculatePartialValue()\n```\nUsed for calculating partial updates in streaming charts. The calculated value should be assigned to the `StreamingValue` property.\n\n**Example (SMA Implementation):**\n\n\n```csharp\npublic override bool CalculatePartialValue()\n{\n    // Implement partial value calculation logic\n    StreamingValue = // Calculated streaming value\n    return true; // Indicates successful calculation\n}\n\n```",
    "metadata": {
      "id": "indicator-base",
      "title": "indicator-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/indicator-base.md",
      "chunkIndex": "code-context-2",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public abstract void Populate()\n",
    "metadata": {
      "id": "indicator-base",
      "title": "indicator-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/indicator-base.md",
      "chunkIndex": "code-3",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ing values first.\n\n### CalculatePartialValue\n```csharp\npublic virtual bool CalculatePartialValue()\n```\nUsed for calculating partial updates in streaming charts. The calculated value should be assigned to the `StreamingValue` property.\n\n**Example (SMA Implementation):**\n```csharp\npublic override bool CalculatePartialValue()\n{\n    // Implement partial value calculation logic\n    StreamingValue = // Calculated streaming value\n    return true; // Indicates successful calculation\n}\n```\n\n### Populate\n"
    }
  },
  {
    "pageContent": "ing values first.\n\n### CalculatePartialValue\n```csharp\npublic virtual bool CalculatePartialValue()\n```\nUsed for calculating partial updates in streaming charts. The calculated value should be assigned to the `StreamingValue` property.\n\n**Example (SMA Implementation):**\n```csharp\npublic override bool CalculatePartialValue()\n{\n    // Implement partial value calculation logic\n    StreamingValue = // Calculated streaming value\n    return true; // Indicates successful calculation\n}\n```\n\n### Populate\n\n\n```csharp\npublic abstract void Populate()\n\n```",
    "metadata": {
      "id": "indicator-base",
      "title": "indicator-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/indicator-base.md",
      "chunkIndex": "code-context-3",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public ParameterList Parameters\n",
    "metadata": {
      "id": "indicator-base",
      "title": "indicator-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/indicator-base.md",
      "chunkIndex": "code-4",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "\n```csharp\npublic override bool CalculatePartialValue()\n{\n    // Implement partial value calculation logic\n    StreamingValue = // Calculated streaming value\n    return true; // Indicates successful calculation\n}\n```\n\n### Populate\n```csharp\npublic abstract void Populate()\n```\nAn abstract method called by WealthLab to populate the indicator with values. Each derived indicator class must provide its own implementation to calculate indicator values.\n\n## Parameters and Configuration\n\n### Parameters\n"
    }
  },
  {
    "pageContent": "\n```csharp\npublic override bool CalculatePartialValue()\n{\n    // Implement partial value calculation logic\n    StreamingValue = // Calculated streaming value\n    return true; // Indicates successful calculation\n}\n```\n\n### Populate\n```csharp\npublic abstract void Populate()\n```\nAn abstract method called by WealthLab to populate the indicator with values. Each derived indicator class must provide its own implementation to calculate indicator values.\n\n## Parameters and Configuration\n\n### Parameters\n\n\n```csharp\npublic ParameterList Parameters\n\n```",
    "metadata": {
      "id": "indicator-base",
      "title": "indicator-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/indicator-base.md",
      "chunkIndex": "code-context-4",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public IndicatorBase BandCompanion\n",
    "metadata": {
      "id": "indicator-base",
      "title": "indicator-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/indicator-base.md",
      "chunkIndex": "code-5",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ates successful calculation\n}\n```\n\n### Populate\n```csharp\npublic abstract void Populate()\n```\nAn abstract method called by WealthLab to populate the indicator with values. Each derived indicator class must provide its own implementation to calculate indicator values.\n\n## Parameters and Configuration\n\n### Parameters\n```csharp\npublic ParameterList Parameters\n```\nReturns a list of `Parameter` instances that define the indicator's configurable parameters.\n\n## Companion Indicators\n\n### BandCompanion\n"
    }
  },
  {
    "pageContent": "ates successful calculation\n}\n```\n\n### Populate\n```csharp\npublic abstract void Populate()\n```\nAn abstract method called by WealthLab to populate the indicator with values. Each derived indicator class must provide its own implementation to calculate indicator values.\n\n## Parameters and Configuration\n\n### Parameters\n```csharp\npublic ParameterList Parameters\n```\nReturns a list of `Parameter` instances that define the indicator's configurable parameters.\n\n## Companion Indicators\n\n### BandCompanion\n\n\n```csharp\npublic IndicatorBase BandCompanion\n\n```",
    "metadata": {
      "id": "indicator-base",
      "title": "indicator-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/indicator-base.md",
      "chunkIndex": "code-context-5",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public virtual string BandCompanionAbbreviation\n",
    "metadata": {
      "id": "indicator-base",
      "title": "indicator-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/indicator-base.md",
      "chunkIndex": "code-6",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "vide its own implementation to calculate indicator values.\n\n## Parameters and Configuration\n\n### Parameters\n```csharp\npublic ParameterList Parameters\n```\nReturns a list of `Parameter` instances that define the indicator's configurable parameters.\n\n## Companion Indicators\n\n### BandCompanion\n```csharp\npublic IndicatorBase BandCompanion\n```\nReturns the companion indicator (if applicable) using the same parameters as the source indicator. Used by the Bands plot style.\n\n### BandCompanionAbbreviation\n"
    }
  },
  {
    "pageContent": "vide its own implementation to calculate indicator values.\n\n## Parameters and Configuration\n\n### Parameters\n```csharp\npublic ParameterList Parameters\n```\nReturns a list of `Parameter` instances that define the indicator's configurable parameters.\n\n## Companion Indicators\n\n### BandCompanion\n```csharp\npublic IndicatorBase BandCompanion\n```\nReturns the companion indicator (if applicable) using the same parameters as the source indicator. Used by the Bands plot style.\n\n### BandCompanionAbbreviation\n\n\n```csharp\npublic virtual string BandCompanionAbbreviation\n\n```",
    "metadata": {
      "id": "indicator-base",
      "title": "indicator-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/indicator-base.md",
      "chunkIndex": "code-context-6",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public virtual List<string> Companions\n",
    "metadata": {
      "id": "indicator-base",
      "title": "indicator-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/indicator-base.md",
      "chunkIndex": "code-7",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ameter` instances that define the indicator's configurable parameters.\n\n## Companion Indicators\n\n### BandCompanion\n```csharp\npublic IndicatorBase BandCompanion\n```\nReturns the companion indicator (if applicable) using the same parameters as the source indicator. Used by the Bands plot style.\n\n### BandCompanionAbbreviation\n```csharp\npublic virtual string BandCompanionAbbreviation\n```\nReturns the name of the indicator's band pair. For example, BBandUpper's companion is BBandLower.\n\n### Companions\n"
    }
  },
  {
    "pageContent": "ameter` instances that define the indicator's configurable parameters.\n\n## Companion Indicators\n\n### BandCompanion\n```csharp\npublic IndicatorBase BandCompanion\n```\nReturns the companion indicator (if applicable) using the same parameters as the source indicator. Used by the Bands plot style.\n\n### BandCompanionAbbreviation\n```csharp\npublic virtual string BandCompanionAbbreviation\n```\nReturns the name of the indicator's band pair. For example, BBandUpper's companion is BBandLower.\n\n### Companions\n\n\n```csharp\npublic virtual List<string> Companions\n\n```",
    "metadata": {
      "id": "indicator-base",
      "title": "indicator-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/indicator-base.md",
      "chunkIndex": "code-context-7",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public abstract string Abbreviation\n",
    "metadata": {
      "id": "indicator-base",
      "title": "indicator-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/indicator-base.md",
      "chunkIndex": "code-8",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ed by the Bands plot style.\n\n### BandCompanionAbbreviation\n```csharp\npublic virtual string BandCompanionAbbreviation\n```\nReturns the name of the indicator's band pair. For example, BBandUpper's companion is BBandLower.\n\n### Companions\n```csharp\npublic virtual List<string> Companions\n```\nReturns abbreviations of indicators considered part of this indicator's family. \n\n**Example:** Directional Movement indicators include ADX, ADXR, DIPlus, and DIMinus.\n\n## Descriptive Properties\n\n### Abbreviation\n"
    }
  },
  {
    "pageContent": "ed by the Bands plot style.\n\n### BandCompanionAbbreviation\n```csharp\npublic virtual string BandCompanionAbbreviation\n```\nReturns the name of the indicator's band pair. For example, BBandUpper's companion is BBandLower.\n\n### Companions\n```csharp\npublic virtual List<string> Companions\n```\nReturns abbreviations of indicators considered part of this indicator's family. \n\n**Example:** Directional Movement indicators include ADX, ADXR, DIPlus, and DIMinus.\n\n## Descriptive Properties\n\n### Abbreviation\n\n\n```csharp\npublic abstract string Abbreviation\n\n```",
    "metadata": {
      "id": "indicator-base",
      "title": "indicator-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/indicator-base.md",
      "chunkIndex": "code-context-8",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public abstract string Name\n",
    "metadata": {
      "id": "indicator-base",
      "title": "indicator-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/indicator-base.md",
      "chunkIndex": "code-9",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "panionAbbreviation\n```\nReturns the name of the indicator's band pair. For example, BBandUpper's companion is BBandLower.\n\n### Companions\n```csharp\npublic virtual List<string> Companions\n```\nReturns abbreviations of indicators considered part of this indicator's family. \n\n**Example:** Directional Movement indicators include ADX, ADXR, DIPlus, and DIMinus.\n\n## Descriptive Properties\n\n### Abbreviation\n```csharp\npublic abstract string Abbreviation\n```\nReturns the indicator's abbreviation.\n\n### Name\n"
    }
  },
  {
    "pageContent": "panionAbbreviation\n```\nReturns the name of the indicator's band pair. For example, BBandUpper's companion is BBandLower.\n\n### Companions\n```csharp\npublic virtual List<string> Companions\n```\nReturns abbreviations of indicators considered part of this indicator's family. \n\n**Example:** Directional Movement indicators include ADX, ADXR, DIPlus, and DIMinus.\n\n## Descriptive Properties\n\n### Abbreviation\n```csharp\npublic abstract string Abbreviation\n```\nReturns the indicator's abbreviation.\n\n### Name\n\n\n```csharp\npublic abstract string Name\n\n```",
    "metadata": {
      "id": "indicator-base",
      "title": "indicator-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/indicator-base.md",
      "chunkIndex": "code-context-9",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public abstract string HelpDescription\n",
    "metadata": {
      "id": "indicator-base",
      "title": "indicator-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/indicator-base.md",
      "chunkIndex": "code-10",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "on is BBandLower.\n\n### Companions\n```csharp\npublic virtual List<string> Companions\n```\nReturns abbreviations of indicators considered part of this indicator's family. \n\n**Example:** Directional Movement indicators include ADX, ADXR, DIPlus, and DIMinus.\n\n## Descriptive Properties\n\n### Abbreviation\n```csharp\npublic abstract string Abbreviation\n```\nReturns the indicator's abbreviation.\n\n### Name\n```csharp\npublic abstract string Name\n```\nReturns the full name of the indicator.\n\n### HelpDescription\n"
    }
  },
  {
    "pageContent": "on is BBandLower.\n\n### Companions\n```csharp\npublic virtual List<string> Companions\n```\nReturns abbreviations of indicators considered part of this indicator's family. \n\n**Example:** Directional Movement indicators include ADX, ADXR, DIPlus, and DIMinus.\n\n## Descriptive Properties\n\n### Abbreviation\n```csharp\npublic abstract string Abbreviation\n```\nReturns the indicator's abbreviation.\n\n### Name\n```csharp\npublic abstract string Name\n```\nReturns the full name of the indicator.\n\n### HelpDescription\n\n\n```csharp\npublic abstract string HelpDescription\n\n```",
    "metadata": {
      "id": "indicator-base",
      "title": "indicator-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/indicator-base.md",
      "chunkIndex": "code-context-10",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public WLColor Color\npublic virtual WLColor DefaultColor\npublic virtual PlotStyles DefaultPlotStyle\npublic virtual Bitmap Glyph\n",
    "metadata": {
      "id": "indicator-base",
      "title": "indicator-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/indicator-base.md",
      "chunkIndex": "code-11",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "considered part of this indicator's family. \n\n**Example:** Directional Movement indicators include ADX, ADXR, DIPlus, and DIMinus.\n\n## Descriptive Properties\n\n### Abbreviation\n```csharp\npublic abstract string Abbreviation\n```\nReturns the indicator's abbreviation.\n\n### Name\n```csharp\npublic abstract string Name\n```\nReturns the full name of the indicator.\n\n### HelpDescription\n```csharp\npublic abstract string HelpDescription\n```\nProvides descriptive text about the indicator.\n\n### Color and Styling\n"
    }
  },
  {
    "pageContent": "considered part of this indicator's family. \n\n**Example:** Directional Movement indicators include ADX, ADXR, DIPlus, and DIMinus.\n\n## Descriptive Properties\n\n### Abbreviation\n```csharp\npublic abstract string Abbreviation\n```\nReturns the indicator's abbreviation.\n\n### Name\n```csharp\npublic abstract string Name\n```\nReturns the full name of the indicator.\n\n### HelpDescription\n```csharp\npublic abstract string HelpDescription\n```\nProvides descriptive text about the indicator.\n\n### Color and Styling\n\n\n```csharp\npublic WLColor Color\npublic virtual WLColor DefaultColor\npublic virtual PlotStyles DefaultPlotStyle\npublic virtual Bitmap Glyph\n\n```",
    "metadata": {
      "id": "indicator-base",
      "title": "indicator-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/indicator-base.md",
      "chunkIndex": "code-context-11",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public virtual int ExtendedBarsRequired\n",
    "metadata": {
      "id": "indicator-base",
      "title": "indicator-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/indicator-base.md",
      "chunkIndex": "code-12",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "csharp\npublic abstract string Name\n```\nReturns the full name of the indicator.\n\n### HelpDescription\n```csharp\npublic abstract string HelpDescription\n```\nProvides descriptive text about the indicator.\n\n### Color and Styling\n```csharp\npublic WLColor Color\npublic virtual WLColor DefaultColor\npublic virtual PlotStyles DefaultPlotStyle\npublic virtual Bitmap Glyph\n```\nProperties for customizing the indicator's visual representation in charts and UI.\n\n## Functional Properties\n\n### ExtendedBarsRequired\n"
    }
  },
  {
    "pageContent": "csharp\npublic abstract string Name\n```\nReturns the full name of the indicator.\n\n### HelpDescription\n```csharp\npublic abstract string HelpDescription\n```\nProvides descriptive text about the indicator.\n\n### Color and Styling\n```csharp\npublic WLColor Color\npublic virtual WLColor DefaultColor\npublic virtual PlotStyles DefaultPlotStyle\npublic virtual Bitmap Glyph\n```\nProperties for customizing the indicator's visual representation in charts and UI.\n\n## Functional Properties\n\n### ExtendedBarsRequired\n\n\n```csharp\npublic virtual int ExtendedBarsRequired\n\n```",
    "metadata": {
      "id": "indicator-base",
      "title": "indicator-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/indicator-base.md",
      "chunkIndex": "code-context-12",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public bool IsOscillator\n",
    "metadata": {
      "id": "indicator-base",
      "title": "indicator-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/indicator-base.md",
      "chunkIndex": "code-13",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ndicator.\n\n### Color and Styling\n```csharp\npublic WLColor Color\npublic virtual WLColor DefaultColor\npublic virtual PlotStyles DefaultPlotStyle\npublic virtual Bitmap Glyph\n```\nProperties for customizing the indicator's visual representation in charts and UI.\n\n## Functional Properties\n\n### ExtendedBarsRequired\n```csharp\npublic virtual int ExtendedBarsRequired\n```\nSpecifies the number of extended bars needed for the indicator, creating a projection area to the right of the chart.\n\n### IsOscillator\n"
    }
  },
  {
    "pageContent": "ndicator.\n\n### Color and Styling\n```csharp\npublic WLColor Color\npublic virtual WLColor DefaultColor\npublic virtual PlotStyles DefaultPlotStyle\npublic virtual Bitmap Glyph\n```\nProperties for customizing the indicator's visual representation in charts and UI.\n\n## Functional Properties\n\n### ExtendedBarsRequired\n```csharp\npublic virtual int ExtendedBarsRequired\n```\nSpecifies the number of extended bars needed for the indicator, creating a projection area to the right of the chart.\n\n### IsOscillator\n\n\n```csharp\npublic bool IsOscillator\n\n```",
    "metadata": {
      "id": "indicator-base",
      "title": "indicator-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/indicator-base.md",
      "chunkIndex": "code-context-13",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public virtual bool IsSmoother\n",
    "metadata": {
      "id": "indicator-base",
      "title": "indicator-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/indicator-base.md",
      "chunkIndex": "code-14",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "aultPlotStyle\npublic virtual Bitmap Glyph\n```\nProperties for customizing the indicator's visual representation in charts and UI.\n\n## Functional Properties\n\n### ExtendedBarsRequired\n```csharp\npublic virtual int ExtendedBarsRequired\n```\nSpecifies the number of extended bars needed for the indicator, creating a projection area to the right of the chart.\n\n### IsOscillator\n```csharp\npublic bool IsOscillator\n```\nIndicates if the indicator moves within a defined range (e.g., RSI, CMO).\n\n### IsSmoother\n"
    }
  },
  {
    "pageContent": "aultPlotStyle\npublic virtual Bitmap Glyph\n```\nProperties for customizing the indicator's visual representation in charts and UI.\n\n## Functional Properties\n\n### ExtendedBarsRequired\n```csharp\npublic virtual int ExtendedBarsRequired\n```\nSpecifies the number of extended bars needed for the indicator, creating a projection area to the right of the chart.\n\n### IsOscillator\n```csharp\npublic bool IsOscillator\n```\nIndicates if the indicator moves within a defined range (e.g., RSI, CMO).\n\n### IsSmoother\n\n\n```csharp\npublic virtual bool IsSmoother\n\n```",
    "metadata": {
      "id": "indicator-base",
      "title": "indicator-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/indicator-base.md",
      "chunkIndex": "code-context-14",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public class MyCustomIndicator : IndicatorBase\n{\n    public MyCustomIndicator() : base() {}\n\n    public MyCustomIndicator(TimeSeries source, int period = 14) : base()\n    {\n        Parameters[0].Value = source;\n        Parameters[1].Value = period;\n        Populate();\n    }\n\n    public override string Name => \"My Custom Indicator\";\n    public override string Abbreviation => \"MCI\";\n    public override string HelpDescription => \"A custom technical indicator\";\n    public override WLColor DefaultColor => WLColor.Blue;\n\n    protected override void GenerateParameters()\n    {\n        AddParameter(\"Source\", ParameterType.TimeSeries, PriceComponent.Close);\n        AddParameter(\"Period\", ParameterType.Int32, 14);\n    }\n\n    protected override void Populate()\n    {\n        TimeSeries source = Parameters[0].AsTimeSeries;\n        int period = Parameters[1].AsInt32;\n\n        DateTimes = source.DateTimes;\n\n        for (int bar = period - 1; bar < source.Count; bar++)\n        {\n            // Implement indicator calculation logic\n            Values[bar] = CalculateIndicatorValue(source, bar, period);\n        }\n    }\n\n    private double CalculateIndicatorValue(TimeSeries source, int bar, int period)\n    {\n        // Custom calculation implementation\n        return 0.0;\n    }\n}\n",
    "metadata": {
      "id": "indicator-base",
      "title": "indicator-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/indicator-base.md",
      "chunkIndex": "code-15",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "```csharp\npublic virtual int ExtendedBarsRequired\n```\nSpecifies the number of extended bars needed for the indicator, creating a projection area to the right of the chart.\n\n### IsOscillator\n```csharp\npublic bool IsOscillator\n```\nIndicates if the indicator moves within a defined range (e.g., RSI, CMO).\n\n### IsSmoother\n```csharp\npublic virtual bool IsSmoother\n```\nIndicates if the indicator smooths source data (e.g., moving averages like SMA or EMA).\n\n## Usage Example: Creating a Custom Indicator\n\n"
    }
  },
  {
    "pageContent": "```csharp\npublic virtual int ExtendedBarsRequired\n```\nSpecifies the number of extended bars needed for the indicator, creating a projection area to the right of the chart.\n\n### IsOscillator\n```csharp\npublic bool IsOscillator\n```\nIndicates if the indicator moves within a defined range (e.g., RSI, CMO).\n\n### IsSmoother\n```csharp\npublic virtual bool IsSmoother\n```\nIndicates if the indicator smooths source data (e.g., moving averages like SMA or EMA).\n\n## Usage Example: Creating a Custom Indicator\n\n\n\n```csharp\npublic class MyCustomIndicator : IndicatorBase\n{\n    public MyCustomIndicator() : base() {}\n\n    public MyCustomIndicator(TimeSeries source, int period = 14) : base()\n    {\n        Parameters[0].Value = source;\n        Parameters[1].Value = period;\n        Populate();\n    }\n\n    public override string Name => \"My Custom Indicator\";\n    public override string Abbreviation => \"MCI\";\n    public override string HelpDescription => \"A custom technical indicator\";\n    public override WLColor DefaultColor => WLColor.Blue;\n\n    protected override void GenerateParameters()\n    {\n        AddParameter(\"Source\", ParameterType.TimeSeries, PriceComponent.Close);\n        AddParameter(\"Period\", ParameterType.Int32, 14);\n    }\n\n    protected override void Populate()\n    {\n        TimeSeries source = Parameters[0].AsTimeSeries;\n        int period = Parameters[1].AsInt32;\n\n        DateTimes = source.DateTimes;\n\n        for (int bar = period - 1; bar < source.Count; bar++)\n        {\n            // Implement indicator calculation logic\n            Values[bar] = CalculateIndicatorValue(source, bar, period);\n        }\n    }\n\n    private double CalculateIndicatorValue(TimeSeries source, int bar, int period)\n    {\n        // Custom calculation implementation\n        return 0.0;\n    }\n}\n\n```",
    "metadata": {
      "id": "indicator-base",
      "title": "indicator-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/indicator-base.md",
      "chunkIndex": "code-context-15",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "# IOptimizationHost Interface\n\n**Namespace:** WealthLab.Backtest  \n**Parent:** None\n\nThe `IOptimizationHost` interface enables Optimization Visualizers to communicate with their host Optimization (Strategy) window. It provides methods and properties to interact with different optimization methods and retrieve optimization-related information.\n\n## Properties\n\n### OptimizationMethod\n",
    "metadata": {
      "id": "ioptimization-host",
      "title": "ioptimization-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/ioptimization-host.md",
      "chunkIndex": 0,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the selected Optimizer (an instance of the `OptimizerBase` class) that was used during the optimization process.\n\n### StrategyHost\n",
    "metadata": {
      "id": "ioptimization-host",
      "title": "ioptimization-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/ioptimization-host.md",
      "chunkIndex": 1,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns an instance of the `IStrategyHost` interface, allowing communication with the host Strategy window.\n\n### StrategyOptimizer\n",
    "metadata": {
      "id": "ioptimization-host",
      "title": "ioptimization-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/ioptimization-host.md",
      "chunkIndex": 2,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the instance of the `StrategyOptimizer` used to perform the standard optimization.\n\n### WFOOptimizer\n",
    "metadata": {
      "id": "ioptimization-host",
      "title": "ioptimization-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/ioptimization-host.md",
      "chunkIndex": 3,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the instance of the `WFOOptimizer` used to perform the Walk Forward Optimization (WFO).\n\n## Methods\n\n### RunWFOBacktest\n",
    "metadata": {
      "id": "ioptimization-host",
      "title": "ioptimization-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/ioptimization-host.md",
      "chunkIndex": 4,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nTriggers the Strategy window to run a backtest using the out-of-sample Walk Forward Optimization (WFO) Parameter instances.\n\n### ShowDetailedResults\n",
    "metadata": {
      "id": "ioptimization-host",
      "title": "ioptimization-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/ioptimization-host.md",
      "chunkIndex": 5,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nCauses the Strategy window to run a standard optimization using the date range specified in the provided `WFOResult` instance.\n\n**Parameters:**\n- `wfor`: A `WFOResult` instance containing the optimization date range details\n\n## Usage Examples\n\n### Standard Optimization Interaction\n",
    "metadata": {
      "id": "ioptimization-host",
      "title": "ioptimization-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/ioptimization-host.md",
      "chunkIndex": 6,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n### Walk Forward Optimization (WFO) Example\n",
    "metadata": {
      "id": "ioptimization-host",
      "title": "ioptimization-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/ioptimization-host.md",
      "chunkIndex": 7,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n### Strategy Optimizer Interaction\n",
    "metadata": {
      "id": "ioptimization-host",
      "title": "ioptimization-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/ioptimization-host.md",
      "chunkIndex": 8,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n## Best Practices\n\n1. Always check for null before accessing properties\n2. Use the appropriate optimizer based on optimization type\n3. Handle potential exceptions when interacting with optimization hosts\n4. Leverage the `IStrategyHost` for additional strategy-related interactions\n5. Be mindful of performance when processing large optimization result sets\n\n## Optimization Types\n\n- **Standard Optimization:** Explores parameter combinations systematically\n- **Walk Forward Optimization (WFO):** Tests strategy performance across different time windows\n- **Out-of-Sample Testing:** Validates strategy performance on unseen data\n\n## Considerations\n\n- The interface provides a flexible way to interact with different optimization methods\n- Different optimization types (standard, WFO) have unique characteristics\n- Always validate and analyze optimization results carefully ",
    "metadata": {
      "id": "ioptimization-host",
      "title": "ioptimization-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/ioptimization-host.md",
      "chunkIndex": 9,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "OptimizerBase OptimizationMethod\n",
    "metadata": {
      "id": "ioptimization-host",
      "title": "ioptimization-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/ioptimization-host.md",
      "chunkIndex": "code-0",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "# IOptimizationHost Interface\n\n**Namespace:** WealthLab.Backtest  \n**Parent:** None\n\nThe `IOptimizationHost` interface enables Optimization Visualizers to communicate with their host Optimization (Strategy) window. It provides methods and properties to interact with different optimization methods and retrieve optimization-related information.\n\n## Properties\n\n### OptimizationMethod\n"
    }
  },
  {
    "pageContent": "# IOptimizationHost Interface\n\n**Namespace:** WealthLab.Backtest  \n**Parent:** None\n\nThe `IOptimizationHost` interface enables Optimization Visualizers to communicate with their host Optimization (Strategy) window. It provides methods and properties to interact with different optimization methods and retrieve optimization-related information.\n\n## Properties\n\n### OptimizationMethod\n\n\n```csharp\nOptimizerBase OptimizationMethod\n\n```",
    "metadata": {
      "id": "ioptimization-host",
      "title": "ioptimization-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/ioptimization-host.md",
      "chunkIndex": "code-context-0",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "IStrategyHost StrategyHost\n",
    "metadata": {
      "id": "ioptimization-host",
      "title": "ioptimization-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/ioptimization-host.md",
      "chunkIndex": "code-1",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "arent:** None\n\nThe `IOptimizationHost` interface enables Optimization Visualizers to communicate with their host Optimization (Strategy) window. It provides methods and properties to interact with different optimization methods and retrieve optimization-related information.\n\n## Properties\n\n### OptimizationMethod\n```csharp\nOptimizerBase OptimizationMethod\n```\nReturns the selected Optimizer (an instance of the `OptimizerBase` class) that was used during the optimization process.\n\n### StrategyHost\n"
    }
  },
  {
    "pageContent": "arent:** None\n\nThe `IOptimizationHost` interface enables Optimization Visualizers to communicate with their host Optimization (Strategy) window. It provides methods and properties to interact with different optimization methods and retrieve optimization-related information.\n\n## Properties\n\n### OptimizationMethod\n```csharp\nOptimizerBase OptimizationMethod\n```\nReturns the selected Optimizer (an instance of the `OptimizerBase` class) that was used during the optimization process.\n\n### StrategyHost\n\n\n```csharp\nIStrategyHost StrategyHost\n\n```",
    "metadata": {
      "id": "ioptimization-host",
      "title": "ioptimization-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/ioptimization-host.md",
      "chunkIndex": "code-context-1",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "StrategyOptimizer StrategyOptimizer\n",
    "metadata": {
      "id": "ioptimization-host",
      "title": "ioptimization-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/ioptimization-host.md",
      "chunkIndex": "code-2",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "perties to interact with different optimization methods and retrieve optimization-related information.\n\n## Properties\n\n### OptimizationMethod\n```csharp\nOptimizerBase OptimizationMethod\n```\nReturns the selected Optimizer (an instance of the `OptimizerBase` class) that was used during the optimization process.\n\n### StrategyHost\n```csharp\nIStrategyHost StrategyHost\n```\nReturns an instance of the `IStrategyHost` interface, allowing communication with the host Strategy window.\n\n### StrategyOptimizer\n"
    }
  },
  {
    "pageContent": "perties to interact with different optimization methods and retrieve optimization-related information.\n\n## Properties\n\n### OptimizationMethod\n```csharp\nOptimizerBase OptimizationMethod\n```\nReturns the selected Optimizer (an instance of the `OptimizerBase` class) that was used during the optimization process.\n\n### StrategyHost\n```csharp\nIStrategyHost StrategyHost\n```\nReturns an instance of the `IStrategyHost` interface, allowing communication with the host Strategy window.\n\n### StrategyOptimizer\n\n\n```csharp\nStrategyOptimizer StrategyOptimizer\n\n```",
    "metadata": {
      "id": "ioptimization-host",
      "title": "ioptimization-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/ioptimization-host.md",
      "chunkIndex": "code-context-2",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "WFOOptimizer WFOOptimizer\n",
    "metadata": {
      "id": "ioptimization-host",
      "title": "ioptimization-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/ioptimization-host.md",
      "chunkIndex": "code-3",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "erBase OptimizationMethod\n```\nReturns the selected Optimizer (an instance of the `OptimizerBase` class) that was used during the optimization process.\n\n### StrategyHost\n```csharp\nIStrategyHost StrategyHost\n```\nReturns an instance of the `IStrategyHost` interface, allowing communication with the host Strategy window.\n\n### StrategyOptimizer\n```csharp\nStrategyOptimizer StrategyOptimizer\n```\nReturns the instance of the `StrategyOptimizer` used to perform the standard optimization.\n\n### WFOOptimizer\n"
    }
  },
  {
    "pageContent": "erBase OptimizationMethod\n```\nReturns the selected Optimizer (an instance of the `OptimizerBase` class) that was used during the optimization process.\n\n### StrategyHost\n```csharp\nIStrategyHost StrategyHost\n```\nReturns an instance of the `IStrategyHost` interface, allowing communication with the host Strategy window.\n\n### StrategyOptimizer\n```csharp\nStrategyOptimizer StrategyOptimizer\n```\nReturns the instance of the `StrategyOptimizer` used to perform the standard optimization.\n\n### WFOOptimizer\n\n\n```csharp\nWFOOptimizer WFOOptimizer\n\n```",
    "metadata": {
      "id": "ioptimization-host",
      "title": "ioptimization-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/ioptimization-host.md",
      "chunkIndex": "code-context-3",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "void RunWFOBacktest()\n",
    "metadata": {
      "id": "ioptimization-host",
      "title": "ioptimization-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/ioptimization-host.md",
      "chunkIndex": "code-4",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "\n```csharp\nIStrategyHost StrategyHost\n```\nReturns an instance of the `IStrategyHost` interface, allowing communication with the host Strategy window.\n\n### StrategyOptimizer\n```csharp\nStrategyOptimizer StrategyOptimizer\n```\nReturns the instance of the `StrategyOptimizer` used to perform the standard optimization.\n\n### WFOOptimizer\n```csharp\nWFOOptimizer WFOOptimizer\n```\nReturns the instance of the `WFOOptimizer` used to perform the Walk Forward Optimization (WFO).\n\n## Methods\n\n### RunWFOBacktest\n"
    }
  },
  {
    "pageContent": "\n```csharp\nIStrategyHost StrategyHost\n```\nReturns an instance of the `IStrategyHost` interface, allowing communication with the host Strategy window.\n\n### StrategyOptimizer\n```csharp\nStrategyOptimizer StrategyOptimizer\n```\nReturns the instance of the `StrategyOptimizer` used to perform the standard optimization.\n\n### WFOOptimizer\n```csharp\nWFOOptimizer WFOOptimizer\n```\nReturns the instance of the `WFOOptimizer` used to perform the Walk Forward Optimization (WFO).\n\n## Methods\n\n### RunWFOBacktest\n\n\n```csharp\nvoid RunWFOBacktest()\n\n```",
    "metadata": {
      "id": "ioptimization-host",
      "title": "ioptimization-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/ioptimization-host.md",
      "chunkIndex": "code-context-4",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "void ShowDetailedResults(WFOResult wfor)\n",
    "metadata": {
      "id": "ioptimization-host",
      "title": "ioptimization-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/ioptimization-host.md",
      "chunkIndex": "code-5",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "rategyOptimizer StrategyOptimizer\n```\nReturns the instance of the `StrategyOptimizer` used to perform the standard optimization.\n\n### WFOOptimizer\n```csharp\nWFOOptimizer WFOOptimizer\n```\nReturns the instance of the `WFOOptimizer` used to perform the Walk Forward Optimization (WFO).\n\n## Methods\n\n### RunWFOBacktest\n```csharp\nvoid RunWFOBacktest()\n```\nTriggers the Strategy window to run a backtest using the out-of-sample Walk Forward Optimization (WFO) Parameter instances.\n\n### ShowDetailedResults\n"
    }
  },
  {
    "pageContent": "rategyOptimizer StrategyOptimizer\n```\nReturns the instance of the `StrategyOptimizer` used to perform the standard optimization.\n\n### WFOOptimizer\n```csharp\nWFOOptimizer WFOOptimizer\n```\nReturns the instance of the `WFOOptimizer` used to perform the Walk Forward Optimization (WFO).\n\n## Methods\n\n### RunWFOBacktest\n```csharp\nvoid RunWFOBacktest()\n```\nTriggers the Strategy window to run a backtest using the out-of-sample Walk Forward Optimization (WFO) Parameter instances.\n\n### ShowDetailedResults\n\n\n```csharp\nvoid ShowDetailedResults(WFOResult wfor)\n\n```",
    "metadata": {
      "id": "ioptimization-host",
      "title": "ioptimization-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/ioptimization-host.md",
      "chunkIndex": "code-context-5",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public class MyOptimizationVisualizer\n{\n    private IOptimizationHost _optimizationHost;\n\n    public void InitializeOptimization(IOptimizationHost host)\n    {\n        _optimizationHost = host;\n\n        // Access optimization method\n        OptimizerBase optimizer = _optimizationHost.OptimizationMethod;\n        \n        // Interact with strategy host\n        IStrategyHost strategyHost = _optimizationHost.StrategyHost;\n    }\n}\n",
    "metadata": {
      "id": "ioptimization-host",
      "title": "ioptimization-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/ioptimization-host.md",
      "chunkIndex": "code-6",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "acktest()\n```\nTriggers the Strategy window to run a backtest using the out-of-sample Walk Forward Optimization (WFO) Parameter instances.\n\n### ShowDetailedResults\n```csharp\nvoid ShowDetailedResults(WFOResult wfor)\n```\nCauses the Strategy window to run a standard optimization using the date range specified in the provided `WFOResult` instance.\n\n**Parameters:**\n- `wfor`: A `WFOResult` instance containing the optimization date range details\n\n## Usage Examples\n\n### Standard Optimization Interaction\n"
    }
  },
  {
    "pageContent": "acktest()\n```\nTriggers the Strategy window to run a backtest using the out-of-sample Walk Forward Optimization (WFO) Parameter instances.\n\n### ShowDetailedResults\n```csharp\nvoid ShowDetailedResults(WFOResult wfor)\n```\nCauses the Strategy window to run a standard optimization using the date range specified in the provided `WFOResult` instance.\n\n**Parameters:**\n- `wfor`: A `WFOResult` instance containing the optimization date range details\n\n## Usage Examples\n\n### Standard Optimization Interaction\n\n\n```csharp\npublic class MyOptimizationVisualizer\n{\n    private IOptimizationHost _optimizationHost;\n\n    public void InitializeOptimization(IOptimizationHost host)\n    {\n        _optimizationHost = host;\n\n        // Access optimization method\n        OptimizerBase optimizer = _optimizationHost.OptimizationMethod;\n        \n        // Interact with strategy host\n        IStrategyHost strategyHost = _optimizationHost.StrategyHost;\n    }\n}\n\n```",
    "metadata": {
      "id": "ioptimization-host",
      "title": "ioptimization-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/ioptimization-host.md",
      "chunkIndex": "code-context-6",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public class WFOVisualizerExtension\n{\n    private IOptimizationHost _optimizationHost;\n\n    public void AnalyzeWFOResults()\n    {\n        // Get WFO Optimizer\n        WFOOptimizer wfoOptimizer = _optimizationHost.WFOOptimizer;\n\n        // Run WFO backtest\n        _optimizationHost.RunWFOBacktest();\n\n        // Show detailed results for a specific WFO result\n        WFOResult selectedResult = GetSelectedWFOResult();\n        if (selectedResult != null)\n        {\n            _optimizationHost.ShowDetailedResults(selectedResult);\n        }\n    }\n\n    private WFOResult GetSelectedWFOResult()\n    {\n        // Implementation to retrieve selected WFO result\n        return null;\n    }\n}\n",
    "metadata": {
      "id": "ioptimization-host",
      "title": "ioptimization-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/ioptimization-host.md",
      "chunkIndex": "code-7",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "Interaction\n```csharp\npublic class MyOptimizationVisualizer\n{\n    private IOptimizationHost _optimizationHost;\n\n    public void InitializeOptimization(IOptimizationHost host)\n    {\n        _optimizationHost = host;\n\n        // Access optimization method\n        OptimizerBase optimizer = _optimizationHost.OptimizationMethod;\n        \n        // Interact with strategy host\n        IStrategyHost strategyHost = _optimizationHost.StrategyHost;\n    }\n}\n```\n\n### Walk Forward Optimization (WFO) Example\n"
    }
  },
  {
    "pageContent": "Interaction\n```csharp\npublic class MyOptimizationVisualizer\n{\n    private IOptimizationHost _optimizationHost;\n\n    public void InitializeOptimization(IOptimizationHost host)\n    {\n        _optimizationHost = host;\n\n        // Access optimization method\n        OptimizerBase optimizer = _optimizationHost.OptimizationMethod;\n        \n        // Interact with strategy host\n        IStrategyHost strategyHost = _optimizationHost.StrategyHost;\n    }\n}\n```\n\n### Walk Forward Optimization (WFO) Example\n\n\n```csharp\npublic class WFOVisualizerExtension\n{\n    private IOptimizationHost _optimizationHost;\n\n    public void AnalyzeWFOResults()\n    {\n        // Get WFO Optimizer\n        WFOOptimizer wfoOptimizer = _optimizationHost.WFOOptimizer;\n\n        // Run WFO backtest\n        _optimizationHost.RunWFOBacktest();\n\n        // Show detailed results for a specific WFO result\n        WFOResult selectedResult = GetSelectedWFOResult();\n        if (selectedResult != null)\n        {\n            _optimizationHost.ShowDetailedResults(selectedResult);\n        }\n    }\n\n    private WFOResult GetSelectedWFOResult()\n    {\n        // Implementation to retrieve selected WFO result\n        return null;\n    }\n}\n\n```",
    "metadata": {
      "id": "ioptimization-host",
      "title": "ioptimization-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/ioptimization-host.md",
      "chunkIndex": "code-context-7",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public class OptimizationAnalyzer\n{\n    private IOptimizationHost _optimizationHost;\n\n    public void AnalyzeOptimizationResults()\n    {\n        // Access strategy optimizer\n        StrategyOptimizer strategyOptimizer = _optimizationHost.StrategyOptimizer;\n\n        // Retrieve optimization results\n        var results = strategyOptimizer.Results;\n        \n        // Perform analysis or visualization\n        foreach (var result in results)\n        {\n            // Process each optimization result\n            ProcessOptimizationResult(result);\n        }\n    }\n\n    private void ProcessOptimizationResult(object result)\n    {\n        // Custom result processing logic\n    }\n}\n",
    "metadata": {
      "id": "ioptimization-host",
      "title": "ioptimization-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/ioptimization-host.md",
      "chunkIndex": "code-8",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "\n        // Run WFO backtest\n        _optimizationHost.RunWFOBacktest();\n\n        // Show detailed results for a specific WFO result\n        WFOResult selectedResult = GetSelectedWFOResult();\n        if (selectedResult != null)\n        {\n            _optimizationHost.ShowDetailedResults(selectedResult);\n        }\n    }\n\n    private WFOResult GetSelectedWFOResult()\n    {\n        // Implementation to retrieve selected WFO result\n        return null;\n    }\n}\n```\n\n### Strategy Optimizer Interaction\n"
    }
  },
  {
    "pageContent": "\n        // Run WFO backtest\n        _optimizationHost.RunWFOBacktest();\n\n        // Show detailed results for a specific WFO result\n        WFOResult selectedResult = GetSelectedWFOResult();\n        if (selectedResult != null)\n        {\n            _optimizationHost.ShowDetailedResults(selectedResult);\n        }\n    }\n\n    private WFOResult GetSelectedWFOResult()\n    {\n        // Implementation to retrieve selected WFO result\n        return null;\n    }\n}\n```\n\n### Strategy Optimizer Interaction\n\n\n```csharp\npublic class OptimizationAnalyzer\n{\n    private IOptimizationHost _optimizationHost;\n\n    public void AnalyzeOptimizationResults()\n    {\n        // Access strategy optimizer\n        StrategyOptimizer strategyOptimizer = _optimizationHost.StrategyOptimizer;\n\n        // Retrieve optimization results\n        var results = strategyOptimizer.Results;\n        \n        // Perform analysis or visualization\n        foreach (var result in results)\n        {\n            // Process each optimization result\n            ProcessOptimizationResult(result);\n        }\n    }\n\n    private void ProcessOptimizationResult(object result)\n    {\n        // Custom result processing logic\n    }\n}\n\n```",
    "metadata": {
      "id": "ioptimization-host",
      "title": "ioptimization-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/ioptimization-host.md",
      "chunkIndex": "code-context-8",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "# IStrategyEvolverHost Interface\n\n**Namespace:** WealthLab.Backtest  \n**Parent:** None\n\nThe `IStrategyEvolverHost` interface enables Strategy Evolver Visualizers to communicate with their host Strategy Evolver window. It provides methods for opening strategy windows and managing filter sets based on evolution results.\n\n## Methods\n\n### OpenStrategyWindow\n",
    "metadata": {
      "id": "istrategy-evolver-host",
      "title": "istrategy-evolver-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/istrategy-evolver-host.md",
      "chunkIndex": 0,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nOpens a new Strategy window in WealthLab 8 with a Strategy generated from the specified `StrategyEvolverResult` instance.\n\n**Parameters:**\n- `ser`: A `StrategyEvolverResult` instance containing the evolved strategy details\n\n### PushResultsIntoFilterSetWindow\n",
    "metadata": {
      "id": "istrategy-evolver-host",
      "title": "istrategy-evolver-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/istrategy-evolver-host.md",
      "chunkIndex": 1,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nOpens the Filter Sets tool window and populates it with the contents of the specified `StrategyEvolverResultList`.\n\n**Parameters:**\n- `erl`: A `StrategyEvolverResultList` containing the evolution results to be displayed\n\n## Usage Examples\n\n### Opening Strategy Window with Evolution Results\n",
    "metadata": {
      "id": "istrategy-evolver-host",
      "title": "istrategy-evolver-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/istrategy-evolver-host.md",
      "chunkIndex": 2,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n### Managing Filter Sets\n",
    "metadata": {
      "id": "istrategy-evolver-host",
      "title": "istrategy-evolver-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/istrategy-evolver-host.md",
      "chunkIndex": 3,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n### Combined Evolution Analysis\n",
    "metadata": {
      "id": "istrategy-evolver-host",
      "title": "istrategy-evolver-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/istrategy-evolver-host.md",
      "chunkIndex": 4,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n## Best Practices\n\n1. **Error Handling**\n   - Always implement proper error handling when calling interface methods\n   - Validate input parameters before making calls\n   - Handle potential exceptions that may occur during window operations\n\n2. **Performance Considerations**\n   - Process and filter results before pushing to Filter Sets window\n   - Consider memory usage when dealing with large result sets\n   - Implement efficient result filtering and sorting\n\n3. **User Experience**\n   - Provide feedback during long-running operations\n   - Ensure meaningful organization of filter sets\n   - Consider implementing progress indicators for large result sets\n\n4. **Data Management**\n   - Maintain proper references to evolution results\n   - Clean up resources when no longer needed\n   - Cache results appropriately to improve performance\n\n## Common Use Cases\n\n1. **Strategy Analysis**\n   - Opening best-performing strategies for detailed analysis\n   - Comparing multiple evolved strategies\n   - Analyzing strategy parameters and performance\n\n2. **Filter Set Management**\n   - Organizing evolution results into meaningful categories\n   - Creating custom filter sets based on performance criteria\n   - Managing multiple evolution result sets\n\n3. **Results Visualization**\n   - Displaying evolution progress and results\n   - Creating custom visualizations of strategy performance\n   - Comparing different evolution runs\n\n## Notes\n\n- The interface is primarily used in Strategy Evolver Visualizer extensions\n- Results can be organized and filtered before display\n- Consider implementing caching for frequently accessed results\n- Ensure proper cleanup of resources when closing windows ",
    "metadata": {
      "id": "istrategy-evolver-host",
      "title": "istrategy-evolver-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/istrategy-evolver-host.md",
      "chunkIndex": 5,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "public void OpenStrategyWindow(StrategyEvolverResult ser)\n",
    "metadata": {
      "id": "istrategy-evolver-host",
      "title": "istrategy-evolver-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/istrategy-evolver-host.md",
      "chunkIndex": "code-0",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "# IStrategyEvolverHost Interface\n\n**Namespace:** WealthLab.Backtest  \n**Parent:** None\n\nThe `IStrategyEvolverHost` interface enables Strategy Evolver Visualizers to communicate with their host Strategy Evolver window. It provides methods for opening strategy windows and managing filter sets based on evolution results.\n\n## Methods\n\n### OpenStrategyWindow\n"
    }
  },
  {
    "pageContent": "# IStrategyEvolverHost Interface\n\n**Namespace:** WealthLab.Backtest  \n**Parent:** None\n\nThe `IStrategyEvolverHost` interface enables Strategy Evolver Visualizers to communicate with their host Strategy Evolver window. It provides methods for opening strategy windows and managing filter sets based on evolution results.\n\n## Methods\n\n### OpenStrategyWindow\n\n\n```csharp\npublic void OpenStrategyWindow(StrategyEvolverResult ser)\n\n```",
    "metadata": {
      "id": "istrategy-evolver-host",
      "title": "istrategy-evolver-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/istrategy-evolver-host.md",
      "chunkIndex": "code-context-0",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public void PushResultsIntoFilterSetWindow(StrategyEvolverResultList erl)\n",
    "metadata": {
      "id": "istrategy-evolver-host",
      "title": "istrategy-evolver-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/istrategy-evolver-host.md",
      "chunkIndex": "code-1",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": " host Strategy Evolver window. It provides methods for opening strategy windows and managing filter sets based on evolution results.\n\n## Methods\n\n### OpenStrategyWindow\n```csharp\npublic void OpenStrategyWindow(StrategyEvolverResult ser)\n```\nOpens a new Strategy window in WealthLab 8 with a Strategy generated from the specified `StrategyEvolverResult` instance.\n\n**Parameters:**\n- `ser`: A `StrategyEvolverResult` instance containing the evolved strategy details\n\n### PushResultsIntoFilterSetWindow\n"
    }
  },
  {
    "pageContent": " host Strategy Evolver window. It provides methods for opening strategy windows and managing filter sets based on evolution results.\n\n## Methods\n\n### OpenStrategyWindow\n```csharp\npublic void OpenStrategyWindow(StrategyEvolverResult ser)\n```\nOpens a new Strategy window in WealthLab 8 with a Strategy generated from the specified `StrategyEvolverResult` instance.\n\n**Parameters:**\n- `ser`: A `StrategyEvolverResult` instance containing the evolved strategy details\n\n### PushResultsIntoFilterSetWindow\n\n\n```csharp\npublic void PushResultsIntoFilterSetWindow(StrategyEvolverResultList erl)\n\n```",
    "metadata": {
      "id": "istrategy-evolver-host",
      "title": "istrategy-evolver-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/istrategy-evolver-host.md",
      "chunkIndex": "code-context-1",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public class EvolutionVisualizer\n{\n    private IStrategyEvolverHost _evolverHost;\n\n    public void DisplayBestStrategy(StrategyEvolverResult bestResult)\n    {\n        try\n        {\n            // Open strategy window with best evolved result\n            _evolverHost.OpenStrategyWindow(bestResult);\n        }\n        catch (Exception ex)\n        {\n            // Handle any errors during window opening\n            Console.WriteLine($\"Error opening strategy window: {ex.Message}\");\n        }\n    }\n}\n",
    "metadata": {
      "id": "istrategy-evolver-host",
      "title": "istrategy-evolver-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/istrategy-evolver-host.md",
      "chunkIndex": "code-2",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "\n- `ser`: A `StrategyEvolverResult` instance containing the evolved strategy details\n\n### PushResultsIntoFilterSetWindow\n```csharp\npublic void PushResultsIntoFilterSetWindow(StrategyEvolverResultList erl)\n```\nOpens the Filter Sets tool window and populates it with the contents of the specified `StrategyEvolverResultList`.\n\n**Parameters:**\n- `erl`: A `StrategyEvolverResultList` containing the evolution results to be displayed\n\n## Usage Examples\n\n### Opening Strategy Window with Evolution Results\n"
    }
  },
  {
    "pageContent": "\n- `ser`: A `StrategyEvolverResult` instance containing the evolved strategy details\n\n### PushResultsIntoFilterSetWindow\n```csharp\npublic void PushResultsIntoFilterSetWindow(StrategyEvolverResultList erl)\n```\nOpens the Filter Sets tool window and populates it with the contents of the specified `StrategyEvolverResultList`.\n\n**Parameters:**\n- `erl`: A `StrategyEvolverResultList` containing the evolution results to be displayed\n\n## Usage Examples\n\n### Opening Strategy Window with Evolution Results\n\n\n```csharp\npublic class EvolutionVisualizer\n{\n    private IStrategyEvolverHost _evolverHost;\n\n    public void DisplayBestStrategy(StrategyEvolverResult bestResult)\n    {\n        try\n        {\n            // Open strategy window with best evolved result\n            _evolverHost.OpenStrategyWindow(bestResult);\n        }\n        catch (Exception ex)\n        {\n            // Handle any errors during window opening\n            Console.WriteLine($\"Error opening strategy window: {ex.Message}\");\n        }\n    }\n}\n\n```",
    "metadata": {
      "id": "istrategy-evolver-host",
      "title": "istrategy-evolver-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/istrategy-evolver-host.md",
      "chunkIndex": "code-context-2",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public class FilterSetManager\n{\n    private IStrategyEvolverHost _evolverHost;\n    private StrategyEvolverResultList _resultList;\n\n    public void ProcessEvolutionResults()\n    {\n        try\n        {\n            // Collect and process evolution results\n            _resultList = new StrategyEvolverResultList();\n            \n            // Add results to the list\n            foreach (var result in GetEvolutionResults())\n            {\n                _resultList.Add(result);\n            }\n\n            // Display results in Filter Sets window\n            _evolverHost.PushResultsIntoFilterSetWindow(_resultList);\n        }\n        catch (Exception ex)\n        {\n            // Handle any errors during filter set processing\n            Console.WriteLine($\"Error processing filter sets: {ex.Message}\");\n        }\n    }\n\n    private IEnumerable<StrategyEvolverResult> GetEvolutionResults()\n    {\n        // Implementation to retrieve evolution results\n        yield break;\n    }\n}\n",
    "metadata": {
      "id": "istrategy-evolver-host",
      "title": "istrategy-evolver-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/istrategy-evolver-host.md",
      "chunkIndex": "code-3",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "er\n{\n    private IStrategyEvolverHost _evolverHost;\n\n    public void DisplayBestStrategy(StrategyEvolverResult bestResult)\n    {\n        try\n        {\n            // Open strategy window with best evolved result\n            _evolverHost.OpenStrategyWindow(bestResult);\n        }\n        catch (Exception ex)\n        {\n            // Handle any errors during window opening\n            Console.WriteLine($\"Error opening strategy window: {ex.Message}\");\n        }\n    }\n}\n```\n\n### Managing Filter Sets\n"
    }
  },
  {
    "pageContent": "er\n{\n    private IStrategyEvolverHost _evolverHost;\n\n    public void DisplayBestStrategy(StrategyEvolverResult bestResult)\n    {\n        try\n        {\n            // Open strategy window with best evolved result\n            _evolverHost.OpenStrategyWindow(bestResult);\n        }\n        catch (Exception ex)\n        {\n            // Handle any errors during window opening\n            Console.WriteLine($\"Error opening strategy window: {ex.Message}\");\n        }\n    }\n}\n```\n\n### Managing Filter Sets\n\n\n```csharp\npublic class FilterSetManager\n{\n    private IStrategyEvolverHost _evolverHost;\n    private StrategyEvolverResultList _resultList;\n\n    public void ProcessEvolutionResults()\n    {\n        try\n        {\n            // Collect and process evolution results\n            _resultList = new StrategyEvolverResultList();\n            \n            // Add results to the list\n            foreach (var result in GetEvolutionResults())\n            {\n                _resultList.Add(result);\n            }\n\n            // Display results in Filter Sets window\n            _evolverHost.PushResultsIntoFilterSetWindow(_resultList);\n        }\n        catch (Exception ex)\n        {\n            // Handle any errors during filter set processing\n            Console.WriteLine($\"Error processing filter sets: {ex.Message}\");\n        }\n    }\n\n    private IEnumerable<StrategyEvolverResult> GetEvolutionResults()\n    {\n        // Implementation to retrieve evolution results\n        yield break;\n    }\n}\n\n```",
    "metadata": {
      "id": "istrategy-evolver-host",
      "title": "istrategy-evolver-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/istrategy-evolver-host.md",
      "chunkIndex": "code-context-3",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public class EvolutionAnalyzer\n{\n    private readonly IStrategyEvolverHost _evolverHost;\n\n    public EvolutionAnalyzer(IStrategyEvolverHost host)\n    {\n        _evolverHost = host;\n    }\n\n    public void AnalyzeEvolutionResults(StrategyEvolverResultList results)\n    {\n        // Find best performing strategy\n        var bestStrategy = FindBestStrategy(results);\n        if (bestStrategy != null)\n        {\n            // Open strategy window for detailed analysis\n            _evolverHost.OpenStrategyWindow(bestStrategy);\n        }\n\n        // Filter and categorize results\n        var filteredResults = FilterResults(results);\n        if (filteredResults.Count > 0)\n        {\n            // Display filtered results in Filter Sets window\n            _evolverHost.PushResultsIntoFilterSetWindow(filteredResults);\n        }\n    }\n\n    private StrategyEvolverResult FindBestStrategy(StrategyEvolverResultList results)\n    {\n        // Implementation to find best strategy based on criteria\n        return null;\n    }\n\n    private StrategyEvolverResultList FilterResults(StrategyEvolverResultList results)\n    {\n        // Implementation to filter and categorize results\n        return new StrategyEvolverResultList();\n    }\n}\n",
    "metadata": {
      "id": "istrategy-evolver-host",
      "title": "istrategy-evolver-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/istrategy-evolver-host.md",
      "chunkIndex": "code-4",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ults in Filter Sets window\n            _evolverHost.PushResultsIntoFilterSetWindow(_resultList);\n        }\n        catch (Exception ex)\n        {\n            // Handle any errors during filter set processing\n            Console.WriteLine($\"Error processing filter sets: {ex.Message}\");\n        }\n    }\n\n    private IEnumerable<StrategyEvolverResult> GetEvolutionResults()\n    {\n        // Implementation to retrieve evolution results\n        yield break;\n    }\n}\n```\n\n### Combined Evolution Analysis\n"
    }
  },
  {
    "pageContent": "ults in Filter Sets window\n            _evolverHost.PushResultsIntoFilterSetWindow(_resultList);\n        }\n        catch (Exception ex)\n        {\n            // Handle any errors during filter set processing\n            Console.WriteLine($\"Error processing filter sets: {ex.Message}\");\n        }\n    }\n\n    private IEnumerable<StrategyEvolverResult> GetEvolutionResults()\n    {\n        // Implementation to retrieve evolution results\n        yield break;\n    }\n}\n```\n\n### Combined Evolution Analysis\n\n\n```csharp\npublic class EvolutionAnalyzer\n{\n    private readonly IStrategyEvolverHost _evolverHost;\n\n    public EvolutionAnalyzer(IStrategyEvolverHost host)\n    {\n        _evolverHost = host;\n    }\n\n    public void AnalyzeEvolutionResults(StrategyEvolverResultList results)\n    {\n        // Find best performing strategy\n        var bestStrategy = FindBestStrategy(results);\n        if (bestStrategy != null)\n        {\n            // Open strategy window for detailed analysis\n            _evolverHost.OpenStrategyWindow(bestStrategy);\n        }\n\n        // Filter and categorize results\n        var filteredResults = FilterResults(results);\n        if (filteredResults.Count > 0)\n        {\n            // Display filtered results in Filter Sets window\n            _evolverHost.PushResultsIntoFilterSetWindow(filteredResults);\n        }\n    }\n\n    private StrategyEvolverResult FindBestStrategy(StrategyEvolverResultList results)\n    {\n        // Implementation to find best strategy based on criteria\n        return null;\n    }\n\n    private StrategyEvolverResultList FilterResults(StrategyEvolverResultList results)\n    {\n        // Implementation to filter and categorize results\n        return new StrategyEvolverResultList();\n    }\n}\n\n```",
    "metadata": {
      "id": "istrategy-evolver-host",
      "title": "istrategy-evolver-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/istrategy-evolver-host.md",
      "chunkIndex": "code-context-4",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "# IStrategyHost Interface\n\n**Namespace:** WealthLab.Backtest  \n**Parent:** None\n\nThe `IStrategyHost` interface enables Performance Visualizers to communicate with their host Strategy window. It provides methods and properties for controlling strategy execution, parameter management, and window navigation.\n\n## Properties\n\n### Backtester\n",
    "metadata": {
      "id": "istrategy-host",
      "title": "istrategy-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/istrategy-host.md",
      "chunkIndex": 0,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the `Backtester` instance for the Strategy window.\n\n### BenchmarkBacktester\n",
    "metadata": {
      "id": "istrategy-host",
      "title": "istrategy-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/istrategy-host.md",
      "chunkIndex": 1,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the `Backtester` instance that ran the buy & hold benchmark comparison for the Strategy window.\n\n### Strategy\n",
    "metadata": {
      "id": "istrategy-host",
      "title": "istrategy-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/istrategy-host.md",
      "chunkIndex": 2,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the `Strategy` instance for the Strategy in the host window.\n\n## Methods\n\n### ChartSymbolAtBar\n",
    "metadata": {
      "id": "istrategy-host",
      "title": "istrategy-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/istrategy-host.md",
      "chunkIndex": 3,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nSwitches to the chart tab, displays the specified symbol, and scrolls to the specified bar index.\n\n**Parameters:**\n- `symbol`: The symbol to chart\n- `idx`: The bar index to scroll to\n\n### ParameterDefaultsChanged\n",
    "metadata": {
      "id": "istrategy-host",
      "title": "istrategy-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/istrategy-host.md",
      "chunkIndex": 4,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nNotifies the Strategy window that Strategy Parameter defaults have been modified, typically by an Optimization Visualizer.\n\n### RunWithOverrides\n",
    "metadata": {
      "id": "istrategy-host",
      "title": "istrategy-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/istrategy-host.md",
      "chunkIndex": 5,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nExecutes a backtest using specified Parameter override values.\n\n**Parameters:**\n- `overrides`: List of parameter values to use for the backtest\n\n### SaveParameterDefaults\n",
    "metadata": {
      "id": "istrategy-host",
      "title": "istrategy-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/istrategy-host.md",
      "chunkIndex": 6,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nSaves the provided Parameter values as defaults for the Strategy.\n\n**Parameters:**\n- `paramValues`: List of parameter values to save as defaults\n\n### ShowTabPage\n",
    "metadata": {
      "id": "istrategy-host",
      "title": "istrategy-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/istrategy-host.md",
      "chunkIndex": 7,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nSwitches the Strategy window to the specified tab page.\n\n**Valid tab values:**\n- `Settings`\n- `Designer`\n- `Signals`\n- `BacktestResults`\n- `Chart`\n- `Optimization`\n- `DebugLog`\n- `PreferredValues`\n\n## Usage Examples\n\n### Parameter Management\n",
    "metadata": {
      "id": "istrategy-host",
      "title": "istrategy-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/istrategy-host.md",
      "chunkIndex": 8,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n### Chart Navigation\n",
    "metadata": {
      "id": "istrategy-host",
      "title": "istrategy-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/istrategy-host.md",
      "chunkIndex": 9,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n### Backtester Analysis\n",
    "metadata": {
      "id": "istrategy-host",
      "title": "istrategy-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/istrategy-host.md",
      "chunkIndex": 10,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n## Best Practices\n\n1. **Parameter Management**\n   - Validate parameter values before saving\n   - Notify host of parameter changes\n   - Handle parameter override errors gracefully\n\n2. **Navigation**\n   - Use appropriate tab pages for context\n   - Provide visual feedback during navigation\n   - Handle navigation errors\n\n3. **Backtesting**\n   - Compare strategy against benchmark\n   - Analyze multiple performance metrics\n   - Consider transaction costs and slippage\n\n4. **Error Handling**\n   - Validate inputs before operations\n   - Handle exceptions appropriately\n   - Provide meaningful error messages\n\n## Common Use Cases\n\n1. **Optimization**\n   - Applying optimized parameters\n   - Running backtests with different parameters\n   - Comparing optimization results\n\n2. **Performance Analysis**\n   - Analyzing strategy performance\n   - Comparing with benchmark\n   - Visualizing results\n\n3. **Signal Analysis**\n   - Reviewing specific signals\n   - Analyzing entry/exit points\n   - Validating strategy logic\n\n## Notes\n\n- Interface primarily used in Performance Visualizer extensions\n- Coordinate parameter changes with backtesting\n- Consider performance implications of operations\n- Handle benchmark comparisons appropriately ",
    "metadata": {
      "id": "istrategy-host",
      "title": "istrategy-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/istrategy-host.md",
      "chunkIndex": 11,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "public Backtester Backtester\n",
    "metadata": {
      "id": "istrategy-host",
      "title": "istrategy-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/istrategy-host.md",
      "chunkIndex": "code-0",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "# IStrategyHost Interface\n\n**Namespace:** WealthLab.Backtest  \n**Parent:** None\n\nThe `IStrategyHost` interface enables Performance Visualizers to communicate with their host Strategy window. It provides methods and properties for controlling strategy execution, parameter management, and window navigation.\n\n## Properties\n\n### Backtester\n"
    }
  },
  {
    "pageContent": "# IStrategyHost Interface\n\n**Namespace:** WealthLab.Backtest  \n**Parent:** None\n\nThe `IStrategyHost` interface enables Performance Visualizers to communicate with their host Strategy window. It provides methods and properties for controlling strategy execution, parameter management, and window navigation.\n\n## Properties\n\n### Backtester\n\n\n```csharp\npublic Backtester Backtester\n\n```",
    "metadata": {
      "id": "istrategy-host",
      "title": "istrategy-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/istrategy-host.md",
      "chunkIndex": "code-context-0",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public Backtester BenchmarkBacktester\n",
    "metadata": {
      "id": "istrategy-host",
      "title": "istrategy-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/istrategy-host.md",
      "chunkIndex": "code-1",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "# IStrategyHost Interface\n\n**Namespace:** WealthLab.Backtest  \n**Parent:** None\n\nThe `IStrategyHost` interface enables Performance Visualizers to communicate with their host Strategy window. It provides methods and properties for controlling strategy execution, parameter management, and window navigation.\n\n## Properties\n\n### Backtester\n```csharp\npublic Backtester Backtester\n```\nReturns the `Backtester` instance for the Strategy window.\n\n### BenchmarkBacktester\n"
    }
  },
  {
    "pageContent": "# IStrategyHost Interface\n\n**Namespace:** WealthLab.Backtest  \n**Parent:** None\n\nThe `IStrategyHost` interface enables Performance Visualizers to communicate with their host Strategy window. It provides methods and properties for controlling strategy execution, parameter management, and window navigation.\n\n## Properties\n\n### Backtester\n```csharp\npublic Backtester Backtester\n```\nReturns the `Backtester` instance for the Strategy window.\n\n### BenchmarkBacktester\n\n\n```csharp\npublic Backtester BenchmarkBacktester\n\n```",
    "metadata": {
      "id": "istrategy-host",
      "title": "istrategy-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/istrategy-host.md",
      "chunkIndex": "code-context-1",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public Strategy Strategy\n",
    "metadata": {
      "id": "istrategy-host",
      "title": "istrategy-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/istrategy-host.md",
      "chunkIndex": "code-2",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "alizers to communicate with their host Strategy window. It provides methods and properties for controlling strategy execution, parameter management, and window navigation.\n\n## Properties\n\n### Backtester\n```csharp\npublic Backtester Backtester\n```\nReturns the `Backtester` instance for the Strategy window.\n\n### BenchmarkBacktester\n```csharp\npublic Backtester BenchmarkBacktester\n```\nReturns the `Backtester` instance that ran the buy & hold benchmark comparison for the Strategy window.\n\n### Strategy\n"
    }
  },
  {
    "pageContent": "alizers to communicate with their host Strategy window. It provides methods and properties for controlling strategy execution, parameter management, and window navigation.\n\n## Properties\n\n### Backtester\n```csharp\npublic Backtester Backtester\n```\nReturns the `Backtester` instance for the Strategy window.\n\n### BenchmarkBacktester\n```csharp\npublic Backtester BenchmarkBacktester\n```\nReturns the `Backtester` instance that ran the buy & hold benchmark comparison for the Strategy window.\n\n### Strategy\n\n\n```csharp\npublic Strategy Strategy\n\n```",
    "metadata": {
      "id": "istrategy-host",
      "title": "istrategy-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/istrategy-host.md",
      "chunkIndex": "code-context-2",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "void ChartSymbolAtBar(string symbol, int idx)\n",
    "metadata": {
      "id": "istrategy-host",
      "title": "istrategy-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/istrategy-host.md",
      "chunkIndex": "code-3",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ement, and window navigation.\n\n## Properties\n\n### Backtester\n```csharp\npublic Backtester Backtester\n```\nReturns the `Backtester` instance for the Strategy window.\n\n### BenchmarkBacktester\n```csharp\npublic Backtester BenchmarkBacktester\n```\nReturns the `Backtester` instance that ran the buy & hold benchmark comparison for the Strategy window.\n\n### Strategy\n```csharp\npublic Strategy Strategy\n```\nReturns the `Strategy` instance for the Strategy in the host window.\n\n## Methods\n\n### ChartSymbolAtBar\n"
    }
  },
  {
    "pageContent": "ement, and window navigation.\n\n## Properties\n\n### Backtester\n```csharp\npublic Backtester Backtester\n```\nReturns the `Backtester` instance for the Strategy window.\n\n### BenchmarkBacktester\n```csharp\npublic Backtester BenchmarkBacktester\n```\nReturns the `Backtester` instance that ran the buy & hold benchmark comparison for the Strategy window.\n\n### Strategy\n```csharp\npublic Strategy Strategy\n```\nReturns the `Strategy` instance for the Strategy in the host window.\n\n## Methods\n\n### ChartSymbolAtBar\n\n\n```csharp\nvoid ChartSymbolAtBar(string symbol, int idx)\n\n```",
    "metadata": {
      "id": "istrategy-host",
      "title": "istrategy-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/istrategy-host.md",
      "chunkIndex": "code-context-3",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "void ParameterDefaultsChanged()\n",
    "metadata": {
      "id": "istrategy-host",
      "title": "istrategy-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/istrategy-host.md",
      "chunkIndex": "code-4",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": " that ran the buy & hold benchmark comparison for the Strategy window.\n\n### Strategy\n```csharp\npublic Strategy Strategy\n```\nReturns the `Strategy` instance for the Strategy in the host window.\n\n## Methods\n\n### ChartSymbolAtBar\n```csharp\nvoid ChartSymbolAtBar(string symbol, int idx)\n```\nSwitches to the chart tab, displays the specified symbol, and scrolls to the specified bar index.\n\n**Parameters:**\n- `symbol`: The symbol to chart\n- `idx`: The bar index to scroll to\n\n### ParameterDefaultsChanged\n"
    }
  },
  {
    "pageContent": " that ran the buy & hold benchmark comparison for the Strategy window.\n\n### Strategy\n```csharp\npublic Strategy Strategy\n```\nReturns the `Strategy` instance for the Strategy in the host window.\n\n## Methods\n\n### ChartSymbolAtBar\n```csharp\nvoid ChartSymbolAtBar(string symbol, int idx)\n```\nSwitches to the chart tab, displays the specified symbol, and scrolls to the specified bar index.\n\n**Parameters:**\n- `symbol`: The symbol to chart\n- `idx`: The bar index to scroll to\n\n### ParameterDefaultsChanged\n\n\n```csharp\nvoid ParameterDefaultsChanged()\n\n```",
    "metadata": {
      "id": "istrategy-host",
      "title": "istrategy-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/istrategy-host.md",
      "chunkIndex": "code-context-4",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "void RunWithOverrides(List<double> overrides)\n",
    "metadata": {
      "id": "istrategy-host",
      "title": "istrategy-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/istrategy-host.md",
      "chunkIndex": "code-5",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": ".\n\n## Methods\n\n### ChartSymbolAtBar\n```csharp\nvoid ChartSymbolAtBar(string symbol, int idx)\n```\nSwitches to the chart tab, displays the specified symbol, and scrolls to the specified bar index.\n\n**Parameters:**\n- `symbol`: The symbol to chart\n- `idx`: The bar index to scroll to\n\n### ParameterDefaultsChanged\n```csharp\nvoid ParameterDefaultsChanged()\n```\nNotifies the Strategy window that Strategy Parameter defaults have been modified, typically by an Optimization Visualizer.\n\n### RunWithOverrides\n"
    }
  },
  {
    "pageContent": ".\n\n## Methods\n\n### ChartSymbolAtBar\n```csharp\nvoid ChartSymbolAtBar(string symbol, int idx)\n```\nSwitches to the chart tab, displays the specified symbol, and scrolls to the specified bar index.\n\n**Parameters:**\n- `symbol`: The symbol to chart\n- `idx`: The bar index to scroll to\n\n### ParameterDefaultsChanged\n```csharp\nvoid ParameterDefaultsChanged()\n```\nNotifies the Strategy window that Strategy Parameter defaults have been modified, typically by an Optimization Visualizer.\n\n### RunWithOverrides\n\n\n```csharp\nvoid RunWithOverrides(List<double> overrides)\n\n```",
    "metadata": {
      "id": "istrategy-host",
      "title": "istrategy-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/istrategy-host.md",
      "chunkIndex": "code-context-5",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "void SaveParameterDefaults(List<double> paramValues)\n",
    "metadata": {
      "id": "istrategy-host",
      "title": "istrategy-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/istrategy-host.md",
      "chunkIndex": "code-6",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ol to chart\n- `idx`: The bar index to scroll to\n\n### ParameterDefaultsChanged\n```csharp\nvoid ParameterDefaultsChanged()\n```\nNotifies the Strategy window that Strategy Parameter defaults have been modified, typically by an Optimization Visualizer.\n\n### RunWithOverrides\n```csharp\nvoid RunWithOverrides(List<double> overrides)\n```\nExecutes a backtest using specified Parameter override values.\n\n**Parameters:**\n- `overrides`: List of parameter values to use for the backtest\n\n### SaveParameterDefaults\n"
    }
  },
  {
    "pageContent": "ol to chart\n- `idx`: The bar index to scroll to\n\n### ParameterDefaultsChanged\n```csharp\nvoid ParameterDefaultsChanged()\n```\nNotifies the Strategy window that Strategy Parameter defaults have been modified, typically by an Optimization Visualizer.\n\n### RunWithOverrides\n```csharp\nvoid RunWithOverrides(List<double> overrides)\n```\nExecutes a backtest using specified Parameter override values.\n\n**Parameters:**\n- `overrides`: List of parameter values to use for the backtest\n\n### SaveParameterDefaults\n\n\n```csharp\nvoid SaveParameterDefaults(List<double> paramValues)\n\n```",
    "metadata": {
      "id": "istrategy-host",
      "title": "istrategy-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/istrategy-host.md",
      "chunkIndex": "code-context-6",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "void ShowTabPage(StrategyWindowTab tab)\n",
    "metadata": {
      "id": "istrategy-host",
      "title": "istrategy-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/istrategy-host.md",
      "chunkIndex": "code-7",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ation Visualizer.\n\n### RunWithOverrides\n```csharp\nvoid RunWithOverrides(List<double> overrides)\n```\nExecutes a backtest using specified Parameter override values.\n\n**Parameters:**\n- `overrides`: List of parameter values to use for the backtest\n\n### SaveParameterDefaults\n```csharp\nvoid SaveParameterDefaults(List<double> paramValues)\n```\nSaves the provided Parameter values as defaults for the Strategy.\n\n**Parameters:**\n- `paramValues`: List of parameter values to save as defaults\n\n### ShowTabPage\n"
    }
  },
  {
    "pageContent": "ation Visualizer.\n\n### RunWithOverrides\n```csharp\nvoid RunWithOverrides(List<double> overrides)\n```\nExecutes a backtest using specified Parameter override values.\n\n**Parameters:**\n- `overrides`: List of parameter values to use for the backtest\n\n### SaveParameterDefaults\n```csharp\nvoid SaveParameterDefaults(List<double> paramValues)\n```\nSaves the provided Parameter values as defaults for the Strategy.\n\n**Parameters:**\n- `paramValues`: List of parameter values to save as defaults\n\n### ShowTabPage\n\n\n```csharp\nvoid ShowTabPage(StrategyWindowTab tab)\n\n```",
    "metadata": {
      "id": "istrategy-host",
      "title": "istrategy-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/istrategy-host.md",
      "chunkIndex": "code-context-7",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public class OptimizationVisualizer\n{\n    private IStrategyHost _strategyHost;\n\n    public void ApplyOptimizedParameters(List<double> optimizedValues)\n    {\n        try\n        {\n            // Save new parameter values as defaults\n            _strategyHost.SaveParameterDefaults(optimizedValues);\n            \n            // Notify host of changes\n            _strategyHost.ParameterDefaultsChanged();\n            \n            // Run backtest with new values\n            _strategyHost.RunWithOverrides(optimizedValues);\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine($\"Error applying parameters: {ex.Message}\");\n        }\n    }\n}\n",
    "metadata": {
      "id": "istrategy-host",
      "title": "istrategy-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/istrategy-host.md",
      "chunkIndex": "code-8",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "terDefaults(List<double> paramValues)\n```\nSaves the provided Parameter values as defaults for the Strategy.\n\n**Parameters:**\n- `paramValues`: List of parameter values to save as defaults\n\n### ShowTabPage\n```csharp\nvoid ShowTabPage(StrategyWindowTab tab)\n```\nSwitches the Strategy window to the specified tab page.\n\n**Valid tab values:**\n- `Settings`\n- `Designer`\n- `Signals`\n- `BacktestResults`\n- `Chart`\n- `Optimization`\n- `DebugLog`\n- `PreferredValues`\n\n## Usage Examples\n\n### Parameter Management\n"
    }
  },
  {
    "pageContent": "terDefaults(List<double> paramValues)\n```\nSaves the provided Parameter values as defaults for the Strategy.\n\n**Parameters:**\n- `paramValues`: List of parameter values to save as defaults\n\n### ShowTabPage\n```csharp\nvoid ShowTabPage(StrategyWindowTab tab)\n```\nSwitches the Strategy window to the specified tab page.\n\n**Valid tab values:**\n- `Settings`\n- `Designer`\n- `Signals`\n- `BacktestResults`\n- `Chart`\n- `Optimization`\n- `DebugLog`\n- `PreferredValues`\n\n## Usage Examples\n\n### Parameter Management\n\n\n```csharp\npublic class OptimizationVisualizer\n{\n    private IStrategyHost _strategyHost;\n\n    public void ApplyOptimizedParameters(List<double> optimizedValues)\n    {\n        try\n        {\n            // Save new parameter values as defaults\n            _strategyHost.SaveParameterDefaults(optimizedValues);\n            \n            // Notify host of changes\n            _strategyHost.ParameterDefaultsChanged();\n            \n            // Run backtest with new values\n            _strategyHost.RunWithOverrides(optimizedValues);\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine($\"Error applying parameters: {ex.Message}\");\n        }\n    }\n}\n\n```",
    "metadata": {
      "id": "istrategy-host",
      "title": "istrategy-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/istrategy-host.md",
      "chunkIndex": "code-context-8",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public class SignalAnalyzer\n{\n    private IStrategyHost _strategyHost;\n\n    public void AnalyzeSignal(string symbol, int signalBar)\n    {\n        // Switch to chart view\n        _strategyHost.ShowTabPage(StrategyWindowTab.Chart);\n        \n        // Display symbol at signal bar\n        _strategyHost.ChartSymbolAtBar(symbol, signalBar);\n    }\n}\n",
    "metadata": {
      "id": "istrategy-host",
      "title": "istrategy-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/istrategy-host.md",
      "chunkIndex": "code-9",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "  // Save new parameter values as defaults\n            _strategyHost.SaveParameterDefaults(optimizedValues);\n            \n            // Notify host of changes\n            _strategyHost.ParameterDefaultsChanged();\n            \n            // Run backtest with new values\n            _strategyHost.RunWithOverrides(optimizedValues);\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine($\"Error applying parameters: {ex.Message}\");\n        }\n    }\n}\n```\n\n### Chart Navigation\n"
    }
  },
  {
    "pageContent": "  // Save new parameter values as defaults\n            _strategyHost.SaveParameterDefaults(optimizedValues);\n            \n            // Notify host of changes\n            _strategyHost.ParameterDefaultsChanged();\n            \n            // Run backtest with new values\n            _strategyHost.RunWithOverrides(optimizedValues);\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine($\"Error applying parameters: {ex.Message}\");\n        }\n    }\n}\n```\n\n### Chart Navigation\n\n\n```csharp\npublic class SignalAnalyzer\n{\n    private IStrategyHost _strategyHost;\n\n    public void AnalyzeSignal(string symbol, int signalBar)\n    {\n        // Switch to chart view\n        _strategyHost.ShowTabPage(StrategyWindowTab.Chart);\n        \n        // Display symbol at signal bar\n        _strategyHost.ChartSymbolAtBar(symbol, signalBar);\n    }\n}\n\n```",
    "metadata": {
      "id": "istrategy-host",
      "title": "istrategy-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/istrategy-host.md",
      "chunkIndex": "code-context-9",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public class PerformanceAnalyzer\n{\n    private IStrategyHost _strategyHost;\n\n    public void CompareWithBenchmark()\n    {\n        var strategy = _strategyHost.Strategy;\n        var strategyResults = _strategyHost.Backtester;\n        var benchmarkResults = _strategyHost.BenchmarkBacktester;\n\n        // Analyze performance\n        double strategyReturn = strategyResults.NetProfitPct;\n        double benchmarkReturn = benchmarkResults.NetProfitPct;\n        \n        // Show results tab\n        _strategyHost.ShowTabPage(StrategyWindowTab.BacktestResults);\n    }\n}\n",
    "metadata": {
      "id": "istrategy-host",
      "title": "istrategy-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/istrategy-host.md",
      "chunkIndex": "code-10",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "        Console.WriteLine($\"Error applying parameters: {ex.Message}\");\n        }\n    }\n}\n```\n\n### Chart Navigation\n```csharp\npublic class SignalAnalyzer\n{\n    private IStrategyHost _strategyHost;\n\n    public void AnalyzeSignal(string symbol, int signalBar)\n    {\n        // Switch to chart view\n        _strategyHost.ShowTabPage(StrategyWindowTab.Chart);\n        \n        // Display symbol at signal bar\n        _strategyHost.ChartSymbolAtBar(symbol, signalBar);\n    }\n}\n```\n\n### Backtester Analysis\n"
    }
  },
  {
    "pageContent": "        Console.WriteLine($\"Error applying parameters: {ex.Message}\");\n        }\n    }\n}\n```\n\n### Chart Navigation\n```csharp\npublic class SignalAnalyzer\n{\n    private IStrategyHost _strategyHost;\n\n    public void AnalyzeSignal(string symbol, int signalBar)\n    {\n        // Switch to chart view\n        _strategyHost.ShowTabPage(StrategyWindowTab.Chart);\n        \n        // Display symbol at signal bar\n        _strategyHost.ChartSymbolAtBar(symbol, signalBar);\n    }\n}\n```\n\n### Backtester Analysis\n\n\n```csharp\npublic class PerformanceAnalyzer\n{\n    private IStrategyHost _strategyHost;\n\n    public void CompareWithBenchmark()\n    {\n        var strategy = _strategyHost.Strategy;\n        var strategyResults = _strategyHost.Backtester;\n        var benchmarkResults = _strategyHost.BenchmarkBacktester;\n\n        // Analyze performance\n        double strategyReturn = strategyResults.NetProfitPct;\n        double benchmarkReturn = benchmarkResults.NetProfitPct;\n        \n        // Show results tab\n        _strategyHost.ShowTabPage(StrategyWindowTab.BacktestResults);\n    }\n}\n\n```",
    "metadata": {
      "id": "istrategy-host",
      "title": "istrategy-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/istrategy-host.md",
      "chunkIndex": "code-context-10",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "# IWLClientHost Interface\n\n**Namespace:** WealthLab.WPF  \n**Parent:** None\n\nThe `IWLClientHost` interface provides methods and properties for interacting with the WealthLab 8 window hosting a child window, typically created by an extension. It enables control over various WealthLab features, window management, and UI interactions.\n\n## Properties\n\n### AllowAutoTrading\n",
    "metadata": {
      "id": "iwlclient-host",
      "title": "iwlclient-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/iwlclient-host.md",
      "chunkIndex": 0,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns true if the user has accepted the Auto-Trading Agreement dialog.\n\n### IsDarkTheme\n",
    "metadata": {
      "id": "iwlclient-host",
      "title": "iwlclient-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/iwlclient-host.md",
      "chunkIndex": 1,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns true if the currently selected WealthLab 8 Theme is a \"dark\" Theme.\n\n## Window Management Methods\n\n### ShowExtensionChildWindow\n",
    "metadata": {
      "id": "iwlclient-host",
      "title": "iwlclient-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/iwlclient-host.md",
      "chunkIndex": 2,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nOpens a `ChildWindow` instance with specified title and window icon.\n\n**Parameters:**\n- `cw`: The `ChildWindow` instance to display\n- `title`: Window title\n- `glyph`: Window icon image\n\n### OpenStrategy\n",
    "metadata": {
      "id": "iwlclient-host",
      "title": "iwlclient-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/iwlclient-host.md",
      "chunkIndex": 3,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nOpens a new Strategy window with either:\n- A specified `Strategy` instance\n- A saved optimization result instance\n\n### OpenAndRunStrategy\n",
    "metadata": {
      "id": "iwlclient-host",
      "title": "iwlclient-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/iwlclient-host.md",
      "chunkIndex": 4,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nOpens a new Strategy window with the specified Strategy and automatically runs a backtest.\n\n### OpenQuotesWindow\n",
    "metadata": {
      "id": "iwlclient-host",
      "title": "iwlclient-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/iwlclient-host.md",
      "chunkIndex": 5,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nOpens a new Quotes window populated with price triggers from the provided `SignalBlock` instance.\n\n## Tool Window Methods\n\n### ShowDataManager\n",
    "metadata": {
      "id": "iwlclient-host",
      "title": "iwlclient-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/iwlclient-host.md",
      "chunkIndex": 6,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nOpens the Data Manager tool with optional tab and provider selection.\n\n### ShowPreferences\n",
    "metadata": {
      "id": "iwlclient-host",
      "title": "iwlclient-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/iwlclient-host.md",
      "chunkIndex": 7,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nOpens the Preferences window with optional page selection.\n\n### ActivateOrderManager\n",
    "metadata": {
      "id": "iwlclient-host",
      "title": "iwlclient-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/iwlclient-host.md",
      "chunkIndex": 8,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nOpens and brings the Order Manager window into focus.\n\n## Navigation Methods\n\n### ShowViewPage\n",
    "metadata": {
      "id": "iwlclient-host",
      "title": "iwlclient-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/iwlclient-host.md",
      "chunkIndex": 9,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nChanges the left navigation pane to the specified view.\n\n**Valid page values:**\n- `\"DataSets\"`\n- `\"Indicators\"`\n- `\"Strategies\"`\n- `\"BuildingBlocks\"`\n- `\"QuickRef\"`\n\n### ShowIndicator\n",
    "metadata": {
      "id": "iwlclient-host",
      "title": "iwlclient-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/iwlclient-host.md",
      "chunkIndex": 10,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nOpens the Indicators page and highlights the specified indicator.\n\n### ShowQuickRefEntry\n",
    "metadata": {
      "id": "iwlclient-host",
      "title": "iwlclient-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/iwlclient-host.md",
      "chunkIndex": 11,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nOpens the QuickRef pane and navigates to the specified entry or class.\n\n### ShowHelpPage\n",
    "metadata": {
      "id": "iwlclient-host",
      "title": "iwlclient-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/iwlclient-host.md",
      "chunkIndex": 12,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nOpens the Help File and navigates to the specified topic.\n\n## UI and Theme Methods\n\n### RefreshTheme\n",
    "metadata": {
      "id": "iwlclient-host",
      "title": "iwlclient-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/iwlclient-host.md",
      "chunkIndex": 13,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nForces Light/Dark Theme refresh for the specified WPF control.\n\n### PlaySound\n",
    "metadata": {
      "id": "iwlclient-host",
      "title": "iwlclient-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/iwlclient-host.md",
      "chunkIndex": 14,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nPlays a predefined sound.\n\n**Available sounds:**\n- `\"Alarm\"`\n- `\"NewBar\"`\n- `\"OptimizationComplete\"`\n- `\"OrderFilled\"`\n- `\"Save\"`\n- `\"Signals\"`\n\n## Usage Examples\n\n### Extension Window Management\n",
    "metadata": {
      "id": "iwlclient-host",
      "title": "iwlclient-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/iwlclient-host.md",
      "chunkIndex": 15,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n### Strategy Management\n",
    "metadata": {
      "id": "iwlclient-host",
      "title": "iwlclient-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/iwlclient-host.md",
      "chunkIndex": 16,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n### Theme-Aware UI\n",
    "metadata": {
      "id": "iwlclient-host",
      "title": "iwlclient-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/iwlclient-host.md",
      "chunkIndex": 17,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n## Best Practices\n\n1. **Window Management**\n   - Check `AllowAutoTrading` before automated operations\n   - Provide meaningful window titles and icons\n   - Clean up resources when closing windows\n\n2. **Theme Handling**\n   - Use `IsDarkTheme` for theme-aware UI components\n   - Call `RefreshTheme` after dynamic UI changes\n   - Support both light and dark themes\n\n3. **Navigation**\n   - Use appropriate navigation methods for context\n   - Provide clear user feedback during navigation\n   - Handle navigation errors gracefully\n\n4. **Sound Usage**\n   - Use sounds sparingly and appropriately\n   - Consider user environment when playing sounds\n   - Provide visual feedback alongside sounds\n\n## Common Use Cases\n\n1. **Extension Integration**\n   - Creating custom tool windows\n   - Integrating with WealthLab navigation\n   - Managing strategy windows\n\n2. **User Interface**\n   - Theme-aware custom controls\n   - Dynamic UI updates\n   - Sound notifications\n\n3. **Tool Integration**\n   - Data Manager integration\n   - Order Manager interaction\n   - Quick Reference navigation\n\n## Notes\n\n- Interface methods are primarily used in extension development\n- Consider user preferences when automating windows\n- Handle theme changes appropriately\n- Use sound notifications judiciously ",
    "metadata": {
      "id": "iwlclient-host",
      "title": "iwlclient-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/iwlclient-host.md",
      "chunkIndex": 18,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "public bool AllowAutoTrading\n",
    "metadata": {
      "id": "iwlclient-host",
      "title": "iwlclient-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/iwlclient-host.md",
      "chunkIndex": "code-0",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "# IWLClientHost Interface\n\n**Namespace:** WealthLab.WPF  \n**Parent:** None\n\nThe `IWLClientHost` interface provides methods and properties for interacting with the WealthLab 8 window hosting a child window, typically created by an extension. It enables control over various WealthLab features, window management, and UI interactions.\n\n## Properties\n\n### AllowAutoTrading\n"
    }
  },
  {
    "pageContent": "# IWLClientHost Interface\n\n**Namespace:** WealthLab.WPF  \n**Parent:** None\n\nThe `IWLClientHost` interface provides methods and properties for interacting with the WealthLab 8 window hosting a child window, typically created by an extension. It enables control over various WealthLab features, window management, and UI interactions.\n\n## Properties\n\n### AllowAutoTrading\n\n\n```csharp\npublic bool AllowAutoTrading\n\n```",
    "metadata": {
      "id": "iwlclient-host",
      "title": "iwlclient-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/iwlclient-host.md",
      "chunkIndex": "code-context-0",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public bool IsDarkTheme\n",
    "metadata": {
      "id": "iwlclient-host",
      "title": "iwlclient-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/iwlclient-host.md",
      "chunkIndex": "code-1",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "WLClientHost Interface\n\n**Namespace:** WealthLab.WPF  \n**Parent:** None\n\nThe `IWLClientHost` interface provides methods and properties for interacting with the WealthLab 8 window hosting a child window, typically created by an extension. It enables control over various WealthLab features, window management, and UI interactions.\n\n## Properties\n\n### AllowAutoTrading\n```csharp\npublic bool AllowAutoTrading\n```\nReturns true if the user has accepted the Auto-Trading Agreement dialog.\n\n### IsDarkTheme\n"
    }
  },
  {
    "pageContent": "WLClientHost Interface\n\n**Namespace:** WealthLab.WPF  \n**Parent:** None\n\nThe `IWLClientHost` interface provides methods and properties for interacting with the WealthLab 8 window hosting a child window, typically created by an extension. It enables control over various WealthLab features, window management, and UI interactions.\n\n## Properties\n\n### AllowAutoTrading\n```csharp\npublic bool AllowAutoTrading\n```\nReturns true if the user has accepted the Auto-Trading Agreement dialog.\n\n### IsDarkTheme\n\n\n```csharp\npublic bool IsDarkTheme\n\n```",
    "metadata": {
      "id": "iwlclient-host",
      "title": "iwlclient-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/iwlclient-host.md",
      "chunkIndex": "code-context-1",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "void ShowExtensionChildWindow(ChildWindow cw, string title, System.Drawing.Image glyph)\n",
    "metadata": {
      "id": "iwlclient-host",
      "title": "iwlclient-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/iwlclient-host.md",
      "chunkIndex": "code-2",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ndow hosting a child window, typically created by an extension. It enables control over various WealthLab features, window management, and UI interactions.\n\n## Properties\n\n### AllowAutoTrading\n```csharp\npublic bool AllowAutoTrading\n```\nReturns true if the user has accepted the Auto-Trading Agreement dialog.\n\n### IsDarkTheme\n```csharp\npublic bool IsDarkTheme\n```\nReturns true if the currently selected WealthLab 8 Theme is a \"dark\" Theme.\n\n## Window Management Methods\n\n### ShowExtensionChildWindow\n"
    }
  },
  {
    "pageContent": "ndow hosting a child window, typically created by an extension. It enables control over various WealthLab features, window management, and UI interactions.\n\n## Properties\n\n### AllowAutoTrading\n```csharp\npublic bool AllowAutoTrading\n```\nReturns true if the user has accepted the Auto-Trading Agreement dialog.\n\n### IsDarkTheme\n```csharp\npublic bool IsDarkTheme\n```\nReturns true if the currently selected WealthLab 8 Theme is a \"dark\" Theme.\n\n## Window Management Methods\n\n### ShowExtensionChildWindow\n\n\n```csharp\nvoid ShowExtensionChildWindow(ChildWindow cw, string title, System.Drawing.Image glyph)\n\n```",
    "metadata": {
      "id": "iwlclient-host",
      "title": "iwlclient-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/iwlclient-host.md",
      "chunkIndex": "code-context-2",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "void OpenStrategy(Strategy s)\nvoid OpenStrategy(SavedOptimizationResults sor)\n",
    "metadata": {
      "id": "iwlclient-host",
      "title": "iwlclient-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/iwlclient-host.md",
      "chunkIndex": "code-3",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "og.\n\n### IsDarkTheme\n```csharp\npublic bool IsDarkTheme\n```\nReturns true if the currently selected WealthLab 8 Theme is a \"dark\" Theme.\n\n## Window Management Methods\n\n### ShowExtensionChildWindow\n```csharp\nvoid ShowExtensionChildWindow(ChildWindow cw, string title, System.Drawing.Image glyph)\n```\nOpens a `ChildWindow` instance with specified title and window icon.\n\n**Parameters:**\n- `cw`: The `ChildWindow` instance to display\n- `title`: Window title\n- `glyph`: Window icon image\n\n### OpenStrategy\n"
    }
  },
  {
    "pageContent": "og.\n\n### IsDarkTheme\n```csharp\npublic bool IsDarkTheme\n```\nReturns true if the currently selected WealthLab 8 Theme is a \"dark\" Theme.\n\n## Window Management Methods\n\n### ShowExtensionChildWindow\n```csharp\nvoid ShowExtensionChildWindow(ChildWindow cw, string title, System.Drawing.Image glyph)\n```\nOpens a `ChildWindow` instance with specified title and window icon.\n\n**Parameters:**\n- `cw`: The `ChildWindow` instance to display\n- `title`: Window title\n- `glyph`: Window icon image\n\n### OpenStrategy\n\n\n```csharp\nvoid OpenStrategy(Strategy s)\nvoid OpenStrategy(SavedOptimizationResults sor)\n\n```",
    "metadata": {
      "id": "iwlclient-host",
      "title": "iwlclient-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/iwlclient-host.md",
      "chunkIndex": "code-context-3",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "void OpenAndRunStrategy(Strategy s)\n",
    "metadata": {
      "id": "iwlclient-host",
      "title": "iwlclient-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/iwlclient-host.md",
      "chunkIndex": "code-4",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ndow(ChildWindow cw, string title, System.Drawing.Image glyph)\n```\nOpens a `ChildWindow` instance with specified title and window icon.\n\n**Parameters:**\n- `cw`: The `ChildWindow` instance to display\n- `title`: Window title\n- `glyph`: Window icon image\n\n### OpenStrategy\n```csharp\nvoid OpenStrategy(Strategy s)\nvoid OpenStrategy(SavedOptimizationResults sor)\n```\nOpens a new Strategy window with either:\n- A specified `Strategy` instance\n- A saved optimization result instance\n\n### OpenAndRunStrategy\n"
    }
  },
  {
    "pageContent": "ndow(ChildWindow cw, string title, System.Drawing.Image glyph)\n```\nOpens a `ChildWindow` instance with specified title and window icon.\n\n**Parameters:**\n- `cw`: The `ChildWindow` instance to display\n- `title`: Window title\n- `glyph`: Window icon image\n\n### OpenStrategy\n```csharp\nvoid OpenStrategy(Strategy s)\nvoid OpenStrategy(SavedOptimizationResults sor)\n```\nOpens a new Strategy window with either:\n- A specified `Strategy` instance\n- A saved optimization result instance\n\n### OpenAndRunStrategy\n\n\n```csharp\nvoid OpenAndRunStrategy(Strategy s)\n\n```",
    "metadata": {
      "id": "iwlclient-host",
      "title": "iwlclient-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/iwlclient-host.md",
      "chunkIndex": "code-context-4",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "void OpenQuotesWindow(SignalBlock sb)\n",
    "metadata": {
      "id": "iwlclient-host",
      "title": "iwlclient-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/iwlclient-host.md",
      "chunkIndex": "code-5",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "e `ChildWindow` instance to display\n- `title`: Window title\n- `glyph`: Window icon image\n\n### OpenStrategy\n```csharp\nvoid OpenStrategy(Strategy s)\nvoid OpenStrategy(SavedOptimizationResults sor)\n```\nOpens a new Strategy window with either:\n- A specified `Strategy` instance\n- A saved optimization result instance\n\n### OpenAndRunStrategy\n```csharp\nvoid OpenAndRunStrategy(Strategy s)\n```\nOpens a new Strategy window with the specified Strategy and automatically runs a backtest.\n\n### OpenQuotesWindow\n"
    }
  },
  {
    "pageContent": "e `ChildWindow` instance to display\n- `title`: Window title\n- `glyph`: Window icon image\n\n### OpenStrategy\n```csharp\nvoid OpenStrategy(Strategy s)\nvoid OpenStrategy(SavedOptimizationResults sor)\n```\nOpens a new Strategy window with either:\n- A specified `Strategy` instance\n- A saved optimization result instance\n\n### OpenAndRunStrategy\n```csharp\nvoid OpenAndRunStrategy(Strategy s)\n```\nOpens a new Strategy window with the specified Strategy and automatically runs a backtest.\n\n### OpenQuotesWindow\n\n\n```csharp\nvoid OpenQuotesWindow(SignalBlock sb)\n\n```",
    "metadata": {
      "id": "iwlclient-host",
      "title": "iwlclient-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/iwlclient-host.md",
      "chunkIndex": "code-context-5",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "void ShowDataManager(string pageName = null, string providerName = null)\n",
    "metadata": {
      "id": "iwlclient-host",
      "title": "iwlclient-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/iwlclient-host.md",
      "chunkIndex": "code-6",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "```\nOpens a new Strategy window with either:\n- A specified `Strategy` instance\n- A saved optimization result instance\n\n### OpenAndRunStrategy\n```csharp\nvoid OpenAndRunStrategy(Strategy s)\n```\nOpens a new Strategy window with the specified Strategy and automatically runs a backtest.\n\n### OpenQuotesWindow\n```csharp\nvoid OpenQuotesWindow(SignalBlock sb)\n```\nOpens a new Quotes window populated with price triggers from the provided `SignalBlock` instance.\n\n## Tool Window Methods\n\n### ShowDataManager\n"
    }
  },
  {
    "pageContent": "```\nOpens a new Strategy window with either:\n- A specified `Strategy` instance\n- A saved optimization result instance\n\n### OpenAndRunStrategy\n```csharp\nvoid OpenAndRunStrategy(Strategy s)\n```\nOpens a new Strategy window with the specified Strategy and automatically runs a backtest.\n\n### OpenQuotesWindow\n```csharp\nvoid OpenQuotesWindow(SignalBlock sb)\n```\nOpens a new Quotes window populated with price triggers from the provided `SignalBlock` instance.\n\n## Tool Window Methods\n\n### ShowDataManager\n\n\n```csharp\nvoid ShowDataManager(string pageName = null, string providerName = null)\n\n```",
    "metadata": {
      "id": "iwlclient-host",
      "title": "iwlclient-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/iwlclient-host.md",
      "chunkIndex": "code-context-6",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "void ShowPreferences(string pageName = null)\n",
    "metadata": {
      "id": "iwlclient-host",
      "title": "iwlclient-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/iwlclient-host.md",
      "chunkIndex": "code-7",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "rategy s)\n```\nOpens a new Strategy window with the specified Strategy and automatically runs a backtest.\n\n### OpenQuotesWindow\n```csharp\nvoid OpenQuotesWindow(SignalBlock sb)\n```\nOpens a new Quotes window populated with price triggers from the provided `SignalBlock` instance.\n\n## Tool Window Methods\n\n### ShowDataManager\n```csharp\nvoid ShowDataManager(string pageName = null, string providerName = null)\n```\nOpens the Data Manager tool with optional tab and provider selection.\n\n### ShowPreferences\n"
    }
  },
  {
    "pageContent": "rategy s)\n```\nOpens a new Strategy window with the specified Strategy and automatically runs a backtest.\n\n### OpenQuotesWindow\n```csharp\nvoid OpenQuotesWindow(SignalBlock sb)\n```\nOpens a new Quotes window populated with price triggers from the provided `SignalBlock` instance.\n\n## Tool Window Methods\n\n### ShowDataManager\n```csharp\nvoid ShowDataManager(string pageName = null, string providerName = null)\n```\nOpens the Data Manager tool with optional tab and provider selection.\n\n### ShowPreferences\n\n\n```csharp\nvoid ShowPreferences(string pageName = null)\n\n```",
    "metadata": {
      "id": "iwlclient-host",
      "title": "iwlclient-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/iwlclient-host.md",
      "chunkIndex": "code-context-7",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "void ActivateOrderManager()\n",
    "metadata": {
      "id": "iwlclient-host",
      "title": "iwlclient-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/iwlclient-host.md",
      "chunkIndex": "code-8",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "enQuotesWindow(SignalBlock sb)\n```\nOpens a new Quotes window populated with price triggers from the provided `SignalBlock` instance.\n\n## Tool Window Methods\n\n### ShowDataManager\n```csharp\nvoid ShowDataManager(string pageName = null, string providerName = null)\n```\nOpens the Data Manager tool with optional tab and provider selection.\n\n### ShowPreferences\n```csharp\nvoid ShowPreferences(string pageName = null)\n```\nOpens the Preferences window with optional page selection.\n\n### ActivateOrderManager\n"
    }
  },
  {
    "pageContent": "enQuotesWindow(SignalBlock sb)\n```\nOpens a new Quotes window populated with price triggers from the provided `SignalBlock` instance.\n\n## Tool Window Methods\n\n### ShowDataManager\n```csharp\nvoid ShowDataManager(string pageName = null, string providerName = null)\n```\nOpens the Data Manager tool with optional tab and provider selection.\n\n### ShowPreferences\n```csharp\nvoid ShowPreferences(string pageName = null)\n```\nOpens the Preferences window with optional page selection.\n\n### ActivateOrderManager\n\n\n```csharp\nvoid ActivateOrderManager()\n\n```",
    "metadata": {
      "id": "iwlclient-host",
      "title": "iwlclient-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/iwlclient-host.md",
      "chunkIndex": "code-context-8",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "void ShowViewPage(string page)\n",
    "metadata": {
      "id": "iwlclient-host",
      "title": "iwlclient-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/iwlclient-host.md",
      "chunkIndex": "code-9",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "Tool Window Methods\n\n### ShowDataManager\n```csharp\nvoid ShowDataManager(string pageName = null, string providerName = null)\n```\nOpens the Data Manager tool with optional tab and provider selection.\n\n### ShowPreferences\n```csharp\nvoid ShowPreferences(string pageName = null)\n```\nOpens the Preferences window with optional page selection.\n\n### ActivateOrderManager\n```csharp\nvoid ActivateOrderManager()\n```\nOpens and brings the Order Manager window into focus.\n\n## Navigation Methods\n\n### ShowViewPage\n"
    }
  },
  {
    "pageContent": "Tool Window Methods\n\n### ShowDataManager\n```csharp\nvoid ShowDataManager(string pageName = null, string providerName = null)\n```\nOpens the Data Manager tool with optional tab and provider selection.\n\n### ShowPreferences\n```csharp\nvoid ShowPreferences(string pageName = null)\n```\nOpens the Preferences window with optional page selection.\n\n### ActivateOrderManager\n```csharp\nvoid ActivateOrderManager()\n```\nOpens and brings the Order Manager window into focus.\n\n## Navigation Methods\n\n### ShowViewPage\n\n\n```csharp\nvoid ShowViewPage(string page)\n\n```",
    "metadata": {
      "id": "iwlclient-host",
      "title": "iwlclient-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/iwlclient-host.md",
      "chunkIndex": "code-context-9",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "void ShowIndicator(string abbr)\n",
    "metadata": {
      "id": "iwlclient-host",
      "title": "iwlclient-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/iwlclient-host.md",
      "chunkIndex": "code-10",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "void ShowPreferences(string pageName = null)\n```\nOpens the Preferences window with optional page selection.\n\n### ActivateOrderManager\n```csharp\nvoid ActivateOrderManager()\n```\nOpens and brings the Order Manager window into focus.\n\n## Navigation Methods\n\n### ShowViewPage\n```csharp\nvoid ShowViewPage(string page)\n```\nChanges the left navigation pane to the specified view.\n\n**Valid page values:**\n- `\"DataSets\"`\n- `\"Indicators\"`\n- `\"Strategies\"`\n- `\"BuildingBlocks\"`\n- `\"QuickRef\"`\n\n### ShowIndicator\n"
    }
  },
  {
    "pageContent": "void ShowPreferences(string pageName = null)\n```\nOpens the Preferences window with optional page selection.\n\n### ActivateOrderManager\n```csharp\nvoid ActivateOrderManager()\n```\nOpens and brings the Order Manager window into focus.\n\n## Navigation Methods\n\n### ShowViewPage\n```csharp\nvoid ShowViewPage(string page)\n```\nChanges the left navigation pane to the specified view.\n\n**Valid page values:**\n- `\"DataSets\"`\n- `\"Indicators\"`\n- `\"Strategies\"`\n- `\"BuildingBlocks\"`\n- `\"QuickRef\"`\n\n### ShowIndicator\n\n\n```csharp\nvoid ShowIndicator(string abbr)\n\n```",
    "metadata": {
      "id": "iwlclient-host",
      "title": "iwlclient-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/iwlclient-host.md",
      "chunkIndex": "code-context-10",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "void ShowQuickRefEntry(QuickRefEntry entry)\nvoid ShowQuickRefEntry(string className, string itemName)\nvoid ShowQuickRefClass(string className)\n",
    "metadata": {
      "id": "iwlclient-host",
      "title": "iwlclient-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/iwlclient-host.md",
      "chunkIndex": "code-11",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "``csharp\nvoid ActivateOrderManager()\n```\nOpens and brings the Order Manager window into focus.\n\n## Navigation Methods\n\n### ShowViewPage\n```csharp\nvoid ShowViewPage(string page)\n```\nChanges the left navigation pane to the specified view.\n\n**Valid page values:**\n- `\"DataSets\"`\n- `\"Indicators\"`\n- `\"Strategies\"`\n- `\"BuildingBlocks\"`\n- `\"QuickRef\"`\n\n### ShowIndicator\n```csharp\nvoid ShowIndicator(string abbr)\n```\nOpens the Indicators page and highlights the specified indicator.\n\n### ShowQuickRefEntry\n"
    }
  },
  {
    "pageContent": "``csharp\nvoid ActivateOrderManager()\n```\nOpens and brings the Order Manager window into focus.\n\n## Navigation Methods\n\n### ShowViewPage\n```csharp\nvoid ShowViewPage(string page)\n```\nChanges the left navigation pane to the specified view.\n\n**Valid page values:**\n- `\"DataSets\"`\n- `\"Indicators\"`\n- `\"Strategies\"`\n- `\"BuildingBlocks\"`\n- `\"QuickRef\"`\n\n### ShowIndicator\n```csharp\nvoid ShowIndicator(string abbr)\n```\nOpens the Indicators page and highlights the specified indicator.\n\n### ShowQuickRefEntry\n\n\n```csharp\nvoid ShowQuickRefEntry(QuickRefEntry entry)\nvoid ShowQuickRefEntry(string className, string itemName)\nvoid ShowQuickRefClass(string className)\n\n```",
    "metadata": {
      "id": "iwlclient-host",
      "title": "iwlclient-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/iwlclient-host.md",
      "chunkIndex": "code-context-11",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "void ShowHelpPage(string page)\n",
    "metadata": {
      "id": "iwlclient-host",
      "title": "iwlclient-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/iwlclient-host.md",
      "chunkIndex": "code-12",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "page values:**\n- `\"DataSets\"`\n- `\"Indicators\"`\n- `\"Strategies\"`\n- `\"BuildingBlocks\"`\n- `\"QuickRef\"`\n\n### ShowIndicator\n```csharp\nvoid ShowIndicator(string abbr)\n```\nOpens the Indicators page and highlights the specified indicator.\n\n### ShowQuickRefEntry\n```csharp\nvoid ShowQuickRefEntry(QuickRefEntry entry)\nvoid ShowQuickRefEntry(string className, string itemName)\nvoid ShowQuickRefClass(string className)\n```\nOpens the QuickRef pane and navigates to the specified entry or class.\n\n### ShowHelpPage\n"
    }
  },
  {
    "pageContent": "page values:**\n- `\"DataSets\"`\n- `\"Indicators\"`\n- `\"Strategies\"`\n- `\"BuildingBlocks\"`\n- `\"QuickRef\"`\n\n### ShowIndicator\n```csharp\nvoid ShowIndicator(string abbr)\n```\nOpens the Indicators page and highlights the specified indicator.\n\n### ShowQuickRefEntry\n```csharp\nvoid ShowQuickRefEntry(QuickRefEntry entry)\nvoid ShowQuickRefEntry(string className, string itemName)\nvoid ShowQuickRefClass(string className)\n```\nOpens the QuickRef pane and navigates to the specified entry or class.\n\n### ShowHelpPage\n\n\n```csharp\nvoid ShowHelpPage(string page)\n\n```",
    "metadata": {
      "id": "iwlclient-host",
      "title": "iwlclient-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/iwlclient-host.md",
      "chunkIndex": "code-context-12",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "void RefreshTheme(DependencyObject dobj)\n",
    "metadata": {
      "id": "iwlclient-host",
      "title": "iwlclient-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/iwlclient-host.md",
      "chunkIndex": "code-13",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "r(string abbr)\n```\nOpens the Indicators page and highlights the specified indicator.\n\n### ShowQuickRefEntry\n```csharp\nvoid ShowQuickRefEntry(QuickRefEntry entry)\nvoid ShowQuickRefEntry(string className, string itemName)\nvoid ShowQuickRefClass(string className)\n```\nOpens the QuickRef pane and navigates to the specified entry or class.\n\n### ShowHelpPage\n```csharp\nvoid ShowHelpPage(string page)\n```\nOpens the Help File and navigates to the specified topic.\n\n## UI and Theme Methods\n\n### RefreshTheme\n"
    }
  },
  {
    "pageContent": "r(string abbr)\n```\nOpens the Indicators page and highlights the specified indicator.\n\n### ShowQuickRefEntry\n```csharp\nvoid ShowQuickRefEntry(QuickRefEntry entry)\nvoid ShowQuickRefEntry(string className, string itemName)\nvoid ShowQuickRefClass(string className)\n```\nOpens the QuickRef pane and navigates to the specified entry or class.\n\n### ShowHelpPage\n```csharp\nvoid ShowHelpPage(string page)\n```\nOpens the Help File and navigates to the specified topic.\n\n## UI and Theme Methods\n\n### RefreshTheme\n\n\n```csharp\nvoid RefreshTheme(DependencyObject dobj)\n\n```",
    "metadata": {
      "id": "iwlclient-host",
      "title": "iwlclient-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/iwlclient-host.md",
      "chunkIndex": "code-context-13",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "void PlaySound(string name)\n",
    "metadata": {
      "id": "iwlclient-host",
      "title": "iwlclient-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/iwlclient-host.md",
      "chunkIndex": "code-14",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "efEntry(QuickRefEntry entry)\nvoid ShowQuickRefEntry(string className, string itemName)\nvoid ShowQuickRefClass(string className)\n```\nOpens the QuickRef pane and navigates to the specified entry or class.\n\n### ShowHelpPage\n```csharp\nvoid ShowHelpPage(string page)\n```\nOpens the Help File and navigates to the specified topic.\n\n## UI and Theme Methods\n\n### RefreshTheme\n```csharp\nvoid RefreshTheme(DependencyObject dobj)\n```\nForces Light/Dark Theme refresh for the specified WPF control.\n\n### PlaySound\n"
    }
  },
  {
    "pageContent": "efEntry(QuickRefEntry entry)\nvoid ShowQuickRefEntry(string className, string itemName)\nvoid ShowQuickRefClass(string className)\n```\nOpens the QuickRef pane and navigates to the specified entry or class.\n\n### ShowHelpPage\n```csharp\nvoid ShowHelpPage(string page)\n```\nOpens the Help File and navigates to the specified topic.\n\n## UI and Theme Methods\n\n### RefreshTheme\n```csharp\nvoid RefreshTheme(DependencyObject dobj)\n```\nForces Light/Dark Theme refresh for the specified WPF control.\n\n### PlaySound\n\n\n```csharp\nvoid PlaySound(string name)\n\n```",
    "metadata": {
      "id": "iwlclient-host",
      "title": "iwlclient-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/iwlclient-host.md",
      "chunkIndex": "code-context-14",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public class CustomExtension\n{\n    private IWLClientHost _clientHost;\n\n    public void ShowCustomWindow()\n    {\n        var customWindow = new CustomChildWindow();\n        var icon = LoadCustomIcon();\n        \n        _clientHost.ShowExtensionChildWindow(\n            customWindow,\n            \"Custom Analysis Window\",\n            icon\n        );\n    }\n}\n",
    "metadata": {
      "id": "iwlclient-host",
      "title": "iwlclient-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/iwlclient-host.md",
      "chunkIndex": "code-15",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "owHelpPage(string page)\n```\nOpens the Help File and navigates to the specified topic.\n\n## UI and Theme Methods\n\n### RefreshTheme\n```csharp\nvoid RefreshTheme(DependencyObject dobj)\n```\nForces Light/Dark Theme refresh for the specified WPF control.\n\n### PlaySound\n```csharp\nvoid PlaySound(string name)\n```\nPlays a predefined sound.\n\n**Available sounds:**\n- `\"Alarm\"`\n- `\"NewBar\"`\n- `\"OptimizationComplete\"`\n- `\"OrderFilled\"`\n- `\"Save\"`\n- `\"Signals\"`\n\n## Usage Examples\n\n### Extension Window Management\n"
    }
  },
  {
    "pageContent": "owHelpPage(string page)\n```\nOpens the Help File and navigates to the specified topic.\n\n## UI and Theme Methods\n\n### RefreshTheme\n```csharp\nvoid RefreshTheme(DependencyObject dobj)\n```\nForces Light/Dark Theme refresh for the specified WPF control.\n\n### PlaySound\n```csharp\nvoid PlaySound(string name)\n```\nPlays a predefined sound.\n\n**Available sounds:**\n- `\"Alarm\"`\n- `\"NewBar\"`\n- `\"OptimizationComplete\"`\n- `\"OrderFilled\"`\n- `\"Save\"`\n- `\"Signals\"`\n\n## Usage Examples\n\n### Extension Window Management\n\n\n```csharp\npublic class CustomExtension\n{\n    private IWLClientHost _clientHost;\n\n    public void ShowCustomWindow()\n    {\n        var customWindow = new CustomChildWindow();\n        var icon = LoadCustomIcon();\n        \n        _clientHost.ShowExtensionChildWindow(\n            customWindow,\n            \"Custom Analysis Window\",\n            icon\n        );\n    }\n}\n\n```",
    "metadata": {
      "id": "iwlclient-host",
      "title": "iwlclient-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/iwlclient-host.md",
      "chunkIndex": "code-context-15",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public class StrategyManager\n{\n    private IWLClientHost _clientHost;\n\n    public void LoadAndRunStrategy(Strategy strategy)\n    {\n        if (_clientHost.AllowAutoTrading)\n        {\n            _clientHost.OpenAndRunStrategy(strategy);\n        }\n        else\n        {\n            _clientHost.OpenStrategy(strategy);\n        }\n    }\n}\n",
    "metadata": {
      "id": "iwlclient-host",
      "title": "iwlclient-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/iwlclient-host.md",
      "chunkIndex": "code-16",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "omplete\"`\n- `\"OrderFilled\"`\n- `\"Save\"`\n- `\"Signals\"`\n\n## Usage Examples\n\n### Extension Window Management\n```csharp\npublic class CustomExtension\n{\n    private IWLClientHost _clientHost;\n\n    public void ShowCustomWindow()\n    {\n        var customWindow = new CustomChildWindow();\n        var icon = LoadCustomIcon();\n        \n        _clientHost.ShowExtensionChildWindow(\n            customWindow,\n            \"Custom Analysis Window\",\n            icon\n        );\n    }\n}\n```\n\n### Strategy Management\n"
    }
  },
  {
    "pageContent": "omplete\"`\n- `\"OrderFilled\"`\n- `\"Save\"`\n- `\"Signals\"`\n\n## Usage Examples\n\n### Extension Window Management\n```csharp\npublic class CustomExtension\n{\n    private IWLClientHost _clientHost;\n\n    public void ShowCustomWindow()\n    {\n        var customWindow = new CustomChildWindow();\n        var icon = LoadCustomIcon();\n        \n        _clientHost.ShowExtensionChildWindow(\n            customWindow,\n            \"Custom Analysis Window\",\n            icon\n        );\n    }\n}\n```\n\n### Strategy Management\n\n\n```csharp\npublic class StrategyManager\n{\n    private IWLClientHost _clientHost;\n\n    public void LoadAndRunStrategy(Strategy strategy)\n    {\n        if (_clientHost.AllowAutoTrading)\n        {\n            _clientHost.OpenAndRunStrategy(strategy);\n        }\n        else\n        {\n            _clientHost.OpenStrategy(strategy);\n        }\n    }\n}\n\n```",
    "metadata": {
      "id": "iwlclient-host",
      "title": "iwlclient-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/iwlclient-host.md",
      "chunkIndex": "code-context-16",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public class ThemeAwareControl : UserControl\n{\n    private IWLClientHost _clientHost;\n\n    public void UpdateTheme()\n    {\n        // Apply theme-specific styles\n        var darkTheme = _clientHost.IsDarkTheme;\n        ApplyThemeStyles(darkTheme);\n        \n        // Force theme refresh\n        _clientHost.RefreshTheme(this);\n    }\n}\n",
    "metadata": {
      "id": "iwlclient-host",
      "title": "iwlclient-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/iwlclient-host.md",
      "chunkIndex": "code-17",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "\n            customWindow,\n            \"Custom Analysis Window\",\n            icon\n        );\n    }\n}\n```\n\n### Strategy Management\n```csharp\npublic class StrategyManager\n{\n    private IWLClientHost _clientHost;\n\n    public void LoadAndRunStrategy(Strategy strategy)\n    {\n        if (_clientHost.AllowAutoTrading)\n        {\n            _clientHost.OpenAndRunStrategy(strategy);\n        }\n        else\n        {\n            _clientHost.OpenStrategy(strategy);\n        }\n    }\n}\n```\n\n### Theme-Aware UI\n"
    }
  },
  {
    "pageContent": "\n            customWindow,\n            \"Custom Analysis Window\",\n            icon\n        );\n    }\n}\n```\n\n### Strategy Management\n```csharp\npublic class StrategyManager\n{\n    private IWLClientHost _clientHost;\n\n    public void LoadAndRunStrategy(Strategy strategy)\n    {\n        if (_clientHost.AllowAutoTrading)\n        {\n            _clientHost.OpenAndRunStrategy(strategy);\n        }\n        else\n        {\n            _clientHost.OpenStrategy(strategy);\n        }\n    }\n}\n```\n\n### Theme-Aware UI\n\n\n```csharp\npublic class ThemeAwareControl : UserControl\n{\n    private IWLClientHost _clientHost;\n\n    public void UpdateTheme()\n    {\n        // Apply theme-specific styles\n        var darkTheme = _clientHost.IsDarkTheme;\n        ApplyThemeStyles(darkTheme);\n        \n        // Force theme refresh\n        _clientHost.RefreshTheme(this);\n    }\n}\n\n```",
    "metadata": {
      "id": "iwlclient-host",
      "title": "iwlclient-host",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/iwlclient-host.md",
      "chunkIndex": "code-context-17",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "# LineUtils Class\n\n**Namespace:** WealthLab.Core  \n**Parent:** None (Static Class)\n\nThe `LineUtils` class provides static utility methods for projecting and manipulating trendlines in both linear and logarithmic chart scales. These functions are particularly useful for technical analysis and price target projections.\n\n## Line Extension Methods\n\n### ExtendLine\n",
    "metadata": {
      "id": "line-utils",
      "title": "line-utils",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/line-utils.md",
      "chunkIndex": 0,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nProjects a line defined by two points to calculate its value at position `x` using linear scale.\n\n**Parameters:**\n- `x1`, `y1`: First point coordinates\n- `x2`, `y2`: Second point coordinates\n- `x`: Target x-coordinate for projection\n- `peakTrough1`, `peakTrough2`: Peak/trough points defining the line\n- `trendline`: Existing trendline to extend\n\n### ExtendLineLog\n",
    "metadata": {
      "id": "line-utils",
      "title": "line-utils",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/line-utils.md",
      "chunkIndex": 1,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nProjects a line defined by two points to calculate its value at position `x` using logarithmic scale.\n\n### ExtendLineY\n",
    "metadata": {
      "id": "line-utils",
      "title": "line-utils",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/line-utils.md",
      "chunkIndex": 2,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nWrapper method that calls either `ExtendLine` or `ExtendLineLog` based on the `useLog` parameter.\n\n## Parallel Line Methods\n\n### ParallelTrendLine\n",
    "metadata": {
      "id": "line-utils",
      "title": "line-utils",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/line-utils.md",
      "chunkIndex": 3,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nCreates a parallel trendline opposite to the input points/line, automatically positioned to create the widest channel.\n\n**Notes:**\n- Locates the line by analyzing price distribution relative to the input line\n- Maintains the same index values as the original line\n- Use `ExtendLineY` to project the resultant trendline for price targets\n\n### ParallelTrendLineAt\n",
    "metadata": {
      "id": "line-utils",
      "title": "line-utils",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/line-utils.md",
      "chunkIndex": 4,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nCreates a parallel trendline that passes through a specific point `[atIndex, atValue]`.\n\n## High/Low Trendline Methods\n\n### TrendLineFromHighs\n",
    "metadata": {
      "id": "line-utils",
      "title": "line-utils",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/line-utils.md",
      "chunkIndex": 5,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nCreates a trendline connecting price highs from the anchor bar to the current bar.\n\n**Parameters:**\n- `bars`: Price history\n- `bar`: Current bar index\n- `anchorBar`: Starting bar index\n- `ignoreBarsAfterAnchor`: Number of bars after anchor to ignore crossings\n\n**Notes:**\n- Returns null if no valid trendline is found\n- Use `TrendLine.ExtendTo()` to project the line forward\n\n### TrendLineFromLows\n",
    "metadata": {
      "id": "line-utils",
      "title": "line-utils",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/line-utils.md",
      "chunkIndex": 6,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nCreates a trendline connecting price lows from the anchor bar to the current bar.\n\n## Triangle Formation\n\n### TriangleTrendLine\n",
    "metadata": {
      "id": "line-utils",
      "title": "line-utils",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/line-utils.md",
      "chunkIndex": 7,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nCreates an opposite trendline with inverted slope to form a symmetrical triangle.\n\n**Notes:**\n- Can form converging or diverging (horn) patterns\n- `Index1` set to leftPtIndex\n- `Index2` set to highest/lowest point index\n- Validate post-Index2 price action for pattern validity\n\n## Usage Examples\n\n### Basic Line Extension\n",
    "metadata": {
      "id": "line-utils",
      "title": "line-utils",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/line-utils.md",
      "chunkIndex": 8,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n### Parallel Channel Trading\n",
    "metadata": {
      "id": "line-utils",
      "title": "line-utils",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/line-utils.md",
      "chunkIndex": 9,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n### Triangle Pattern Detection\n",
    "metadata": {
      "id": "line-utils",
      "title": "line-utils",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/line-utils.md",
      "chunkIndex": 10,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n## Best Practices\n\n1. **Line Projection**\n   - Choose appropriate scale (linear/log) for your analysis\n   - Validate projected values against price action\n   - Consider using multiple timeframes\n\n2. **Channel Analysis**\n   - Verify channel width is significant\n   - Consider price volatility when setting boundaries\n   - Monitor for pattern breakdowns\n\n3. **Triangle Patterns**\n   - Validate post-formation price action\n   - Consider volume confirmation\n   - Watch for false breakouts\n\n4. **Performance**\n   - Cache trendline calculations where possible\n   - Limit projection calculations in tight loops\n   - Use appropriate bar ranges for analysis ",
    "metadata": {
      "id": "line-utils",
      "title": "line-utils",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/line-utils.md",
      "chunkIndex": 11,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "public static double ExtendLine(double x1, double y1, double x2, double y2, double x)\npublic static double ExtendLine(PeakTrough peakTrough1, PeakTrough peakTrough2, double x)\npublic static double ExtendLine(TrendLine trendline, double x)\n",
    "metadata": {
      "id": "line-utils",
      "title": "line-utils",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/line-utils.md",
      "chunkIndex": "code-0",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "# LineUtils Class\n\n**Namespace:** WealthLab.Core  \n**Parent:** None (Static Class)\n\nThe `LineUtils` class provides static utility methods for projecting and manipulating trendlines in both linear and logarithmic chart scales. These functions are particularly useful for technical analysis and price target projections.\n\n## Line Extension Methods\n\n### ExtendLine\n"
    }
  },
  {
    "pageContent": "# LineUtils Class\n\n**Namespace:** WealthLab.Core  \n**Parent:** None (Static Class)\n\nThe `LineUtils` class provides static utility methods for projecting and manipulating trendlines in both linear and logarithmic chart scales. These functions are particularly useful for technical analysis and price target projections.\n\n## Line Extension Methods\n\n### ExtendLine\n\n\n```csharp\npublic static double ExtendLine(double x1, double y1, double x2, double y2, double x)\npublic static double ExtendLine(PeakTrough peakTrough1, PeakTrough peakTrough2, double x)\npublic static double ExtendLine(TrendLine trendline, double x)\n\n```",
    "metadata": {
      "id": "line-utils",
      "title": "line-utils",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/line-utils.md",
      "chunkIndex": "code-context-0",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public static double ExtendLineLog(double x1, double y1, double x2, double y2, double x)\npublic static double ExtendLineLog(PeakTrough peakTrough1, PeakTrough peakTrough2, double x)\npublic static double ExtendLineLog(TrendLine trendline, double x)\n",
    "metadata": {
      "id": "line-utils",
      "title": "line-utils",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/line-utils.md",
      "chunkIndex": "code-1",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "xtendLine(PeakTrough peakTrough1, PeakTrough peakTrough2, double x)\npublic static double ExtendLine(TrendLine trendline, double x)\n```\nProjects a line defined by two points to calculate its value at position `x` using linear scale.\n\n**Parameters:**\n- `x1`, `y1`: First point coordinates\n- `x2`, `y2`: Second point coordinates\n- `x`: Target x-coordinate for projection\n- `peakTrough1`, `peakTrough2`: Peak/trough points defining the line\n- `trendline`: Existing trendline to extend\n\n### ExtendLineLog\n"
    }
  },
  {
    "pageContent": "xtendLine(PeakTrough peakTrough1, PeakTrough peakTrough2, double x)\npublic static double ExtendLine(TrendLine trendline, double x)\n```\nProjects a line defined by two points to calculate its value at position `x` using linear scale.\n\n**Parameters:**\n- `x1`, `y1`: First point coordinates\n- `x2`, `y2`: Second point coordinates\n- `x`: Target x-coordinate for projection\n- `peakTrough1`, `peakTrough2`: Peak/trough points defining the line\n- `trendline`: Existing trendline to extend\n\n### ExtendLineLog\n\n\n```csharp\npublic static double ExtendLineLog(double x1, double y1, double x2, double y2, double x)\npublic static double ExtendLineLog(PeakTrough peakTrough1, PeakTrough peakTrough2, double x)\npublic static double ExtendLineLog(TrendLine trendline, double x)\n\n```",
    "metadata": {
      "id": "line-utils",
      "title": "line-utils",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/line-utils.md",
      "chunkIndex": "code-context-1",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public static double ExtendLineY(double x1, double y1, double x2, double y2, double x, bool useLog = false)\npublic static double ExtendLineY(PeakTrough peakTrough1, PeakTrough peakTrough2, double x, bool useLog = false)\npublic static double ExtendLineY(TrendLine trendline, double x, bool useLog = false)\n",
    "metadata": {
      "id": "line-utils",
      "title": "line-utils",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/line-utils.md",
      "chunkIndex": "code-2",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "1`, `peakTrough2`: Peak/trough points defining the line\n- `trendline`: Existing trendline to extend\n\n### ExtendLineLog\n```csharp\npublic static double ExtendLineLog(double x1, double y1, double x2, double y2, double x)\npublic static double ExtendLineLog(PeakTrough peakTrough1, PeakTrough peakTrough2, double x)\npublic static double ExtendLineLog(TrendLine trendline, double x)\n```\nProjects a line defined by two points to calculate its value at position `x` using logarithmic scale.\n\n### ExtendLineY\n"
    }
  },
  {
    "pageContent": "1`, `peakTrough2`: Peak/trough points defining the line\n- `trendline`: Existing trendline to extend\n\n### ExtendLineLog\n```csharp\npublic static double ExtendLineLog(double x1, double y1, double x2, double y2, double x)\npublic static double ExtendLineLog(PeakTrough peakTrough1, PeakTrough peakTrough2, double x)\npublic static double ExtendLineLog(TrendLine trendline, double x)\n```\nProjects a line defined by two points to calculate its value at position `x` using logarithmic scale.\n\n### ExtendLineY\n\n\n```csharp\npublic static double ExtendLineY(double x1, double y1, double x2, double y2, double x, bool useLog = false)\npublic static double ExtendLineY(PeakTrough peakTrough1, PeakTrough peakTrough2, double x, bool useLog = false)\npublic static double ExtendLineY(TrendLine trendline, double x, bool useLog = false)\n\n```",
    "metadata": {
      "id": "line-utils",
      "title": "line-utils",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/line-utils.md",
      "chunkIndex": "code-context-2",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public static TrendLine ParallelTrendLine(BarHistory bars, int leftPtIndex, double leftPtValue, \n    int rightPtIndex, double rightPtValue, bool useLog = false)\npublic static TrendLine ParallelTrendLine(BarHistory bars, PeakTrough peakTrough1, \n    PeakTrough peakTrough2, bool useLog = false)\npublic static TrendLine ParallelTrendLine(BarHistory bars, Trendline trendline, bool useLog = false)\n",
    "metadata": {
      "id": "line-utils",
      "title": "line-utils",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/line-utils.md",
      "chunkIndex": "code-3",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "garithmic scale.\n\n### ExtendLineY\n```csharp\npublic static double ExtendLineY(double x1, double y1, double x2, double y2, double x, bool useLog = false)\npublic static double ExtendLineY(PeakTrough peakTrough1, PeakTrough peakTrough2, double x, bool useLog = false)\npublic static double ExtendLineY(TrendLine trendline, double x, bool useLog = false)\n```\nWrapper method that calls either `ExtendLine` or `ExtendLineLog` based on the `useLog` parameter.\n\n## Parallel Line Methods\n\n### ParallelTrendLine\n"
    }
  },
  {
    "pageContent": "garithmic scale.\n\n### ExtendLineY\n```csharp\npublic static double ExtendLineY(double x1, double y1, double x2, double y2, double x, bool useLog = false)\npublic static double ExtendLineY(PeakTrough peakTrough1, PeakTrough peakTrough2, double x, bool useLog = false)\npublic static double ExtendLineY(TrendLine trendline, double x, bool useLog = false)\n```\nWrapper method that calls either `ExtendLine` or `ExtendLineLog` based on the `useLog` parameter.\n\n## Parallel Line Methods\n\n### ParallelTrendLine\n\n\n```csharp\npublic static TrendLine ParallelTrendLine(BarHistory bars, int leftPtIndex, double leftPtValue, \n    int rightPtIndex, double rightPtValue, bool useLog = false)\npublic static TrendLine ParallelTrendLine(BarHistory bars, PeakTrough peakTrough1, \n    PeakTrough peakTrough2, bool useLog = false)\npublic static TrendLine ParallelTrendLine(BarHistory bars, Trendline trendline, bool useLog = false)\n\n```",
    "metadata": {
      "id": "line-utils",
      "title": "line-utils",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/line-utils.md",
      "chunkIndex": "code-context-3",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public static TrendLine ParallelTrendLineAt(BarHistory bars, int atIndex, double atValue, \n    int leftPtIndex, double leftPtValue, int rightPtIndex, double rightPtValue, bool useLog = false)\npublic static TrendLine ParallelTrendLineAt(BarHistory bars, int atIndex, double atValue, \n    PeakTrough peakTrough1, PeakTrough peakTrough2, bool useLog = false)\npublic static TrendLine ParallelTrendLineAt(BarHistory bars, int atIndex, double atValue, \n    TrendLine trendline, bool useLog = false)\n",
    "metadata": {
      "id": "line-utils",
      "title": "line-utils",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/line-utils.md",
      "chunkIndex": "code-4",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "eakTrough2, bool useLog = false)\npublic static TrendLine ParallelTrendLine(BarHistory bars, Trendline trendline, bool useLog = false)\n```\nCreates a parallel trendline opposite to the input points/line, automatically positioned to create the widest channel.\n\n**Notes:**\n- Locates the line by analyzing price distribution relative to the input line\n- Maintains the same index values as the original line\n- Use `ExtendLineY` to project the resultant trendline for price targets\n\n### ParallelTrendLineAt\n"
    }
  },
  {
    "pageContent": "eakTrough2, bool useLog = false)\npublic static TrendLine ParallelTrendLine(BarHistory bars, Trendline trendline, bool useLog = false)\n```\nCreates a parallel trendline opposite to the input points/line, automatically positioned to create the widest channel.\n\n**Notes:**\n- Locates the line by analyzing price distribution relative to the input line\n- Maintains the same index values as the original line\n- Use `ExtendLineY` to project the resultant trendline for price targets\n\n### ParallelTrendLineAt\n\n\n```csharp\npublic static TrendLine ParallelTrendLineAt(BarHistory bars, int atIndex, double atValue, \n    int leftPtIndex, double leftPtValue, int rightPtIndex, double rightPtValue, bool useLog = false)\npublic static TrendLine ParallelTrendLineAt(BarHistory bars, int atIndex, double atValue, \n    PeakTrough peakTrough1, PeakTrough peakTrough2, bool useLog = false)\npublic static TrendLine ParallelTrendLineAt(BarHistory bars, int atIndex, double atValue, \n    TrendLine trendline, bool useLog = false)\n\n```",
    "metadata": {
      "id": "line-utils",
      "title": "line-utils",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/line-utils.md",
      "chunkIndex": "code-context-4",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public static TrendLine TrendLineFromHighs(BarHistory bars, int bar, int anchorBar, \n    int ignoreBarsAfterAnchor = 2)\n",
    "metadata": {
      "id": "line-utils",
      "title": "line-utils",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/line-utils.md",
      "chunkIndex": "code-5",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "tPtIndex, double rightPtValue, bool useLog = false)\npublic static TrendLine ParallelTrendLineAt(BarHistory bars, int atIndex, double atValue, \n    PeakTrough peakTrough1, PeakTrough peakTrough2, bool useLog = false)\npublic static TrendLine ParallelTrendLineAt(BarHistory bars, int atIndex, double atValue, \n    TrendLine trendline, bool useLog = false)\n```\nCreates a parallel trendline that passes through a specific point `[atIndex, atValue]`.\n\n## High/Low Trendline Methods\n\n### TrendLineFromHighs\n"
    }
  },
  {
    "pageContent": "tPtIndex, double rightPtValue, bool useLog = false)\npublic static TrendLine ParallelTrendLineAt(BarHistory bars, int atIndex, double atValue, \n    PeakTrough peakTrough1, PeakTrough peakTrough2, bool useLog = false)\npublic static TrendLine ParallelTrendLineAt(BarHistory bars, int atIndex, double atValue, \n    TrendLine trendline, bool useLog = false)\n```\nCreates a parallel trendline that passes through a specific point `[atIndex, atValue]`.\n\n## High/Low Trendline Methods\n\n### TrendLineFromHighs\n\n\n```csharp\npublic static TrendLine TrendLineFromHighs(BarHistory bars, int bar, int anchorBar, \n    int ignoreBarsAfterAnchor = 2)\n\n```",
    "metadata": {
      "id": "line-utils",
      "title": "line-utils",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/line-utils.md",
      "chunkIndex": "code-context-5",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public static TrendLine TrendLineFromLows(BarHistory bars, int bar, int anchorBar, \n    int ignoreBarsAfterAnchor = 2)\n",
    "metadata": {
      "id": "line-utils",
      "title": "line-utils",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/line-utils.md",
      "chunkIndex": "code-6",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "e TrendLineFromHighs(BarHistory bars, int bar, int anchorBar, \n    int ignoreBarsAfterAnchor = 2)\n```\nCreates a trendline connecting price highs from the anchor bar to the current bar.\n\n**Parameters:**\n- `bars`: Price history\n- `bar`: Current bar index\n- `anchorBar`: Starting bar index\n- `ignoreBarsAfterAnchor`: Number of bars after anchor to ignore crossings\n\n**Notes:**\n- Returns null if no valid trendline is found\n- Use `TrendLine.ExtendTo()` to project the line forward\n\n### TrendLineFromLows\n"
    }
  },
  {
    "pageContent": "e TrendLineFromHighs(BarHistory bars, int bar, int anchorBar, \n    int ignoreBarsAfterAnchor = 2)\n```\nCreates a trendline connecting price highs from the anchor bar to the current bar.\n\n**Parameters:**\n- `bars`: Price history\n- `bar`: Current bar index\n- `anchorBar`: Starting bar index\n- `ignoreBarsAfterAnchor`: Number of bars after anchor to ignore crossings\n\n**Notes:**\n- Returns null if no valid trendline is found\n- Use `TrendLine.ExtendTo()` to project the line forward\n\n### TrendLineFromLows\n\n\n```csharp\npublic static TrendLine TrendLineFromLows(BarHistory bars, int bar, int anchorBar, \n    int ignoreBarsAfterAnchor = 2)\n\n```",
    "metadata": {
      "id": "line-utils",
      "title": "line-utils",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/line-utils.md",
      "chunkIndex": "code-context-6",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public static TrendLine TriangleTrendLine(BarHistory bars, int leftPtIndex, double leftPtValue, \n    int rightPtIndex, double rightPtValue, bool useLog = false)\npublic static TrendLine TriangleTrendLine(BarHistory bars, PeakTrough peakTrough1, \n    PeakTrough peakTrough2, bool useLog = false)\npublic static TrendLine TriangleTrendLine(BarHistory bars, TrendLine trendline, bool useLog = false)\n",
    "metadata": {
      "id": "line-utils",
      "title": "line-utils",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/line-utils.md",
      "chunkIndex": "code-7",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "rBar`: Starting bar index\n- `ignoreBarsAfterAnchor`: Number of bars after anchor to ignore crossings\n\n**Notes:**\n- Returns null if no valid trendline is found\n- Use `TrendLine.ExtendTo()` to project the line forward\n\n### TrendLineFromLows\n```csharp\npublic static TrendLine TrendLineFromLows(BarHistory bars, int bar, int anchorBar, \n    int ignoreBarsAfterAnchor = 2)\n```\nCreates a trendline connecting price lows from the anchor bar to the current bar.\n\n## Triangle Formation\n\n### TriangleTrendLine\n"
    }
  },
  {
    "pageContent": "rBar`: Starting bar index\n- `ignoreBarsAfterAnchor`: Number of bars after anchor to ignore crossings\n\n**Notes:**\n- Returns null if no valid trendline is found\n- Use `TrendLine.ExtendTo()` to project the line forward\n\n### TrendLineFromLows\n```csharp\npublic static TrendLine TrendLineFromLows(BarHistory bars, int bar, int anchorBar, \n    int ignoreBarsAfterAnchor = 2)\n```\nCreates a trendline connecting price lows from the anchor bar to the current bar.\n\n## Triangle Formation\n\n### TriangleTrendLine\n\n\n```csharp\npublic static TrendLine TriangleTrendLine(BarHistory bars, int leftPtIndex, double leftPtValue, \n    int rightPtIndex, double rightPtValue, bool useLog = false)\npublic static TrendLine TriangleTrendLine(BarHistory bars, PeakTrough peakTrough1, \n    PeakTrough peakTrough2, bool useLog = false)\npublic static TrendLine TriangleTrendLine(BarHistory bars, TrendLine trendline, bool useLog = false)\n\n```",
    "metadata": {
      "id": "line-utils",
      "title": "line-utils",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/line-utils.md",
      "chunkIndex": "code-context-7",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public class TrendlineStrategy : UserStrategyBase\n{\n    public override void Execute(BarHistory bars, int idx)\n    {\n        if (idx < 20) return;\n        \n        // Create trendline from recent highs\n        var trendline = LineUtils.TrendLineFromHighs(bars, idx, idx - 20);\n        if (trendline != null)\n        {\n            // Project value at current bar\n            double projectedValue = LineUtils.ExtendLineY(\n                trendline.Index1, trendline.Value1,\n                trendline.Index2, trendline.Value2,\n                idx\n            );\n            \n            // Check for breakout\n            if (bars.Close[idx] > projectedValue)\n            {\n                Buy();\n            }\n        }\n    }\n}\n",
    "metadata": {
      "id": "line-utils",
      "title": "line-utils",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/line-utils.md",
      "chunkIndex": "code-8",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "eakTrough peakTrough1, \n    PeakTrough peakTrough2, bool useLog = false)\npublic static TrendLine TriangleTrendLine(BarHistory bars, TrendLine trendline, bool useLog = false)\n```\nCreates an opposite trendline with inverted slope to form a symmetrical triangle.\n\n**Notes:**\n- Can form converging or diverging (horn) patterns\n- `Index1` set to leftPtIndex\n- `Index2` set to highest/lowest point index\n- Validate post-Index2 price action for pattern validity\n\n## Usage Examples\n\n### Basic Line Extension\n"
    }
  },
  {
    "pageContent": "eakTrough peakTrough1, \n    PeakTrough peakTrough2, bool useLog = false)\npublic static TrendLine TriangleTrendLine(BarHistory bars, TrendLine trendline, bool useLog = false)\n```\nCreates an opposite trendline with inverted slope to form a symmetrical triangle.\n\n**Notes:**\n- Can form converging or diverging (horn) patterns\n- `Index1` set to leftPtIndex\n- `Index2` set to highest/lowest point index\n- Validate post-Index2 price action for pattern validity\n\n## Usage Examples\n\n### Basic Line Extension\n\n\n```csharp\npublic class TrendlineStrategy : UserStrategyBase\n{\n    public override void Execute(BarHistory bars, int idx)\n    {\n        if (idx < 20) return;\n        \n        // Create trendline from recent highs\n        var trendline = LineUtils.TrendLineFromHighs(bars, idx, idx - 20);\n        if (trendline != null)\n        {\n            // Project value at current bar\n            double projectedValue = LineUtils.ExtendLineY(\n                trendline.Index1, trendline.Value1,\n                trendline.Index2, trendline.Value2,\n                idx\n            );\n            \n            // Check for breakout\n            if (bars.Close[idx] > projectedValue)\n            {\n                Buy();\n            }\n        }\n    }\n}\n\n```",
    "metadata": {
      "id": "line-utils",
      "title": "line-utils",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/line-utils.md",
      "chunkIndex": "code-context-8",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public class ChannelStrategy : UserStrategyBase\n{\n    public override void Execute(BarHistory bars, int idx)\n    {\n        if (idx < 50) return;\n        \n        // Create upper trendline\n        var upperLine = LineUtils.TrendLineFromHighs(bars, idx - 10, idx - 50);\n        if (upperLine != null)\n        {\n            // Create parallel lower channel line\n            var lowerLine = LineUtils.ParallelTrendLine(bars, upperLine);\n            \n            // Get projected values\n            double upperValue = LineUtils.ExtendLineY(upperLine, idx);\n            double lowerValue = LineUtils.ExtendLineY(lowerLine, idx);\n            \n            // Trade channel boundaries\n            if (bars.Close[idx] <= lowerValue)\n                Buy();\n            else if (bars.Close[idx] >= upperValue)\n                SellAll();\n        }\n    }\n}\n",
    "metadata": {
      "id": "line-utils",
      "title": "line-utils",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/line-utils.md",
      "chunkIndex": "code-9",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": " idx, idx - 20);\n        if (trendline != null)\n        {\n            // Project value at current bar\n            double projectedValue = LineUtils.ExtendLineY(\n                trendline.Index1, trendline.Value1,\n                trendline.Index2, trendline.Value2,\n                idx\n            );\n            \n            // Check for breakout\n            if (bars.Close[idx] > projectedValue)\n            {\n                Buy();\n            }\n        }\n    }\n}\n```\n\n### Parallel Channel Trading\n"
    }
  },
  {
    "pageContent": " idx, idx - 20);\n        if (trendline != null)\n        {\n            // Project value at current bar\n            double projectedValue = LineUtils.ExtendLineY(\n                trendline.Index1, trendline.Value1,\n                trendline.Index2, trendline.Value2,\n                idx\n            );\n            \n            // Check for breakout\n            if (bars.Close[idx] > projectedValue)\n            {\n                Buy();\n            }\n        }\n    }\n}\n```\n\n### Parallel Channel Trading\n\n\n```csharp\npublic class ChannelStrategy : UserStrategyBase\n{\n    public override void Execute(BarHistory bars, int idx)\n    {\n        if (idx < 50) return;\n        \n        // Create upper trendline\n        var upperLine = LineUtils.TrendLineFromHighs(bars, idx - 10, idx - 50);\n        if (upperLine != null)\n        {\n            // Create parallel lower channel line\n            var lowerLine = LineUtils.ParallelTrendLine(bars, upperLine);\n            \n            // Get projected values\n            double upperValue = LineUtils.ExtendLineY(upperLine, idx);\n            double lowerValue = LineUtils.ExtendLineY(lowerLine, idx);\n            \n            // Trade channel boundaries\n            if (bars.Close[idx] <= lowerValue)\n                Buy();\n            else if (bars.Close[idx] >= upperValue)\n                SellAll();\n        }\n    }\n}\n\n```",
    "metadata": {
      "id": "line-utils",
      "title": "line-utils",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/line-utils.md",
      "chunkIndex": "code-context-9",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public class TriangleStrategy : UserStrategyBase\n{\n    public override void Execute(BarHistory bars, int idx)\n    {\n        if (idx < 40) return;\n        \n        // Create resistance line\n        var resistance = LineUtils.TrendLineFromHighs(bars, idx, idx - 40);\n        if (resistance != null)\n        {\n            // Create triangle support line\n            var support = LineUtils.TriangleTrendLine(bars, resistance);\n            \n            // Check for triangle breakout\n            double resistanceValue = LineUtils.ExtendLineY(resistance, idx);\n            if (bars.Close[idx] > resistanceValue)\n            {\n                Buy();\n            }\n        }\n    }\n}\n",
    "metadata": {
      "id": "line-utils",
      "title": "line-utils",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/line-utils.md",
      "chunkIndex": "code-10",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "Line = LineUtils.ParallelTrendLine(bars, upperLine);\n            \n            // Get projected values\n            double upperValue = LineUtils.ExtendLineY(upperLine, idx);\n            double lowerValue = LineUtils.ExtendLineY(lowerLine, idx);\n            \n            // Trade channel boundaries\n            if (bars.Close[idx] <= lowerValue)\n                Buy();\n            else if (bars.Close[idx] >= upperValue)\n                SellAll();\n        }\n    }\n}\n```\n\n### Triangle Pattern Detection\n"
    }
  },
  {
    "pageContent": "Line = LineUtils.ParallelTrendLine(bars, upperLine);\n            \n            // Get projected values\n            double upperValue = LineUtils.ExtendLineY(upperLine, idx);\n            double lowerValue = LineUtils.ExtendLineY(lowerLine, idx);\n            \n            // Trade channel boundaries\n            if (bars.Close[idx] <= lowerValue)\n                Buy();\n            else if (bars.Close[idx] >= upperValue)\n                SellAll();\n        }\n    }\n}\n```\n\n### Triangle Pattern Detection\n\n\n```csharp\npublic class TriangleStrategy : UserStrategyBase\n{\n    public override void Execute(BarHistory bars, int idx)\n    {\n        if (idx < 40) return;\n        \n        // Create resistance line\n        var resistance = LineUtils.TrendLineFromHighs(bars, idx, idx - 40);\n        if (resistance != null)\n        {\n            // Create triangle support line\n            var support = LineUtils.TriangleTrendLine(bars, resistance);\n            \n            // Check for triangle breakout\n            double resistanceValue = LineUtils.ExtendLineY(resistance, idx);\n            if (bars.Close[idx] > resistanceValue)\n            {\n                Buy();\n            }\n        }\n    }\n}\n\n```",
    "metadata": {
      "id": "line-utils",
      "title": "line-utils",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/line-utils.md",
      "chunkIndex": "code-context-10",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "# ManuallyDrawnObject Class\n\n**Namespace:** WealthLab.Backtest  \n**Parent:** Object\n\nThe `ManuallyDrawnObject` class represents a user-drawn chart object such as trend lines, Fibonacci retracements, or text notes. WealthLab 8 persists these objects by symbol and `HistoryScale` (Daily, Weekly, etc.).\n\n## Properties\n\n### Bars\n",
    "metadata": {
      "id": "manually-drawn-object",
      "title": "manually-drawn-object",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/manually-drawn-object.md",
      "chunkIndex": 0,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nThe `BarHistory` instance associated with this drawing object.\n\n### DrawingObjectType\n",
    "metadata": {
      "id": "manually-drawn-object",
      "title": "manually-drawn-object",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/manually-drawn-object.md",
      "chunkIndex": 1,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nSpecifies the type of drawing object. Common types include:\n- `\"Line\"`\n- `\"Fibonacci Retracement\"`\n- `\"Text Note\"`\n\n**Note:** You can identify an object's type in WealthLab 8 by:\n- Editing the object (type appears in dialog title)\n- Hovering over its button in the drawing toolbar\n\n### NameFromUser\n",
    "metadata": {
      "id": "manually-drawn-object",
      "title": "manually-drawn-object",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/manually-drawn-object.md",
      "chunkIndex": 2,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nThe user-assigned name of the drawing object, if any, specified during creation or editing.\n\n### Pane\n",
    "metadata": {
      "id": "manually-drawn-object",
      "title": "manually-drawn-object",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/manually-drawn-object.md",
      "chunkIndex": 3,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nThe chart pane containing the drawing object:\n- `\"Price\"`: Main price pane\n- `\"Volume\"`: Volume pane\n- Other values (e.g., `\"RSI\"`, `\"CMO\"`): Indicator panes\n\n### Points\n",
    "metadata": {
      "id": "manually-drawn-object",
      "title": "manually-drawn-object",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/manually-drawn-object.md",
      "chunkIndex": 4,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nList of `HistoricalDataPoint` instances defining the object's points. The number of points varies by object type:\n- Line: 2 points\n- Fibonacci Retracement: 2 points\n- Text Note: 1 point\n\n## Methods\n\n### ExtendLine\n",
    "metadata": {
      "id": "manually-drawn-object",
      "title": "manually-drawn-object",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/manually-drawn-object.md",
      "chunkIndex": 5,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nProjects a line between two points to calculate its value at a specific bar index using linear scale.\n\n**Parameters:**\n- `pt1`: Index of first point in `Points` list\n- `pt2`: Index of second point in `Points` list\n- `idx`: Target bar index in associated `BarHistory`\n\n**Returns:** Y-axis value where line intersects at `idx`\n\n### ExtendLineLog\n",
    "metadata": {
      "id": "manually-drawn-object",
      "title": "manually-drawn-object",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/manually-drawn-object.md",
      "chunkIndex": 6,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nProjects a line between two points to calculate its value at a specific bar index using logarithmic scale.\n\n## Usage Examples\n\n### Trend Line Analysis\n",
    "metadata": {
      "id": "manually-drawn-object",
      "title": "manually-drawn-object",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/manually-drawn-object.md",
      "chunkIndex": 7,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n### Fibonacci Level Trading\n",
    "metadata": {
      "id": "manually-drawn-object",
      "title": "manually-drawn-object",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/manually-drawn-object.md",
      "chunkIndex": 8,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n### Multi-Pane Analysis\n",
    "metadata": {
      "id": "manually-drawn-object",
      "title": "manually-drawn-object",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/manually-drawn-object.md",
      "chunkIndex": 9,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n## Best Practices\n\n1. **Object Type Handling**\n   - Verify object type before processing\n   - Handle different types appropriately\n   - Consider pane context in analysis\n\n2. **Point Management**\n   - Validate point count for object type\n   - Handle missing or invalid points\n   - Consider time alignment of points\n\n3. **Line Projection**\n   - Choose appropriate scale (linear/log)\n   - Validate projected values\n   - Consider projection distance\n\n4. **Performance**\n   - Cache drawn objects when possible\n   - Limit projection calculations\n   - Filter objects by relevant types/panes\n\n## Common Use Cases\n\n1. **Technical Analysis**\n   - Trend line breakouts\n   - Support/resistance levels\n   - Pattern recognition\n\n2. **Fibonacci Analysis**\n   - Retracement levels\n   - Extension targets\n   - Price projections\n\n3. **Multi-Timeframe Analysis**\n   - Trend line correlation\n   - Level confirmation\n   - Pattern validation\n\n## Notes\n\n- Objects persist across sessions\n- Scale-specific storage (Daily, Weekly, etc.)\n- Consider user modifications\n- Validate object existence before use ",
    "metadata": {
      "id": "manually-drawn-object",
      "title": "manually-drawn-object",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/manually-drawn-object.md",
      "chunkIndex": 10,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "public BarHistory Bars\n",
    "metadata": {
      "id": "manually-drawn-object",
      "title": "manually-drawn-object",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/manually-drawn-object.md",
      "chunkIndex": "code-0",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "# ManuallyDrawnObject Class\n\n**Namespace:** WealthLab.Backtest  \n**Parent:** Object\n\nThe `ManuallyDrawnObject` class represents a user-drawn chart object such as trend lines, Fibonacci retracements, or text notes. WealthLab 8 persists these objects by symbol and `HistoryScale` (Daily, Weekly, etc.).\n\n## Properties\n\n### Bars\n"
    }
  },
  {
    "pageContent": "# ManuallyDrawnObject Class\n\n**Namespace:** WealthLab.Backtest  \n**Parent:** Object\n\nThe `ManuallyDrawnObject` class represents a user-drawn chart object such as trend lines, Fibonacci retracements, or text notes. WealthLab 8 persists these objects by symbol and `HistoryScale` (Daily, Weekly, etc.).\n\n## Properties\n\n### Bars\n\n\n```csharp\npublic BarHistory Bars\n\n```",
    "metadata": {
      "id": "manually-drawn-object",
      "title": "manually-drawn-object",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/manually-drawn-object.md",
      "chunkIndex": "code-context-0",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public string DrawingObjectType\n",
    "metadata": {
      "id": "manually-drawn-object",
      "title": "manually-drawn-object",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/manually-drawn-object.md",
      "chunkIndex": "code-1",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "# ManuallyDrawnObject Class\n\n**Namespace:** WealthLab.Backtest  \n**Parent:** Object\n\nThe `ManuallyDrawnObject` class represents a user-drawn chart object such as trend lines, Fibonacci retracements, or text notes. WealthLab 8 persists these objects by symbol and `HistoryScale` (Daily, Weekly, etc.).\n\n## Properties\n\n### Bars\n```csharp\npublic BarHistory Bars\n```\nThe `BarHistory` instance associated with this drawing object.\n\n### DrawingObjectType\n"
    }
  },
  {
    "pageContent": "# ManuallyDrawnObject Class\n\n**Namespace:** WealthLab.Backtest  \n**Parent:** Object\n\nThe `ManuallyDrawnObject` class represents a user-drawn chart object such as trend lines, Fibonacci retracements, or text notes. WealthLab 8 persists these objects by symbol and `HistoryScale` (Daily, Weekly, etc.).\n\n## Properties\n\n### Bars\n```csharp\npublic BarHistory Bars\n```\nThe `BarHistory` instance associated with this drawing object.\n\n### DrawingObjectType\n\n\n```csharp\npublic string DrawingObjectType\n\n```",
    "metadata": {
      "id": "manually-drawn-object",
      "title": "manually-drawn-object",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/manually-drawn-object.md",
      "chunkIndex": "code-context-1",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public string NameFromUser\n",
    "metadata": {
      "id": "manually-drawn-object",
      "title": "manually-drawn-object",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/manually-drawn-object.md",
      "chunkIndex": "code-2",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "etc.).\n\n## Properties\n\n### Bars\n```csharp\npublic BarHistory Bars\n```\nThe `BarHistory` instance associated with this drawing object.\n\n### DrawingObjectType\n```csharp\npublic string DrawingObjectType\n```\nSpecifies the type of drawing object. Common types include:\n- `\"Line\"`\n- `\"Fibonacci Retracement\"`\n- `\"Text Note\"`\n\n**Note:** You can identify an object's type in WealthLab 8 by:\n- Editing the object (type appears in dialog title)\n- Hovering over its button in the drawing toolbar\n\n### NameFromUser\n"
    }
  },
  {
    "pageContent": "etc.).\n\n## Properties\n\n### Bars\n```csharp\npublic BarHistory Bars\n```\nThe `BarHistory` instance associated with this drawing object.\n\n### DrawingObjectType\n```csharp\npublic string DrawingObjectType\n```\nSpecifies the type of drawing object. Common types include:\n- `\"Line\"`\n- `\"Fibonacci Retracement\"`\n- `\"Text Note\"`\n\n**Note:** You can identify an object's type in WealthLab 8 by:\n- Editing the object (type appears in dialog title)\n- Hovering over its button in the drawing toolbar\n\n### NameFromUser\n\n\n```csharp\npublic string NameFromUser\n\n```",
    "metadata": {
      "id": "manually-drawn-object",
      "title": "manually-drawn-object",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/manually-drawn-object.md",
      "chunkIndex": "code-context-2",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public string Pane\n",
    "metadata": {
      "id": "manually-drawn-object",
      "title": "manually-drawn-object",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/manually-drawn-object.md",
      "chunkIndex": "code-3",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "gObjectType\n```csharp\npublic string DrawingObjectType\n```\nSpecifies the type of drawing object. Common types include:\n- `\"Line\"`\n- `\"Fibonacci Retracement\"`\n- `\"Text Note\"`\n\n**Note:** You can identify an object's type in WealthLab 8 by:\n- Editing the object (type appears in dialog title)\n- Hovering over its button in the drawing toolbar\n\n### NameFromUser\n```csharp\npublic string NameFromUser\n```\nThe user-assigned name of the drawing object, if any, specified during creation or editing.\n\n### Pane\n"
    }
  },
  {
    "pageContent": "gObjectType\n```csharp\npublic string DrawingObjectType\n```\nSpecifies the type of drawing object. Common types include:\n- `\"Line\"`\n- `\"Fibonacci Retracement\"`\n- `\"Text Note\"`\n\n**Note:** You can identify an object's type in WealthLab 8 by:\n- Editing the object (type appears in dialog title)\n- Hovering over its button in the drawing toolbar\n\n### NameFromUser\n```csharp\npublic string NameFromUser\n```\nThe user-assigned name of the drawing object, if any, specified during creation or editing.\n\n### Pane\n\n\n```csharp\npublic string Pane\n\n```",
    "metadata": {
      "id": "manually-drawn-object",
      "title": "manually-drawn-object",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/manually-drawn-object.md",
      "chunkIndex": "code-context-3",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public List<HistoricalDataPoint> Points\n",
    "metadata": {
      "id": "manually-drawn-object",
      "title": "manually-drawn-object",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/manually-drawn-object.md",
      "chunkIndex": "code-4",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": " object's type in WealthLab 8 by:\n- Editing the object (type appears in dialog title)\n- Hovering over its button in the drawing toolbar\n\n### NameFromUser\n```csharp\npublic string NameFromUser\n```\nThe user-assigned name of the drawing object, if any, specified during creation or editing.\n\n### Pane\n```csharp\npublic string Pane\n```\nThe chart pane containing the drawing object:\n- `\"Price\"`: Main price pane\n- `\"Volume\"`: Volume pane\n- Other values (e.g., `\"RSI\"`, `\"CMO\"`): Indicator panes\n\n### Points\n"
    }
  },
  {
    "pageContent": " object's type in WealthLab 8 by:\n- Editing the object (type appears in dialog title)\n- Hovering over its button in the drawing toolbar\n\n### NameFromUser\n```csharp\npublic string NameFromUser\n```\nThe user-assigned name of the drawing object, if any, specified during creation or editing.\n\n### Pane\n```csharp\npublic string Pane\n```\nThe chart pane containing the drawing object:\n- `\"Price\"`: Main price pane\n- `\"Volume\"`: Volume pane\n- Other values (e.g., `\"RSI\"`, `\"CMO\"`): Indicator panes\n\n### Points\n\n\n```csharp\npublic List<HistoricalDataPoint> Points\n\n```",
    "metadata": {
      "id": "manually-drawn-object",
      "title": "manually-drawn-object",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/manually-drawn-object.md",
      "chunkIndex": "code-context-4",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public double ExtendLine(int pt1, int pt2, int idx)\n",
    "metadata": {
      "id": "manually-drawn-object",
      "title": "manually-drawn-object",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/manually-drawn-object.md",
      "chunkIndex": "code-5",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "eation or editing.\n\n### Pane\n```csharp\npublic string Pane\n```\nThe chart pane containing the drawing object:\n- `\"Price\"`: Main price pane\n- `\"Volume\"`: Volume pane\n- Other values (e.g., `\"RSI\"`, `\"CMO\"`): Indicator panes\n\n### Points\n```csharp\npublic List<HistoricalDataPoint> Points\n```\nList of `HistoricalDataPoint` instances defining the object's points. The number of points varies by object type:\n- Line: 2 points\n- Fibonacci Retracement: 2 points\n- Text Note: 1 point\n\n## Methods\n\n### ExtendLine\n"
    }
  },
  {
    "pageContent": "eation or editing.\n\n### Pane\n```csharp\npublic string Pane\n```\nThe chart pane containing the drawing object:\n- `\"Price\"`: Main price pane\n- `\"Volume\"`: Volume pane\n- Other values (e.g., `\"RSI\"`, `\"CMO\"`): Indicator panes\n\n### Points\n```csharp\npublic List<HistoricalDataPoint> Points\n```\nList of `HistoricalDataPoint` instances defining the object's points. The number of points varies by object type:\n- Line: 2 points\n- Fibonacci Retracement: 2 points\n- Text Note: 1 point\n\n## Methods\n\n### ExtendLine\n\n\n```csharp\npublic double ExtendLine(int pt1, int pt2, int idx)\n\n```",
    "metadata": {
      "id": "manually-drawn-object",
      "title": "manually-drawn-object",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/manually-drawn-object.md",
      "chunkIndex": "code-context-5",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public double ExtendLineLog(int pt1, int pt2, int idx)\n",
    "metadata": {
      "id": "manually-drawn-object",
      "title": "manually-drawn-object",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/manually-drawn-object.md",
      "chunkIndex": "code-6",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "points\n- Fibonacci Retracement: 2 points\n- Text Note: 1 point\n\n## Methods\n\n### ExtendLine\n```csharp\npublic double ExtendLine(int pt1, int pt2, int idx)\n```\nProjects a line between two points to calculate its value at a specific bar index using linear scale.\n\n**Parameters:**\n- `pt1`: Index of first point in `Points` list\n- `pt2`: Index of second point in `Points` list\n- `idx`: Target bar index in associated `BarHistory`\n\n**Returns:** Y-axis value where line intersects at `idx`\n\n### ExtendLineLog\n"
    }
  },
  {
    "pageContent": "points\n- Fibonacci Retracement: 2 points\n- Text Note: 1 point\n\n## Methods\n\n### ExtendLine\n```csharp\npublic double ExtendLine(int pt1, int pt2, int idx)\n```\nProjects a line between two points to calculate its value at a specific bar index using linear scale.\n\n**Parameters:**\n- `pt1`: Index of first point in `Points` list\n- `pt2`: Index of second point in `Points` list\n- `idx`: Target bar index in associated `BarHistory`\n\n**Returns:** Y-axis value where line intersects at `idx`\n\n### ExtendLineLog\n\n\n```csharp\npublic double ExtendLineLog(int pt1, int pt2, int idx)\n\n```",
    "metadata": {
      "id": "manually-drawn-object",
      "title": "manually-drawn-object",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/manually-drawn-object.md",
      "chunkIndex": "code-context-6",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public class TrendLineStrategy : UserStrategyBase\n{\n    public override void Execute(BarHistory bars, int idx)\n    {\n        // Get manually drawn objects\n        var drawnObjects = GetDrawnObjects();\n        \n        foreach (var obj in drawnObjects)\n        {\n            // Process only trend lines in price pane\n            if (obj.DrawingObjectType == \"Line\" && obj.Pane == \"Price\")\n            {\n                // Project line to current bar\n                double projectedValue = obj.ExtendLine(0, 1, idx);\n                \n                // Check for breakout\n                if (bars.Close[idx] > projectedValue)\n                {\n                    Buy();\n                }\n            }\n        }\n    }\n}\n",
    "metadata": {
      "id": "manually-drawn-object",
      "title": "manually-drawn-object",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/manually-drawn-object.md",
      "chunkIndex": "code-7",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "pecific bar index using linear scale.\n\n**Parameters:**\n- `pt1`: Index of first point in `Points` list\n- `pt2`: Index of second point in `Points` list\n- `idx`: Target bar index in associated `BarHistory`\n\n**Returns:** Y-axis value where line intersects at `idx`\n\n### ExtendLineLog\n```csharp\npublic double ExtendLineLog(int pt1, int pt2, int idx)\n```\nProjects a line between two points to calculate its value at a specific bar index using logarithmic scale.\n\n## Usage Examples\n\n### Trend Line Analysis\n"
    }
  },
  {
    "pageContent": "pecific bar index using linear scale.\n\n**Parameters:**\n- `pt1`: Index of first point in `Points` list\n- `pt2`: Index of second point in `Points` list\n- `idx`: Target bar index in associated `BarHistory`\n\n**Returns:** Y-axis value where line intersects at `idx`\n\n### ExtendLineLog\n```csharp\npublic double ExtendLineLog(int pt1, int pt2, int idx)\n```\nProjects a line between two points to calculate its value at a specific bar index using logarithmic scale.\n\n## Usage Examples\n\n### Trend Line Analysis\n\n\n```csharp\npublic class TrendLineStrategy : UserStrategyBase\n{\n    public override void Execute(BarHistory bars, int idx)\n    {\n        // Get manually drawn objects\n        var drawnObjects = GetDrawnObjects();\n        \n        foreach (var obj in drawnObjects)\n        {\n            // Process only trend lines in price pane\n            if (obj.DrawingObjectType == \"Line\" && obj.Pane == \"Price\")\n            {\n                // Project line to current bar\n                double projectedValue = obj.ExtendLine(0, 1, idx);\n                \n                // Check for breakout\n                if (bars.Close[idx] > projectedValue)\n                {\n                    Buy();\n                }\n            }\n        }\n    }\n}\n\n```",
    "metadata": {
      "id": "manually-drawn-object",
      "title": "manually-drawn-object",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/manually-drawn-object.md",
      "chunkIndex": "code-context-7",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public class FibonacciStrategy : UserStrategyBase\n{\n    public override void Execute(BarHistory bars, int idx)\n    {\n        foreach (var obj in GetDrawnObjects())\n        {\n            if (obj.DrawingObjectType == \"Fibonacci Retracement\")\n            {\n                // Get Fibonacci points\n                var highPoint = obj.Points[0];\n                var lowPoint = obj.Points[1];\n                \n                // Calculate 61.8% retracement level\n                double range = highPoint.Value - lowPoint.Value;\n                double fibLevel = lowPoint.Value + (range * 0.618);\n                \n                // Trade on retracement level\n                if (bars.Close[idx] > fibLevel && bars.Close[idx-1] <= fibLevel)\n                {\n                    Buy();\n                }\n            }\n        }\n    }\n}\n",
    "metadata": {
      "id": "manually-drawn-object",
      "title": "manually-drawn-object",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/manually-drawn-object.md",
      "chunkIndex": "code-8",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "       {\n            // Process only trend lines in price pane\n            if (obj.DrawingObjectType == \"Line\" && obj.Pane == \"Price\")\n            {\n                // Project line to current bar\n                double projectedValue = obj.ExtendLine(0, 1, idx);\n                \n                // Check for breakout\n                if (bars.Close[idx] > projectedValue)\n                {\n                    Buy();\n                }\n            }\n        }\n    }\n}\n```\n\n### Fibonacci Level Trading\n"
    }
  },
  {
    "pageContent": "       {\n            // Process only trend lines in price pane\n            if (obj.DrawingObjectType == \"Line\" && obj.Pane == \"Price\")\n            {\n                // Project line to current bar\n                double projectedValue = obj.ExtendLine(0, 1, idx);\n                \n                // Check for breakout\n                if (bars.Close[idx] > projectedValue)\n                {\n                    Buy();\n                }\n            }\n        }\n    }\n}\n```\n\n### Fibonacci Level Trading\n\n\n```csharp\npublic class FibonacciStrategy : UserStrategyBase\n{\n    public override void Execute(BarHistory bars, int idx)\n    {\n        foreach (var obj in GetDrawnObjects())\n        {\n            if (obj.DrawingObjectType == \"Fibonacci Retracement\")\n            {\n                // Get Fibonacci points\n                var highPoint = obj.Points[0];\n                var lowPoint = obj.Points[1];\n                \n                // Calculate 61.8% retracement level\n                double range = highPoint.Value - lowPoint.Value;\n                double fibLevel = lowPoint.Value + (range * 0.618);\n                \n                // Trade on retracement level\n                if (bars.Close[idx] > fibLevel && bars.Close[idx-1] <= fibLevel)\n                {\n                    Buy();\n                }\n            }\n        }\n    }\n}\n\n```",
    "metadata": {
      "id": "manually-drawn-object",
      "title": "manually-drawn-object",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/manually-drawn-object.md",
      "chunkIndex": "code-context-8",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public class MultiPaneStrategy : UserStrategyBase\n{\n    public override void Execute(BarHistory bars, int idx)\n    {\n        var priceObjects = GetDrawnObjects()\n            .Where(o => o.Pane == \"Price\");\n            \n        var rsiObjects = GetDrawnObjects()\n            .Where(o => o.Pane == \"RSI\");\n            \n        // Analyze objects in different panes\n        foreach (var priceObj in priceObjects)\n        {\n            foreach (var rsiObj in rsiObjects)\n            {\n                // Custom analysis logic\n                AnalyzeObjects(priceObj, rsiObj, idx);\n            }\n        }\n    }\n}\n",
    "metadata": {
      "id": "manually-drawn-object",
      "title": "manually-drawn-object",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/manually-drawn-object.md",
      "chunkIndex": "code-9",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ar lowPoint = obj.Points[1];\n                \n                // Calculate 61.8% retracement level\n                double range = highPoint.Value - lowPoint.Value;\n                double fibLevel = lowPoint.Value + (range * 0.618);\n                \n                // Trade on retracement level\n                if (bars.Close[idx] > fibLevel && bars.Close[idx-1] <= fibLevel)\n                {\n                    Buy();\n                }\n            }\n        }\n    }\n}\n```\n\n### Multi-Pane Analysis\n"
    }
  },
  {
    "pageContent": "ar lowPoint = obj.Points[1];\n                \n                // Calculate 61.8% retracement level\n                double range = highPoint.Value - lowPoint.Value;\n                double fibLevel = lowPoint.Value + (range * 0.618);\n                \n                // Trade on retracement level\n                if (bars.Close[idx] > fibLevel && bars.Close[idx-1] <= fibLevel)\n                {\n                    Buy();\n                }\n            }\n        }\n    }\n}\n```\n\n### Multi-Pane Analysis\n\n\n```csharp\npublic class MultiPaneStrategy : UserStrategyBase\n{\n    public override void Execute(BarHistory bars, int idx)\n    {\n        var priceObjects = GetDrawnObjects()\n            .Where(o => o.Pane == \"Price\");\n            \n        var rsiObjects = GetDrawnObjects()\n            .Where(o => o.Pane == \"RSI\");\n            \n        // Analyze objects in different panes\n        foreach (var priceObj in priceObjects)\n        {\n            foreach (var rsiObj in rsiObjects)\n            {\n                // Custom analysis logic\n                AnalyzeObjects(priceObj, rsiObj, idx);\n            }\n        }\n    }\n}\n\n```",
    "metadata": {
      "id": "manually-drawn-object",
      "title": "manually-drawn-object",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/manually-drawn-object.md",
      "chunkIndex": "code-context-9",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "# MarketDetails Class\n\n**Namespace:** WealthLab.Core  \n**Parent:** Object\n\nThe `MarketDetails` class contains information about a market, such as the US Stock Market or Cryptocurrency markets. Historical Data Providers in WealthLab can create `MarketDetails` instances and assign them to symbols, or you can make such assignments using the Markets & Symbols tool.\n\n## Core Properties\n\n### BaseTimeZone\n",
    "metadata": {
      "id": "market-details",
      "title": "market-details",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/market-details.md",
      "chunkIndex": 0,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nContains the time zone that the market trades in. The string is compatible with Windows time zone ID values.\n\n### BenchmarkSymbol\n",
    "metadata": {
      "id": "market-details",
      "title": "market-details",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/market-details.md",
      "chunkIndex": 1,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nContains a suggested symbol to use as a benchmark for backtest comparisons (e.g., \"SPY\" for US Stocks, \"BTC.USD\" for Cryptocurrencies).\n\n### DisplayDecimals\n",
    "metadata": {
      "id": "market-details",
      "title": "market-details",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/market-details.md",
      "chunkIndex": 2,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nContains the number of decimal places to use when displaying price data for the market.\n\n### Name\n",
    "metadata": {
      "id": "market-details",
      "title": "market-details",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/market-details.md",
      "chunkIndex": 3,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nContains the name of the market.\n\n### QuantityDecimals\n",
    "metadata": {
      "id": "market-details",
      "title": "market-details",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/market-details.md",
      "chunkIndex": 4,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nContains the number of decimal places to use when calculating the number of shares or contracts for a position.\n\n## Market Hours Methods\n\n### GetHoursLocalTime\n",
    "metadata": {
      "id": "market-details",
      "title": "market-details",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/market-details.md",
      "chunkIndex": 5,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the market hours in the market's time zone for the specified date in the local time zone.\n\n### GetHoursMarketTime\n",
    "metadata": {
      "id": "market-details",
      "title": "market-details",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/market-details.md",
      "chunkIndex": 6,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the market hours in the market's time zone for the specified date.\n\n## Market Status Methods\n\n### IsOpenNow\n",
    "metadata": {
      "id": "market-details",
      "title": "market-details",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/market-details.md",
      "chunkIndex": 7,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nDetermines if the market is currently open based on system time, time zone, and market hours.\n\n### IsPostMarket\n",
    "metadata": {
      "id": "market-details",
      "title": "market-details",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/market-details.md",
      "chunkIndex": 8,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nDetermines if the current time is considered \"post-market close\".\n\n### IsPreMarket\n",
    "metadata": {
      "id": "market-details",
      "title": "market-details",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/market-details.md",
      "chunkIndex": 9,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nDetermines if the current time is considered \"pre-market open\".\n\n### IsTradingDay\n",
    "metadata": {
      "id": "market-details",
      "title": "market-details",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/market-details.md",
      "chunkIndex": 10,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns true if the specified date is an active trading day in this market.\n\n## Trading Calendar Properties\n\n### HolidayDates\n",
    "metadata": {
      "id": "market-details",
      "title": "market-details",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/market-details.md",
      "chunkIndex": 11,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nA list of dates representing market holidays when the market would normally be open but is closed.\n\n### TradingDaysOfWeek\n",
    "metadata": {
      "id": "market-details",
      "title": "market-details",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/market-details.md",
      "chunkIndex": 12,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nContains `DayOfWeek` values representing the days when this market is open for trading.\n\n## Symbol Management\n\n### GetSecurityName\n",
    "metadata": {
      "id": "market-details",
      "title": "market-details",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/market-details.md",
      "chunkIndex": 13,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the security name of the specified symbol, if available.\n\n### SymbolMapping\n",
    "metadata": {
      "id": "market-details",
      "title": "market-details",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/market-details.md",
      "chunkIndex": 14,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nA Dictionary that data provider creators can use to map symbols to their security names.\n\n## Market Creation Methods\n\n### Clone\n",
    "metadata": {
      "id": "market-details",
      "title": "market-details",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/market-details.md",
      "chunkIndex": 15,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nCreates a new `MarketDetails` instance that copies all properties of this market.\n\n### SpecifyMarketHours\n",
    "metadata": {
      "id": "market-details",
      "title": "market-details",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/market-details.md",
      "chunkIndex": 16,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nSpecifies market open and close times for a specific day of the week. Use -1 for `dayOfWeek` to set default market hours.\n\n### TradeOnAllDays\n",
    "metadata": {
      "id": "market-details",
      "title": "market-details",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/market-details.md",
      "chunkIndex": 17,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nConfigures the market to trade on all days of the week.\n\n### TradeOnWeekdays\n",
    "metadata": {
      "id": "market-details",
      "title": "market-details",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/market-details.md",
      "chunkIndex": 18,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nConfigures the market to trade on weekdays (Monday through Friday).\n\n## Usage Examples\n\n### Creating a Custom Market\n",
    "metadata": {
      "id": "market-details",
      "title": "market-details",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/market-details.md",
      "chunkIndex": 19,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n### Creating a Traditional Stock Market\n",
    "metadata": {
      "id": "market-details",
      "title": "market-details",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/market-details.md",
      "chunkIndex": 20,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n### Market Status Checking\n",
    "metadata": {
      "id": "market-details",
      "title": "market-details",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/market-details.md",
      "chunkIndex": 21,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n## Best Practices\n\n1. **Market Hours Configuration**\n   - Always specify default hours using -1 for dayOfWeek\n   - Consider time zone differences in calculations\n   - Handle special trading sessions appropriately\n\n2. **Holiday Management**\n   - Keep holiday list updated\n   - Consider partial trading days\n   - Handle holiday adjustments for different years\n\n3. **Symbol Management**\n   - Maintain accurate symbol mappings\n   - Update security names regularly\n   - Handle symbol changes and delistings\n\n4. **Time Zone Handling**\n   - Use correct Windows time zone IDs\n   - Consider daylight saving time transitions\n   - Handle international market differences\n\n## Notes\n\n- Market details persist across WealthLab sessions\n- Time zones must match Windows time zone IDs\n- Holiday dates should be updated annually\n- Consider extended hours trading where applicable ",
    "metadata": {
      "id": "market-details",
      "title": "market-details",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/market-details.md",
      "chunkIndex": 22,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "public string BaseTimeZone\n",
    "metadata": {
      "id": "market-details",
      "title": "market-details",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/market-details.md",
      "chunkIndex": "code-0",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "# MarketDetails Class\n\n**Namespace:** WealthLab.Core  \n**Parent:** Object\n\nThe `MarketDetails` class contains information about a market, such as the US Stock Market or Cryptocurrency markets. Historical Data Providers in WealthLab can create `MarketDetails` instances and assign them to symbols, or you can make such assignments using the Markets & Symbols tool.\n\n## Core Properties\n\n### BaseTimeZone\n"
    }
  },
  {
    "pageContent": "# MarketDetails Class\n\n**Namespace:** WealthLab.Core  \n**Parent:** Object\n\nThe `MarketDetails` class contains information about a market, such as the US Stock Market or Cryptocurrency markets. Historical Data Providers in WealthLab can create `MarketDetails` instances and assign them to symbols, or you can make such assignments using the Markets & Symbols tool.\n\n## Core Properties\n\n### BaseTimeZone\n\n\n```csharp\npublic string BaseTimeZone\n\n```",
    "metadata": {
      "id": "market-details",
      "title": "market-details",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/market-details.md",
      "chunkIndex": "code-context-0",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public string BenchmarkSymbol\n",
    "metadata": {
      "id": "market-details",
      "title": "market-details",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/market-details.md",
      "chunkIndex": "code-1",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "\n\nThe `MarketDetails` class contains information about a market, such as the US Stock Market or Cryptocurrency markets. Historical Data Providers in WealthLab can create `MarketDetails` instances and assign them to symbols, or you can make such assignments using the Markets & Symbols tool.\n\n## Core Properties\n\n### BaseTimeZone\n```csharp\npublic string BaseTimeZone\n```\nContains the time zone that the market trades in. The string is compatible with Windows time zone ID values.\n\n### BenchmarkSymbol\n"
    }
  },
  {
    "pageContent": "\n\nThe `MarketDetails` class contains information about a market, such as the US Stock Market or Cryptocurrency markets. Historical Data Providers in WealthLab can create `MarketDetails` instances and assign them to symbols, or you can make such assignments using the Markets & Symbols tool.\n\n## Core Properties\n\n### BaseTimeZone\n```csharp\npublic string BaseTimeZone\n```\nContains the time zone that the market trades in. The string is compatible with Windows time zone ID values.\n\n### BenchmarkSymbol\n\n\n```csharp\npublic string BenchmarkSymbol\n\n```",
    "metadata": {
      "id": "market-details",
      "title": "market-details",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/market-details.md",
      "chunkIndex": "code-context-1",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public int DisplayDecimals\n",
    "metadata": {
      "id": "market-details",
      "title": "market-details",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/market-details.md",
      "chunkIndex": "code-2",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ssign them to symbols, or you can make such assignments using the Markets & Symbols tool.\n\n## Core Properties\n\n### BaseTimeZone\n```csharp\npublic string BaseTimeZone\n```\nContains the time zone that the market trades in. The string is compatible with Windows time zone ID values.\n\n### BenchmarkSymbol\n```csharp\npublic string BenchmarkSymbol\n```\nContains a suggested symbol to use as a benchmark for backtest comparisons (e.g., \"SPY\" for US Stocks, \"BTC.USD\" for Cryptocurrencies).\n\n### DisplayDecimals\n"
    }
  },
  {
    "pageContent": "ssign them to symbols, or you can make such assignments using the Markets & Symbols tool.\n\n## Core Properties\n\n### BaseTimeZone\n```csharp\npublic string BaseTimeZone\n```\nContains the time zone that the market trades in. The string is compatible with Windows time zone ID values.\n\n### BenchmarkSymbol\n```csharp\npublic string BenchmarkSymbol\n```\nContains a suggested symbol to use as a benchmark for backtest comparisons (e.g., \"SPY\" for US Stocks, \"BTC.USD\" for Cryptocurrencies).\n\n### DisplayDecimals\n\n\n```csharp\npublic int DisplayDecimals\n\n```",
    "metadata": {
      "id": "market-details",
      "title": "market-details",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/market-details.md",
      "chunkIndex": "code-context-2",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public string Name\n",
    "metadata": {
      "id": "market-details",
      "title": "market-details",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/market-details.md",
      "chunkIndex": "code-3",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ublic string BaseTimeZone\n```\nContains the time zone that the market trades in. The string is compatible with Windows time zone ID values.\n\n### BenchmarkSymbol\n```csharp\npublic string BenchmarkSymbol\n```\nContains a suggested symbol to use as a benchmark for backtest comparisons (e.g., \"SPY\" for US Stocks, \"BTC.USD\" for Cryptocurrencies).\n\n### DisplayDecimals\n```csharp\npublic int DisplayDecimals\n```\nContains the number of decimal places to use when displaying price data for the market.\n\n### Name\n"
    }
  },
  {
    "pageContent": "ublic string BaseTimeZone\n```\nContains the time zone that the market trades in. The string is compatible with Windows time zone ID values.\n\n### BenchmarkSymbol\n```csharp\npublic string BenchmarkSymbol\n```\nContains a suggested symbol to use as a benchmark for backtest comparisons (e.g., \"SPY\" for US Stocks, \"BTC.USD\" for Cryptocurrencies).\n\n### DisplayDecimals\n```csharp\npublic int DisplayDecimals\n```\nContains the number of decimal places to use when displaying price data for the market.\n\n### Name\n\n\n```csharp\npublic string Name\n\n```",
    "metadata": {
      "id": "market-details",
      "title": "market-details",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/market-details.md",
      "chunkIndex": "code-context-3",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public int QuantityDecimals\n",
    "metadata": {
      "id": "market-details",
      "title": "market-details",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/market-details.md",
      "chunkIndex": "code-4",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ng is compatible with Windows time zone ID values.\n\n### BenchmarkSymbol\n```csharp\npublic string BenchmarkSymbol\n```\nContains a suggested symbol to use as a benchmark for backtest comparisons (e.g., \"SPY\" for US Stocks, \"BTC.USD\" for Cryptocurrencies).\n\n### DisplayDecimals\n```csharp\npublic int DisplayDecimals\n```\nContains the number of decimal places to use when displaying price data for the market.\n\n### Name\n```csharp\npublic string Name\n```\nContains the name of the market.\n\n### QuantityDecimals\n"
    }
  },
  {
    "pageContent": "ng is compatible with Windows time zone ID values.\n\n### BenchmarkSymbol\n```csharp\npublic string BenchmarkSymbol\n```\nContains a suggested symbol to use as a benchmark for backtest comparisons (e.g., \"SPY\" for US Stocks, \"BTC.USD\" for Cryptocurrencies).\n\n### DisplayDecimals\n```csharp\npublic int DisplayDecimals\n```\nContains the number of decimal places to use when displaying price data for the market.\n\n### Name\n```csharp\npublic string Name\n```\nContains the name of the market.\n\n### QuantityDecimals\n\n\n```csharp\npublic int QuantityDecimals\n\n```",
    "metadata": {
      "id": "market-details",
      "title": "market-details",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/market-details.md",
      "chunkIndex": "code-context-4",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public MarketHours GetHoursLocalTime(DateTime dt)\n",
    "metadata": {
      "id": "market-details",
      "title": "market-details",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/market-details.md",
      "chunkIndex": "code-5",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "\" for US Stocks, \"BTC.USD\" for Cryptocurrencies).\n\n### DisplayDecimals\n```csharp\npublic int DisplayDecimals\n```\nContains the number of decimal places to use when displaying price data for the market.\n\n### Name\n```csharp\npublic string Name\n```\nContains the name of the market.\n\n### QuantityDecimals\n```csharp\npublic int QuantityDecimals\n```\nContains the number of decimal places to use when calculating the number of shares or contracts for a position.\n\n## Market Hours Methods\n\n### GetHoursLocalTime\n"
    }
  },
  {
    "pageContent": "\" for US Stocks, \"BTC.USD\" for Cryptocurrencies).\n\n### DisplayDecimals\n```csharp\npublic int DisplayDecimals\n```\nContains the number of decimal places to use when displaying price data for the market.\n\n### Name\n```csharp\npublic string Name\n```\nContains the name of the market.\n\n### QuantityDecimals\n```csharp\npublic int QuantityDecimals\n```\nContains the number of decimal places to use when calculating the number of shares or contracts for a position.\n\n## Market Hours Methods\n\n### GetHoursLocalTime\n\n\n```csharp\npublic MarketHours GetHoursLocalTime(DateTime dt)\n\n```",
    "metadata": {
      "id": "market-details",
      "title": "market-details",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/market-details.md",
      "chunkIndex": "code-context-5",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public MarketHours GetHoursMarketTime(DateTime dt)\n",
    "metadata": {
      "id": "market-details",
      "title": "market-details",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/market-details.md",
      "chunkIndex": "code-6",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "r the market.\n\n### Name\n```csharp\npublic string Name\n```\nContains the name of the market.\n\n### QuantityDecimals\n```csharp\npublic int QuantityDecimals\n```\nContains the number of decimal places to use when calculating the number of shares or contracts for a position.\n\n## Market Hours Methods\n\n### GetHoursLocalTime\n```csharp\npublic MarketHours GetHoursLocalTime(DateTime dt)\n```\nReturns the market hours in the market's time zone for the specified date in the local time zone.\n\n### GetHoursMarketTime\n"
    }
  },
  {
    "pageContent": "r the market.\n\n### Name\n```csharp\npublic string Name\n```\nContains the name of the market.\n\n### QuantityDecimals\n```csharp\npublic int QuantityDecimals\n```\nContains the number of decimal places to use when calculating the number of shares or contracts for a position.\n\n## Market Hours Methods\n\n### GetHoursLocalTime\n```csharp\npublic MarketHours GetHoursLocalTime(DateTime dt)\n```\nReturns the market hours in the market's time zone for the specified date in the local time zone.\n\n### GetHoursMarketTime\n\n\n```csharp\npublic MarketHours GetHoursMarketTime(DateTime dt)\n\n```",
    "metadata": {
      "id": "market-details",
      "title": "market-details",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/market-details.md",
      "chunkIndex": "code-context-6",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public bool IsOpenNow\n",
    "metadata": {
      "id": "market-details",
      "title": "market-details",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/market-details.md",
      "chunkIndex": "code-7",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "mal places to use when calculating the number of shares or contracts for a position.\n\n## Market Hours Methods\n\n### GetHoursLocalTime\n```csharp\npublic MarketHours GetHoursLocalTime(DateTime dt)\n```\nReturns the market hours in the market's time zone for the specified date in the local time zone.\n\n### GetHoursMarketTime\n```csharp\npublic MarketHours GetHoursMarketTime(DateTime dt)\n```\nReturns the market hours in the market's time zone for the specified date.\n\n## Market Status Methods\n\n### IsOpenNow\n"
    }
  },
  {
    "pageContent": "mal places to use when calculating the number of shares or contracts for a position.\n\n## Market Hours Methods\n\n### GetHoursLocalTime\n```csharp\npublic MarketHours GetHoursLocalTime(DateTime dt)\n```\nReturns the market hours in the market's time zone for the specified date in the local time zone.\n\n### GetHoursMarketTime\n```csharp\npublic MarketHours GetHoursMarketTime(DateTime dt)\n```\nReturns the market hours in the market's time zone for the specified date.\n\n## Market Status Methods\n\n### IsOpenNow\n\n\n```csharp\npublic bool IsOpenNow\n\n```",
    "metadata": {
      "id": "market-details",
      "title": "market-details",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/market-details.md",
      "chunkIndex": "code-context-7",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public bool IsPostMarket\n",
    "metadata": {
      "id": "market-details",
      "title": "market-details",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/market-details.md",
      "chunkIndex": "code-8",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "c MarketHours GetHoursLocalTime(DateTime dt)\n```\nReturns the market hours in the market's time zone for the specified date in the local time zone.\n\n### GetHoursMarketTime\n```csharp\npublic MarketHours GetHoursMarketTime(DateTime dt)\n```\nReturns the market hours in the market's time zone for the specified date.\n\n## Market Status Methods\n\n### IsOpenNow\n```csharp\npublic bool IsOpenNow\n```\nDetermines if the market is currently open based on system time, time zone, and market hours.\n\n### IsPostMarket\n"
    }
  },
  {
    "pageContent": "c MarketHours GetHoursLocalTime(DateTime dt)\n```\nReturns the market hours in the market's time zone for the specified date in the local time zone.\n\n### GetHoursMarketTime\n```csharp\npublic MarketHours GetHoursMarketTime(DateTime dt)\n```\nReturns the market hours in the market's time zone for the specified date.\n\n## Market Status Methods\n\n### IsOpenNow\n```csharp\npublic bool IsOpenNow\n```\nDetermines if the market is currently open based on system time, time zone, and market hours.\n\n### IsPostMarket\n\n\n```csharp\npublic bool IsPostMarket\n\n```",
    "metadata": {
      "id": "market-details",
      "title": "market-details",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/market-details.md",
      "chunkIndex": "code-context-8",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public bool IsPreMarket\n",
    "metadata": {
      "id": "market-details",
      "title": "market-details",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/market-details.md",
      "chunkIndex": "code-9",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": " in the local time zone.\n\n### GetHoursMarketTime\n```csharp\npublic MarketHours GetHoursMarketTime(DateTime dt)\n```\nReturns the market hours in the market's time zone for the specified date.\n\n## Market Status Methods\n\n### IsOpenNow\n```csharp\npublic bool IsOpenNow\n```\nDetermines if the market is currently open based on system time, time zone, and market hours.\n\n### IsPostMarket\n```csharp\npublic bool IsPostMarket\n```\nDetermines if the current time is considered \"post-market close\".\n\n### IsPreMarket\n"
    }
  },
  {
    "pageContent": " in the local time zone.\n\n### GetHoursMarketTime\n```csharp\npublic MarketHours GetHoursMarketTime(DateTime dt)\n```\nReturns the market hours in the market's time zone for the specified date.\n\n## Market Status Methods\n\n### IsOpenNow\n```csharp\npublic bool IsOpenNow\n```\nDetermines if the market is currently open based on system time, time zone, and market hours.\n\n### IsPostMarket\n```csharp\npublic bool IsPostMarket\n```\nDetermines if the current time is considered \"post-market close\".\n\n### IsPreMarket\n\n\n```csharp\npublic bool IsPreMarket\n\n```",
    "metadata": {
      "id": "market-details",
      "title": "market-details",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/market-details.md",
      "chunkIndex": "code-context-9",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public bool IsTradingDay(DateTime dt)\n",
    "metadata": {
      "id": "market-details",
      "title": "market-details",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/market-details.md",
      "chunkIndex": "code-10",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "s the market hours in the market's time zone for the specified date.\n\n## Market Status Methods\n\n### IsOpenNow\n```csharp\npublic bool IsOpenNow\n```\nDetermines if the market is currently open based on system time, time zone, and market hours.\n\n### IsPostMarket\n```csharp\npublic bool IsPostMarket\n```\nDetermines if the current time is considered \"post-market close\".\n\n### IsPreMarket\n```csharp\npublic bool IsPreMarket\n```\nDetermines if the current time is considered \"pre-market open\".\n\n### IsTradingDay\n"
    }
  },
  {
    "pageContent": "s the market hours in the market's time zone for the specified date.\n\n## Market Status Methods\n\n### IsOpenNow\n```csharp\npublic bool IsOpenNow\n```\nDetermines if the market is currently open based on system time, time zone, and market hours.\n\n### IsPostMarket\n```csharp\npublic bool IsPostMarket\n```\nDetermines if the current time is considered \"post-market close\".\n\n### IsPreMarket\n```csharp\npublic bool IsPreMarket\n```\nDetermines if the current time is considered \"pre-market open\".\n\n### IsTradingDay\n\n\n```csharp\npublic bool IsTradingDay(DateTime dt)\n\n```",
    "metadata": {
      "id": "market-details",
      "title": "market-details",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/market-details.md",
      "chunkIndex": "code-context-10",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public List<DateTime> HolidayDates\n",
    "metadata": {
      "id": "market-details",
      "title": "market-details",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/market-details.md",
      "chunkIndex": "code-11",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ently open based on system time, time zone, and market hours.\n\n### IsPostMarket\n```csharp\npublic bool IsPostMarket\n```\nDetermines if the current time is considered \"post-market close\".\n\n### IsPreMarket\n```csharp\npublic bool IsPreMarket\n```\nDetermines if the current time is considered \"pre-market open\".\n\n### IsTradingDay\n```csharp\npublic bool IsTradingDay(DateTime dt)\n```\nReturns true if the specified date is an active trading day in this market.\n\n## Trading Calendar Properties\n\n### HolidayDates\n"
    }
  },
  {
    "pageContent": "ently open based on system time, time zone, and market hours.\n\n### IsPostMarket\n```csharp\npublic bool IsPostMarket\n```\nDetermines if the current time is considered \"post-market close\".\n\n### IsPreMarket\n```csharp\npublic bool IsPreMarket\n```\nDetermines if the current time is considered \"pre-market open\".\n\n### IsTradingDay\n```csharp\npublic bool IsTradingDay(DateTime dt)\n```\nReturns true if the specified date is an active trading day in this market.\n\n## Trading Calendar Properties\n\n### HolidayDates\n\n\n```csharp\npublic List<DateTime> HolidayDates\n\n```",
    "metadata": {
      "id": "market-details",
      "title": "market-details",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/market-details.md",
      "chunkIndex": "code-context-11",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public List<DayOfWeek> TradingDaysOfWeek\n",
    "metadata": {
      "id": "market-details",
      "title": "market-details",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/market-details.md",
      "chunkIndex": "code-12",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "arket close\".\n\n### IsPreMarket\n```csharp\npublic bool IsPreMarket\n```\nDetermines if the current time is considered \"pre-market open\".\n\n### IsTradingDay\n```csharp\npublic bool IsTradingDay(DateTime dt)\n```\nReturns true if the specified date is an active trading day in this market.\n\n## Trading Calendar Properties\n\n### HolidayDates\n```csharp\npublic List<DateTime> HolidayDates\n```\nA list of dates representing market holidays when the market would normally be open but is closed.\n\n### TradingDaysOfWeek\n"
    }
  },
  {
    "pageContent": "arket close\".\n\n### IsPreMarket\n```csharp\npublic bool IsPreMarket\n```\nDetermines if the current time is considered \"pre-market open\".\n\n### IsTradingDay\n```csharp\npublic bool IsTradingDay(DateTime dt)\n```\nReturns true if the specified date is an active trading day in this market.\n\n## Trading Calendar Properties\n\n### HolidayDates\n```csharp\npublic List<DateTime> HolidayDates\n```\nA list of dates representing market holidays when the market would normally be open but is closed.\n\n### TradingDaysOfWeek\n\n\n```csharp\npublic List<DayOfWeek> TradingDaysOfWeek\n\n```",
    "metadata": {
      "id": "market-details",
      "title": "market-details",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/market-details.md",
      "chunkIndex": "code-context-12",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public string GetSecurityName(string symbol)\n",
    "metadata": {
      "id": "market-details",
      "title": "market-details",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/market-details.md",
      "chunkIndex": "code-13",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "DateTime dt)\n```\nReturns true if the specified date is an active trading day in this market.\n\n## Trading Calendar Properties\n\n### HolidayDates\n```csharp\npublic List<DateTime> HolidayDates\n```\nA list of dates representing market holidays when the market would normally be open but is closed.\n\n### TradingDaysOfWeek\n```csharp\npublic List<DayOfWeek> TradingDaysOfWeek\n```\nContains `DayOfWeek` values representing the days when this market is open for trading.\n\n## Symbol Management\n\n### GetSecurityName\n"
    }
  },
  {
    "pageContent": "DateTime dt)\n```\nReturns true if the specified date is an active trading day in this market.\n\n## Trading Calendar Properties\n\n### HolidayDates\n```csharp\npublic List<DateTime> HolidayDates\n```\nA list of dates representing market holidays when the market would normally be open but is closed.\n\n### TradingDaysOfWeek\n```csharp\npublic List<DayOfWeek> TradingDaysOfWeek\n```\nContains `DayOfWeek` values representing the days when this market is open for trading.\n\n## Symbol Management\n\n### GetSecurityName\n\n\n```csharp\npublic string GetSecurityName(string symbol)\n\n```",
    "metadata": {
      "id": "market-details",
      "title": "market-details",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/market-details.md",
      "chunkIndex": "code-context-13",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public Dictionary<string, string> SymbolMapping\n",
    "metadata": {
      "id": "market-details",
      "title": "market-details",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/market-details.md",
      "chunkIndex": "code-14",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "```csharp\npublic List<DateTime> HolidayDates\n```\nA list of dates representing market holidays when the market would normally be open but is closed.\n\n### TradingDaysOfWeek\n```csharp\npublic List<DayOfWeek> TradingDaysOfWeek\n```\nContains `DayOfWeek` values representing the days when this market is open for trading.\n\n## Symbol Management\n\n### GetSecurityName\n```csharp\npublic string GetSecurityName(string symbol)\n```\nReturns the security name of the specified symbol, if available.\n\n### SymbolMapping\n"
    }
  },
  {
    "pageContent": "```csharp\npublic List<DateTime> HolidayDates\n```\nA list of dates representing market holidays when the market would normally be open but is closed.\n\n### TradingDaysOfWeek\n```csharp\npublic List<DayOfWeek> TradingDaysOfWeek\n```\nContains `DayOfWeek` values representing the days when this market is open for trading.\n\n## Symbol Management\n\n### GetSecurityName\n```csharp\npublic string GetSecurityName(string symbol)\n```\nReturns the security name of the specified symbol, if available.\n\n### SymbolMapping\n\n\n```csharp\npublic Dictionary<string, string> SymbolMapping\n\n```",
    "metadata": {
      "id": "market-details",
      "title": "market-details",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/market-details.md",
      "chunkIndex": "code-context-14",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public MarketDetails Clone()\n",
    "metadata": {
      "id": "market-details",
      "title": "market-details",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/market-details.md",
      "chunkIndex": "code-15",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "st<DayOfWeek> TradingDaysOfWeek\n```\nContains `DayOfWeek` values representing the days when this market is open for trading.\n\n## Symbol Management\n\n### GetSecurityName\n```csharp\npublic string GetSecurityName(string symbol)\n```\nReturns the security name of the specified symbol, if available.\n\n### SymbolMapping\n```csharp\npublic Dictionary<string, string> SymbolMapping\n```\nA Dictionary that data provider creators can use to map symbols to their security names.\n\n## Market Creation Methods\n\n### Clone\n"
    }
  },
  {
    "pageContent": "st<DayOfWeek> TradingDaysOfWeek\n```\nContains `DayOfWeek` values representing the days when this market is open for trading.\n\n## Symbol Management\n\n### GetSecurityName\n```csharp\npublic string GetSecurityName(string symbol)\n```\nReturns the security name of the specified symbol, if available.\n\n### SymbolMapping\n```csharp\npublic Dictionary<string, string> SymbolMapping\n```\nA Dictionary that data provider creators can use to map symbols to their security names.\n\n## Market Creation Methods\n\n### Clone\n\n\n```csharp\npublic MarketDetails Clone()\n\n```",
    "metadata": {
      "id": "market-details",
      "title": "market-details",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/market-details.md",
      "chunkIndex": "code-context-15",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public void SpecifyMarketHours(int dayOfWeek, TimeSpan mktOpen, TimeSpan mktClose)\n",
    "metadata": {
      "id": "market-details",
      "title": "market-details",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/market-details.md",
      "chunkIndex": "code-16",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "# GetSecurityName\n```csharp\npublic string GetSecurityName(string symbol)\n```\nReturns the security name of the specified symbol, if available.\n\n### SymbolMapping\n```csharp\npublic Dictionary<string, string> SymbolMapping\n```\nA Dictionary that data provider creators can use to map symbols to their security names.\n\n## Market Creation Methods\n\n### Clone\n```csharp\npublic MarketDetails Clone()\n```\nCreates a new `MarketDetails` instance that copies all properties of this market.\n\n### SpecifyMarketHours\n"
    }
  },
  {
    "pageContent": "# GetSecurityName\n```csharp\npublic string GetSecurityName(string symbol)\n```\nReturns the security name of the specified symbol, if available.\n\n### SymbolMapping\n```csharp\npublic Dictionary<string, string> SymbolMapping\n```\nA Dictionary that data provider creators can use to map symbols to their security names.\n\n## Market Creation Methods\n\n### Clone\n```csharp\npublic MarketDetails Clone()\n```\nCreates a new `MarketDetails` instance that copies all properties of this market.\n\n### SpecifyMarketHours\n\n\n```csharp\npublic void SpecifyMarketHours(int dayOfWeek, TimeSpan mktOpen, TimeSpan mktClose)\n\n```",
    "metadata": {
      "id": "market-details",
      "title": "market-details",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/market-details.md",
      "chunkIndex": "code-context-16",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public void TradeOnAllDays()\n",
    "metadata": {
      "id": "market-details",
      "title": "market-details",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/market-details.md",
      "chunkIndex": "code-17",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "t data provider creators can use to map symbols to their security names.\n\n## Market Creation Methods\n\n### Clone\n```csharp\npublic MarketDetails Clone()\n```\nCreates a new `MarketDetails` instance that copies all properties of this market.\n\n### SpecifyMarketHours\n```csharp\npublic void SpecifyMarketHours(int dayOfWeek, TimeSpan mktOpen, TimeSpan mktClose)\n```\nSpecifies market open and close times for a specific day of the week. Use -1 for `dayOfWeek` to set default market hours.\n\n### TradeOnAllDays\n"
    }
  },
  {
    "pageContent": "t data provider creators can use to map symbols to their security names.\n\n## Market Creation Methods\n\n### Clone\n```csharp\npublic MarketDetails Clone()\n```\nCreates a new `MarketDetails` instance that copies all properties of this market.\n\n### SpecifyMarketHours\n```csharp\npublic void SpecifyMarketHours(int dayOfWeek, TimeSpan mktOpen, TimeSpan mktClose)\n```\nSpecifies market open and close times for a specific day of the week. Use -1 for `dayOfWeek` to set default market hours.\n\n### TradeOnAllDays\n\n\n```csharp\npublic void TradeOnAllDays()\n\n```",
    "metadata": {
      "id": "market-details",
      "title": "market-details",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/market-details.md",
      "chunkIndex": "code-context-17",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public void TradeOnWeekdays()\n",
    "metadata": {
      "id": "market-details",
      "title": "market-details",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/market-details.md",
      "chunkIndex": "code-18",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "p\npublic MarketDetails Clone()\n```\nCreates a new `MarketDetails` instance that copies all properties of this market.\n\n### SpecifyMarketHours\n```csharp\npublic void SpecifyMarketHours(int dayOfWeek, TimeSpan mktOpen, TimeSpan mktClose)\n```\nSpecifies market open and close times for a specific day of the week. Use -1 for `dayOfWeek` to set default market hours.\n\n### TradeOnAllDays\n```csharp\npublic void TradeOnAllDays()\n```\nConfigures the market to trade on all days of the week.\n\n### TradeOnWeekdays\n"
    }
  },
  {
    "pageContent": "p\npublic MarketDetails Clone()\n```\nCreates a new `MarketDetails` instance that copies all properties of this market.\n\n### SpecifyMarketHours\n```csharp\npublic void SpecifyMarketHours(int dayOfWeek, TimeSpan mktOpen, TimeSpan mktClose)\n```\nSpecifies market open and close times for a specific day of the week. Use -1 for `dayOfWeek` to set default market hours.\n\n### TradeOnAllDays\n```csharp\npublic void TradeOnAllDays()\n```\nConfigures the market to trade on all days of the week.\n\n### TradeOnWeekdays\n\n\n```csharp\npublic void TradeOnWeekdays()\n\n```",
    "metadata": {
      "id": "market-details",
      "title": "market-details",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/market-details.md",
      "chunkIndex": "code-context-18",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public class CryptoMarketProvider : ProviderBase\n{\n    public MarketDetails CreateCryptoMarket()\n    {\n        var market = new MarketDetails\n        {\n            Name = \"Cryptocurrency Market\",\n            BaseTimeZone = \"UTC\",\n            BenchmarkSymbol = \"BTC.USD\",\n            DisplayDecimals = 8,\n            QuantityDecimals = 8\n        };\n        \n        // Configure for 24/7 trading\n        market.TradeOnAllDays();\n        market.SpecifyMarketHours(-1, TimeSpan.Zero, TimeSpan.Zero);\n        \n        return market;\n    }\n}\n",
    "metadata": {
      "id": "market-details",
      "title": "market-details",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/market-details.md",
      "chunkIndex": "code-19",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "d SpecifyMarketHours(int dayOfWeek, TimeSpan mktOpen, TimeSpan mktClose)\n```\nSpecifies market open and close times for a specific day of the week. Use -1 for `dayOfWeek` to set default market hours.\n\n### TradeOnAllDays\n```csharp\npublic void TradeOnAllDays()\n```\nConfigures the market to trade on all days of the week.\n\n### TradeOnWeekdays\n```csharp\npublic void TradeOnWeekdays()\n```\nConfigures the market to trade on weekdays (Monday through Friday).\n\n## Usage Examples\n\n### Creating a Custom Market\n"
    }
  },
  {
    "pageContent": "d SpecifyMarketHours(int dayOfWeek, TimeSpan mktOpen, TimeSpan mktClose)\n```\nSpecifies market open and close times for a specific day of the week. Use -1 for `dayOfWeek` to set default market hours.\n\n### TradeOnAllDays\n```csharp\npublic void TradeOnAllDays()\n```\nConfigures the market to trade on all days of the week.\n\n### TradeOnWeekdays\n```csharp\npublic void TradeOnWeekdays()\n```\nConfigures the market to trade on weekdays (Monday through Friday).\n\n## Usage Examples\n\n### Creating a Custom Market\n\n\n```csharp\npublic class CryptoMarketProvider : ProviderBase\n{\n    public MarketDetails CreateCryptoMarket()\n    {\n        var market = new MarketDetails\n        {\n            Name = \"Cryptocurrency Market\",\n            BaseTimeZone = \"UTC\",\n            BenchmarkSymbol = \"BTC.USD\",\n            DisplayDecimals = 8,\n            QuantityDecimals = 8\n        };\n        \n        // Configure for 24/7 trading\n        market.TradeOnAllDays();\n        market.SpecifyMarketHours(-1, TimeSpan.Zero, TimeSpan.Zero);\n        \n        return market;\n    }\n}\n\n```",
    "metadata": {
      "id": "market-details",
      "title": "market-details",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/market-details.md",
      "chunkIndex": "code-context-19",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public class StockMarketProvider : ProviderBase\n{\n    public MarketDetails CreateUSStockMarket()\n    {\n        var market = new MarketDetails\n        {\n            Name = \"US Stock Market\",\n            BaseTimeZone = \"Eastern Standard Time\",\n            BenchmarkSymbol = \"SPY\",\n            DisplayDecimals = 2,\n            QuantityDecimals = 0\n        };\n        \n        // Configure trading days and hours\n        market.TradeOnWeekdays();\n        market.SpecifyMarketHours(-1, \n            TimeSpan.FromHours(9.5),  // 9:30 AM\n            TimeSpan.FromHours(16));   // 4:00 PM\n            \n        // Add market holidays\n        market.HolidayDates.AddRange(new[]\n        {\n            new DateTime(2024, 1, 1),   // New Year's Day\n            new DateTime(2024, 1, 15),  // Martin Luther King Jr. Day\n            // Add other holidays...\n        });\n        \n        return market;\n    }\n}\n",
    "metadata": {
      "id": "market-details",
      "title": "market-details",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/market-details.md",
      "chunkIndex": "code-20",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "CryptoMarket()\n    {\n        var market = new MarketDetails\n        {\n            Name = \"Cryptocurrency Market\",\n            BaseTimeZone = \"UTC\",\n            BenchmarkSymbol = \"BTC.USD\",\n            DisplayDecimals = 8,\n            QuantityDecimals = 8\n        };\n        \n        // Configure for 24/7 trading\n        market.TradeOnAllDays();\n        market.SpecifyMarketHours(-1, TimeSpan.Zero, TimeSpan.Zero);\n        \n        return market;\n    }\n}\n```\n\n### Creating a Traditional Stock Market\n"
    }
  },
  {
    "pageContent": "CryptoMarket()\n    {\n        var market = new MarketDetails\n        {\n            Name = \"Cryptocurrency Market\",\n            BaseTimeZone = \"UTC\",\n            BenchmarkSymbol = \"BTC.USD\",\n            DisplayDecimals = 8,\n            QuantityDecimals = 8\n        };\n        \n        // Configure for 24/7 trading\n        market.TradeOnAllDays();\n        market.SpecifyMarketHours(-1, TimeSpan.Zero, TimeSpan.Zero);\n        \n        return market;\n    }\n}\n```\n\n### Creating a Traditional Stock Market\n\n\n```csharp\npublic class StockMarketProvider : ProviderBase\n{\n    public MarketDetails CreateUSStockMarket()\n    {\n        var market = new MarketDetails\n        {\n            Name = \"US Stock Market\",\n            BaseTimeZone = \"Eastern Standard Time\",\n            BenchmarkSymbol = \"SPY\",\n            DisplayDecimals = 2,\n            QuantityDecimals = 0\n        };\n        \n        // Configure trading days and hours\n        market.TradeOnWeekdays();\n        market.SpecifyMarketHours(-1, \n            TimeSpan.FromHours(9.5),  // 9:30 AM\n            TimeSpan.FromHours(16));   // 4:00 PM\n            \n        // Add market holidays\n        market.HolidayDates.AddRange(new[]\n        {\n            new DateTime(2024, 1, 1),   // New Year's Day\n            new DateTime(2024, 1, 15),  // Martin Luther King Jr. Day\n            // Add other holidays...\n        });\n        \n        return market;\n    }\n}\n\n```",
    "metadata": {
      "id": "market-details",
      "title": "market-details",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/market-details.md",
      "chunkIndex": "code-context-20",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public class MarketMonitor\n{\n    private MarketDetails _market;\n    \n    public void CheckMarketStatus()\n    {\n        if (_market.IsPreMarket)\n        {\n            Console.WriteLine(\"Market is in pre-market hours\");\n        }\n        else if (_market.IsOpenNow)\n        {\n            Console.WriteLine(\"Market is open for trading\");\n        }\n        else if (_market.IsPostMarket)\n        {\n            Console.WriteLine(\"Market is in post-market hours\");\n        }\n        else\n        {\n            Console.WriteLine(\"Market is closed\");\n        }\n    }\n    \n    public bool CanTrade(DateTime date)\n    {\n        return _market.IsTradingDay(date) && \n               !_market.HolidayDates.Contains(date.Date);\n    }\n}\n",
    "metadata": {
      "id": "market-details",
      "title": "market-details",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/market-details.md",
      "chunkIndex": "code-21",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "deOnWeekdays();\n        market.SpecifyMarketHours(-1, \n            TimeSpan.FromHours(9.5),  // 9:30 AM\n            TimeSpan.FromHours(16));   // 4:00 PM\n            \n        // Add market holidays\n        market.HolidayDates.AddRange(new[]\n        {\n            new DateTime(2024, 1, 1),   // New Year's Day\n            new DateTime(2024, 1, 15),  // Martin Luther King Jr. Day\n            // Add other holidays...\n        });\n        \n        return market;\n    }\n}\n```\n\n### Market Status Checking\n"
    }
  },
  {
    "pageContent": "deOnWeekdays();\n        market.SpecifyMarketHours(-1, \n            TimeSpan.FromHours(9.5),  // 9:30 AM\n            TimeSpan.FromHours(16));   // 4:00 PM\n            \n        // Add market holidays\n        market.HolidayDates.AddRange(new[]\n        {\n            new DateTime(2024, 1, 1),   // New Year's Day\n            new DateTime(2024, 1, 15),  // Martin Luther King Jr. Day\n            // Add other holidays...\n        });\n        \n        return market;\n    }\n}\n```\n\n### Market Status Checking\n\n\n```csharp\npublic class MarketMonitor\n{\n    private MarketDetails _market;\n    \n    public void CheckMarketStatus()\n    {\n        if (_market.IsPreMarket)\n        {\n            Console.WriteLine(\"Market is in pre-market hours\");\n        }\n        else if (_market.IsOpenNow)\n        {\n            Console.WriteLine(\"Market is open for trading\");\n        }\n        else if (_market.IsPostMarket)\n        {\n            Console.WriteLine(\"Market is in post-market hours\");\n        }\n        else\n        {\n            Console.WriteLine(\"Market is closed\");\n        }\n    }\n    \n    public bool CanTrade(DateTime date)\n    {\n        return _market.IsTradingDay(date) && \n               !_market.HolidayDates.Contains(date.Date);\n    }\n}\n\n```",
    "metadata": {
      "id": "market-details",
      "title": "market-details",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/market-details.md",
      "chunkIndex": "code-context-21",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "# MarketManager Class\n\n**Namespace:** WealthLab.Core  \n**Type:** Static Class\n\nThe `MarketManager` is a static utility class that manages market and symbol information in WealthLab. It maintains collections of `MarketDetails` and `SymbolInfo` instances, providing information about various markets (US stocks, Forex, Cryptocurrencies) and their associated symbols. This class is primarily intended for developers of custom Historical Data Provider adapters.\n\n## Market Management\n\n### Markets\n",
    "metadata": {
      "id": "market-manager",
      "title": "market-manager",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/market-manager.md",
      "chunkIndex": 0,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns a list containing all installed market instances (`MarketDetails` class) in the system.\n\n### AddMarket\n",
    "metadata": {
      "id": "market-manager",
      "title": "market-manager",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/market-manager.md",
      "chunkIndex": 1,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nInstalls a custom market (instance of `MarketDetails`) into the platform.\n\n### FindMarket\n",
    "metadata": {
      "id": "market-manager",
      "title": "market-manager",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/market-manager.md",
      "chunkIndex": 2,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nSearches for a market by name and returns the matching `MarketDetails` instance, or null if not found.\n\n## Symbol Management\n\n### Symbols\n",
    "metadata": {
      "id": "market-manager",
      "title": "market-manager",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/market-manager.md",
      "chunkIndex": 3,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns a list of `SymbolInfo` instances representing all symbol-specific information installed in the system.\n\n### AddSymbol\n",
    "metadata": {
      "id": "market-manager",
      "title": "market-manager",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/market-manager.md",
      "chunkIndex": 4,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nInstalls symbol-specific information into the platform (e.g., market association, decimal positions).\n\n### FindSymbol\n",
    "metadata": {
      "id": "market-manager",
      "title": "market-manager",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/market-manager.md",
      "chunkIndex": 5,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nSearches for a specific symbol and returns the matching `SymbolInfo` instance, or null if not found.\n\n## Holiday Management\n\n### HolidaySetNames\n",
    "metadata": {
      "id": "market-manager",
      "title": "market-manager",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/market-manager.md",
      "chunkIndex": 6,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns a list of all Holiday Sets installed on the platform. A Holiday Set is a named collection of dates containing holiday dates for a particular market.\n\n### HolidaySets\n",
    "metadata": {
      "id": "market-manager",
      "title": "market-manager",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/market-manager.md",
      "chunkIndex": 7,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns a dictionary of Holiday Sets keyed by name, where each set is a list of dates representing market holidays.\n\n### RegisterHolidaySet\n",
    "metadata": {
      "id": "market-manager",
      "title": "market-manager",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/market-manager.md",
      "chunkIndex": 8,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nInstalls a new Holiday Set into the platform.\n\n## Predefined Markets\n\n### UsaStocks\n",
    "metadata": {
      "id": "market-manager",
      "title": "market-manager",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/market-manager.md",
      "chunkIndex": 9,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the `MarketDetails` instance representing the US stock market.\n\n### Currencies\n",
    "metadata": {
      "id": "market-manager",
      "title": "market-manager",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/market-manager.md",
      "chunkIndex": 10,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the `MarketDetails` instance representing the currencies Forex market.\n\n## Usage Examples\n\n### Creating a Custom Market Provider\n",
    "metadata": {
      "id": "market-manager",
      "title": "market-manager",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/market-manager.md",
      "chunkIndex": 11,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n### Market and Symbol Lookup\n",
    "metadata": {
      "id": "market-manager",
      "title": "market-manager",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/market-manager.md",
      "chunkIndex": 12,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n### Holiday Set Management\n",
    "metadata": {
      "id": "market-manager",
      "title": "market-manager",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/market-manager.md",
      "chunkIndex": 13,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n## Best Practices\n\n1. **Market Management**\n   - Create comprehensive market definitions\n   - Include all necessary trading parameters\n   - Maintain accurate time zone information\n\n2. **Symbol Management**\n   - Keep symbol information up to date\n   - Handle symbol changes and delistings\n   - Maintain accurate decimal places\n\n3. **Holiday Management**\n   - Update holiday sets annually\n   - Include partial trading days\n   - Verify holiday dates accuracy\n\n4. **Error Handling**\n   - Check for null returns from Find methods\n   - Validate market and symbol relationships\n   - Handle missing holiday sets\n\n## Notes\n\n- Changes persist across WealthLab sessions\n- Market and symbol information affects trading behavior\n- Holiday sets influence trading calendar calculations\n- Consider international market differences ",
    "metadata": {
      "id": "market-manager",
      "title": "market-manager",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/market-manager.md",
      "chunkIndex": 14,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "public static List<MarketDetails> Markets\n",
    "metadata": {
      "id": "market-manager",
      "title": "market-manager",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/market-manager.md",
      "chunkIndex": "code-0",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "# MarketManager Class\n\n**Namespace:** WealthLab.Core  \n**Type:** Static Class\n\nThe `MarketManager` is a static utility class that manages market and symbol information in WealthLab. It maintains collections of `MarketDetails` and `SymbolInfo` instances, providing information about various markets (US stocks, Forex, Cryptocurrencies) and their associated symbols. This class is primarily intended for developers of custom Historical Data Provider adapters.\n\n## Market Management\n\n### Markets\n"
    }
  },
  {
    "pageContent": "# MarketManager Class\n\n**Namespace:** WealthLab.Core  \n**Type:** Static Class\n\nThe `MarketManager` is a static utility class that manages market and symbol information in WealthLab. It maintains collections of `MarketDetails` and `SymbolInfo` instances, providing information about various markets (US stocks, Forex, Cryptocurrencies) and their associated symbols. This class is primarily intended for developers of custom Historical Data Provider adapters.\n\n## Market Management\n\n### Markets\n\n\n```csharp\npublic static List<MarketDetails> Markets\n\n```",
    "metadata": {
      "id": "market-manager",
      "title": "market-manager",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/market-manager.md",
      "chunkIndex": "code-context-0",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public static MarketDetails AddMarket(MarketDetails md)\n",
    "metadata": {
      "id": "market-manager",
      "title": "market-manager",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/market-manager.md",
      "chunkIndex": "code-1",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "rmation in WealthLab. It maintains collections of `MarketDetails` and `SymbolInfo` instances, providing information about various markets (US stocks, Forex, Cryptocurrencies) and their associated symbols. This class is primarily intended for developers of custom Historical Data Provider adapters.\n\n## Market Management\n\n### Markets\n```csharp\npublic static List<MarketDetails> Markets\n```\nReturns a list containing all installed market instances (`MarketDetails` class) in the system.\n\n### AddMarket\n"
    }
  },
  {
    "pageContent": "rmation in WealthLab. It maintains collections of `MarketDetails` and `SymbolInfo` instances, providing information about various markets (US stocks, Forex, Cryptocurrencies) and their associated symbols. This class is primarily intended for developers of custom Historical Data Provider adapters.\n\n## Market Management\n\n### Markets\n```csharp\npublic static List<MarketDetails> Markets\n```\nReturns a list containing all installed market instances (`MarketDetails` class) in the system.\n\n### AddMarket\n\n\n```csharp\npublic static MarketDetails AddMarket(MarketDetails md)\n\n```",
    "metadata": {
      "id": "market-manager",
      "title": "market-manager",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/market-manager.md",
      "chunkIndex": "code-context-1",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public static MarketDetails FindMarket(string name)\n",
    "metadata": {
      "id": "market-manager",
      "title": "market-manager",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/market-manager.md",
      "chunkIndex": "code-2",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ptocurrencies) and their associated symbols. This class is primarily intended for developers of custom Historical Data Provider adapters.\n\n## Market Management\n\n### Markets\n```csharp\npublic static List<MarketDetails> Markets\n```\nReturns a list containing all installed market instances (`MarketDetails` class) in the system.\n\n### AddMarket\n```csharp\npublic static MarketDetails AddMarket(MarketDetails md)\n```\nInstalls a custom market (instance of `MarketDetails`) into the platform.\n\n### FindMarket\n"
    }
  },
  {
    "pageContent": "ptocurrencies) and their associated symbols. This class is primarily intended for developers of custom Historical Data Provider adapters.\n\n## Market Management\n\n### Markets\n```csharp\npublic static List<MarketDetails> Markets\n```\nReturns a list containing all installed market instances (`MarketDetails` class) in the system.\n\n### AddMarket\n```csharp\npublic static MarketDetails AddMarket(MarketDetails md)\n```\nInstalls a custom market (instance of `MarketDetails`) into the platform.\n\n### FindMarket\n\n\n```csharp\npublic static MarketDetails FindMarket(string name)\n\n```",
    "metadata": {
      "id": "market-manager",
      "title": "market-manager",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/market-manager.md",
      "chunkIndex": "code-context-2",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public static List<SymbolInfo> Symbols\n",
    "metadata": {
      "id": "market-manager",
      "title": "market-manager",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/market-manager.md",
      "chunkIndex": "code-3",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "rketDetails> Markets\n```\nReturns a list containing all installed market instances (`MarketDetails` class) in the system.\n\n### AddMarket\n```csharp\npublic static MarketDetails AddMarket(MarketDetails md)\n```\nInstalls a custom market (instance of `MarketDetails`) into the platform.\n\n### FindMarket\n```csharp\npublic static MarketDetails FindMarket(string name)\n```\nSearches for a market by name and returns the matching `MarketDetails` instance, or null if not found.\n\n## Symbol Management\n\n### Symbols\n"
    }
  },
  {
    "pageContent": "rketDetails> Markets\n```\nReturns a list containing all installed market instances (`MarketDetails` class) in the system.\n\n### AddMarket\n```csharp\npublic static MarketDetails AddMarket(MarketDetails md)\n```\nInstalls a custom market (instance of `MarketDetails`) into the platform.\n\n### FindMarket\n```csharp\npublic static MarketDetails FindMarket(string name)\n```\nSearches for a market by name and returns the matching `MarketDetails` instance, or null if not found.\n\n## Symbol Management\n\n### Symbols\n\n\n```csharp\npublic static List<SymbolInfo> Symbols\n\n```",
    "metadata": {
      "id": "market-manager",
      "title": "market-manager",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/market-manager.md",
      "chunkIndex": "code-context-3",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public static SymbolInfo AddSymbol(SymbolInfo si)\n",
    "metadata": {
      "id": "market-manager",
      "title": "market-manager",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/market-manager.md",
      "chunkIndex": "code-4",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "rket(MarketDetails md)\n```\nInstalls a custom market (instance of `MarketDetails`) into the platform.\n\n### FindMarket\n```csharp\npublic static MarketDetails FindMarket(string name)\n```\nSearches for a market by name and returns the matching `MarketDetails` instance, or null if not found.\n\n## Symbol Management\n\n### Symbols\n```csharp\npublic static List<SymbolInfo> Symbols\n```\nReturns a list of `SymbolInfo` instances representing all symbol-specific information installed in the system.\n\n### AddSymbol\n"
    }
  },
  {
    "pageContent": "rket(MarketDetails md)\n```\nInstalls a custom market (instance of `MarketDetails`) into the platform.\n\n### FindMarket\n```csharp\npublic static MarketDetails FindMarket(string name)\n```\nSearches for a market by name and returns the matching `MarketDetails` instance, or null if not found.\n\n## Symbol Management\n\n### Symbols\n```csharp\npublic static List<SymbolInfo> Symbols\n```\nReturns a list of `SymbolInfo` instances representing all symbol-specific information installed in the system.\n\n### AddSymbol\n\n\n```csharp\npublic static SymbolInfo AddSymbol(SymbolInfo si)\n\n```",
    "metadata": {
      "id": "market-manager",
      "title": "market-manager",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/market-manager.md",
      "chunkIndex": "code-context-4",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public static SymbolInfo FindSymbol(string symbol)\n",
    "metadata": {
      "id": "market-manager",
      "title": "market-manager",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/market-manager.md",
      "chunkIndex": "code-5",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "\nSearches for a market by name and returns the matching `MarketDetails` instance, or null if not found.\n\n## Symbol Management\n\n### Symbols\n```csharp\npublic static List<SymbolInfo> Symbols\n```\nReturns a list of `SymbolInfo` instances representing all symbol-specific information installed in the system.\n\n### AddSymbol\n```csharp\npublic static SymbolInfo AddSymbol(SymbolInfo si)\n```\nInstalls symbol-specific information into the platform (e.g., market association, decimal positions).\n\n### FindSymbol\n"
    }
  },
  {
    "pageContent": "\nSearches for a market by name and returns the matching `MarketDetails` instance, or null if not found.\n\n## Symbol Management\n\n### Symbols\n```csharp\npublic static List<SymbolInfo> Symbols\n```\nReturns a list of `SymbolInfo` instances representing all symbol-specific information installed in the system.\n\n### AddSymbol\n```csharp\npublic static SymbolInfo AddSymbol(SymbolInfo si)\n```\nInstalls symbol-specific information into the platform (e.g., market association, decimal positions).\n\n### FindSymbol\n\n\n```csharp\npublic static SymbolInfo FindSymbol(string symbol)\n\n```",
    "metadata": {
      "id": "market-manager",
      "title": "market-manager",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/market-manager.md",
      "chunkIndex": "code-context-5",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public static List<string> HolidaySetNames\n",
    "metadata": {
      "id": "market-manager",
      "title": "market-manager",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/market-manager.md",
      "chunkIndex": "code-6",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "`SymbolInfo` instances representing all symbol-specific information installed in the system.\n\n### AddSymbol\n```csharp\npublic static SymbolInfo AddSymbol(SymbolInfo si)\n```\nInstalls symbol-specific information into the platform (e.g., market association, decimal positions).\n\n### FindSymbol\n```csharp\npublic static SymbolInfo FindSymbol(string symbol)\n```\nSearches for a specific symbol and returns the matching `SymbolInfo` instance, or null if not found.\n\n## Holiday Management\n\n### HolidaySetNames\n"
    }
  },
  {
    "pageContent": "`SymbolInfo` instances representing all symbol-specific information installed in the system.\n\n### AddSymbol\n```csharp\npublic static SymbolInfo AddSymbol(SymbolInfo si)\n```\nInstalls symbol-specific information into the platform (e.g., market association, decimal positions).\n\n### FindSymbol\n```csharp\npublic static SymbolInfo FindSymbol(string symbol)\n```\nSearches for a specific symbol and returns the matching `SymbolInfo` instance, or null if not found.\n\n## Holiday Management\n\n### HolidaySetNames\n\n\n```csharp\npublic static List<string> HolidaySetNames\n\n```",
    "metadata": {
      "id": "market-manager",
      "title": "market-manager",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/market-manager.md",
      "chunkIndex": "code-context-6",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public static Dictionary<string, List<DateTime>> HolidaySets\n",
    "metadata": {
      "id": "market-manager",
      "title": "market-manager",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/market-manager.md",
      "chunkIndex": "code-7",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "., market association, decimal positions).\n\n### FindSymbol\n```csharp\npublic static SymbolInfo FindSymbol(string symbol)\n```\nSearches for a specific symbol and returns the matching `SymbolInfo` instance, or null if not found.\n\n## Holiday Management\n\n### HolidaySetNames\n```csharp\npublic static List<string> HolidaySetNames\n```\nReturns a list of all Holiday Sets installed on the platform. A Holiday Set is a named collection of dates containing holiday dates for a particular market.\n\n### HolidaySets\n"
    }
  },
  {
    "pageContent": "., market association, decimal positions).\n\n### FindSymbol\n```csharp\npublic static SymbolInfo FindSymbol(string symbol)\n```\nSearches for a specific symbol and returns the matching `SymbolInfo` instance, or null if not found.\n\n## Holiday Management\n\n### HolidaySetNames\n```csharp\npublic static List<string> HolidaySetNames\n```\nReturns a list of all Holiday Sets installed on the platform. A Holiday Set is a named collection of dates containing holiday dates for a particular market.\n\n### HolidaySets\n\n\n```csharp\npublic static Dictionary<string, List<DateTime>> HolidaySets\n\n```",
    "metadata": {
      "id": "market-manager",
      "title": "market-manager",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/market-manager.md",
      "chunkIndex": "code-context-7",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public static List<DateTime> RegisterHolidaySet(string holidaySetName, string holidays)\n",
    "metadata": {
      "id": "market-manager",
      "title": "market-manager",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/market-manager.md",
      "chunkIndex": "code-8",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ot found.\n\n## Holiday Management\n\n### HolidaySetNames\n```csharp\npublic static List<string> HolidaySetNames\n```\nReturns a list of all Holiday Sets installed on the platform. A Holiday Set is a named collection of dates containing holiday dates for a particular market.\n\n### HolidaySets\n```csharp\npublic static Dictionary<string, List<DateTime>> HolidaySets\n```\nReturns a dictionary of Holiday Sets keyed by name, where each set is a list of dates representing market holidays.\n\n### RegisterHolidaySet\n"
    }
  },
  {
    "pageContent": "ot found.\n\n## Holiday Management\n\n### HolidaySetNames\n```csharp\npublic static List<string> HolidaySetNames\n```\nReturns a list of all Holiday Sets installed on the platform. A Holiday Set is a named collection of dates containing holiday dates for a particular market.\n\n### HolidaySets\n```csharp\npublic static Dictionary<string, List<DateTime>> HolidaySets\n```\nReturns a dictionary of Holiday Sets keyed by name, where each set is a list of dates representing market holidays.\n\n### RegisterHolidaySet\n\n\n```csharp\npublic static List<DateTime> RegisterHolidaySet(string holidaySetName, string holidays)\n\n```",
    "metadata": {
      "id": "market-manager",
      "title": "market-manager",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/market-manager.md",
      "chunkIndex": "code-context-8",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public static MarketDetails UsaStocks\n",
    "metadata": {
      "id": "market-manager",
      "title": "market-manager",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/market-manager.md",
      "chunkIndex": "code-9",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": " is a named collection of dates containing holiday dates for a particular market.\n\n### HolidaySets\n```csharp\npublic static Dictionary<string, List<DateTime>> HolidaySets\n```\nReturns a dictionary of Holiday Sets keyed by name, where each set is a list of dates representing market holidays.\n\n### RegisterHolidaySet\n```csharp\npublic static List<DateTime> RegisterHolidaySet(string holidaySetName, string holidays)\n```\nInstalls a new Holiday Set into the platform.\n\n## Predefined Markets\n\n### UsaStocks\n"
    }
  },
  {
    "pageContent": " is a named collection of dates containing holiday dates for a particular market.\n\n### HolidaySets\n```csharp\npublic static Dictionary<string, List<DateTime>> HolidaySets\n```\nReturns a dictionary of Holiday Sets keyed by name, where each set is a list of dates representing market holidays.\n\n### RegisterHolidaySet\n```csharp\npublic static List<DateTime> RegisterHolidaySet(string holidaySetName, string holidays)\n```\nInstalls a new Holiday Set into the platform.\n\n## Predefined Markets\n\n### UsaStocks\n\n\n```csharp\npublic static MarketDetails UsaStocks\n\n```",
    "metadata": {
      "id": "market-manager",
      "title": "market-manager",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/market-manager.md",
      "chunkIndex": "code-context-9",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public static MarketDetails Currencies\n",
    "metadata": {
      "id": "market-manager",
      "title": "market-manager",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/market-manager.md",
      "chunkIndex": "code-10",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "g, List<DateTime>> HolidaySets\n```\nReturns a dictionary of Holiday Sets keyed by name, where each set is a list of dates representing market holidays.\n\n### RegisterHolidaySet\n```csharp\npublic static List<DateTime> RegisterHolidaySet(string holidaySetName, string holidays)\n```\nInstalls a new Holiday Set into the platform.\n\n## Predefined Markets\n\n### UsaStocks\n```csharp\npublic static MarketDetails UsaStocks\n```\nReturns the `MarketDetails` instance representing the US stock market.\n\n### Currencies\n"
    }
  },
  {
    "pageContent": "g, List<DateTime>> HolidaySets\n```\nReturns a dictionary of Holiday Sets keyed by name, where each set is a list of dates representing market holidays.\n\n### RegisterHolidaySet\n```csharp\npublic static List<DateTime> RegisterHolidaySet(string holidaySetName, string holidays)\n```\nInstalls a new Holiday Set into the platform.\n\n## Predefined Markets\n\n### UsaStocks\n```csharp\npublic static MarketDetails UsaStocks\n```\nReturns the `MarketDetails` instance representing the US stock market.\n\n### Currencies\n\n\n```csharp\npublic static MarketDetails Currencies\n\n```",
    "metadata": {
      "id": "market-manager",
      "title": "market-manager",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/market-manager.md",
      "chunkIndex": "code-context-10",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public class CustomMarketProvider : ProviderBase\n{\n    public void InstallMarkets()\n    {\n        // Create and install a new market\n        var cryptoMarket = new MarketDetails\n        {\n            Name = \"Crypto Market\",\n            BaseTimeZone = \"UTC\",\n            BenchmarkSymbol = \"BTC.USD\"\n        };\n        \n        MarketManager.AddMarket(cryptoMarket);\n        \n        // Register market holidays\n        string holidays = \"2024-01-01,2024-12-25\"; // CSV format\n        MarketManager.RegisterHolidaySet(\"Crypto Holidays\", holidays);\n        \n        // Add symbols to the market\n        var btcSymbol = new SymbolInfo\n        {\n            Symbol = \"BTC.USD\",\n            Market = cryptoMarket,\n            DisplayDecimals = 2\n        };\n        \n        MarketManager.AddSymbol(btcSymbol);\n    }\n}\n",
    "metadata": {
      "id": "market-manager",
      "title": "market-manager",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/market-manager.md",
      "chunkIndex": "code-11",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "c static List<DateTime> RegisterHolidaySet(string holidaySetName, string holidays)\n```\nInstalls a new Holiday Set into the platform.\n\n## Predefined Markets\n\n### UsaStocks\n```csharp\npublic static MarketDetails UsaStocks\n```\nReturns the `MarketDetails` instance representing the US stock market.\n\n### Currencies\n```csharp\npublic static MarketDetails Currencies\n```\nReturns the `MarketDetails` instance representing the currencies Forex market.\n\n## Usage Examples\n\n### Creating a Custom Market Provider\n"
    }
  },
  {
    "pageContent": "c static List<DateTime> RegisterHolidaySet(string holidaySetName, string holidays)\n```\nInstalls a new Holiday Set into the platform.\n\n## Predefined Markets\n\n### UsaStocks\n```csharp\npublic static MarketDetails UsaStocks\n```\nReturns the `MarketDetails` instance representing the US stock market.\n\n### Currencies\n```csharp\npublic static MarketDetails Currencies\n```\nReturns the `MarketDetails` instance representing the currencies Forex market.\n\n## Usage Examples\n\n### Creating a Custom Market Provider\n\n\n```csharp\npublic class CustomMarketProvider : ProviderBase\n{\n    public void InstallMarkets()\n    {\n        // Create and install a new market\n        var cryptoMarket = new MarketDetails\n        {\n            Name = \"Crypto Market\",\n            BaseTimeZone = \"UTC\",\n            BenchmarkSymbol = \"BTC.USD\"\n        };\n        \n        MarketManager.AddMarket(cryptoMarket);\n        \n        // Register market holidays\n        string holidays = \"2024-01-01,2024-12-25\"; // CSV format\n        MarketManager.RegisterHolidaySet(\"Crypto Holidays\", holidays);\n        \n        // Add symbols to the market\n        var btcSymbol = new SymbolInfo\n        {\n            Symbol = \"BTC.USD\",\n            Market = cryptoMarket,\n            DisplayDecimals = 2\n        };\n        \n        MarketManager.AddSymbol(btcSymbol);\n    }\n}\n\n```",
    "metadata": {
      "id": "market-manager",
      "title": "market-manager",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/market-manager.md",
      "chunkIndex": "code-context-11",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public class MarketAnalyzer\n{\n    public void AnalyzeMarket(string symbol)\n    {\n        // Find symbol information\n        var symbolInfo = MarketManager.FindSymbol(symbol);\n        if (symbolInfo == null)\n        {\n            Console.WriteLine($\"Symbol {symbol} not found\");\n            return;\n        }\n        \n        // Get associated market\n        var market = symbolInfo.Market;\n        \n        // Check if market is open\n        if (market.IsOpenNow)\n        {\n            // Check for holidays\n            var holidays = MarketManager.HolidaySets[market.Name];\n            if (holidays.Contains(DateTime.Today))\n            {\n                Console.WriteLine(\"Market is closed for holiday\");\n                return;\n            }\n            \n            // Perform analysis\n            AnalyzeSymbol(symbolInfo);\n        }\n    }\n}\n",
    "metadata": {
      "id": "market-manager",
      "title": "market-manager",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/market-manager.md",
      "chunkIndex": "code-12",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ket(cryptoMarket);\n        \n        // Register market holidays\n        string holidays = \"2024-01-01,2024-12-25\"; // CSV format\n        MarketManager.RegisterHolidaySet(\"Crypto Holidays\", holidays);\n        \n        // Add symbols to the market\n        var btcSymbol = new SymbolInfo\n        {\n            Symbol = \"BTC.USD\",\n            Market = cryptoMarket,\n            DisplayDecimals = 2\n        };\n        \n        MarketManager.AddSymbol(btcSymbol);\n    }\n}\n```\n\n### Market and Symbol Lookup\n"
    }
  },
  {
    "pageContent": "ket(cryptoMarket);\n        \n        // Register market holidays\n        string holidays = \"2024-01-01,2024-12-25\"; // CSV format\n        MarketManager.RegisterHolidaySet(\"Crypto Holidays\", holidays);\n        \n        // Add symbols to the market\n        var btcSymbol = new SymbolInfo\n        {\n            Symbol = \"BTC.USD\",\n            Market = cryptoMarket,\n            DisplayDecimals = 2\n        };\n        \n        MarketManager.AddSymbol(btcSymbol);\n    }\n}\n```\n\n### Market and Symbol Lookup\n\n\n```csharp\npublic class MarketAnalyzer\n{\n    public void AnalyzeMarket(string symbol)\n    {\n        // Find symbol information\n        var symbolInfo = MarketManager.FindSymbol(symbol);\n        if (symbolInfo == null)\n        {\n            Console.WriteLine($\"Symbol {symbol} not found\");\n            return;\n        }\n        \n        // Get associated market\n        var market = symbolInfo.Market;\n        \n        // Check if market is open\n        if (market.IsOpenNow)\n        {\n            // Check for holidays\n            var holidays = MarketManager.HolidaySets[market.Name];\n            if (holidays.Contains(DateTime.Today))\n            {\n                Console.WriteLine(\"Market is closed for holiday\");\n                return;\n            }\n            \n            // Perform analysis\n            AnalyzeSymbol(symbolInfo);\n        }\n    }\n}\n\n```",
    "metadata": {
      "id": "market-manager",
      "title": "market-manager",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/market-manager.md",
      "chunkIndex": "code-context-12",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public class HolidayManager\n{\n    public void SetupHolidays()\n    {\n        // Create US market holidays\n        string usHolidays = string.Join(\",\", new[]\n        {\n            \"2024-01-01\", // New Year's Day\n            \"2024-01-15\", // Martin Luther King Jr. Day\n            \"2024-02-19\", // Presidents' Day\n            \"2024-03-29\", // Good Friday\n            \"2024-05-27\", // Memorial Day\n            \"2024-07-04\", // Independence Day\n            \"2024-09-02\", // Labor Day\n            \"2024-11-28\", // Thanksgiving Day\n            \"2024-12-25\"  // Christmas Day\n        });\n        \n        // Register holiday set\n        MarketManager.RegisterHolidaySet(\"US Market Holidays\", usHolidays);\n        \n        // Verify registration\n        var holidaySets = MarketManager.HolidaySets;\n        foreach (var set in holidaySets)\n        {\n            Console.WriteLine($\"Holiday Set: {set.Key}\");\n            foreach (var date in set.Value)\n            {\n                Console.WriteLine($\"  {date:d}\");\n            }\n        }\n    }\n}\n",
    "metadata": {
      "id": "market-manager",
      "title": "market-manager",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/market-manager.md",
      "chunkIndex": "code-13",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "fo.Market;\n        \n        // Check if market is open\n        if (market.IsOpenNow)\n        {\n            // Check for holidays\n            var holidays = MarketManager.HolidaySets[market.Name];\n            if (holidays.Contains(DateTime.Today))\n            {\n                Console.WriteLine(\"Market is closed for holiday\");\n                return;\n            }\n            \n            // Perform analysis\n            AnalyzeSymbol(symbolInfo);\n        }\n    }\n}\n```\n\n### Holiday Set Management\n"
    }
  },
  {
    "pageContent": "fo.Market;\n        \n        // Check if market is open\n        if (market.IsOpenNow)\n        {\n            // Check for holidays\n            var holidays = MarketManager.HolidaySets[market.Name];\n            if (holidays.Contains(DateTime.Today))\n            {\n                Console.WriteLine(\"Market is closed for holiday\");\n                return;\n            }\n            \n            // Perform analysis\n            AnalyzeSymbol(symbolInfo);\n        }\n    }\n}\n```\n\n### Holiday Set Management\n\n\n```csharp\npublic class HolidayManager\n{\n    public void SetupHolidays()\n    {\n        // Create US market holidays\n        string usHolidays = string.Join(\",\", new[]\n        {\n            \"2024-01-01\", // New Year's Day\n            \"2024-01-15\", // Martin Luther King Jr. Day\n            \"2024-02-19\", // Presidents' Day\n            \"2024-03-29\", // Good Friday\n            \"2024-05-27\", // Memorial Day\n            \"2024-07-04\", // Independence Day\n            \"2024-09-02\", // Labor Day\n            \"2024-11-28\", // Thanksgiving Day\n            \"2024-12-25\"  // Christmas Day\n        });\n        \n        // Register holiday set\n        MarketManager.RegisterHolidaySet(\"US Market Holidays\", usHolidays);\n        \n        // Verify registration\n        var holidaySets = MarketManager.HolidaySets;\n        foreach (var set in holidaySets)\n        {\n            Console.WriteLine($\"Holiday Set: {set.Key}\");\n            foreach (var date in set.Value)\n            {\n                Console.WriteLine($\"  {date:d}\");\n            }\n        }\n    }\n}\n\n```",
    "metadata": {
      "id": "market-manager",
      "title": "market-manager",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/market-manager.md",
      "chunkIndex": "code-context-13",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "# OptimizationResultList Class\n\n**Namespace:** WealthLab.Backtest  \n**Parent:** List<OptimizationResult>\n\nThe `OptimizationResultList` class extends `List<OptimizationResult>` to provide additional helper methods for analyzing and finding optimal results from a collection of optimization runs.\n\n## Methods\n\n### FindBest\n",
    "metadata": {
      "id": "optimization-result-list",
      "title": "optimization-result-list",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/optimization-result-list.md",
      "chunkIndex": 0,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the `OptimizationResult` instance with the highest or lowest metric value.\n\n**Parameters:**\n- `metric`: The name of the metric to evaluate\n- `highestValue`: If true, finds maximum value; if false, finds minimum value\n\n**Returns:** The `OptimizationResult` with the best metric value according to the criteria\n\n### FindMetric\n",
    "metadata": {
      "id": "optimization-result-list",
      "title": "optimization-result-list",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/optimization-result-list.md",
      "chunkIndex": 1,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nRetrieves a specific metric value based on parameter values.\n\n**Parameters:**\n- `metric`: The name of the metric to find\n- `paramValues`: List of parameter values to match\n\n**Returns:** The value of the specified metric for the matching parameter combination\n\n## Usage Examples\n\n### Finding Best Results\n",
    "metadata": {
      "id": "optimization-result-list",
      "title": "optimization-result-list",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/optimization-result-list.md",
      "chunkIndex": 2,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n### Metric Analysis\n",
    "metadata": {
      "id": "optimization-result-list",
      "title": "optimization-result-list",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/optimization-result-list.md",
      "chunkIndex": 3,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n### Parameter Sensitivity Analysis\n",
    "metadata": {
      "id": "optimization-result-list",
      "title": "optimization-result-list",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/optimization-result-list.md",
      "chunkIndex": 4,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n## Best Practices\n\n1. **Metric Selection**\n   - Choose appropriate metrics for optimization goals\n   - Consider both risk and return metrics\n   - Use multiple metrics for robust analysis\n\n2. **Parameter Analysis**\n   - Analyze parameter sensitivity\n   - Look for stable parameter regions\n   - Consider parameter interactions\n\n3. **Result Validation**\n   - Verify parameter combinations exist\n   - Handle missing or invalid metrics\n   - Consider statistical significance\n\n4. **Performance Optimization**\n   - Cache frequently accessed results\n   - Use efficient search patterns\n   - Handle large result sets appropriately\n\n## Notes\n\n- Results are ordered by run number\n- Parameter values must match exactly for FindMetric\n- Consider multiple metrics for robust optimization\n- Results may contain failed optimization runs\n- Parameter order matters for matching ",
    "metadata": {
      "id": "optimization-result-list",
      "title": "optimization-result-list",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/optimization-result-list.md",
      "chunkIndex": 5,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "public OptimizationResult FindBest(string metric, bool highestValue)\n",
    "metadata": {
      "id": "optimization-result-list",
      "title": "optimization-result-list",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/optimization-result-list.md",
      "chunkIndex": "code-0",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "# OptimizationResultList Class\n\n**Namespace:** WealthLab.Backtest  \n**Parent:** List<OptimizationResult>\n\nThe `OptimizationResultList` class extends `List<OptimizationResult>` to provide additional helper methods for analyzing and finding optimal results from a collection of optimization runs.\n\n## Methods\n\n### FindBest\n"
    }
  },
  {
    "pageContent": "# OptimizationResultList Class\n\n**Namespace:** WealthLab.Backtest  \n**Parent:** List<OptimizationResult>\n\nThe `OptimizationResultList` class extends `List<OptimizationResult>` to provide additional helper methods for analyzing and finding optimal results from a collection of optimization runs.\n\n## Methods\n\n### FindBest\n\n\n```csharp\npublic OptimizationResult FindBest(string metric, bool highestValue)\n\n```",
    "metadata": {
      "id": "optimization-result-list",
      "title": "optimization-result-list",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/optimization-result-list.md",
      "chunkIndex": "code-context-0",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public double FindMetric(string metric, List<double> paramValues)\n",
    "metadata": {
      "id": "optimization-result-list",
      "title": "optimization-result-list",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/optimization-result-list.md",
      "chunkIndex": "code-1",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "g optimal results from a collection of optimization runs.\n\n## Methods\n\n### FindBest\n```csharp\npublic OptimizationResult FindBest(string metric, bool highestValue)\n```\nReturns the `OptimizationResult` instance with the highest or lowest metric value.\n\n**Parameters:**\n- `metric`: The name of the metric to evaluate\n- `highestValue`: If true, finds maximum value; if false, finds minimum value\n\n**Returns:** The `OptimizationResult` with the best metric value according to the criteria\n\n### FindMetric\n"
    }
  },
  {
    "pageContent": "g optimal results from a collection of optimization runs.\n\n## Methods\n\n### FindBest\n```csharp\npublic OptimizationResult FindBest(string metric, bool highestValue)\n```\nReturns the `OptimizationResult` instance with the highest or lowest metric value.\n\n**Parameters:**\n- `metric`: The name of the metric to evaluate\n- `highestValue`: If true, finds maximum value; if false, finds minimum value\n\n**Returns:** The `OptimizationResult` with the best metric value according to the criteria\n\n### FindMetric\n\n\n```csharp\npublic double FindMetric(string metric, List<double> paramValues)\n\n```",
    "metadata": {
      "id": "optimization-result-list",
      "title": "optimization-result-list",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/optimization-result-list.md",
      "chunkIndex": "code-context-1",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public class OptimizationAnalyzer\n{\n    public void AnalyzeBestResults(OptimizationResultList results)\n    {\n        // Find best profit factor\n        var bestPF = results.FindBest(\"ProfitFactor\", true);\n        Console.WriteLine($\"Best Profit Factor: {bestPF.PerformanceMetrics[\"ProfitFactor\"]}\");\n        \n        // Find lowest drawdown\n        var lowestDD = results.FindBest(\"MaxDrawdown\", false);\n        Console.WriteLine($\"Lowest Drawdown: {lowestDD.PerformanceMetrics[\"MaxDrawdown\"]}\");\n        \n        // Display parameter values for best results\n        Console.WriteLine(\"\\nBest Profit Factor Parameters:\");\n        foreach (var param in bestPF.ParameterValues)\n        {\n            Console.WriteLine($\"  {param}\");\n        }\n        \n        Console.WriteLine(\"\\nLowest Drawdown Parameters:\");\n        foreach (var param in lowestDD.ParameterValues)\n        {\n            Console.WriteLine($\"  {param}\");\n        }\n    }\n}\n",
    "metadata": {
      "id": "optimization-result-list",
      "title": "optimization-result-list",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/optimization-result-list.md",
      "chunkIndex": "code-2",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "m value\n\n**Returns:** The `OptimizationResult` with the best metric value according to the criteria\n\n### FindMetric\n```csharp\npublic double FindMetric(string metric, List<double> paramValues)\n```\nRetrieves a specific metric value based on parameter values.\n\n**Parameters:**\n- `metric`: The name of the metric to find\n- `paramValues`: List of parameter values to match\n\n**Returns:** The value of the specified metric for the matching parameter combination\n\n## Usage Examples\n\n### Finding Best Results\n"
    }
  },
  {
    "pageContent": "m value\n\n**Returns:** The `OptimizationResult` with the best metric value according to the criteria\n\n### FindMetric\n```csharp\npublic double FindMetric(string metric, List<double> paramValues)\n```\nRetrieves a specific metric value based on parameter values.\n\n**Parameters:**\n- `metric`: The name of the metric to find\n- `paramValues`: List of parameter values to match\n\n**Returns:** The value of the specified metric for the matching parameter combination\n\n## Usage Examples\n\n### Finding Best Results\n\n\n```csharp\npublic class OptimizationAnalyzer\n{\n    public void AnalyzeBestResults(OptimizationResultList results)\n    {\n        // Find best profit factor\n        var bestPF = results.FindBest(\"ProfitFactor\", true);\n        Console.WriteLine($\"Best Profit Factor: {bestPF.PerformanceMetrics[\"ProfitFactor\"]}\");\n        \n        // Find lowest drawdown\n        var lowestDD = results.FindBest(\"MaxDrawdown\", false);\n        Console.WriteLine($\"Lowest Drawdown: {lowestDD.PerformanceMetrics[\"MaxDrawdown\"]}\");\n        \n        // Display parameter values for best results\n        Console.WriteLine(\"\\nBest Profit Factor Parameters:\");\n        foreach (var param in bestPF.ParameterValues)\n        {\n            Console.WriteLine($\"  {param}\");\n        }\n        \n        Console.WriteLine(\"\\nLowest Drawdown Parameters:\");\n        foreach (var param in lowestDD.ParameterValues)\n        {\n            Console.WriteLine($\"  {param}\");\n        }\n    }\n}\n\n```",
    "metadata": {
      "id": "optimization-result-list",
      "title": "optimization-result-list",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/optimization-result-list.md",
      "chunkIndex": "code-context-2",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public class MetricAnalyzer\n{\n    public void AnalyzeMetricDistribution(OptimizationResultList results)\n    {\n        var metrics = new[] { \"NetProfit\", \"ProfitFactor\", \"MaxDrawdown\" };\n        \n        foreach (var metric in metrics)\n        {\n            // Find best and worst cases\n            var best = results.FindBest(metric, true);\n            var worst = results.FindBest(metric, false);\n            \n            Console.WriteLine($\"\\nMetric: {metric}\");\n            Console.WriteLine($\"Best Value: {best.PerformanceMetrics[metric]}\");\n            Console.WriteLine($\"Worst Value: {worst.PerformanceMetrics[metric]}\");\n            \n            // Find specific parameter combination\n            var specificParams = new List<double> { 10, 20, 30 }; // Example parameters\n            var specificValue = results.FindMetric(metric, specificParams);\n            Console.WriteLine($\"Value for specific parameters: {specificValue}\");\n        }\n    }\n}\n",
    "metadata": {
      "id": "optimization-result-list",
      "title": "optimization-result-list",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/optimization-result-list.md",
      "chunkIndex": "code-3",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "rmanceMetrics[\"MaxDrawdown\"]}\");\n        \n        // Display parameter values for best results\n        Console.WriteLine(\"\\nBest Profit Factor Parameters:\");\n        foreach (var param in bestPF.ParameterValues)\n        {\n            Console.WriteLine($\"  {param}\");\n        }\n        \n        Console.WriteLine(\"\\nLowest Drawdown Parameters:\");\n        foreach (var param in lowestDD.ParameterValues)\n        {\n            Console.WriteLine($\"  {param}\");\n        }\n    }\n}\n```\n\n### Metric Analysis\n"
    }
  },
  {
    "pageContent": "rmanceMetrics[\"MaxDrawdown\"]}\");\n        \n        // Display parameter values for best results\n        Console.WriteLine(\"\\nBest Profit Factor Parameters:\");\n        foreach (var param in bestPF.ParameterValues)\n        {\n            Console.WriteLine($\"  {param}\");\n        }\n        \n        Console.WriteLine(\"\\nLowest Drawdown Parameters:\");\n        foreach (var param in lowestDD.ParameterValues)\n        {\n            Console.WriteLine($\"  {param}\");\n        }\n    }\n}\n```\n\n### Metric Analysis\n\n\n```csharp\npublic class MetricAnalyzer\n{\n    public void AnalyzeMetricDistribution(OptimizationResultList results)\n    {\n        var metrics = new[] { \"NetProfit\", \"ProfitFactor\", \"MaxDrawdown\" };\n        \n        foreach (var metric in metrics)\n        {\n            // Find best and worst cases\n            var best = results.FindBest(metric, true);\n            var worst = results.FindBest(metric, false);\n            \n            Console.WriteLine($\"\\nMetric: {metric}\");\n            Console.WriteLine($\"Best Value: {best.PerformanceMetrics[metric]}\");\n            Console.WriteLine($\"Worst Value: {worst.PerformanceMetrics[metric]}\");\n            \n            // Find specific parameter combination\n            var specificParams = new List<double> { 10, 20, 30 }; // Example parameters\n            var specificValue = results.FindMetric(metric, specificParams);\n            Console.WriteLine($\"Value for specific parameters: {specificValue}\");\n        }\n    }\n}\n\n```",
    "metadata": {
      "id": "optimization-result-list",
      "title": "optimization-result-list",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/optimization-result-list.md",
      "chunkIndex": "code-context-3",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public class SensitivityAnalyzer\n{\n    public void AnalyzeParameterSensitivity(OptimizationResultList results, \n        string targetMetric)\n    {\n        // Get unique parameter combinations\n        var paramSets = results.Select(r => r.ParameterValues).Distinct();\n        \n        foreach (var paramSet in paramSets)\n        {\n            // Find metric value for this parameter set\n            double metricValue = results.FindMetric(targetMetric, paramSet);\n            \n            Console.WriteLine(\"\\nParameter Set:\");\n            for (int i = 0; i < paramSet.Count; i++)\n            {\n                Console.WriteLine($\"  P{i + 1}: {paramSet[i]}\");\n            }\n            Console.WriteLine($\"  {targetMetric}: {metricValue}\");\n        }\n    }\n    \n    public void FindOptimalParameters(OptimizationResultList results)\n    {\n        // Define metrics to analyze\n        var metricsToAnalyze = new Dictionary<string, bool>\n        {\n            { \"NetProfit\", true },      // Higher is better\n            { \"ProfitFactor\", true },   // Higher is better\n            { \"MaxDrawdown\", false },   // Lower is better\n            { \"TradeCount\", true }      // Higher is better\n        };\n        \n        foreach (var kvp in metricsToAnalyze)\n        {\n            var bestResult = results.FindBest(kvp.Key, kvp.Value);\n            \n            Console.WriteLine($\"\\nBest {kvp.Key} Parameters:\");\n            for (int i = 0; i < bestResult.ParameterValues.Count; i++)\n            {\n                Console.WriteLine($\"  P{i + 1}: {bestResult.ParameterValues[i]}\");\n            }\n            Console.WriteLine($\"  Value: {bestResult.PerformanceMetrics[kvp.Key]}\");\n        }\n    }\n}\n",
    "metadata": {
      "id": "optimization-result-list",
      "title": "optimization-result-list",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/optimization-result-list.md",
      "chunkIndex": "code-4",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "Best Value: {best.PerformanceMetrics[metric]}\");\n            Console.WriteLine($\"Worst Value: {worst.PerformanceMetrics[metric]}\");\n            \n            // Find specific parameter combination\n            var specificParams = new List<double> { 10, 20, 30 }; // Example parameters\n            var specificValue = results.FindMetric(metric, specificParams);\n            Console.WriteLine($\"Value for specific parameters: {specificValue}\");\n        }\n    }\n}\n```\n\n### Parameter Sensitivity Analysis\n"
    }
  },
  {
    "pageContent": "Best Value: {best.PerformanceMetrics[metric]}\");\n            Console.WriteLine($\"Worst Value: {worst.PerformanceMetrics[metric]}\");\n            \n            // Find specific parameter combination\n            var specificParams = new List<double> { 10, 20, 30 }; // Example parameters\n            var specificValue = results.FindMetric(metric, specificParams);\n            Console.WriteLine($\"Value for specific parameters: {specificValue}\");\n        }\n    }\n}\n```\n\n### Parameter Sensitivity Analysis\n\n\n```csharp\npublic class SensitivityAnalyzer\n{\n    public void AnalyzeParameterSensitivity(OptimizationResultList results, \n        string targetMetric)\n    {\n        // Get unique parameter combinations\n        var paramSets = results.Select(r => r.ParameterValues).Distinct();\n        \n        foreach (var paramSet in paramSets)\n        {\n            // Find metric value for this parameter set\n            double metricValue = results.FindMetric(targetMetric, paramSet);\n            \n            Console.WriteLine(\"\\nParameter Set:\");\n            for (int i = 0; i < paramSet.Count; i++)\n            {\n                Console.WriteLine($\"  P{i + 1}: {paramSet[i]}\");\n            }\n            Console.WriteLine($\"  {targetMetric}: {metricValue}\");\n        }\n    }\n    \n    public void FindOptimalParameters(OptimizationResultList results)\n    {\n        // Define metrics to analyze\n        var metricsToAnalyze = new Dictionary<string, bool>\n        {\n            { \"NetProfit\", true },      // Higher is better\n            { \"ProfitFactor\", true },   // Higher is better\n            { \"MaxDrawdown\", false },   // Lower is better\n            { \"TradeCount\", true }      // Higher is better\n        };\n        \n        foreach (var kvp in metricsToAnalyze)\n        {\n            var bestResult = results.FindBest(kvp.Key, kvp.Value);\n            \n            Console.WriteLine($\"\\nBest {kvp.Key} Parameters:\");\n            for (int i = 0; i < bestResult.ParameterValues.Count; i++)\n            {\n                Console.WriteLine($\"  P{i + 1}: {bestResult.ParameterValues[i]}\");\n            }\n            Console.WriteLine($\"  Value: {bestResult.PerformanceMetrics[kvp.Key]}\");\n        }\n    }\n}\n\n```",
    "metadata": {
      "id": "optimization-result-list",
      "title": "optimization-result-list",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/optimization-result-list.md",
      "chunkIndex": "code-context-4",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "# OptimizationResult Class\n\n**Namespace:** WealthLab.Backtest  \n**Parent:** Object  \n**Descendants:** WFOResult\n\nThe `OptimizationResult` class contains performance metrics and details for a specific optimization run. It provides access to various performance metrics, parameter values, and run information that can be used to analyze and compare different optimization results.\n\n## Core Properties\n\n### AnnualizedReturn\n",
    "metadata": {
      "id": "optimization-result",
      "title": "optimization-result",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/optimization-result.md",
      "chunkIndex": 0,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the annualized return (APR) of the optimization run. This metric is particularly important for calculating Walk-Forward Optimization (WFO) Efficiency.\n\n### ErrorMessage\n",
    "metadata": {
      "id": "optimization-result",
      "title": "optimization-result",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/optimization-result.md",
      "chunkIndex": 1,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nContains the message field from any Exception thrown during the optimization run. Returns null if no Exception occurred.\n\n### RunNumber\n",
    "metadata": {
      "id": "optimization-result",
      "title": "optimization-result",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/optimization-result.md",
      "chunkIndex": 2,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the chronological run number of these results, indicating the sequence in which this optimization was performed.\n\n## Metrics and Parameters\n\n### MetricNames\n",
    "metadata": {
      "id": "optimization-result",
      "title": "optimization-result",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/optimization-result.md",
      "chunkIndex": 3,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the list of performance metric names, obtained from the `OptimizableMetricNames` property of the ScoreCard used during optimization.\n\n### ParameterValues\n",
    "metadata": {
      "id": "optimization-result",
      "title": "optimization-result",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/optimization-result.md",
      "chunkIndex": 4,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the values of the parameters used in this optimization run.\n\n### PerformanceMetrics\n",
    "metadata": {
      "id": "optimization-result",
      "title": "optimization-result",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/optimization-result.md",
      "chunkIndex": 5,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nA dictionary containing entries for each performance metric from the optimization run. The metrics are determined by the ScoreCard used during optimization, with values corresponding to the metrics listed in `MetricNames`.\n\n## Usage Examples\n\n### Basic Optimization Analysis\n",
    "metadata": {
      "id": "optimization-result",
      "title": "optimization-result",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/optimization-result.md",
      "chunkIndex": 6,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n### Comparing Multiple Results\n",
    "metadata": {
      "id": "optimization-result",
      "title": "optimization-result",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/optimization-result.md",
      "chunkIndex": 7,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n### Metric Analysis\n",
    "metadata": {
      "id": "optimization-result",
      "title": "optimization-result",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/optimization-result.md",
      "chunkIndex": 8,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n## Best Practices\n\n1. **Error Handling**\n   - Always check `ErrorMessage` before processing results\n   - Handle null or empty results appropriately\n   - Consider impact of errors on overall optimization\n\n2. **Performance Analysis**\n   - Compare multiple metrics for robust evaluation\n   - Consider risk-adjusted returns\n   - Look for consistency across runs\n\n3. **Parameter Management**\n   - Track parameter combinations with results\n   - Analyze parameter sensitivity\n   - Consider parameter interactions\n\n4. **Metric Selection**\n   - Choose appropriate metrics for strategy goals\n   - Consider multiple timeframes\n   - Balance different performance aspects\n\n## Notes\n\n- Results are generated during optimization runs\n- Metrics depend on ScoreCard configuration\n- Parameter values correspond to strategy parameters\n- Run numbers are sequential and unique\n- Consider using multiple metrics for evaluation\n- Results can be used for Walk-Forward Analysis ",
    "metadata": {
      "id": "optimization-result",
      "title": "optimization-result",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/optimization-result.md",
      "chunkIndex": 9,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "public double AnnualizedReturn\n",
    "metadata": {
      "id": "optimization-result",
      "title": "optimization-result",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/optimization-result.md",
      "chunkIndex": "code-0",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "# OptimizationResult Class\n\n**Namespace:** WealthLab.Backtest  \n**Parent:** Object  \n**Descendants:** WFOResult\n\nThe `OptimizationResult` class contains performance metrics and details for a specific optimization run. It provides access to various performance metrics, parameter values, and run information that can be used to analyze and compare different optimization results.\n\n## Core Properties\n\n### AnnualizedReturn\n"
    }
  },
  {
    "pageContent": "# OptimizationResult Class\n\n**Namespace:** WealthLab.Backtest  \n**Parent:** Object  \n**Descendants:** WFOResult\n\nThe `OptimizationResult` class contains performance metrics and details for a specific optimization run. It provides access to various performance metrics, parameter values, and run information that can be used to analyze and compare different optimization results.\n\n## Core Properties\n\n### AnnualizedReturn\n\n\n```csharp\npublic double AnnualizedReturn\n\n```",
    "metadata": {
      "id": "optimization-result",
      "title": "optimization-result",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/optimization-result.md",
      "chunkIndex": "code-context-0",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public string ErrorMessage\n",
    "metadata": {
      "id": "optimization-result",
      "title": "optimization-result",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/optimization-result.md",
      "chunkIndex": "code-1",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": " contains performance metrics and details for a specific optimization run. It provides access to various performance metrics, parameter values, and run information that can be used to analyze and compare different optimization results.\n\n## Core Properties\n\n### AnnualizedReturn\n```csharp\npublic double AnnualizedReturn\n```\nReturns the annualized return (APR) of the optimization run. This metric is particularly important for calculating Walk-Forward Optimization (WFO) Efficiency.\n\n### ErrorMessage\n"
    }
  },
  {
    "pageContent": " contains performance metrics and details for a specific optimization run. It provides access to various performance metrics, parameter values, and run information that can be used to analyze and compare different optimization results.\n\n## Core Properties\n\n### AnnualizedReturn\n```csharp\npublic double AnnualizedReturn\n```\nReturns the annualized return (APR) of the optimization run. This metric is particularly important for calculating Walk-Forward Optimization (WFO) Efficiency.\n\n### ErrorMessage\n\n\n```csharp\npublic string ErrorMessage\n\n```",
    "metadata": {
      "id": "optimization-result",
      "title": "optimization-result",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/optimization-result.md",
      "chunkIndex": "code-context-1",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public int RunNumber\n",
    "metadata": {
      "id": "optimization-result",
      "title": "optimization-result",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/optimization-result.md",
      "chunkIndex": "code-2",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "sed to analyze and compare different optimization results.\n\n## Core Properties\n\n### AnnualizedReturn\n```csharp\npublic double AnnualizedReturn\n```\nReturns the annualized return (APR) of the optimization run. This metric is particularly important for calculating Walk-Forward Optimization (WFO) Efficiency.\n\n### ErrorMessage\n```csharp\npublic string ErrorMessage\n```\nContains the message field from any Exception thrown during the optimization run. Returns null if no Exception occurred.\n\n### RunNumber\n"
    }
  },
  {
    "pageContent": "sed to analyze and compare different optimization results.\n\n## Core Properties\n\n### AnnualizedReturn\n```csharp\npublic double AnnualizedReturn\n```\nReturns the annualized return (APR) of the optimization run. This metric is particularly important for calculating Walk-Forward Optimization (WFO) Efficiency.\n\n### ErrorMessage\n```csharp\npublic string ErrorMessage\n```\nContains the message field from any Exception thrown during the optimization run. Returns null if no Exception occurred.\n\n### RunNumber\n\n\n```csharp\npublic int RunNumber\n\n```",
    "metadata": {
      "id": "optimization-result",
      "title": "optimization-result",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/optimization-result.md",
      "chunkIndex": "code-context-2",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public List<string> MetricNames\n",
    "metadata": {
      "id": "optimization-result",
      "title": "optimization-result",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/optimization-result.md",
      "chunkIndex": "code-3",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "n run. This metric is particularly important for calculating Walk-Forward Optimization (WFO) Efficiency.\n\n### ErrorMessage\n```csharp\npublic string ErrorMessage\n```\nContains the message field from any Exception thrown during the optimization run. Returns null if no Exception occurred.\n\n### RunNumber\n```csharp\npublic int RunNumber\n```\nReturns the chronological run number of these results, indicating the sequence in which this optimization was performed.\n\n## Metrics and Parameters\n\n### MetricNames\n"
    }
  },
  {
    "pageContent": "n run. This metric is particularly important for calculating Walk-Forward Optimization (WFO) Efficiency.\n\n### ErrorMessage\n```csharp\npublic string ErrorMessage\n```\nContains the message field from any Exception thrown during the optimization run. Returns null if no Exception occurred.\n\n### RunNumber\n```csharp\npublic int RunNumber\n```\nReturns the chronological run number of these results, indicating the sequence in which this optimization was performed.\n\n## Metrics and Parameters\n\n### MetricNames\n\n\n```csharp\npublic List<string> MetricNames\n\n```",
    "metadata": {
      "id": "optimization-result",
      "title": "optimization-result",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/optimization-result.md",
      "chunkIndex": "code-context-3",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public List<double> ParameterValues\n",
    "metadata": {
      "id": "optimization-result",
      "title": "optimization-result",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/optimization-result.md",
      "chunkIndex": "code-4",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "n thrown during the optimization run. Returns null if no Exception occurred.\n\n### RunNumber\n```csharp\npublic int RunNumber\n```\nReturns the chronological run number of these results, indicating the sequence in which this optimization was performed.\n\n## Metrics and Parameters\n\n### MetricNames\n```csharp\npublic List<string> MetricNames\n```\nReturns the list of performance metric names, obtained from the `OptimizableMetricNames` property of the ScoreCard used during optimization.\n\n### ParameterValues\n"
    }
  },
  {
    "pageContent": "n thrown during the optimization run. Returns null if no Exception occurred.\n\n### RunNumber\n```csharp\npublic int RunNumber\n```\nReturns the chronological run number of these results, indicating the sequence in which this optimization was performed.\n\n## Metrics and Parameters\n\n### MetricNames\n```csharp\npublic List<string> MetricNames\n```\nReturns the list of performance metric names, obtained from the `OptimizableMetricNames` property of the ScoreCard used during optimization.\n\n### ParameterValues\n\n\n```csharp\npublic List<double> ParameterValues\n\n```",
    "metadata": {
      "id": "optimization-result",
      "title": "optimization-result",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/optimization-result.md",
      "chunkIndex": "code-context-4",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public Dictionary<string, double> PerformanceMetrics\n",
    "metadata": {
      "id": "optimization-result",
      "title": "optimization-result",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/optimization-result.md",
      "chunkIndex": "code-5",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "onological run number of these results, indicating the sequence in which this optimization was performed.\n\n## Metrics and Parameters\n\n### MetricNames\n```csharp\npublic List<string> MetricNames\n```\nReturns the list of performance metric names, obtained from the `OptimizableMetricNames` property of the ScoreCard used during optimization.\n\n### ParameterValues\n```csharp\npublic List<double> ParameterValues\n```\nReturns the values of the parameters used in this optimization run.\n\n### PerformanceMetrics\n"
    }
  },
  {
    "pageContent": "onological run number of these results, indicating the sequence in which this optimization was performed.\n\n## Metrics and Parameters\n\n### MetricNames\n```csharp\npublic List<string> MetricNames\n```\nReturns the list of performance metric names, obtained from the `OptimizableMetricNames` property of the ScoreCard used during optimization.\n\n### ParameterValues\n```csharp\npublic List<double> ParameterValues\n```\nReturns the values of the parameters used in this optimization run.\n\n### PerformanceMetrics\n\n\n```csharp\npublic Dictionary<string, double> PerformanceMetrics\n\n```",
    "metadata": {
      "id": "optimization-result",
      "title": "optimization-result",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/optimization-result.md",
      "chunkIndex": "code-context-5",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public class OptimizationAnalyzer\n{\n    public void AnalyzeResult(OptimizationResult result)\n    {\n        // Check for errors\n        if (!string.IsNullOrEmpty(result.ErrorMessage))\n        {\n            Console.WriteLine($\"Error in run #{result.RunNumber}: {result.ErrorMessage}\");\n            return;\n        }\n        \n        // Analyze performance\n        Console.WriteLine($\"Run #{result.RunNumber}\");\n        Console.WriteLine($\"Annual Return: {result.AnnualizedReturn:P2}\");\n        \n        // Display parameters\n        Console.WriteLine(\"\\nParameters:\");\n        for (int i = 0; i < result.ParameterValues.Count; i++)\n        {\n            Console.WriteLine($\"  Param {i + 1}: {result.ParameterValues[i]}\");\n        }\n        \n        // Display metrics\n        Console.WriteLine(\"\\nPerformance Metrics:\");\n        foreach (var metric in result.MetricNames)\n        {\n            double value = result.PerformanceMetrics[metric];\n            Console.WriteLine($\"  {metric}: {value}\");\n        }\n    }\n}\n",
    "metadata": {
      "id": "optimization-result",
      "title": "optimization-result",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/optimization-result.md",
      "chunkIndex": "code-6",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ParameterValues\n```csharp\npublic List<double> ParameterValues\n```\nReturns the values of the parameters used in this optimization run.\n\n### PerformanceMetrics\n```csharp\npublic Dictionary<string, double> PerformanceMetrics\n```\nA dictionary containing entries for each performance metric from the optimization run. The metrics are determined by the ScoreCard used during optimization, with values corresponding to the metrics listed in `MetricNames`.\n\n## Usage Examples\n\n### Basic Optimization Analysis\n"
    }
  },
  {
    "pageContent": "ParameterValues\n```csharp\npublic List<double> ParameterValues\n```\nReturns the values of the parameters used in this optimization run.\n\n### PerformanceMetrics\n```csharp\npublic Dictionary<string, double> PerformanceMetrics\n```\nA dictionary containing entries for each performance metric from the optimization run. The metrics are determined by the ScoreCard used during optimization, with values corresponding to the metrics listed in `MetricNames`.\n\n## Usage Examples\n\n### Basic Optimization Analysis\n\n\n```csharp\npublic class OptimizationAnalyzer\n{\n    public void AnalyzeResult(OptimizationResult result)\n    {\n        // Check for errors\n        if (!string.IsNullOrEmpty(result.ErrorMessage))\n        {\n            Console.WriteLine($\"Error in run #{result.RunNumber}: {result.ErrorMessage}\");\n            return;\n        }\n        \n        // Analyze performance\n        Console.WriteLine($\"Run #{result.RunNumber}\");\n        Console.WriteLine($\"Annual Return: {result.AnnualizedReturn:P2}\");\n        \n        // Display parameters\n        Console.WriteLine(\"\\nParameters:\");\n        for (int i = 0; i < result.ParameterValues.Count; i++)\n        {\n            Console.WriteLine($\"  Param {i + 1}: {result.ParameterValues[i]}\");\n        }\n        \n        // Display metrics\n        Console.WriteLine(\"\\nPerformance Metrics:\");\n        foreach (var metric in result.MetricNames)\n        {\n            double value = result.PerformanceMetrics[metric];\n            Console.WriteLine($\"  {metric}: {value}\");\n        }\n    }\n}\n\n```",
    "metadata": {
      "id": "optimization-result",
      "title": "optimization-result",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/optimization-result.md",
      "chunkIndex": "code-context-6",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public class OptimizationComparator\n{\n    public OptimizationResult FindBestResult(List<OptimizationResult> results)\n    {\n        // Filter out results with errors\n        var validResults = results.Where(r => \n            string.IsNullOrEmpty(r.ErrorMessage)).ToList();\n            \n        // Sort by annualized return\n        return validResults.OrderByDescending(r => r.AnnualizedReturn)\n                         .FirstOrDefault();\n    }\n    \n    public void CompareResults(List<OptimizationResult> results)\n    {\n        foreach (var result in results)\n        {\n            // Skip failed runs\n            if (!string.IsNullOrEmpty(result.ErrorMessage))\n                continue;\n                \n            Console.WriteLine($\"\\nRun #{result.RunNumber}\");\n            \n            // Compare key metrics\n            foreach (var metric in result.MetricNames)\n            {\n                double value = result.PerformanceMetrics[metric];\n                Console.WriteLine($\"  {metric}: {value}\");\n            }\n            \n            // Show parameter combinations\n            Console.WriteLine(\"  Parameters:\");\n            for (int i = 0; i < result.ParameterValues.Count; i++)\n            {\n                Console.WriteLine($\"    P{i + 1}: {result.ParameterValues[i]}\");\n            }\n        }\n    }\n}\n",
    "metadata": {
      "id": "optimization-result",
      "title": "optimization-result",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/optimization-result.md",
      "chunkIndex": "code-7",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "nParameters:\");\n        for (int i = 0; i < result.ParameterValues.Count; i++)\n        {\n            Console.WriteLine($\"  Param {i + 1}: {result.ParameterValues[i]}\");\n        }\n        \n        // Display metrics\n        Console.WriteLine(\"\\nPerformance Metrics:\");\n        foreach (var metric in result.MetricNames)\n        {\n            double value = result.PerformanceMetrics[metric];\n            Console.WriteLine($\"  {metric}: {value}\");\n        }\n    }\n}\n```\n\n### Comparing Multiple Results\n"
    }
  },
  {
    "pageContent": "nParameters:\");\n        for (int i = 0; i < result.ParameterValues.Count; i++)\n        {\n            Console.WriteLine($\"  Param {i + 1}: {result.ParameterValues[i]}\");\n        }\n        \n        // Display metrics\n        Console.WriteLine(\"\\nPerformance Metrics:\");\n        foreach (var metric in result.MetricNames)\n        {\n            double value = result.PerformanceMetrics[metric];\n            Console.WriteLine($\"  {metric}: {value}\");\n        }\n    }\n}\n```\n\n### Comparing Multiple Results\n\n\n```csharp\npublic class OptimizationComparator\n{\n    public OptimizationResult FindBestResult(List<OptimizationResult> results)\n    {\n        // Filter out results with errors\n        var validResults = results.Where(r => \n            string.IsNullOrEmpty(r.ErrorMessage)).ToList();\n            \n        // Sort by annualized return\n        return validResults.OrderByDescending(r => r.AnnualizedReturn)\n                         .FirstOrDefault();\n    }\n    \n    public void CompareResults(List<OptimizationResult> results)\n    {\n        foreach (var result in results)\n        {\n            // Skip failed runs\n            if (!string.IsNullOrEmpty(result.ErrorMessage))\n                continue;\n                \n            Console.WriteLine($\"\\nRun #{result.RunNumber}\");\n            \n            // Compare key metrics\n            foreach (var metric in result.MetricNames)\n            {\n                double value = result.PerformanceMetrics[metric];\n                Console.WriteLine($\"  {metric}: {value}\");\n            }\n            \n            // Show parameter combinations\n            Console.WriteLine(\"  Parameters:\");\n            for (int i = 0; i < result.ParameterValues.Count; i++)\n            {\n                Console.WriteLine($\"    P{i + 1}: {result.ParameterValues[i]}\");\n            }\n        }\n    }\n}\n\n```",
    "metadata": {
      "id": "optimization-result",
      "title": "optimization-result",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/optimization-result.md",
      "chunkIndex": "code-context-7",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public class MetricAnalyzer\n{\n    public Dictionary<string, (double Min, double Max, double Avg)> \n        AnalyzeMetrics(List<OptimizationResult> results)\n    {\n        var analysis = new Dictionary<string, (double Min, double Max, double Avg)>();\n        \n        // Get valid results\n        var validResults = results.Where(r => \n            string.IsNullOrEmpty(r.ErrorMessage)).ToList();\n            \n        if (!validResults.Any())\n            return analysis;\n            \n        // Analyze each metric\n        foreach (var metric in validResults[0].MetricNames)\n        {\n            var values = validResults.Select(r => \n                r.PerformanceMetrics[metric]).ToList();\n                \n            analysis[metric] = (\n                Min: values.Min(),\n                Max: values.Max(),\n                Avg: values.Average()\n            );\n        }\n        \n        return analysis;\n    }\n}\n",
    "metadata": {
      "id": "optimization-result",
      "title": "optimization-result",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/optimization-result.md",
      "chunkIndex": "code-8",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": " in result.MetricNames)\n            {\n                double value = result.PerformanceMetrics[metric];\n                Console.WriteLine($\"  {metric}: {value}\");\n            }\n            \n            // Show parameter combinations\n            Console.WriteLine(\"  Parameters:\");\n            for (int i = 0; i < result.ParameterValues.Count; i++)\n            {\n                Console.WriteLine($\"    P{i + 1}: {result.ParameterValues[i]}\");\n            }\n        }\n    }\n}\n```\n\n### Metric Analysis\n"
    }
  },
  {
    "pageContent": " in result.MetricNames)\n            {\n                double value = result.PerformanceMetrics[metric];\n                Console.WriteLine($\"  {metric}: {value}\");\n            }\n            \n            // Show parameter combinations\n            Console.WriteLine(\"  Parameters:\");\n            for (int i = 0; i < result.ParameterValues.Count; i++)\n            {\n                Console.WriteLine($\"    P{i + 1}: {result.ParameterValues[i]}\");\n            }\n        }\n    }\n}\n```\n\n### Metric Analysis\n\n\n```csharp\npublic class MetricAnalyzer\n{\n    public Dictionary<string, (double Min, double Max, double Avg)> \n        AnalyzeMetrics(List<OptimizationResult> results)\n    {\n        var analysis = new Dictionary<string, (double Min, double Max, double Avg)>();\n        \n        // Get valid results\n        var validResults = results.Where(r => \n            string.IsNullOrEmpty(r.ErrorMessage)).ToList();\n            \n        if (!validResults.Any())\n            return analysis;\n            \n        // Analyze each metric\n        foreach (var metric in validResults[0].MetricNames)\n        {\n            var values = validResults.Select(r => \n                r.PerformanceMetrics[metric]).ToList();\n                \n            analysis[metric] = (\n                Min: values.Min(),\n                Max: values.Max(),\n                Avg: values.Average()\n            );\n        }\n        \n        return analysis;\n    }\n}\n\n```",
    "metadata": {
      "id": "optimization-result",
      "title": "optimization-result",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/optimization-result.md",
      "chunkIndex": "code-context-8",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "# OptimizationRunnerBase Class\n\n**Namespace:** WealthLab.Backtest  \n**Parent:** Object  \n**Descendants:** StrategyOptimizer, WFOOptimizer\n\nThe `OptimizationRunnerBase` class serves as the base class for strategy optimization in WealthLab 8. It provides core functionality for both standard strategy optimization (`StrategyOptimizer`) and Walk-Forward Optimization (`WFOOptimizer`).\n\n## Core Properties\n\n### BacktestSettings\n",
    "metadata": {
      "id": "optimization-runner-base",
      "title": "optimization-runner-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/optimization-runner-base.md",
      "chunkIndex": 0,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the `BacktestSettings` instance used for the optimization, containing configuration for commission rates, slippage, and other backtest parameters.\n\n### CompiledStrategy\n",
    "metadata": {
      "id": "optimization-runner-base",
      "title": "optimization-runner-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/optimization-runner-base.md",
      "chunkIndex": 1,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the compiled strategy instance (derived from `StrategyBase`) that is being optimized.\n\n### OptimizationMethod\n",
    "metadata": {
      "id": "optimization-runner-base",
      "title": "optimization-runner-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/optimization-runner-base.md",
      "chunkIndex": 2,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the selected optimizer instance (derived from `OptimizerBase`) used for the optimization process.\n\n### OptimizerHost\n",
    "metadata": {
      "id": "optimization-runner-base",
      "title": "optimization-runner-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/optimization-runner-base.md",
      "chunkIndex": 3,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns an instance of `IOptimizerHost` that enables optimizer communication with its host.\n\n### PositionSize\n",
    "metadata": {
      "id": "optimization-runner-base",
      "title": "optimization-runner-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/optimization-runner-base.md",
      "chunkIndex": 4,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the position sizing configuration used during optimization.\n\n### ScoreCard\n",
    "metadata": {
      "id": "optimization-runner-base",
      "title": "optimization-runner-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/optimization-runner-base.md",
      "chunkIndex": 5,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the selected scorecard instance used to evaluate optimization results.\n\n### SymbolData\n",
    "metadata": {
      "id": "optimization-runner-base",
      "title": "optimization-runner-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/optimization-runner-base.md",
      "chunkIndex": 6,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns a list of `BarHistory` instances representing the historical data being optimized.\n\n## Methods\n\n### ReportEstimatedCompletion\n",
    "metadata": {
      "id": "optimization-runner-base",
      "title": "optimization-runner-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/optimization-runner-base.md",
      "chunkIndex": 7,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nAllows optimizers to report their estimated completion percentage.\n\n**Parameters:**\n- `value`: Completion percentage (0-100)\n\n## Usage Examples\n\n### Basic Optimization Runner\n",
    "metadata": {
      "id": "optimization-runner-base",
      "title": "optimization-runner-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/optimization-runner-base.md",
      "chunkIndex": 8,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n### Progress Reporting\n",
    "metadata": {
      "id": "optimization-runner-base",
      "title": "optimization-runner-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/optimization-runner-base.md",
      "chunkIndex": 9,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n### Multi-Symbol Optimization\n",
    "metadata": {
      "id": "optimization-runner-base",
      "title": "optimization-runner-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/optimization-runner-base.md",
      "chunkIndex": 10,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n## Best Practices\n\n1. **Progress Reporting**\n   - Report progress regularly using `ReportEstimatedCompletion`\n   - Provide accurate progress estimates\n   - Handle long-running optimizations gracefully\n\n2. **Resource Management**\n   - Use backtest settings appropriately\n   - Manage position sizing consistently\n   - Handle historical data efficiently\n\n3. **Error Handling**\n   - Implement robust error handling\n   - Report errors through appropriate channels\n   - Maintain optimization state on errors\n\n4. **Performance Optimization**\n   - Optimize parameter space exploration\n   - Cache intermediate results when possible\n   - Consider parallel execution where appropriate\n\n## Notes\n\n- Base class for optimization implementations\n- Provides essential optimization infrastructure\n- Supports both standard and walk-forward optimization\n- Enables progress tracking and reporting\n- Manages optimization configuration and execution ",
    "metadata": {
      "id": "optimization-runner-base",
      "title": "optimization-runner-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/optimization-runner-base.md",
      "chunkIndex": 11,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "public BacktestSettings BacktestSettings\n",
    "metadata": {
      "id": "optimization-runner-base",
      "title": "optimization-runner-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/optimization-runner-base.md",
      "chunkIndex": "code-0",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "# OptimizationRunnerBase Class\n\n**Namespace:** WealthLab.Backtest  \n**Parent:** Object  \n**Descendants:** StrategyOptimizer, WFOOptimizer\n\nThe `OptimizationRunnerBase` class serves as the base class for strategy optimization in WealthLab 8. It provides core functionality for both standard strategy optimization (`StrategyOptimizer`) and Walk-Forward Optimization (`WFOOptimizer`).\n\n## Core Properties\n\n### BacktestSettings\n"
    }
  },
  {
    "pageContent": "# OptimizationRunnerBase Class\n\n**Namespace:** WealthLab.Backtest  \n**Parent:** Object  \n**Descendants:** StrategyOptimizer, WFOOptimizer\n\nThe `OptimizationRunnerBase` class serves as the base class for strategy optimization in WealthLab 8. It provides core functionality for both standard strategy optimization (`StrategyOptimizer`) and Walk-Forward Optimization (`WFOOptimizer`).\n\n## Core Properties\n\n### BacktestSettings\n\n\n```csharp\npublic BacktestSettings BacktestSettings\n\n```",
    "metadata": {
      "id": "optimization-runner-base",
      "title": "optimization-runner-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/optimization-runner-base.md",
      "chunkIndex": "code-context-0",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public StrategyBase CompiledStrategy\n",
    "metadata": {
      "id": "optimization-runner-base",
      "title": "optimization-runner-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/optimization-runner-base.md",
      "chunkIndex": "code-1",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "RunnerBase` class serves as the base class for strategy optimization in WealthLab 8. It provides core functionality for both standard strategy optimization (`StrategyOptimizer`) and Walk-Forward Optimization (`WFOOptimizer`).\n\n## Core Properties\n\n### BacktestSettings\n```csharp\npublic BacktestSettings BacktestSettings\n```\nReturns the `BacktestSettings` instance used for the optimization, containing configuration for commission rates, slippage, and other backtest parameters.\n\n### CompiledStrategy\n"
    }
  },
  {
    "pageContent": "RunnerBase` class serves as the base class for strategy optimization in WealthLab 8. It provides core functionality for both standard strategy optimization (`StrategyOptimizer`) and Walk-Forward Optimization (`WFOOptimizer`).\n\n## Core Properties\n\n### BacktestSettings\n```csharp\npublic BacktestSettings BacktestSettings\n```\nReturns the `BacktestSettings` instance used for the optimization, containing configuration for commission rates, slippage, and other backtest parameters.\n\n### CompiledStrategy\n\n\n```csharp\npublic StrategyBase CompiledStrategy\n\n```",
    "metadata": {
      "id": "optimization-runner-base",
      "title": "optimization-runner-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/optimization-runner-base.md",
      "chunkIndex": "code-context-1",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public OptimizerBase OptimizationMethod\n",
    "metadata": {
      "id": "optimization-runner-base",
      "title": "optimization-runner-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/optimization-runner-base.md",
      "chunkIndex": "code-2",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "imizer`) and Walk-Forward Optimization (`WFOOptimizer`).\n\n## Core Properties\n\n### BacktestSettings\n```csharp\npublic BacktestSettings BacktestSettings\n```\nReturns the `BacktestSettings` instance used for the optimization, containing configuration for commission rates, slippage, and other backtest parameters.\n\n### CompiledStrategy\n```csharp\npublic StrategyBase CompiledStrategy\n```\nReturns the compiled strategy instance (derived from `StrategyBase`) that is being optimized.\n\n### OptimizationMethod\n"
    }
  },
  {
    "pageContent": "imizer`) and Walk-Forward Optimization (`WFOOptimizer`).\n\n## Core Properties\n\n### BacktestSettings\n```csharp\npublic BacktestSettings BacktestSettings\n```\nReturns the `BacktestSettings` instance used for the optimization, containing configuration for commission rates, slippage, and other backtest parameters.\n\n### CompiledStrategy\n```csharp\npublic StrategyBase CompiledStrategy\n```\nReturns the compiled strategy instance (derived from `StrategyBase`) that is being optimized.\n\n### OptimizationMethod\n\n\n```csharp\npublic OptimizerBase OptimizationMethod\n\n```",
    "metadata": {
      "id": "optimization-runner-base",
      "title": "optimization-runner-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/optimization-runner-base.md",
      "chunkIndex": "code-context-2",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public IOptimizerHost OptimizerHost\n",
    "metadata": {
      "id": "optimization-runner-base",
      "title": "optimization-runner-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/optimization-runner-base.md",
      "chunkIndex": "code-3",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ings` instance used for the optimization, containing configuration for commission rates, slippage, and other backtest parameters.\n\n### CompiledStrategy\n```csharp\npublic StrategyBase CompiledStrategy\n```\nReturns the compiled strategy instance (derived from `StrategyBase`) that is being optimized.\n\n### OptimizationMethod\n```csharp\npublic OptimizerBase OptimizationMethod\n```\nReturns the selected optimizer instance (derived from `OptimizerBase`) used for the optimization process.\n\n### OptimizerHost\n"
    }
  },
  {
    "pageContent": "ings` instance used for the optimization, containing configuration for commission rates, slippage, and other backtest parameters.\n\n### CompiledStrategy\n```csharp\npublic StrategyBase CompiledStrategy\n```\nReturns the compiled strategy instance (derived from `StrategyBase`) that is being optimized.\n\n### OptimizationMethod\n```csharp\npublic OptimizerBase OptimizationMethod\n```\nReturns the selected optimizer instance (derived from `OptimizerBase`) used for the optimization process.\n\n### OptimizerHost\n\n\n```csharp\npublic IOptimizerHost OptimizerHost\n\n```",
    "metadata": {
      "id": "optimization-runner-base",
      "title": "optimization-runner-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/optimization-runner-base.md",
      "chunkIndex": "code-context-3",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public PositionSize PositionSize\n",
    "metadata": {
      "id": "optimization-runner-base",
      "title": "optimization-runner-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/optimization-runner-base.md",
      "chunkIndex": "code-4",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "p\npublic StrategyBase CompiledStrategy\n```\nReturns the compiled strategy instance (derived from `StrategyBase`) that is being optimized.\n\n### OptimizationMethod\n```csharp\npublic OptimizerBase OptimizationMethod\n```\nReturns the selected optimizer instance (derived from `OptimizerBase`) used for the optimization process.\n\n### OptimizerHost\n```csharp\npublic IOptimizerHost OptimizerHost\n```\nReturns an instance of `IOptimizerHost` that enables optimizer communication with its host.\n\n### PositionSize\n"
    }
  },
  {
    "pageContent": "p\npublic StrategyBase CompiledStrategy\n```\nReturns the compiled strategy instance (derived from `StrategyBase`) that is being optimized.\n\n### OptimizationMethod\n```csharp\npublic OptimizerBase OptimizationMethod\n```\nReturns the selected optimizer instance (derived from `OptimizerBase`) used for the optimization process.\n\n### OptimizerHost\n```csharp\npublic IOptimizerHost OptimizerHost\n```\nReturns an instance of `IOptimizerHost` that enables optimizer communication with its host.\n\n### PositionSize\n\n\n```csharp\npublic PositionSize PositionSize\n\n```",
    "metadata": {
      "id": "optimization-runner-base",
      "title": "optimization-runner-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/optimization-runner-base.md",
      "chunkIndex": "code-context-4",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public ScoreCardBase ScoreCard\n",
    "metadata": {
      "id": "optimization-runner-base",
      "title": "optimization-runner-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/optimization-runner-base.md",
      "chunkIndex": "code-5",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "mized.\n\n### OptimizationMethod\n```csharp\npublic OptimizerBase OptimizationMethod\n```\nReturns the selected optimizer instance (derived from `OptimizerBase`) used for the optimization process.\n\n### OptimizerHost\n```csharp\npublic IOptimizerHost OptimizerHost\n```\nReturns an instance of `IOptimizerHost` that enables optimizer communication with its host.\n\n### PositionSize\n```csharp\npublic PositionSize PositionSize\n```\nReturns the position sizing configuration used during optimization.\n\n### ScoreCard\n"
    }
  },
  {
    "pageContent": "mized.\n\n### OptimizationMethod\n```csharp\npublic OptimizerBase OptimizationMethod\n```\nReturns the selected optimizer instance (derived from `OptimizerBase`) used for the optimization process.\n\n### OptimizerHost\n```csharp\npublic IOptimizerHost OptimizerHost\n```\nReturns an instance of `IOptimizerHost` that enables optimizer communication with its host.\n\n### PositionSize\n```csharp\npublic PositionSize PositionSize\n```\nReturns the position sizing configuration used during optimization.\n\n### ScoreCard\n\n\n```csharp\npublic ScoreCardBase ScoreCard\n\n```",
    "metadata": {
      "id": "optimization-runner-base",
      "title": "optimization-runner-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/optimization-runner-base.md",
      "chunkIndex": "code-context-5",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public List<BarHistory> SymbolData\n",
    "metadata": {
      "id": "optimization-runner-base",
      "title": "optimization-runner-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/optimization-runner-base.md",
      "chunkIndex": "code-6",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "OptimizerBase`) used for the optimization process.\n\n### OptimizerHost\n```csharp\npublic IOptimizerHost OptimizerHost\n```\nReturns an instance of `IOptimizerHost` that enables optimizer communication with its host.\n\n### PositionSize\n```csharp\npublic PositionSize PositionSize\n```\nReturns the position sizing configuration used during optimization.\n\n### ScoreCard\n```csharp\npublic ScoreCardBase ScoreCard\n```\nReturns the selected scorecard instance used to evaluate optimization results.\n\n### SymbolData\n"
    }
  },
  {
    "pageContent": "OptimizerBase`) used for the optimization process.\n\n### OptimizerHost\n```csharp\npublic IOptimizerHost OptimizerHost\n```\nReturns an instance of `IOptimizerHost` that enables optimizer communication with its host.\n\n### PositionSize\n```csharp\npublic PositionSize PositionSize\n```\nReturns the position sizing configuration used during optimization.\n\n### ScoreCard\n```csharp\npublic ScoreCardBase ScoreCard\n```\nReturns the selected scorecard instance used to evaluate optimization results.\n\n### SymbolData\n\n\n```csharp\npublic List<BarHistory> SymbolData\n\n```",
    "metadata": {
      "id": "optimization-runner-base",
      "title": "optimization-runner-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/optimization-runner-base.md",
      "chunkIndex": "code-context-6",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public void ReportEstimatedCompletion(double value)\n",
    "metadata": {
      "id": "optimization-runner-base",
      "title": "optimization-runner-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/optimization-runner-base.md",
      "chunkIndex": "code-7",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "communication with its host.\n\n### PositionSize\n```csharp\npublic PositionSize PositionSize\n```\nReturns the position sizing configuration used during optimization.\n\n### ScoreCard\n```csharp\npublic ScoreCardBase ScoreCard\n```\nReturns the selected scorecard instance used to evaluate optimization results.\n\n### SymbolData\n```csharp\npublic List<BarHistory> SymbolData\n```\nReturns a list of `BarHistory` instances representing the historical data being optimized.\n\n## Methods\n\n### ReportEstimatedCompletion\n"
    }
  },
  {
    "pageContent": "communication with its host.\n\n### PositionSize\n```csharp\npublic PositionSize PositionSize\n```\nReturns the position sizing configuration used during optimization.\n\n### ScoreCard\n```csharp\npublic ScoreCardBase ScoreCard\n```\nReturns the selected scorecard instance used to evaluate optimization results.\n\n### SymbolData\n```csharp\npublic List<BarHistory> SymbolData\n```\nReturns a list of `BarHistory` instances representing the historical data being optimized.\n\n## Methods\n\n### ReportEstimatedCompletion\n\n\n```csharp\npublic void ReportEstimatedCompletion(double value)\n\n```",
    "metadata": {
      "id": "optimization-runner-base",
      "title": "optimization-runner-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/optimization-runner-base.md",
      "chunkIndex": "code-context-7",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public class CustomOptimizer : OptimizationRunnerBase\n{\n    private int _totalRuns;\n    private int _completedRuns;\n    \n    public void RunOptimization()\n    {\n        try\n        {\n            // Configure optimization\n            _totalRuns = CalculateTotalRuns();\n            _completedRuns = 0;\n            \n            // Execute optimization runs\n            foreach (var paramSet in GenerateParameterSets())\n            {\n                // Run backtest with parameters\n                ExecuteBacktest(paramSet);\n                \n                // Update progress\n                _completedRuns++;\n                double progress = (_completedRuns * 100.0) / _totalRuns;\n                ReportEstimatedCompletion(progress);\n            }\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine($\"Optimization error: {ex.Message}\");\n        }\n    }\n    \n    private void ExecuteBacktest(List<double> parameters)\n    {\n        // Apply backtest settings\n        var settings = BacktestSettings;\n        settings.CommissionAmount = 0.01; // Example setting\n        \n        // Use position sizing\n        var posSize = PositionSize;\n        posSize.DefaultSize = 100; // Example setting\n        \n        // Execute strategy\n        var strategy = CompiledStrategy;\n        // Implementation details...\n    }\n}\n",
    "metadata": {
      "id": "optimization-runner-base",
      "title": "optimization-runner-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/optimization-runner-base.md",
      "chunkIndex": "code-8",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "d scorecard instance used to evaluate optimization results.\n\n### SymbolData\n```csharp\npublic List<BarHistory> SymbolData\n```\nReturns a list of `BarHistory` instances representing the historical data being optimized.\n\n## Methods\n\n### ReportEstimatedCompletion\n```csharp\npublic void ReportEstimatedCompletion(double value)\n```\nAllows optimizers to report their estimated completion percentage.\n\n**Parameters:**\n- `value`: Completion percentage (0-100)\n\n## Usage Examples\n\n### Basic Optimization Runner\n"
    }
  },
  {
    "pageContent": "d scorecard instance used to evaluate optimization results.\n\n### SymbolData\n```csharp\npublic List<BarHistory> SymbolData\n```\nReturns a list of `BarHistory` instances representing the historical data being optimized.\n\n## Methods\n\n### ReportEstimatedCompletion\n```csharp\npublic void ReportEstimatedCompletion(double value)\n```\nAllows optimizers to report their estimated completion percentage.\n\n**Parameters:**\n- `value`: Completion percentage (0-100)\n\n## Usage Examples\n\n### Basic Optimization Runner\n\n\n```csharp\npublic class CustomOptimizer : OptimizationRunnerBase\n{\n    private int _totalRuns;\n    private int _completedRuns;\n    \n    public void RunOptimization()\n    {\n        try\n        {\n            // Configure optimization\n            _totalRuns = CalculateTotalRuns();\n            _completedRuns = 0;\n            \n            // Execute optimization runs\n            foreach (var paramSet in GenerateParameterSets())\n            {\n                // Run backtest with parameters\n                ExecuteBacktest(paramSet);\n                \n                // Update progress\n                _completedRuns++;\n                double progress = (_completedRuns * 100.0) / _totalRuns;\n                ReportEstimatedCompletion(progress);\n            }\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine($\"Optimization error: {ex.Message}\");\n        }\n    }\n    \n    private void ExecuteBacktest(List<double> parameters)\n    {\n        // Apply backtest settings\n        var settings = BacktestSettings;\n        settings.CommissionAmount = 0.01; // Example setting\n        \n        // Use position sizing\n        var posSize = PositionSize;\n        posSize.DefaultSize = 100; // Example setting\n        \n        // Execute strategy\n        var strategy = CompiledStrategy;\n        // Implementation details...\n    }\n}\n\n```",
    "metadata": {
      "id": "optimization-runner-base",
      "title": "optimization-runner-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/optimization-runner-base.md",
      "chunkIndex": "code-context-8",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public class ProgressTrackingOptimizer : OptimizationRunnerBase\n{\n    public void OptimizeWithProgress()\n    {\n        int totalSteps = 100;\n        \n        for (int step = 0; step < totalSteps; step++)\n        {\n            // Perform optimization step\n            ExecuteOptimizationStep(step);\n            \n            // Report progress\n            double progress = ((step + 1) * 100.0) / totalSteps;\n            ReportEstimatedCompletion(progress);\n            \n            // Check scorecard results\n            var results = ScoreCard.GetResults();\n            AnalyzeResults(results);\n        }\n    }\n    \n    private void AnalyzeResults(object results)\n    {\n        // Implementation details...\n    }\n}\n",
    "metadata": {
      "id": "optimization-runner-base",
      "title": "optimization-runner-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/optimization-runner-base.md",
      "chunkIndex": "code-9",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "     }\n    }\n    \n    private void ExecuteBacktest(List<double> parameters)\n    {\n        // Apply backtest settings\n        var settings = BacktestSettings;\n        settings.CommissionAmount = 0.01; // Example setting\n        \n        // Use position sizing\n        var posSize = PositionSize;\n        posSize.DefaultSize = 100; // Example setting\n        \n        // Execute strategy\n        var strategy = CompiledStrategy;\n        // Implementation details...\n    }\n}\n```\n\n### Progress Reporting\n"
    }
  },
  {
    "pageContent": "     }\n    }\n    \n    private void ExecuteBacktest(List<double> parameters)\n    {\n        // Apply backtest settings\n        var settings = BacktestSettings;\n        settings.CommissionAmount = 0.01; // Example setting\n        \n        // Use position sizing\n        var posSize = PositionSize;\n        posSize.DefaultSize = 100; // Example setting\n        \n        // Execute strategy\n        var strategy = CompiledStrategy;\n        // Implementation details...\n    }\n}\n```\n\n### Progress Reporting\n\n\n```csharp\npublic class ProgressTrackingOptimizer : OptimizationRunnerBase\n{\n    public void OptimizeWithProgress()\n    {\n        int totalSteps = 100;\n        \n        for (int step = 0; step < totalSteps; step++)\n        {\n            // Perform optimization step\n            ExecuteOptimizationStep(step);\n            \n            // Report progress\n            double progress = ((step + 1) * 100.0) / totalSteps;\n            ReportEstimatedCompletion(progress);\n            \n            // Check scorecard results\n            var results = ScoreCard.GetResults();\n            AnalyzeResults(results);\n        }\n    }\n    \n    private void AnalyzeResults(object results)\n    {\n        // Implementation details...\n    }\n}\n\n```",
    "metadata": {
      "id": "optimization-runner-base",
      "title": "optimization-runner-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/optimization-runner-base.md",
      "chunkIndex": "code-context-9",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public class MultiSymbolOptimizer : OptimizationRunnerBase\n{\n    public void OptimizeAcrossSymbols()\n    {\n        // Access historical data\n        foreach (var bars in SymbolData)\n        {\n            Console.WriteLine($\"Optimizing {bars.Symbol}...\");\n            \n            // Configure optimization method\n            var optimizer = OptimizationMethod;\n            optimizer.Configure(bars);\n            \n            // Run optimization\n            RunOptimization(bars);\n            \n            // Report to optimizer host\n            OptimizerHost.NotifyProgress(/* progress details */);\n        }\n    }\n}\n",
    "metadata": {
      "id": "optimization-runner-base",
      "title": "optimization-runner-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/optimization-runner-base.md",
      "chunkIndex": "code-10",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "step\n            ExecuteOptimizationStep(step);\n            \n            // Report progress\n            double progress = ((step + 1) * 100.0) / totalSteps;\n            ReportEstimatedCompletion(progress);\n            \n            // Check scorecard results\n            var results = ScoreCard.GetResults();\n            AnalyzeResults(results);\n        }\n    }\n    \n    private void AnalyzeResults(object results)\n    {\n        // Implementation details...\n    }\n}\n```\n\n### Multi-Symbol Optimization\n"
    }
  },
  {
    "pageContent": "step\n            ExecuteOptimizationStep(step);\n            \n            // Report progress\n            double progress = ((step + 1) * 100.0) / totalSteps;\n            ReportEstimatedCompletion(progress);\n            \n            // Check scorecard results\n            var results = ScoreCard.GetResults();\n            AnalyzeResults(results);\n        }\n    }\n    \n    private void AnalyzeResults(object results)\n    {\n        // Implementation details...\n    }\n}\n```\n\n### Multi-Symbol Optimization\n\n\n```csharp\npublic class MultiSymbolOptimizer : OptimizationRunnerBase\n{\n    public void OptimizeAcrossSymbols()\n    {\n        // Access historical data\n        foreach (var bars in SymbolData)\n        {\n            Console.WriteLine($\"Optimizing {bars.Symbol}...\");\n            \n            // Configure optimization method\n            var optimizer = OptimizationMethod;\n            optimizer.Configure(bars);\n            \n            // Run optimization\n            RunOptimization(bars);\n            \n            // Report to optimizer host\n            OptimizerHost.NotifyProgress(/* progress details */);\n        }\n    }\n}\n\n```",
    "metadata": {
      "id": "optimization-runner-base",
      "title": "optimization-runner-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/optimization-runner-base.md",
      "chunkIndex": "code-context-10",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "# ParameterList Class\n\n**Namespace:** WealthLab.Core  \n**Parent:** List<Parameter>\n\nThe `ParameterList` class extends the standard .NET `List<Parameter>` to provide advanced parameter management functionality. It is widely used across WealthLab 8's extensible components, including indicators, optimizers, drawing objects, and data providers.\n\n## Core Properties\n\n### Description\n",
    "metadata": {
      "id": "parameter-list",
      "title": "parameter-list",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/parameter-list.md",
      "chunkIndex": 0,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nProvides an optional descriptive text that can be displayed in parameter editor dialogs for certain components like Optimizers and Position Sizers.\n\n### IsAtDefaultState\n",
    "metadata": {
      "id": "parameter-list",
      "title": "parameter-list",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/parameter-list.md",
      "chunkIndex": 1,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns `true` if all contained `Parameter` instances have their current values equal to their default values.\n\n### TotalPermutations\n",
    "metadata": {
      "id": "parameter-list",
      "title": "parameter-list",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/parameter-list.md",
      "chunkIndex": 2,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nCalculates the total number of parameter permutations based on each parameter's `MinValue`, `MaxValue`, and `StepValue` properties.\n\n## Methods for Parameter Retrieval\n\n### FindName\n",
    "metadata": {
      "id": "parameter-list",
      "title": "parameter-list",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/parameter-list.md",
      "chunkIndex": 3,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nFinds and returns a `Parameter` with the specified name, or `null` if no matching parameter exists.\n\n### FindByOptParamName\n",
    "metadata": {
      "id": "parameter-list",
      "title": "parameter-list",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/parameter-list.md",
      "chunkIndex": 4,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nFinds a `Parameter` by its optimization parameter name, which can be assigned when a parameter is marked as optimizable.\n\n### ValueOf\n",
    "metadata": {
      "id": "parameter-list",
      "title": "parameter-list",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/parameter-list.md",
      "chunkIndex": 5,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nRetrieves the value of a `Parameter` by its name, returning `null` if no matching parameter is found.\n\n## Parameter Value Management\n\n### AssignValues\n",
    "metadata": {
      "id": "parameter-list",
      "title": "parameter-list",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/parameter-list.md",
      "chunkIndex": 6,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nAssigns values to the contained `Parameter` instances. Handles type conversion, ensuring that integer parameters receive appropriate integer values.\n\n### GetValues\n",
    "metadata": {
      "id": "parameter-list",
      "title": "parameter-list",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/parameter-list.md",
      "chunkIndex": 7,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nConverts and returns the values of all contained parameters as a list of doubles.\n\n### FixOptimizationValues\n",
    "metadata": {
      "id": "parameter-list",
      "title": "parameter-list",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/parameter-list.md",
      "chunkIndex": 8,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nEnsures each parameter's value is within its defined optimization range. If a value is outside the range, it is set to the minimum value.\n\n### ReturnToDefaultState\n",
    "metadata": {
      "id": "parameter-list",
      "title": "parameter-list",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/parameter-list.md",
      "chunkIndex": 9,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nResets all parameters to their original default values.\n\n### Clone\n",
    "metadata": {
      "id": "parameter-list",
      "title": "parameter-list",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/parameter-list.md",
      "chunkIndex": 10,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nCreates a deep copy of the current `ParameterList` instance.\n\n## Usage Examples\n\n### Parameter Retrieval and Management\n",
    "metadata": {
      "id": "parameter-list",
      "title": "parameter-list",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/parameter-list.md",
      "chunkIndex": 11,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n### Optimization Parameter Management\n",
    "metadata": {
      "id": "parameter-list",
      "title": "parameter-list",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/parameter-list.md",
      "chunkIndex": 12,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n### Advanced Parameter Configuration\n",
    "metadata": {
      "id": "parameter-list",
      "title": "parameter-list",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/parameter-list.md",
      "chunkIndex": 13,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n## Best Practices\n\n1. **Parameter Naming**\n   - Use clear, descriptive names\n   - Leverage `FindName` and `FindByOptParamName` for parameter retrieval\n   - Maintain consistent naming conventions\n\n2. **Optimization Management**\n   - Use `TotalPermutations` to estimate optimization complexity\n   - Employ `FixOptimizationValues` to ensure valid parameter ranges\n   - Consider performance when generating large parameter sets\n\n3. **State Management**\n   - Utilize `Clone()` to create parameter backups\n   - Use `IsAtDefaultState` and `ResetToDefaultState` for parameter reset scenarios\n   - Handle parameter value conversions carefully\n\n4. **Performance Considerations**\n   - Minimize unnecessary parameter list modifications\n   - Cache parameter values when possible\n   - Use efficient parameter retrieval methods\n\n## Notes\n\n- Integral part of WealthLab 8's extensible architecture\n- Supports complex parameter management across various components\n- Provides type-safe parameter value handling\n- Enables sophisticated optimization and configuration scenarios\n- Designed for flexibility and ease of use in strategy and indicator development ",
    "metadata": {
      "id": "parameter-list",
      "title": "parameter-list",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/parameter-list.md",
      "chunkIndex": 14,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "public string Description\n",
    "metadata": {
      "id": "parameter-list",
      "title": "parameter-list",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/parameter-list.md",
      "chunkIndex": "code-0",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "# ParameterList Class\n\n**Namespace:** WealthLab.Core  \n**Parent:** List<Parameter>\n\nThe `ParameterList` class extends the standard .NET `List<Parameter>` to provide advanced parameter management functionality. It is widely used across WealthLab 8's extensible components, including indicators, optimizers, drawing objects, and data providers.\n\n## Core Properties\n\n### Description\n"
    }
  },
  {
    "pageContent": "# ParameterList Class\n\n**Namespace:** WealthLab.Core  \n**Parent:** List<Parameter>\n\nThe `ParameterList` class extends the standard .NET `List<Parameter>` to provide advanced parameter management functionality. It is widely used across WealthLab 8's extensible components, including indicators, optimizers, drawing objects, and data providers.\n\n## Core Properties\n\n### Description\n\n\n```csharp\npublic string Description\n\n```",
    "metadata": {
      "id": "parameter-list",
      "title": "parameter-list",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/parameter-list.md",
      "chunkIndex": "code-context-0",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public bool IsAtDefaultState\n",
    "metadata": {
      "id": "parameter-list",
      "title": "parameter-list",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/parameter-list.md",
      "chunkIndex": "code-1",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "arameterList` class extends the standard .NET `List<Parameter>` to provide advanced parameter management functionality. It is widely used across WealthLab 8's extensible components, including indicators, optimizers, drawing objects, and data providers.\n\n## Core Properties\n\n### Description\n```csharp\npublic string Description\n```\nProvides an optional descriptive text that can be displayed in parameter editor dialogs for certain components like Optimizers and Position Sizers.\n\n### IsAtDefaultState\n"
    }
  },
  {
    "pageContent": "arameterList` class extends the standard .NET `List<Parameter>` to provide advanced parameter management functionality. It is widely used across WealthLab 8's extensible components, including indicators, optimizers, drawing objects, and data providers.\n\n## Core Properties\n\n### Description\n```csharp\npublic string Description\n```\nProvides an optional descriptive text that can be displayed in parameter editor dialogs for certain components like Optimizers and Position Sizers.\n\n### IsAtDefaultState\n\n\n```csharp\npublic bool IsAtDefaultState\n\n```",
    "metadata": {
      "id": "parameter-list",
      "title": "parameter-list",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/parameter-list.md",
      "chunkIndex": "code-context-1",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public int TotalPermutations\n",
    "metadata": {
      "id": "parameter-list",
      "title": "parameter-list",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/parameter-list.md",
      "chunkIndex": "code-2",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "nts, including indicators, optimizers, drawing objects, and data providers.\n\n## Core Properties\n\n### Description\n```csharp\npublic string Description\n```\nProvides an optional descriptive text that can be displayed in parameter editor dialogs for certain components like Optimizers and Position Sizers.\n\n### IsAtDefaultState\n```csharp\npublic bool IsAtDefaultState\n```\nReturns `true` if all contained `Parameter` instances have their current values equal to their default values.\n\n### TotalPermutations\n"
    }
  },
  {
    "pageContent": "nts, including indicators, optimizers, drawing objects, and data providers.\n\n## Core Properties\n\n### Description\n```csharp\npublic string Description\n```\nProvides an optional descriptive text that can be displayed in parameter editor dialogs for certain components like Optimizers and Position Sizers.\n\n### IsAtDefaultState\n```csharp\npublic bool IsAtDefaultState\n```\nReturns `true` if all contained `Parameter` instances have their current values equal to their default values.\n\n### TotalPermutations\n\n\n```csharp\npublic int TotalPermutations\n\n```",
    "metadata": {
      "id": "parameter-list",
      "title": "parameter-list",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/parameter-list.md",
      "chunkIndex": "code-context-2",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public Parameter FindName(string name)\n",
    "metadata": {
      "id": "parameter-list",
      "title": "parameter-list",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/parameter-list.md",
      "chunkIndex": "code-3",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": " editor dialogs for certain components like Optimizers and Position Sizers.\n\n### IsAtDefaultState\n```csharp\npublic bool IsAtDefaultState\n```\nReturns `true` if all contained `Parameter` instances have their current values equal to their default values.\n\n### TotalPermutations\n```csharp\npublic int TotalPermutations\n```\nCalculates the total number of parameter permutations based on each parameter's `MinValue`, `MaxValue`, and `StepValue` properties.\n\n## Methods for Parameter Retrieval\n\n### FindName\n"
    }
  },
  {
    "pageContent": " editor dialogs for certain components like Optimizers and Position Sizers.\n\n### IsAtDefaultState\n```csharp\npublic bool IsAtDefaultState\n```\nReturns `true` if all contained `Parameter` instances have their current values equal to their default values.\n\n### TotalPermutations\n```csharp\npublic int TotalPermutations\n```\nCalculates the total number of parameter permutations based on each parameter's `MinValue`, `MaxValue`, and `StepValue` properties.\n\n## Methods for Parameter Retrieval\n\n### FindName\n\n\n```csharp\npublic Parameter FindName(string name)\n\n```",
    "metadata": {
      "id": "parameter-list",
      "title": "parameter-list",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/parameter-list.md",
      "chunkIndex": "code-context-3",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public Parameter FindByOptParamName(string name)\n",
    "metadata": {
      "id": "parameter-list",
      "title": "parameter-list",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/parameter-list.md",
      "chunkIndex": "code-4",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ameter` instances have their current values equal to their default values.\n\n### TotalPermutations\n```csharp\npublic int TotalPermutations\n```\nCalculates the total number of parameter permutations based on each parameter's `MinValue`, `MaxValue`, and `StepValue` properties.\n\n## Methods for Parameter Retrieval\n\n### FindName\n```csharp\npublic Parameter FindName(string name)\n```\nFinds and returns a `Parameter` with the specified name, or `null` if no matching parameter exists.\n\n### FindByOptParamName\n"
    }
  },
  {
    "pageContent": "ameter` instances have their current values equal to their default values.\n\n### TotalPermutations\n```csharp\npublic int TotalPermutations\n```\nCalculates the total number of parameter permutations based on each parameter's `MinValue`, `MaxValue`, and `StepValue` properties.\n\n## Methods for Parameter Retrieval\n\n### FindName\n```csharp\npublic Parameter FindName(string name)\n```\nFinds and returns a `Parameter` with the specified name, or `null` if no matching parameter exists.\n\n### FindByOptParamName\n\n\n```csharp\npublic Parameter FindByOptParamName(string name)\n\n```",
    "metadata": {
      "id": "parameter-list",
      "title": "parameter-list",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/parameter-list.md",
      "chunkIndex": "code-context-4",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public object ValueOf(string name)\n",
    "metadata": {
      "id": "parameter-list",
      "title": "parameter-list",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/parameter-list.md",
      "chunkIndex": "code-5",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "sed on each parameter's `MinValue`, `MaxValue`, and `StepValue` properties.\n\n## Methods for Parameter Retrieval\n\n### FindName\n```csharp\npublic Parameter FindName(string name)\n```\nFinds and returns a `Parameter` with the specified name, or `null` if no matching parameter exists.\n\n### FindByOptParamName\n```csharp\npublic Parameter FindByOptParamName(string name)\n```\nFinds a `Parameter` by its optimization parameter name, which can be assigned when a parameter is marked as optimizable.\n\n### ValueOf\n"
    }
  },
  {
    "pageContent": "sed on each parameter's `MinValue`, `MaxValue`, and `StepValue` properties.\n\n## Methods for Parameter Retrieval\n\n### FindName\n```csharp\npublic Parameter FindName(string name)\n```\nFinds and returns a `Parameter` with the specified name, or `null` if no matching parameter exists.\n\n### FindByOptParamName\n```csharp\npublic Parameter FindByOptParamName(string name)\n```\nFinds a `Parameter` by its optimization parameter name, which can be assigned when a parameter is marked as optimizable.\n\n### ValueOf\n\n\n```csharp\npublic object ValueOf(string name)\n\n```",
    "metadata": {
      "id": "parameter-list",
      "title": "parameter-list",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/parameter-list.md",
      "chunkIndex": "code-context-5",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public void AssignValues(List<double> values)\n",
    "metadata": {
      "id": "parameter-list",
      "title": "parameter-list",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/parameter-list.md",
      "chunkIndex": "code-6",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "Parameter` with the specified name, or `null` if no matching parameter exists.\n\n### FindByOptParamName\n```csharp\npublic Parameter FindByOptParamName(string name)\n```\nFinds a `Parameter` by its optimization parameter name, which can be assigned when a parameter is marked as optimizable.\n\n### ValueOf\n```csharp\npublic object ValueOf(string name)\n```\nRetrieves the value of a `Parameter` by its name, returning `null` if no matching parameter is found.\n\n## Parameter Value Management\n\n### AssignValues\n"
    }
  },
  {
    "pageContent": "Parameter` with the specified name, or `null` if no matching parameter exists.\n\n### FindByOptParamName\n```csharp\npublic Parameter FindByOptParamName(string name)\n```\nFinds a `Parameter` by its optimization parameter name, which can be assigned when a parameter is marked as optimizable.\n\n### ValueOf\n```csharp\npublic object ValueOf(string name)\n```\nRetrieves the value of a `Parameter` by its name, returning `null` if no matching parameter is found.\n\n## Parameter Value Management\n\n### AssignValues\n\n\n```csharp\npublic void AssignValues(List<double> values)\n\n```",
    "metadata": {
      "id": "parameter-list",
      "title": "parameter-list",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/parameter-list.md",
      "chunkIndex": "code-context-6",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public List<double> GetValues\n",
    "metadata": {
      "id": "parameter-list",
      "title": "parameter-list",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/parameter-list.md",
      "chunkIndex": "code-7",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ich can be assigned when a parameter is marked as optimizable.\n\n### ValueOf\n```csharp\npublic object ValueOf(string name)\n```\nRetrieves the value of a `Parameter` by its name, returning `null` if no matching parameter is found.\n\n## Parameter Value Management\n\n### AssignValues\n```csharp\npublic void AssignValues(List<double> values)\n```\nAssigns values to the contained `Parameter` instances. Handles type conversion, ensuring that integer parameters receive appropriate integer values.\n\n### GetValues\n"
    }
  },
  {
    "pageContent": "ich can be assigned when a parameter is marked as optimizable.\n\n### ValueOf\n```csharp\npublic object ValueOf(string name)\n```\nRetrieves the value of a `Parameter` by its name, returning `null` if no matching parameter is found.\n\n## Parameter Value Management\n\n### AssignValues\n```csharp\npublic void AssignValues(List<double> values)\n```\nAssigns values to the contained `Parameter` instances. Handles type conversion, ensuring that integer parameters receive appropriate integer values.\n\n### GetValues\n\n\n```csharp\npublic List<double> GetValues\n\n```",
    "metadata": {
      "id": "parameter-list",
      "title": "parameter-list",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/parameter-list.md",
      "chunkIndex": "code-context-7",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public void FixOptimizationValues()\n",
    "metadata": {
      "id": "parameter-list",
      "title": "parameter-list",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/parameter-list.md",
      "chunkIndex": "code-8",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "rameter` by its name, returning `null` if no matching parameter is found.\n\n## Parameter Value Management\n\n### AssignValues\n```csharp\npublic void AssignValues(List<double> values)\n```\nAssigns values to the contained `Parameter` instances. Handles type conversion, ensuring that integer parameters receive appropriate integer values.\n\n### GetValues\n```csharp\npublic List<double> GetValues\n```\nConverts and returns the values of all contained parameters as a list of doubles.\n\n### FixOptimizationValues\n"
    }
  },
  {
    "pageContent": "rameter` by its name, returning `null` if no matching parameter is found.\n\n## Parameter Value Management\n\n### AssignValues\n```csharp\npublic void AssignValues(List<double> values)\n```\nAssigns values to the contained `Parameter` instances. Handles type conversion, ensuring that integer parameters receive appropriate integer values.\n\n### GetValues\n```csharp\npublic List<double> GetValues\n```\nConverts and returns the values of all contained parameters as a list of doubles.\n\n### FixOptimizationValues\n\n\n```csharp\npublic void FixOptimizationValues()\n\n```",
    "metadata": {
      "id": "parameter-list",
      "title": "parameter-list",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/parameter-list.md",
      "chunkIndex": "code-context-8",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public void ResetToDefaultState()\n",
    "metadata": {
      "id": "parameter-list",
      "title": "parameter-list",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/parameter-list.md",
      "chunkIndex": "code-9",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": " `Parameter` instances. Handles type conversion, ensuring that integer parameters receive appropriate integer values.\n\n### GetValues\n```csharp\npublic List<double> GetValues\n```\nConverts and returns the values of all contained parameters as a list of doubles.\n\n### FixOptimizationValues\n```csharp\npublic void FixOptimizationValues()\n```\nEnsures each parameter's value is within its defined optimization range. If a value is outside the range, it is set to the minimum value.\n\n### ReturnToDefaultState\n"
    }
  },
  {
    "pageContent": " `Parameter` instances. Handles type conversion, ensuring that integer parameters receive appropriate integer values.\n\n### GetValues\n```csharp\npublic List<double> GetValues\n```\nConverts and returns the values of all contained parameters as a list of doubles.\n\n### FixOptimizationValues\n```csharp\npublic void FixOptimizationValues()\n```\nEnsures each parameter's value is within its defined optimization range. If a value is outside the range, it is set to the minimum value.\n\n### ReturnToDefaultState\n\n\n```csharp\npublic void ResetToDefaultState()\n\n```",
    "metadata": {
      "id": "parameter-list",
      "title": "parameter-list",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/parameter-list.md",
      "chunkIndex": "code-context-9",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public ParameterList Clone()\n",
    "metadata": {
      "id": "parameter-list",
      "title": "parameter-list",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/parameter-list.md",
      "chunkIndex": "code-10",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "s.\n\n### GetValues\n```csharp\npublic List<double> GetValues\n```\nConverts and returns the values of all contained parameters as a list of doubles.\n\n### FixOptimizationValues\n```csharp\npublic void FixOptimizationValues()\n```\nEnsures each parameter's value is within its defined optimization range. If a value is outside the range, it is set to the minimum value.\n\n### ReturnToDefaultState\n```csharp\npublic void ResetToDefaultState()\n```\nResets all parameters to their original default values.\n\n### Clone\n"
    }
  },
  {
    "pageContent": "s.\n\n### GetValues\n```csharp\npublic List<double> GetValues\n```\nConverts and returns the values of all contained parameters as a list of doubles.\n\n### FixOptimizationValues\n```csharp\npublic void FixOptimizationValues()\n```\nEnsures each parameter's value is within its defined optimization range. If a value is outside the range, it is set to the minimum value.\n\n### ReturnToDefaultState\n```csharp\npublic void ResetToDefaultState()\n```\nResets all parameters to their original default values.\n\n### Clone\n\n\n```csharp\npublic ParameterList Clone()\n\n```",
    "metadata": {
      "id": "parameter-list",
      "title": "parameter-list",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/parameter-list.md",
      "chunkIndex": "code-context-10",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public class ParameterManager\n{\n    public void ManageParameters(ParameterList parameters)\n    {\n        // Find a specific parameter\n        var rsiPeriod = parameters.FindName(\"RSI Period\");\n        if (rsiPeriod != null)\n        {\n            Console.WriteLine($\"Current RSI Period: {rsiPeriod.Value}\");\n        }\n\n        // Check if parameters are at default state\n        if (parameters.IsAtDefaultState)\n        {\n            Console.WriteLine(\"All parameters are at their default values.\");\n        }\n\n        // Get all parameter values\n        var parameterValues = parameters.GetValues();\n        Console.WriteLine($\"Total Parameters: {parameterValues.Count}\");\n    }\n}\n",
    "metadata": {
      "id": "parameter-list",
      "title": "parameter-list",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/parameter-list.md",
      "chunkIndex": "code-11",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "nValues\n```csharp\npublic void FixOptimizationValues()\n```\nEnsures each parameter's value is within its defined optimization range. If a value is outside the range, it is set to the minimum value.\n\n### ReturnToDefaultState\n```csharp\npublic void ResetToDefaultState()\n```\nResets all parameters to their original default values.\n\n### Clone\n```csharp\npublic ParameterList Clone()\n```\nCreates a deep copy of the current `ParameterList` instance.\n\n## Usage Examples\n\n### Parameter Retrieval and Management\n"
    }
  },
  {
    "pageContent": "nValues\n```csharp\npublic void FixOptimizationValues()\n```\nEnsures each parameter's value is within its defined optimization range. If a value is outside the range, it is set to the minimum value.\n\n### ReturnToDefaultState\n```csharp\npublic void ResetToDefaultState()\n```\nResets all parameters to their original default values.\n\n### Clone\n```csharp\npublic ParameterList Clone()\n```\nCreates a deep copy of the current `ParameterList` instance.\n\n## Usage Examples\n\n### Parameter Retrieval and Management\n\n\n```csharp\npublic class ParameterManager\n{\n    public void ManageParameters(ParameterList parameters)\n    {\n        // Find a specific parameter\n        var rsiPeriod = parameters.FindName(\"RSI Period\");\n        if (rsiPeriod != null)\n        {\n            Console.WriteLine($\"Current RSI Period: {rsiPeriod.Value}\");\n        }\n\n        // Check if parameters are at default state\n        if (parameters.IsAtDefaultState)\n        {\n            Console.WriteLine(\"All parameters are at their default values.\");\n        }\n\n        // Get all parameter values\n        var parameterValues = parameters.GetValues();\n        Console.WriteLine($\"Total Parameters: {parameterValues.Count}\");\n    }\n}\n\n```",
    "metadata": {
      "id": "parameter-list",
      "title": "parameter-list",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/parameter-list.md",
      "chunkIndex": "code-context-11",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public class OptimizationHelper\n{\n    public void PrepareOptimization(ParameterList parameters)\n    {\n        // Calculate total optimization permutations\n        int totalCombinations = parameters.TotalPermutations;\n        Console.WriteLine($\"Total Optimization Combinations: {totalCombinations}\");\n\n        // Fix any out-of-range parameter values\n        parameters.FixOptimizationValues();\n\n        // Clone parameters for backup\n        var parameterBackup = parameters.Clone();\n\n        // Reset to default state if needed\n        if (ShouldResetParameters())\n        {\n            parameters.ResetToDefaultState();\n        }\n    }\n\n    private bool ShouldResetParameters()\n    {\n        // Custom logic to determine if parameters should be reset\n        return false;\n    }\n}\n",
    "metadata": {
      "id": "parameter-list",
      "title": "parameter-list",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/parameter-list.md",
      "chunkIndex": "code-12",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "        {\n            Console.WriteLine($\"Current RSI Period: {rsiPeriod.Value}\");\n        }\n\n        // Check if parameters are at default state\n        if (parameters.IsAtDefaultState)\n        {\n            Console.WriteLine(\"All parameters are at their default values.\");\n        }\n\n        // Get all parameter values\n        var parameterValues = parameters.GetValues();\n        Console.WriteLine($\"Total Parameters: {parameterValues.Count}\");\n    }\n}\n```\n\n### Optimization Parameter Management\n"
    }
  },
  {
    "pageContent": "        {\n            Console.WriteLine($\"Current RSI Period: {rsiPeriod.Value}\");\n        }\n\n        // Check if parameters are at default state\n        if (parameters.IsAtDefaultState)\n        {\n            Console.WriteLine(\"All parameters are at their default values.\");\n        }\n\n        // Get all parameter values\n        var parameterValues = parameters.GetValues();\n        Console.WriteLine($\"Total Parameters: {parameterValues.Count}\");\n    }\n}\n```\n\n### Optimization Parameter Management\n\n\n```csharp\npublic class OptimizationHelper\n{\n    public void PrepareOptimization(ParameterList parameters)\n    {\n        // Calculate total optimization permutations\n        int totalCombinations = parameters.TotalPermutations;\n        Console.WriteLine($\"Total Optimization Combinations: {totalCombinations}\");\n\n        // Fix any out-of-range parameter values\n        parameters.FixOptimizationValues();\n\n        // Clone parameters for backup\n        var parameterBackup = parameters.Clone();\n\n        // Reset to default state if needed\n        if (ShouldResetParameters())\n        {\n            parameters.ResetToDefaultState();\n        }\n    }\n\n    private bool ShouldResetParameters()\n    {\n        // Custom logic to determine if parameters should be reset\n        return false;\n    }\n}\n\n```",
    "metadata": {
      "id": "parameter-list",
      "title": "parameter-list",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/parameter-list.md",
      "chunkIndex": "code-context-12",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public class StrategyParameterConfigurator\n{\n    public void ConfigureParameters(ParameterList parameters)\n    {\n        // Add optimization-ready parameters\n        parameters.Add(new Parameter(\"Stop Loss\", ParameterType.Double, 0.02, 0.01, 0.05)\n        {\n            StepValue = 0.01,\n            OptParamName = \"StopLossOptimization\"\n        });\n\n        // Find and modify a specific optimizable parameter\n        var stopLossParam = parameters.FindByOptParamName(\"StopLossOptimization\");\n        if (stopLossParam != null)\n        {\n            stopLossParam.AssignExplicitValues(0.01, 0.02, 0.03, 0.05);\n        }\n    }\n}\n",
    "metadata": {
      "id": "parameter-list",
      "title": "parameter-list",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/parameter-list.md",
      "chunkIndex": "code-13",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "f-range parameter values\n        parameters.FixOptimizationValues();\n\n        // Clone parameters for backup\n        var parameterBackup = parameters.Clone();\n\n        // Reset to default state if needed\n        if (ShouldResetParameters())\n        {\n            parameters.ResetToDefaultState();\n        }\n    }\n\n    private bool ShouldResetParameters()\n    {\n        // Custom logic to determine if parameters should be reset\n        return false;\n    }\n}\n```\n\n### Advanced Parameter Configuration\n"
    }
  },
  {
    "pageContent": "f-range parameter values\n        parameters.FixOptimizationValues();\n\n        // Clone parameters for backup\n        var parameterBackup = parameters.Clone();\n\n        // Reset to default state if needed\n        if (ShouldResetParameters())\n        {\n            parameters.ResetToDefaultState();\n        }\n    }\n\n    private bool ShouldResetParameters()\n    {\n        // Custom logic to determine if parameters should be reset\n        return false;\n    }\n}\n```\n\n### Advanced Parameter Configuration\n\n\n```csharp\npublic class StrategyParameterConfigurator\n{\n    public void ConfigureParameters(ParameterList parameters)\n    {\n        // Add optimization-ready parameters\n        parameters.Add(new Parameter(\"Stop Loss\", ParameterType.Double, 0.02, 0.01, 0.05)\n        {\n            StepValue = 0.01,\n            OptParamName = \"StopLossOptimization\"\n        });\n\n        // Find and modify a specific optimizable parameter\n        var stopLossParam = parameters.FindByOptParamName(\"StopLossOptimization\");\n        if (stopLossParam != null)\n        {\n            stopLossParam.AssignExplicitValues(0.01, 0.02, 0.03, 0.05);\n        }\n    }\n}\n\n```",
    "metadata": {
      "id": "parameter-list",
      "title": "parameter-list",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/parameter-list.md",
      "chunkIndex": "code-context-13",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "# Parameter Class\n\n**Namespace:** WealthLab.Core  \n**Parent:** Object\n\nThe `Parameter` class represents a configurable parameter used in WealthLab strategies, indicators, and other extensible components. It provides a flexible mechanism for defining, optimizing, and managing parameter values across different types of WealthLab extensions.\n\n## Constructors\n\n### Parameter\n",
    "metadata": {
      "id": "parameter",
      "title": "parameter",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/parameter.md",
      "chunkIndex": 0,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\nThree constructor overloads provide flexibility in parameter creation:\n- Basic constructor with name, type, and initial value\n- Extended constructor allowing optimization range specification\n- Enum-based constructor for creating string choice parameters\n\n## Core Properties\n\n### Name\n",
    "metadata": {
      "id": "parameter",
      "title": "parameter",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/parameter.md",
      "chunkIndex": 1,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nThe descriptive name of the parameter.\n\n### Type\n",
    "metadata": {
      "id": "parameter",
      "title": "parameter",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/parameter.md",
      "chunkIndex": 2,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nDefines the data type of the parameter (e.g., Double, Int32, TimeSeries).\n\n### Value\n",
    "metadata": {
      "id": "parameter",
      "title": "parameter",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/parameter.md",
      "chunkIndex": 3,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nThe current value of the parameter.\n\n### DefaultValue\n",
    "metadata": {
      "id": "parameter",
      "title": "parameter",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/parameter.md",
      "chunkIndex": 4,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nThe initial value established when the parameter was created.\n\n## Optimization Properties\n\n### MinValue\n",
    "metadata": {
      "id": "parameter",
      "title": "parameter",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/parameter.md",
      "chunkIndex": 5,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nMinimum value for parameter optimization.\n\n### MaxValue\n",
    "metadata": {
      "id": "parameter",
      "title": "parameter",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/parameter.md",
      "chunkIndex": 6,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nMaximum value for parameter optimization.\n\n### StepValue\n",
    "metadata": {
      "id": "parameter",
      "title": "parameter",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/parameter.md",
      "chunkIndex": 7,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nIncrement value used during optimization.\n\n### Values\n",
    "metadata": {
      "id": "parameter",
      "title": "parameter",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/parameter.md",
      "chunkIndex": 8,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nList of possible parameter values based on MinValue, MaxValue, and StepValue.\n\n## Type Conversion Helper Properties\n\n### AsDouble, AsInt, AsBoolean, etc.\n",
    "metadata": {
      "id": "parameter",
      "title": "parameter",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/parameter.md",
      "chunkIndex": 9,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nProvides type-safe access to parameter values for specific types.\n\n## Methods\n\n### AssignExplicitValues\n",
    "metadata": {
      "id": "parameter",
      "title": "parameter",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/parameter.md",
      "chunkIndex": 10,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nAllows manual specification of optimization values.\n\n### AssignFibonacciValues\n",
    "metadata": {
      "id": "parameter",
      "title": "parameter",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/parameter.md",
      "chunkIndex": 11,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nGenerates Fibonacci sequence values within the parameter's range.\n\n### AssignPercentageValues\n",
    "metadata": {
      "id": "parameter",
      "title": "parameter",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/parameter.md",
      "chunkIndex": 12,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nGenerates logarithmic optimization values.\n\n## Usage Examples\n\n### Strategy Parameter Configuration\n",
    "metadata": {
      "id": "parameter",
      "title": "parameter",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/parameter.md",
      "chunkIndex": 13,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n### Custom Indicator Parameter Management\n",
    "metadata": {
      "id": "parameter",
      "title": "parameter",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/parameter.md",
      "chunkIndex": 14,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n### Enum Parameter with Choices\n",
    "metadata": {
      "id": "parameter",
      "title": "parameter",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/parameter.md",
      "chunkIndex": 15,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n## Best Practices\n\n1. **Parameter Naming**\n   - Use clear, descriptive names\n   - Provide meaningful hints\n   - Follow consistent naming conventions\n\n2. **Optimization Configuration**\n   - Define realistic min/max ranges\n   - Use appropriate step values\n   - Consider logarithmic or Fibonacci distributions\n\n3. **Type Safety**\n   - Use type-specific accessor methods\n   - Validate parameter types\n   - Handle type conversion carefully\n\n4. **Performance**\n   - Minimize complex parameter generation\n   - Cache parameter values when possible\n   - Use explicit values for small optimization sets\n\n## Notes\n\n- Supports various parameter types\n- Enables strategy and indicator customization\n- Provides flexible optimization mechanisms\n- Integrates with WealthLab's optimization framework\n- Supports both manual and algorithmic parameter configuration ",
    "metadata": {
      "id": "parameter",
      "title": "parameter",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/parameter.md",
      "chunkIndex": 16,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "public Parameter(string name, ParameterTypes type, object value)\npublic Parameter(string name, ParameterTypes type, object value, double minValue, double maxValue)\npublic Parameter(string name, Type enumType)\n",
    "metadata": {
      "id": "parameter",
      "title": "parameter",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/parameter.md",
      "chunkIndex": "code-0",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "# Parameter Class\n\n**Namespace:** WealthLab.Core  \n**Parent:** Object\n\nThe `Parameter` class represents a configurable parameter used in WealthLab strategies, indicators, and other extensible components. It provides a flexible mechanism for defining, optimizing, and managing parameter values across different types of WealthLab extensions.\n\n## Constructors\n\n### Parameter\n"
    }
  },
  {
    "pageContent": "# Parameter Class\n\n**Namespace:** WealthLab.Core  \n**Parent:** Object\n\nThe `Parameter` class represents a configurable parameter used in WealthLab strategies, indicators, and other extensible components. It provides a flexible mechanism for defining, optimizing, and managing parameter values across different types of WealthLab extensions.\n\n## Constructors\n\n### Parameter\n\n\n```csharp\npublic Parameter(string name, ParameterTypes type, object value)\npublic Parameter(string name, ParameterTypes type, object value, double minValue, double maxValue)\npublic Parameter(string name, Type enumType)\n\n```",
    "metadata": {
      "id": "parameter",
      "title": "parameter",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/parameter.md",
      "chunkIndex": "code-context-0",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public string Name\n",
    "metadata": {
      "id": "parameter",
      "title": "parameter",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/parameter.md",
      "chunkIndex": "code-1",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "p\npublic Parameter(string name, ParameterTypes type, object value)\npublic Parameter(string name, ParameterTypes type, object value, double minValue, double maxValue)\npublic Parameter(string name, Type enumType)\n```\n\nThree constructor overloads provide flexibility in parameter creation:\n- Basic constructor with name, type, and initial value\n- Extended constructor allowing optimization range specification\n- Enum-based constructor for creating string choice parameters\n\n## Core Properties\n\n### Name\n"
    }
  },
  {
    "pageContent": "p\npublic Parameter(string name, ParameterTypes type, object value)\npublic Parameter(string name, ParameterTypes type, object value, double minValue, double maxValue)\npublic Parameter(string name, Type enumType)\n```\n\nThree constructor overloads provide flexibility in parameter creation:\n- Basic constructor with name, type, and initial value\n- Extended constructor allowing optimization range specification\n- Enum-based constructor for creating string choice parameters\n\n## Core Properties\n\n### Name\n\n\n```csharp\npublic string Name\n\n```",
    "metadata": {
      "id": "parameter",
      "title": "parameter",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/parameter.md",
      "chunkIndex": "code-context-1",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public ParameterTypes Type\n",
    "metadata": {
      "id": "parameter",
      "title": "parameter",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/parameter.md",
      "chunkIndex": "code-2",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "r(string name, ParameterTypes type, object value, double minValue, double maxValue)\npublic Parameter(string name, Type enumType)\n```\n\nThree constructor overloads provide flexibility in parameter creation:\n- Basic constructor with name, type, and initial value\n- Extended constructor allowing optimization range specification\n- Enum-based constructor for creating string choice parameters\n\n## Core Properties\n\n### Name\n```csharp\npublic string Name\n```\nThe descriptive name of the parameter.\n\n### Type\n"
    }
  },
  {
    "pageContent": "r(string name, ParameterTypes type, object value, double minValue, double maxValue)\npublic Parameter(string name, Type enumType)\n```\n\nThree constructor overloads provide flexibility in parameter creation:\n- Basic constructor with name, type, and initial value\n- Extended constructor allowing optimization range specification\n- Enum-based constructor for creating string choice parameters\n\n## Core Properties\n\n### Name\n```csharp\npublic string Name\n```\nThe descriptive name of the parameter.\n\n### Type\n\n\n```csharp\npublic ParameterTypes Type\n\n```",
    "metadata": {
      "id": "parameter",
      "title": "parameter",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/parameter.md",
      "chunkIndex": "code-context-2",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public object Value\n",
    "metadata": {
      "id": "parameter",
      "title": "parameter",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/parameter.md",
      "chunkIndex": "code-3",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "e)\n```\n\nThree constructor overloads provide flexibility in parameter creation:\n- Basic constructor with name, type, and initial value\n- Extended constructor allowing optimization range specification\n- Enum-based constructor for creating string choice parameters\n\n## Core Properties\n\n### Name\n```csharp\npublic string Name\n```\nThe descriptive name of the parameter.\n\n### Type\n```csharp\npublic ParameterTypes Type\n```\nDefines the data type of the parameter (e.g., Double, Int32, TimeSeries).\n\n### Value\n"
    }
  },
  {
    "pageContent": "e)\n```\n\nThree constructor overloads provide flexibility in parameter creation:\n- Basic constructor with name, type, and initial value\n- Extended constructor allowing optimization range specification\n- Enum-based constructor for creating string choice parameters\n\n## Core Properties\n\n### Name\n```csharp\npublic string Name\n```\nThe descriptive name of the parameter.\n\n### Type\n```csharp\npublic ParameterTypes Type\n```\nDefines the data type of the parameter (e.g., Double, Int32, TimeSeries).\n\n### Value\n\n\n```csharp\npublic object Value\n\n```",
    "metadata": {
      "id": "parameter",
      "title": "parameter",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/parameter.md",
      "chunkIndex": "code-context-3",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public object DefaultValue\n",
    "metadata": {
      "id": "parameter",
      "title": "parameter",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/parameter.md",
      "chunkIndex": "code-4",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "onstructor with name, type, and initial value\n- Extended constructor allowing optimization range specification\n- Enum-based constructor for creating string choice parameters\n\n## Core Properties\n\n### Name\n```csharp\npublic string Name\n```\nThe descriptive name of the parameter.\n\n### Type\n```csharp\npublic ParameterTypes Type\n```\nDefines the data type of the parameter (e.g., Double, Int32, TimeSeries).\n\n### Value\n```csharp\npublic object Value\n```\nThe current value of the parameter.\n\n### DefaultValue\n"
    }
  },
  {
    "pageContent": "onstructor with name, type, and initial value\n- Extended constructor allowing optimization range specification\n- Enum-based constructor for creating string choice parameters\n\n## Core Properties\n\n### Name\n```csharp\npublic string Name\n```\nThe descriptive name of the parameter.\n\n### Type\n```csharp\npublic ParameterTypes Type\n```\nDefines the data type of the parameter (e.g., Double, Int32, TimeSeries).\n\n### Value\n```csharp\npublic object Value\n```\nThe current value of the parameter.\n\n### DefaultValue\n\n\n```csharp\npublic object DefaultValue\n\n```",
    "metadata": {
      "id": "parameter",
      "title": "parameter",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/parameter.md",
      "chunkIndex": "code-context-4",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public double MinValue\n",
    "metadata": {
      "id": "parameter",
      "title": "parameter",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/parameter.md",
      "chunkIndex": "code-5",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ing string choice parameters\n\n## Core Properties\n\n### Name\n```csharp\npublic string Name\n```\nThe descriptive name of the parameter.\n\n### Type\n```csharp\npublic ParameterTypes Type\n```\nDefines the data type of the parameter (e.g., Double, Int32, TimeSeries).\n\n### Value\n```csharp\npublic object Value\n```\nThe current value of the parameter.\n\n### DefaultValue\n```csharp\npublic object DefaultValue\n```\nThe initial value established when the parameter was created.\n\n## Optimization Properties\n\n### MinValue\n"
    }
  },
  {
    "pageContent": "ing string choice parameters\n\n## Core Properties\n\n### Name\n```csharp\npublic string Name\n```\nThe descriptive name of the parameter.\n\n### Type\n```csharp\npublic ParameterTypes Type\n```\nDefines the data type of the parameter (e.g., Double, Int32, TimeSeries).\n\n### Value\n```csharp\npublic object Value\n```\nThe current value of the parameter.\n\n### DefaultValue\n```csharp\npublic object DefaultValue\n```\nThe initial value established when the parameter was created.\n\n## Optimization Properties\n\n### MinValue\n\n\n```csharp\npublic double MinValue\n\n```",
    "metadata": {
      "id": "parameter",
      "title": "parameter",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/parameter.md",
      "chunkIndex": "code-context-5",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public double MaxValue\n",
    "metadata": {
      "id": "parameter",
      "title": "parameter",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/parameter.md",
      "chunkIndex": "code-6",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "he descriptive name of the parameter.\n\n### Type\n```csharp\npublic ParameterTypes Type\n```\nDefines the data type of the parameter (e.g., Double, Int32, TimeSeries).\n\n### Value\n```csharp\npublic object Value\n```\nThe current value of the parameter.\n\n### DefaultValue\n```csharp\npublic object DefaultValue\n```\nThe initial value established when the parameter was created.\n\n## Optimization Properties\n\n### MinValue\n```csharp\npublic double MinValue\n```\nMinimum value for parameter optimization.\n\n### MaxValue\n"
    }
  },
  {
    "pageContent": "he descriptive name of the parameter.\n\n### Type\n```csharp\npublic ParameterTypes Type\n```\nDefines the data type of the parameter (e.g., Double, Int32, TimeSeries).\n\n### Value\n```csharp\npublic object Value\n```\nThe current value of the parameter.\n\n### DefaultValue\n```csharp\npublic object DefaultValue\n```\nThe initial value established when the parameter was created.\n\n## Optimization Properties\n\n### MinValue\n```csharp\npublic double MinValue\n```\nMinimum value for parameter optimization.\n\n### MaxValue\n\n\n```csharp\npublic double MaxValue\n\n```",
    "metadata": {
      "id": "parameter",
      "title": "parameter",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/parameter.md",
      "chunkIndex": "code-context-6",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public double StepValue\n",
    "metadata": {
      "id": "parameter",
      "title": "parameter",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/parameter.md",
      "chunkIndex": "code-7",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "es the data type of the parameter (e.g., Double, Int32, TimeSeries).\n\n### Value\n```csharp\npublic object Value\n```\nThe current value of the parameter.\n\n### DefaultValue\n```csharp\npublic object DefaultValue\n```\nThe initial value established when the parameter was created.\n\n## Optimization Properties\n\n### MinValue\n```csharp\npublic double MinValue\n```\nMinimum value for parameter optimization.\n\n### MaxValue\n```csharp\npublic double MaxValue\n```\nMaximum value for parameter optimization.\n\n### StepValue\n"
    }
  },
  {
    "pageContent": "es the data type of the parameter (e.g., Double, Int32, TimeSeries).\n\n### Value\n```csharp\npublic object Value\n```\nThe current value of the parameter.\n\n### DefaultValue\n```csharp\npublic object DefaultValue\n```\nThe initial value established when the parameter was created.\n\n## Optimization Properties\n\n### MinValue\n```csharp\npublic double MinValue\n```\nMinimum value for parameter optimization.\n\n### MaxValue\n```csharp\npublic double MaxValue\n```\nMaximum value for parameter optimization.\n\n### StepValue\n\n\n```csharp\npublic double StepValue\n\n```",
    "metadata": {
      "id": "parameter",
      "title": "parameter",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/parameter.md",
      "chunkIndex": "code-context-7",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public List<double> Values\n",
    "metadata": {
      "id": "parameter",
      "title": "parameter",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/parameter.md",
      "chunkIndex": "code-8",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "blic object Value\n```\nThe current value of the parameter.\n\n### DefaultValue\n```csharp\npublic object DefaultValue\n```\nThe initial value established when the parameter was created.\n\n## Optimization Properties\n\n### MinValue\n```csharp\npublic double MinValue\n```\nMinimum value for parameter optimization.\n\n### MaxValue\n```csharp\npublic double MaxValue\n```\nMaximum value for parameter optimization.\n\n### StepValue\n```csharp\npublic double StepValue\n```\nIncrement value used during optimization.\n\n### Values\n"
    }
  },
  {
    "pageContent": "blic object Value\n```\nThe current value of the parameter.\n\n### DefaultValue\n```csharp\npublic object DefaultValue\n```\nThe initial value established when the parameter was created.\n\n## Optimization Properties\n\n### MinValue\n```csharp\npublic double MinValue\n```\nMinimum value for parameter optimization.\n\n### MaxValue\n```csharp\npublic double MaxValue\n```\nMaximum value for parameter optimization.\n\n### StepValue\n```csharp\npublic double StepValue\n```\nIncrement value used during optimization.\n\n### Values\n\n\n```csharp\npublic List<double> Values\n\n```",
    "metadata": {
      "id": "parameter",
      "title": "parameter",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/parameter.md",
      "chunkIndex": "code-context-8",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public double AsDouble\npublic int AsInt\npublic bool AsBoolean\n// ... and many more\n",
    "metadata": {
      "id": "parameter",
      "title": "parameter",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/parameter.md",
      "chunkIndex": "code-9",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": " Properties\n\n### MinValue\n```csharp\npublic double MinValue\n```\nMinimum value for parameter optimization.\n\n### MaxValue\n```csharp\npublic double MaxValue\n```\nMaximum value for parameter optimization.\n\n### StepValue\n```csharp\npublic double StepValue\n```\nIncrement value used during optimization.\n\n### Values\n```csharp\npublic List<double> Values\n```\nList of possible parameter values based on MinValue, MaxValue, and StepValue.\n\n## Type Conversion Helper Properties\n\n### AsDouble, AsInt, AsBoolean, etc.\n"
    }
  },
  {
    "pageContent": " Properties\n\n### MinValue\n```csharp\npublic double MinValue\n```\nMinimum value for parameter optimization.\n\n### MaxValue\n```csharp\npublic double MaxValue\n```\nMaximum value for parameter optimization.\n\n### StepValue\n```csharp\npublic double StepValue\n```\nIncrement value used during optimization.\n\n### Values\n```csharp\npublic List<double> Values\n```\nList of possible parameter values based on MinValue, MaxValue, and StepValue.\n\n## Type Conversion Helper Properties\n\n### AsDouble, AsInt, AsBoolean, etc.\n\n\n```csharp\npublic double AsDouble\npublic int AsInt\npublic bool AsBoolean\n// ... and many more\n\n```",
    "metadata": {
      "id": "parameter",
      "title": "parameter",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/parameter.md",
      "chunkIndex": "code-context-9",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public void AssignExplicitValues(IEnumerable<double> values)\npublic void AssignExplicitValues(params object[] vals)\n",
    "metadata": {
      "id": "parameter",
      "title": "parameter",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/parameter.md",
      "chunkIndex": "code-10",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "# StepValue\n```csharp\npublic double StepValue\n```\nIncrement value used during optimization.\n\n### Values\n```csharp\npublic List<double> Values\n```\nList of possible parameter values based on MinValue, MaxValue, and StepValue.\n\n## Type Conversion Helper Properties\n\n### AsDouble, AsInt, AsBoolean, etc.\n```csharp\npublic double AsDouble\npublic int AsInt\npublic bool AsBoolean\n// ... and many more\n```\nProvides type-safe access to parameter values for specific types.\n\n## Methods\n\n### AssignExplicitValues\n"
    }
  },
  {
    "pageContent": "# StepValue\n```csharp\npublic double StepValue\n```\nIncrement value used during optimization.\n\n### Values\n```csharp\npublic List<double> Values\n```\nList of possible parameter values based on MinValue, MaxValue, and StepValue.\n\n## Type Conversion Helper Properties\n\n### AsDouble, AsInt, AsBoolean, etc.\n```csharp\npublic double AsDouble\npublic int AsInt\npublic bool AsBoolean\n// ... and many more\n```\nProvides type-safe access to parameter values for specific types.\n\n## Methods\n\n### AssignExplicitValues\n\n\n```csharp\npublic void AssignExplicitValues(IEnumerable<double> values)\npublic void AssignExplicitValues(params object[] vals)\n\n```",
    "metadata": {
      "id": "parameter",
      "title": "parameter",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/parameter.md",
      "chunkIndex": "code-context-10",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public void AssignFibonacciValues()\n",
    "metadata": {
      "id": "parameter",
      "title": "parameter",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/parameter.md",
      "chunkIndex": "code-11",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "nd StepValue.\n\n## Type Conversion Helper Properties\n\n### AsDouble, AsInt, AsBoolean, etc.\n```csharp\npublic double AsDouble\npublic int AsInt\npublic bool AsBoolean\n// ... and many more\n```\nProvides type-safe access to parameter values for specific types.\n\n## Methods\n\n### AssignExplicitValues\n```csharp\npublic void AssignExplicitValues(IEnumerable<double> values)\npublic void AssignExplicitValues(params object[] vals)\n```\nAllows manual specification of optimization values.\n\n### AssignFibonacciValues\n"
    }
  },
  {
    "pageContent": "nd StepValue.\n\n## Type Conversion Helper Properties\n\n### AsDouble, AsInt, AsBoolean, etc.\n```csharp\npublic double AsDouble\npublic int AsInt\npublic bool AsBoolean\n// ... and many more\n```\nProvides type-safe access to parameter values for specific types.\n\n## Methods\n\n### AssignExplicitValues\n```csharp\npublic void AssignExplicitValues(IEnumerable<double> values)\npublic void AssignExplicitValues(params object[] vals)\n```\nAllows manual specification of optimization values.\n\n### AssignFibonacciValues\n\n\n```csharp\npublic void AssignFibonacciValues()\n\n```",
    "metadata": {
      "id": "parameter",
      "title": "parameter",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/parameter.md",
      "chunkIndex": "code-context-11",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public void AssignPercentageValues(double percentageGain)\n",
    "metadata": {
      "id": "parameter",
      "title": "parameter",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/parameter.md",
      "chunkIndex": "code-12",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ic bool AsBoolean\n// ... and many more\n```\nProvides type-safe access to parameter values for specific types.\n\n## Methods\n\n### AssignExplicitValues\n```csharp\npublic void AssignExplicitValues(IEnumerable<double> values)\npublic void AssignExplicitValues(params object[] vals)\n```\nAllows manual specification of optimization values.\n\n### AssignFibonacciValues\n```csharp\npublic void AssignFibonacciValues()\n```\nGenerates Fibonacci sequence values within the parameter's range.\n\n### AssignPercentageValues\n"
    }
  },
  {
    "pageContent": "ic bool AsBoolean\n// ... and many more\n```\nProvides type-safe access to parameter values for specific types.\n\n## Methods\n\n### AssignExplicitValues\n```csharp\npublic void AssignExplicitValues(IEnumerable<double> values)\npublic void AssignExplicitValues(params object[] vals)\n```\nAllows manual specification of optimization values.\n\n### AssignFibonacciValues\n```csharp\npublic void AssignFibonacciValues()\n```\nGenerates Fibonacci sequence values within the parameter's range.\n\n### AssignPercentageValues\n\n\n```csharp\npublic void AssignPercentageValues(double percentageGain)\n\n```",
    "metadata": {
      "id": "parameter",
      "title": "parameter",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/parameter.md",
      "chunkIndex": "code-context-12",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public class MyTradingStrategy : UserStrategyBase\n{\n    protected override void GenerateParameters()\n    {\n        // Basic parameter\n        AddParameter(\"RSI Period\", ParameterType.Int32, 14)\n            .Hint(\"Length of RSI calculation\");\n        \n        // Optimization-ready parameter\n        AddParameter(\"Stop Loss\", ParameterType.Double, 0.02, 0.01, 0.05)\n        {\n            StepValue = 0.01,\n            Hint(\"Percentage stop loss\")\n        };\n        \n        // Enum-based parameter\n        AddParameter(\"Trade Direction\", typeof(TradeDirection))\n            .Hint(\"Direction of trades to execute\");\n    }\n}\n",
    "metadata": {
      "id": "parameter",
      "title": "parameter",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/parameter.md",
      "chunkIndex": "code-13",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ignExplicitValues(IEnumerable<double> values)\npublic void AssignExplicitValues(params object[] vals)\n```\nAllows manual specification of optimization values.\n\n### AssignFibonacciValues\n```csharp\npublic void AssignFibonacciValues()\n```\nGenerates Fibonacci sequence values within the parameter's range.\n\n### AssignPercentageValues\n```csharp\npublic void AssignPercentageValues(double percentageGain)\n```\nGenerates logarithmic optimization values.\n\n## Usage Examples\n\n### Strategy Parameter Configuration\n"
    }
  },
  {
    "pageContent": "ignExplicitValues(IEnumerable<double> values)\npublic void AssignExplicitValues(params object[] vals)\n```\nAllows manual specification of optimization values.\n\n### AssignFibonacciValues\n```csharp\npublic void AssignFibonacciValues()\n```\nGenerates Fibonacci sequence values within the parameter's range.\n\n### AssignPercentageValues\n```csharp\npublic void AssignPercentageValues(double percentageGain)\n```\nGenerates logarithmic optimization values.\n\n## Usage Examples\n\n### Strategy Parameter Configuration\n\n\n```csharp\npublic class MyTradingStrategy : UserStrategyBase\n{\n    protected override void GenerateParameters()\n    {\n        // Basic parameter\n        AddParameter(\"RSI Period\", ParameterType.Int32, 14)\n            .Hint(\"Length of RSI calculation\");\n        \n        // Optimization-ready parameter\n        AddParameter(\"Stop Loss\", ParameterType.Double, 0.02, 0.01, 0.05)\n        {\n            StepValue = 0.01,\n            Hint(\"Percentage stop loss\")\n        };\n        \n        // Enum-based parameter\n        AddParameter(\"Trade Direction\", typeof(TradeDirection))\n            .Hint(\"Direction of trades to execute\");\n    }\n}\n\n```",
    "metadata": {
      "id": "parameter",
      "title": "parameter",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/parameter.md",
      "chunkIndex": "code-context-13",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public class CustomIndicator : IndicatorBase\n{\n    protected override void GenerateParameters()\n    {\n        // Fibonacci-based optimization\n        var periodParam = AddParameter(\"Period\", ParameterType.Int32, 14, 10, 50);\n        periodParam.AssignFibonacciValues();\n        \n        // Percentage-based optimization\n        var smoothingParam = AddParameter(\"Smoothing\", ParameterType.Double, 0.5, 0.1, 1.0);\n        smoothingParam.AssignPercentageValues(0.2);\n        \n        // Explicit value assignment\n        var thresholdParam = AddParameter(\"Threshold\", ParameterType.Double, 0.5);\n        thresholdParam.AssignExplicitValues(0.3, 0.5, 0.7, 1.0);\n    }\n}\n",
    "metadata": {
      "id": "parameter",
      "title": "parameter",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/parameter.md",
      "chunkIndex": "code-14",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "arameterType.Int32, 14)\n            .Hint(\"Length of RSI calculation\");\n        \n        // Optimization-ready parameter\n        AddParameter(\"Stop Loss\", ParameterType.Double, 0.02, 0.01, 0.05)\n        {\n            StepValue = 0.01,\n            Hint(\"Percentage stop loss\")\n        };\n        \n        // Enum-based parameter\n        AddParameter(\"Trade Direction\", typeof(TradeDirection))\n            .Hint(\"Direction of trades to execute\");\n    }\n}\n```\n\n### Custom Indicator Parameter Management\n"
    }
  },
  {
    "pageContent": "arameterType.Int32, 14)\n            .Hint(\"Length of RSI calculation\");\n        \n        // Optimization-ready parameter\n        AddParameter(\"Stop Loss\", ParameterType.Double, 0.02, 0.01, 0.05)\n        {\n            StepValue = 0.01,\n            Hint(\"Percentage stop loss\")\n        };\n        \n        // Enum-based parameter\n        AddParameter(\"Trade Direction\", typeof(TradeDirection))\n            .Hint(\"Direction of trades to execute\");\n    }\n}\n```\n\n### Custom Indicator Parameter Management\n\n\n```csharp\npublic class CustomIndicator : IndicatorBase\n{\n    protected override void GenerateParameters()\n    {\n        // Fibonacci-based optimization\n        var periodParam = AddParameter(\"Period\", ParameterType.Int32, 14, 10, 50);\n        periodParam.AssignFibonacciValues();\n        \n        // Percentage-based optimization\n        var smoothingParam = AddParameter(\"Smoothing\", ParameterType.Double, 0.5, 0.1, 1.0);\n        smoothingParam.AssignPercentageValues(0.2);\n        \n        // Explicit value assignment\n        var thresholdParam = AddParameter(\"Threshold\", ParameterType.Double, 0.5);\n        thresholdParam.AssignExplicitValues(0.3, 0.5, 0.7, 1.0);\n    }\n}\n\n```",
    "metadata": {
      "id": "parameter",
      "title": "parameter",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/parameter.md",
      "chunkIndex": "code-context-14",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public enum TradeMode \n{\n    Conservative,\n    Aggressive,\n    Balanced\n}\n\npublic class StrategyWithEnumParam : UserStrategyBase\n{\n    protected override void GenerateParameters()\n    {\n        // Automatically creates StringChoice parameter\n        AddParameter(typeof(TradeMode))\n            .Hint(\"Select trading aggressiveness\");\n    }\n}\n",
    "metadata": {
      "id": "parameter",
      "title": "parameter",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/parameter.md",
      "chunkIndex": "code-15",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": ".Int32, 14, 10, 50);\n        periodParam.AssignFibonacciValues();\n        \n        // Percentage-based optimization\n        var smoothingParam = AddParameter(\"Smoothing\", ParameterType.Double, 0.5, 0.1, 1.0);\n        smoothingParam.AssignPercentageValues(0.2);\n        \n        // Explicit value assignment\n        var thresholdParam = AddParameter(\"Threshold\", ParameterType.Double, 0.5);\n        thresholdParam.AssignExplicitValues(0.3, 0.5, 0.7, 1.0);\n    }\n}\n```\n\n### Enum Parameter with Choices\n"
    }
  },
  {
    "pageContent": ".Int32, 14, 10, 50);\n        periodParam.AssignFibonacciValues();\n        \n        // Percentage-based optimization\n        var smoothingParam = AddParameter(\"Smoothing\", ParameterType.Double, 0.5, 0.1, 1.0);\n        smoothingParam.AssignPercentageValues(0.2);\n        \n        // Explicit value assignment\n        var thresholdParam = AddParameter(\"Threshold\", ParameterType.Double, 0.5);\n        thresholdParam.AssignExplicitValues(0.3, 0.5, 0.7, 1.0);\n    }\n}\n```\n\n### Enum Parameter with Choices\n\n\n```csharp\npublic enum TradeMode \n{\n    Conservative,\n    Aggressive,\n    Balanced\n}\n\npublic class StrategyWithEnumParam : UserStrategyBase\n{\n    protected override void GenerateParameters()\n    {\n        // Automatically creates StringChoice parameter\n        AddParameter(typeof(TradeMode))\n            .Hint(\"Select trading aggressiveness\");\n    }\n}\n\n```",
    "metadata": {
      "id": "parameter",
      "title": "parameter",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/parameter.md",
      "chunkIndex": "code-context-15",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "# PeakTroughCalculator Class\n\n**Namespace:** WealthLab.Indicators  \n**Parent:** Object\n\nThe `PeakTroughCalculator` is a powerful utility class for detecting and analyzing peaks and troughs in time series data. It provides sophisticated methods for identifying significant price extrema and performing trend analysis.\n\n## Constructors\n\n### BarHistory Constructor\n",
    "metadata": {
      "id": "peak-trough-calculator",
      "title": "peak-trough-calculator",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/peak-trough-calculator.md",
      "chunkIndex": 0,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n### TimeSeries Constructors\n",
    "metadata": {
      "id": "peak-trough-calculator",
      "title": "peak-trough-calculator",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/peak-trough-calculator.md",
      "chunkIndex": 1,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n### Custom PeakTrough List Constructor\n",
    "metadata": {
      "id": "peak-trough-calculator",
      "title": "peak-trough-calculator",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/peak-trough-calculator.md",
      "chunkIndex": 2,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n### Reversal Types\n- `Percent`: Detect peaks/troughs after percentage reversal\n- `Point`: Detect peaks/troughs after absolute value reversal\n- `ATR`: Detect peaks/troughs based on Average True Range\n- `ATRPercent`: Detect peaks/troughs using ATR percentage\n\n## Core Properties\n\n### PeakTroughs\n",
    "metadata": {
      "id": "peak-trough-calculator",
      "title": "peak-trough-calculator",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/peak-trough-calculator.md",
      "chunkIndex": 3,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the complete list of detected peaks and troughs.\n\n## Peak and Trough Retrieval Methods\n\n### GetPeak\n",
    "metadata": {
      "id": "peak-trough-calculator",
      "title": "peak-trough-calculator",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/peak-trough-calculator.md",
      "chunkIndex": 4,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the most recent peak at the specified index.\n\n### GetTrough\n",
    "metadata": {
      "id": "peak-trough-calculator",
      "title": "peak-trough-calculator",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/peak-trough-calculator.md",
      "chunkIndex": 5,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the most recent trough at the specified index.\n\n### GetPeaksAsOf\n",
    "metadata": {
      "id": "peak-trough-calculator",
      "title": "peak-trough-calculator",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/peak-trough-calculator.md",
      "chunkIndex": 6,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nRetrieves peaks detected up to the specified index, optionally limited by age.\n\n### GetTroughsAsOf\n",
    "metadata": {
      "id": "peak-trough-calculator",
      "title": "peak-trough-calculator",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/peak-trough-calculator.md",
      "chunkIndex": 7,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nRetrieves troughs detected up to the specified index, optionally limited by age.\n\n## Trend Analysis Methods\n\n### HasRisingPeaks\n",
    "metadata": {
      "id": "peak-trough-calculator",
      "title": "peak-trough-calculator",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/peak-trough-calculator.md",
      "chunkIndex": 8,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nChecks if the most recent peak is higher than the previous peak.\n\n### HasFallingPeaks\n",
    "metadata": {
      "id": "peak-trough-calculator",
      "title": "peak-trough-calculator",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/peak-trough-calculator.md",
      "chunkIndex": 9,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nChecks if the most recent peak is lower than the previous peak.\n\n### HasRisingTroughs\n",
    "metadata": {
      "id": "peak-trough-calculator",
      "title": "peak-trough-calculator",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/peak-trough-calculator.md",
      "chunkIndex": 10,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nChecks if the most recent trough is higher than the previous trough.\n\n### HasFallingTroughs\n",
    "metadata": {
      "id": "peak-trough-calculator",
      "title": "peak-trough-calculator",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/peak-trough-calculator.md",
      "chunkIndex": 11,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nChecks if the most recent trough is lower than the previous trough.\n\n## Divergence Detection\n\n### Divergence\n",
    "metadata": {
      "id": "peak-trough-calculator",
      "title": "peak-trough-calculator",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/peak-trough-calculator.md",
      "chunkIndex": 12,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nDetects bullish or bearish divergence between peaks/troughs and price.\n\n## Trendline Methods\n\n### GetUpperTrendLine\n",
    "metadata": {
      "id": "peak-trough-calculator",
      "title": "peak-trough-calculator",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/peak-trough-calculator.md",
      "chunkIndex": 13,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nCalculates an upper trendline using the most recent peaks.\n\n### GetLowerTrendLine\n",
    "metadata": {
      "id": "peak-trough-calculator",
      "title": "peak-trough-calculator",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/peak-trough-calculator.md",
      "chunkIndex": 14,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nCalculates a lower trendline using the most recent troughs.\n\n### TrendlineEnvelope\n",
    "metadata": {
      "id": "peak-trough-calculator",
      "title": "peak-trough-calculator",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/peak-trough-calculator.md",
      "chunkIndex": 15,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nAdvanced trendline calculation with flexible parameters.\n\n## Charting Methods\n\n### DrawPeakLines\n",
    "metadata": {
      "id": "peak-trough-calculator",
      "title": "peak-trough-calculator",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/peak-trough-calculator.md",
      "chunkIndex": 16,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nDraws lines connecting confirmed peaks.\n\n### DrawTroughLines\n",
    "metadata": {
      "id": "peak-trough-calculator",
      "title": "peak-trough-calculator",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/peak-trough-calculator.md",
      "chunkIndex": 17,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nDraws lines connecting confirmed troughs.\n\n## Usage Examples\n\n### Basic Peak and Trough Detection\n",
    "metadata": {
      "id": "peak-trough-calculator",
      "title": "peak-trough-calculator",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/peak-trough-calculator.md",
      "chunkIndex": 18,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n### Divergence Detection\n",
    "metadata": {
      "id": "peak-trough-calculator",
      "title": "peak-trough-calculator",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/peak-trough-calculator.md",
      "chunkIndex": 19,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n### Trendline Analysis\n",
    "metadata": {
      "id": "peak-trough-calculator",
      "title": "peak-trough-calculator",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/peak-trough-calculator.md",
      "chunkIndex": 20,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n## Best Practices\n\n1. **Reversal Detection**\n   - Choose appropriate reversal percentages\n   - Consider market volatility\n   - Test across different market conditions\n\n2. **Performance Optimization**\n   - Use efficient reversal types\n   - Limit lookback periods\n   - Cache results when possible\n\n3. **Trend Analysis**\n   - Combine peak/trough analysis with other indicators\n   - Use multiple confirmation signals\n   - Implement robust risk management\n\n## Notes\n\n- Powerful tool for technical analysis\n- Supports multiple data series types\n- Flexible peak and trough detection\n- Useful for trend identification and trading strategies ",
    "metadata": {
      "id": "peak-trough-calculator",
      "title": "peak-trough-calculator",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/peak-trough-calculator.md",
      "chunkIndex": 21,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "public PeakTroughCalculator(\n    BarHistory source, \n    double reversal, \n    PeakTroughReversalType reversalType = PeakTroughReversalType.Percent, \n    int atrPeriod = 10\n)\n",
    "metadata": {
      "id": "peak-trough-calculator",
      "title": "peak-trough-calculator",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/peak-trough-calculator.md",
      "chunkIndex": "code-0",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "# PeakTroughCalculator Class\n\n**Namespace:** WealthLab.Indicators  \n**Parent:** Object\n\nThe `PeakTroughCalculator` is a powerful utility class for detecting and analyzing peaks and troughs in time series data. It provides sophisticated methods for identifying significant price extrema and performing trend analysis.\n\n## Constructors\n\n### BarHistory Constructor\n"
    }
  },
  {
    "pageContent": "# PeakTroughCalculator Class\n\n**Namespace:** WealthLab.Indicators  \n**Parent:** Object\n\nThe `PeakTroughCalculator` is a powerful utility class for detecting and analyzing peaks and troughs in time series data. It provides sophisticated methods for identifying significant price extrema and performing trend analysis.\n\n## Constructors\n\n### BarHistory Constructor\n\n\n```csharp\npublic PeakTroughCalculator(\n    BarHistory source, \n    double reversal, \n    PeakTroughReversalType reversalType = PeakTroughReversalType.Percent, \n    int atrPeriod = 10\n)\n\n```",
    "metadata": {
      "id": "peak-trough-calculator",
      "title": "peak-trough-calculator",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/peak-trough-calculator.md",
      "chunkIndex": "code-context-0",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public PeakTroughCalculator(\n    TimeSeries highs, \n    TimeSeries lows, \n    double reversalAmount, \n    PeakTroughReversalType reversalType = PeakTroughReversalType.Percent\n)\n\npublic PeakTroughCalculator(\n    TimeSeries source, \n    double reversal, \n    PeakTroughReversalType reversalType = PeakTroughReversalType.Percent\n)\n",
    "metadata": {
      "id": "peak-trough-calculator",
      "title": "peak-trough-calculator",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/peak-trough-calculator.md",
      "chunkIndex": "code-1",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "Object\n\nThe `PeakTroughCalculator` is a powerful utility class for detecting and analyzing peaks and troughs in time series data. It provides sophisticated methods for identifying significant price extrema and performing trend analysis.\n\n## Constructors\n\n### BarHistory Constructor\n```csharp\npublic PeakTroughCalculator(\n    BarHistory source, \n    double reversal, \n    PeakTroughReversalType reversalType = PeakTroughReversalType.Percent, \n    int atrPeriod = 10\n)\n```\n\n### TimeSeries Constructors\n"
    }
  },
  {
    "pageContent": "Object\n\nThe `PeakTroughCalculator` is a powerful utility class for detecting and analyzing peaks and troughs in time series data. It provides sophisticated methods for identifying significant price extrema and performing trend analysis.\n\n## Constructors\n\n### BarHistory Constructor\n```csharp\npublic PeakTroughCalculator(\n    BarHistory source, \n    double reversal, \n    PeakTroughReversalType reversalType = PeakTroughReversalType.Percent, \n    int atrPeriod = 10\n)\n```\n\n### TimeSeries Constructors\n\n\n```csharp\npublic PeakTroughCalculator(\n    TimeSeries highs, \n    TimeSeries lows, \n    double reversalAmount, \n    PeakTroughReversalType reversalType = PeakTroughReversalType.Percent\n)\n\npublic PeakTroughCalculator(\n    TimeSeries source, \n    double reversal, \n    PeakTroughReversalType reversalType = PeakTroughReversalType.Percent\n)\n\n```",
    "metadata": {
      "id": "peak-trough-calculator",
      "title": "peak-trough-calculator",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/peak-trough-calculator.md",
      "chunkIndex": "code-context-1",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public PeakTroughCalculator(List<PeakTrough> pts)\n",
    "metadata": {
      "id": "peak-trough-calculator",
      "title": "peak-trough-calculator",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/peak-trough-calculator.md",
      "chunkIndex": "code-2",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "eversalType reversalType = PeakTroughReversalType.Percent, \n    int atrPeriod = 10\n)\n```\n\n### TimeSeries Constructors\n```csharp\npublic PeakTroughCalculator(\n    TimeSeries highs, \n    TimeSeries lows, \n    double reversalAmount, \n    PeakTroughReversalType reversalType = PeakTroughReversalType.Percent\n)\n\npublic PeakTroughCalculator(\n    TimeSeries source, \n    double reversal, \n    PeakTroughReversalType reversalType = PeakTroughReversalType.Percent\n)\n```\n\n### Custom PeakTrough List Constructor\n"
    }
  },
  {
    "pageContent": "eversalType reversalType = PeakTroughReversalType.Percent, \n    int atrPeriod = 10\n)\n```\n\n### TimeSeries Constructors\n```csharp\npublic PeakTroughCalculator(\n    TimeSeries highs, \n    TimeSeries lows, \n    double reversalAmount, \n    PeakTroughReversalType reversalType = PeakTroughReversalType.Percent\n)\n\npublic PeakTroughCalculator(\n    TimeSeries source, \n    double reversal, \n    PeakTroughReversalType reversalType = PeakTroughReversalType.Percent\n)\n```\n\n### Custom PeakTrough List Constructor\n\n\n```csharp\npublic PeakTroughCalculator(List<PeakTrough> pts)\n\n```",
    "metadata": {
      "id": "peak-trough-calculator",
      "title": "peak-trough-calculator",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/peak-trough-calculator.md",
      "chunkIndex": "code-context-2",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public List<PeakTrough> PeakTroughs\n",
    "metadata": {
      "id": "peak-trough-calculator",
      "title": "peak-trough-calculator",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/peak-trough-calculator.md",
      "chunkIndex": "code-3",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "    double reversal, \n    PeakTroughReversalType reversalType = PeakTroughReversalType.Percent\n)\n```\n\n### Custom PeakTrough List Constructor\n```csharp\npublic PeakTroughCalculator(List<PeakTrough> pts)\n```\n\n### Reversal Types\n- `Percent`: Detect peaks/troughs after percentage reversal\n- `Point`: Detect peaks/troughs after absolute value reversal\n- `ATR`: Detect peaks/troughs based on Average True Range\n- `ATRPercent`: Detect peaks/troughs using ATR percentage\n\n## Core Properties\n\n### PeakTroughs\n"
    }
  },
  {
    "pageContent": "    double reversal, \n    PeakTroughReversalType reversalType = PeakTroughReversalType.Percent\n)\n```\n\n### Custom PeakTrough List Constructor\n```csharp\npublic PeakTroughCalculator(List<PeakTrough> pts)\n```\n\n### Reversal Types\n- `Percent`: Detect peaks/troughs after percentage reversal\n- `Point`: Detect peaks/troughs after absolute value reversal\n- `ATR`: Detect peaks/troughs based on Average True Range\n- `ATRPercent`: Detect peaks/troughs using ATR percentage\n\n## Core Properties\n\n### PeakTroughs\n\n\n```csharp\npublic List<PeakTrough> PeakTroughs\n\n```",
    "metadata": {
      "id": "peak-trough-calculator",
      "title": "peak-trough-calculator",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/peak-trough-calculator.md",
      "chunkIndex": "code-context-3",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public PeakTrough GetPeak(int idx)\n",
    "metadata": {
      "id": "peak-trough-calculator",
      "title": "peak-trough-calculator",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/peak-trough-calculator.md",
      "chunkIndex": "code-4",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "PeakTroughCalculator(List<PeakTrough> pts)\n```\n\n### Reversal Types\n- `Percent`: Detect peaks/troughs after percentage reversal\n- `Point`: Detect peaks/troughs after absolute value reversal\n- `ATR`: Detect peaks/troughs based on Average True Range\n- `ATRPercent`: Detect peaks/troughs using ATR percentage\n\n## Core Properties\n\n### PeakTroughs\n```csharp\npublic List<PeakTrough> PeakTroughs\n```\nReturns the complete list of detected peaks and troughs.\n\n## Peak and Trough Retrieval Methods\n\n### GetPeak\n"
    }
  },
  {
    "pageContent": "PeakTroughCalculator(List<PeakTrough> pts)\n```\n\n### Reversal Types\n- `Percent`: Detect peaks/troughs after percentage reversal\n- `Point`: Detect peaks/troughs after absolute value reversal\n- `ATR`: Detect peaks/troughs based on Average True Range\n- `ATRPercent`: Detect peaks/troughs using ATR percentage\n\n## Core Properties\n\n### PeakTroughs\n```csharp\npublic List<PeakTrough> PeakTroughs\n```\nReturns the complete list of detected peaks and troughs.\n\n## Peak and Trough Retrieval Methods\n\n### GetPeak\n\n\n```csharp\npublic PeakTrough GetPeak(int idx)\n\n```",
    "metadata": {
      "id": "peak-trough-calculator",
      "title": "peak-trough-calculator",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/peak-trough-calculator.md",
      "chunkIndex": "code-context-4",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public PeakTrough GetTrough(int idx)\n",
    "metadata": {
      "id": "peak-trough-calculator",
      "title": "peak-trough-calculator",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/peak-trough-calculator.md",
      "chunkIndex": "code-5",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": " reversal\n- `Point`: Detect peaks/troughs after absolute value reversal\n- `ATR`: Detect peaks/troughs based on Average True Range\n- `ATRPercent`: Detect peaks/troughs using ATR percentage\n\n## Core Properties\n\n### PeakTroughs\n```csharp\npublic List<PeakTrough> PeakTroughs\n```\nReturns the complete list of detected peaks and troughs.\n\n## Peak and Trough Retrieval Methods\n\n### GetPeak\n```csharp\npublic PeakTrough GetPeak(int idx)\n```\nReturns the most recent peak at the specified index.\n\n### GetTrough\n"
    }
  },
  {
    "pageContent": " reversal\n- `Point`: Detect peaks/troughs after absolute value reversal\n- `ATR`: Detect peaks/troughs based on Average True Range\n- `ATRPercent`: Detect peaks/troughs using ATR percentage\n\n## Core Properties\n\n### PeakTroughs\n```csharp\npublic List<PeakTrough> PeakTroughs\n```\nReturns the complete list of detected peaks and troughs.\n\n## Peak and Trough Retrieval Methods\n\n### GetPeak\n```csharp\npublic PeakTrough GetPeak(int idx)\n```\nReturns the most recent peak at the specified index.\n\n### GetTrough\n\n\n```csharp\npublic PeakTrough GetTrough(int idx)\n\n```",
    "metadata": {
      "id": "peak-trough-calculator",
      "title": "peak-trough-calculator",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/peak-trough-calculator.md",
      "chunkIndex": "code-context-5",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public List<PeakTrough> GetPeaksAsOf(int idx, int maxAgeInDays = Int32.MaxValue)\n",
    "metadata": {
      "id": "peak-trough-calculator",
      "title": "peak-trough-calculator",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/peak-trough-calculator.md",
      "chunkIndex": "code-6",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "Range\n- `ATRPercent`: Detect peaks/troughs using ATR percentage\n\n## Core Properties\n\n### PeakTroughs\n```csharp\npublic List<PeakTrough> PeakTroughs\n```\nReturns the complete list of detected peaks and troughs.\n\n## Peak and Trough Retrieval Methods\n\n### GetPeak\n```csharp\npublic PeakTrough GetPeak(int idx)\n```\nReturns the most recent peak at the specified index.\n\n### GetTrough\n```csharp\npublic PeakTrough GetTrough(int idx)\n```\nReturns the most recent trough at the specified index.\n\n### GetPeaksAsOf\n"
    }
  },
  {
    "pageContent": "Range\n- `ATRPercent`: Detect peaks/troughs using ATR percentage\n\n## Core Properties\n\n### PeakTroughs\n```csharp\npublic List<PeakTrough> PeakTroughs\n```\nReturns the complete list of detected peaks and troughs.\n\n## Peak and Trough Retrieval Methods\n\n### GetPeak\n```csharp\npublic PeakTrough GetPeak(int idx)\n```\nReturns the most recent peak at the specified index.\n\n### GetTrough\n```csharp\npublic PeakTrough GetTrough(int idx)\n```\nReturns the most recent trough at the specified index.\n\n### GetPeaksAsOf\n\n\n```csharp\npublic List<PeakTrough> GetPeaksAsOf(int idx, int maxAgeInDays = Int32.MaxValue)\n\n```",
    "metadata": {
      "id": "peak-trough-calculator",
      "title": "peak-trough-calculator",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/peak-trough-calculator.md",
      "chunkIndex": "code-context-6",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public List<PeakTrough> GetTroughsAsOf(int idx, int maxAgeInDays = Int32.MaxValue)\n",
    "metadata": {
      "id": "peak-trough-calculator",
      "title": "peak-trough-calculator",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/peak-trough-calculator.md",
      "chunkIndex": "code-7",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": " and troughs.\n\n## Peak and Trough Retrieval Methods\n\n### GetPeak\n```csharp\npublic PeakTrough GetPeak(int idx)\n```\nReturns the most recent peak at the specified index.\n\n### GetTrough\n```csharp\npublic PeakTrough GetTrough(int idx)\n```\nReturns the most recent trough at the specified index.\n\n### GetPeaksAsOf\n```csharp\npublic List<PeakTrough> GetPeaksAsOf(int idx, int maxAgeInDays = Int32.MaxValue)\n```\nRetrieves peaks detected up to the specified index, optionally limited by age.\n\n### GetTroughsAsOf\n"
    }
  },
  {
    "pageContent": " and troughs.\n\n## Peak and Trough Retrieval Methods\n\n### GetPeak\n```csharp\npublic PeakTrough GetPeak(int idx)\n```\nReturns the most recent peak at the specified index.\n\n### GetTrough\n```csharp\npublic PeakTrough GetTrough(int idx)\n```\nReturns the most recent trough at the specified index.\n\n### GetPeaksAsOf\n```csharp\npublic List<PeakTrough> GetPeaksAsOf(int idx, int maxAgeInDays = Int32.MaxValue)\n```\nRetrieves peaks detected up to the specified index, optionally limited by age.\n\n### GetTroughsAsOf\n\n\n```csharp\npublic List<PeakTrough> GetTroughsAsOf(int idx, int maxAgeInDays = Int32.MaxValue)\n\n```",
    "metadata": {
      "id": "peak-trough-calculator",
      "title": "peak-trough-calculator",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/peak-trough-calculator.md",
      "chunkIndex": "code-context-7",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public bool HasRisingPeaks(int idx)\n",
    "metadata": {
      "id": "peak-trough-calculator",
      "title": "peak-trough-calculator",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/peak-trough-calculator.md",
      "chunkIndex": "code-8",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "dx)\n```\nReturns the most recent trough at the specified index.\n\n### GetPeaksAsOf\n```csharp\npublic List<PeakTrough> GetPeaksAsOf(int idx, int maxAgeInDays = Int32.MaxValue)\n```\nRetrieves peaks detected up to the specified index, optionally limited by age.\n\n### GetTroughsAsOf\n```csharp\npublic List<PeakTrough> GetTroughsAsOf(int idx, int maxAgeInDays = Int32.MaxValue)\n```\nRetrieves troughs detected up to the specified index, optionally limited by age.\n\n## Trend Analysis Methods\n\n### HasRisingPeaks\n"
    }
  },
  {
    "pageContent": "dx)\n```\nReturns the most recent trough at the specified index.\n\n### GetPeaksAsOf\n```csharp\npublic List<PeakTrough> GetPeaksAsOf(int idx, int maxAgeInDays = Int32.MaxValue)\n```\nRetrieves peaks detected up to the specified index, optionally limited by age.\n\n### GetTroughsAsOf\n```csharp\npublic List<PeakTrough> GetTroughsAsOf(int idx, int maxAgeInDays = Int32.MaxValue)\n```\nRetrieves troughs detected up to the specified index, optionally limited by age.\n\n## Trend Analysis Methods\n\n### HasRisingPeaks\n\n\n```csharp\npublic bool HasRisingPeaks(int idx)\n\n```",
    "metadata": {
      "id": "peak-trough-calculator",
      "title": "peak-trough-calculator",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/peak-trough-calculator.md",
      "chunkIndex": "code-context-8",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public bool HasFallingPeaks(int idx)\n",
    "metadata": {
      "id": "peak-trough-calculator",
      "title": "peak-trough-calculator",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/peak-trough-calculator.md",
      "chunkIndex": "code-9",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": " int maxAgeInDays = Int32.MaxValue)\n```\nRetrieves peaks detected up to the specified index, optionally limited by age.\n\n### GetTroughsAsOf\n```csharp\npublic List<PeakTrough> GetTroughsAsOf(int idx, int maxAgeInDays = Int32.MaxValue)\n```\nRetrieves troughs detected up to the specified index, optionally limited by age.\n\n## Trend Analysis Methods\n\n### HasRisingPeaks\n```csharp\npublic bool HasRisingPeaks(int idx)\n```\nChecks if the most recent peak is higher than the previous peak.\n\n### HasFallingPeaks\n"
    }
  },
  {
    "pageContent": " int maxAgeInDays = Int32.MaxValue)\n```\nRetrieves peaks detected up to the specified index, optionally limited by age.\n\n### GetTroughsAsOf\n```csharp\npublic List<PeakTrough> GetTroughsAsOf(int idx, int maxAgeInDays = Int32.MaxValue)\n```\nRetrieves troughs detected up to the specified index, optionally limited by age.\n\n## Trend Analysis Methods\n\n### HasRisingPeaks\n```csharp\npublic bool HasRisingPeaks(int idx)\n```\nChecks if the most recent peak is higher than the previous peak.\n\n### HasFallingPeaks\n\n\n```csharp\npublic bool HasFallingPeaks(int idx)\n\n```",
    "metadata": {
      "id": "peak-trough-calculator",
      "title": "peak-trough-calculator",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/peak-trough-calculator.md",
      "chunkIndex": "code-context-9",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public bool HasRisingTroughs(int idx)\n",
    "metadata": {
      "id": "peak-trough-calculator",
      "title": "peak-trough-calculator",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/peak-trough-calculator.md",
      "chunkIndex": "code-10",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "f\n```csharp\npublic List<PeakTrough> GetTroughsAsOf(int idx, int maxAgeInDays = Int32.MaxValue)\n```\nRetrieves troughs detected up to the specified index, optionally limited by age.\n\n## Trend Analysis Methods\n\n### HasRisingPeaks\n```csharp\npublic bool HasRisingPeaks(int idx)\n```\nChecks if the most recent peak is higher than the previous peak.\n\n### HasFallingPeaks\n```csharp\npublic bool HasFallingPeaks(int idx)\n```\nChecks if the most recent peak is lower than the previous peak.\n\n### HasRisingTroughs\n"
    }
  },
  {
    "pageContent": "f\n```csharp\npublic List<PeakTrough> GetTroughsAsOf(int idx, int maxAgeInDays = Int32.MaxValue)\n```\nRetrieves troughs detected up to the specified index, optionally limited by age.\n\n## Trend Analysis Methods\n\n### HasRisingPeaks\n```csharp\npublic bool HasRisingPeaks(int idx)\n```\nChecks if the most recent peak is higher than the previous peak.\n\n### HasFallingPeaks\n```csharp\npublic bool HasFallingPeaks(int idx)\n```\nChecks if the most recent peak is lower than the previous peak.\n\n### HasRisingTroughs\n\n\n```csharp\npublic bool HasRisingTroughs(int idx)\n\n```",
    "metadata": {
      "id": "peak-trough-calculator",
      "title": "peak-trough-calculator",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/peak-trough-calculator.md",
      "chunkIndex": "code-context-10",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public bool HasFallingTroughs(int idx)\n",
    "metadata": {
      "id": "peak-trough-calculator",
      "title": "peak-trough-calculator",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/peak-trough-calculator.md",
      "chunkIndex": "code-11",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "d index, optionally limited by age.\n\n## Trend Analysis Methods\n\n### HasRisingPeaks\n```csharp\npublic bool HasRisingPeaks(int idx)\n```\nChecks if the most recent peak is higher than the previous peak.\n\n### HasFallingPeaks\n```csharp\npublic bool HasFallingPeaks(int idx)\n```\nChecks if the most recent peak is lower than the previous peak.\n\n### HasRisingTroughs\n```csharp\npublic bool HasRisingTroughs(int idx)\n```\nChecks if the most recent trough is higher than the previous trough.\n\n### HasFallingTroughs\n"
    }
  },
  {
    "pageContent": "d index, optionally limited by age.\n\n## Trend Analysis Methods\n\n### HasRisingPeaks\n```csharp\npublic bool HasRisingPeaks(int idx)\n```\nChecks if the most recent peak is higher than the previous peak.\n\n### HasFallingPeaks\n```csharp\npublic bool HasFallingPeaks(int idx)\n```\nChecks if the most recent peak is lower than the previous peak.\n\n### HasRisingTroughs\n```csharp\npublic bool HasRisingTroughs(int idx)\n```\nChecks if the most recent trough is higher than the previous trough.\n\n### HasFallingTroughs\n\n\n```csharp\npublic bool HasFallingTroughs(int idx)\n\n```",
    "metadata": {
      "id": "peak-trough-calculator",
      "title": "peak-trough-calculator",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/peak-trough-calculator.md",
      "chunkIndex": "code-context-11",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public DivergenceType Divergence(\n    int bar, \n    TimeSeries price, \n    out PeakTrough pt, \n    out PeakTrough pt2\n)\n",
    "metadata": {
      "id": "peak-trough-calculator",
      "title": "peak-trough-calculator",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/peak-trough-calculator.md",
      "chunkIndex": "code-12",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "k is higher than the previous peak.\n\n### HasFallingPeaks\n```csharp\npublic bool HasFallingPeaks(int idx)\n```\nChecks if the most recent peak is lower than the previous peak.\n\n### HasRisingTroughs\n```csharp\npublic bool HasRisingTroughs(int idx)\n```\nChecks if the most recent trough is higher than the previous trough.\n\n### HasFallingTroughs\n```csharp\npublic bool HasFallingTroughs(int idx)\n```\nChecks if the most recent trough is lower than the previous trough.\n\n## Divergence Detection\n\n### Divergence\n"
    }
  },
  {
    "pageContent": "k is higher than the previous peak.\n\n### HasFallingPeaks\n```csharp\npublic bool HasFallingPeaks(int idx)\n```\nChecks if the most recent peak is lower than the previous peak.\n\n### HasRisingTroughs\n```csharp\npublic bool HasRisingTroughs(int idx)\n```\nChecks if the most recent trough is higher than the previous trough.\n\n### HasFallingTroughs\n```csharp\npublic bool HasFallingTroughs(int idx)\n```\nChecks if the most recent trough is lower than the previous trough.\n\n## Divergence Detection\n\n### Divergence\n\n\n```csharp\npublic DivergenceType Divergence(\n    int bar, \n    TimeSeries price, \n    out PeakTrough pt, \n    out PeakTrough pt2\n)\n\n```",
    "metadata": {
      "id": "peak-trough-calculator",
      "title": "peak-trough-calculator",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/peak-trough-calculator.md",
      "chunkIndex": "code-context-12",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public TrendLine GetUpperTrendLine(int idx, int numPeaks)\n",
    "metadata": {
      "id": "peak-trough-calculator",
      "title": "peak-trough-calculator",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/peak-trough-calculator.md",
      "chunkIndex": "code-13",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ks if the most recent trough is higher than the previous trough.\n\n### HasFallingTroughs\n```csharp\npublic bool HasFallingTroughs(int idx)\n```\nChecks if the most recent trough is lower than the previous trough.\n\n## Divergence Detection\n\n### Divergence\n```csharp\npublic DivergenceType Divergence(\n    int bar, \n    TimeSeries price, \n    out PeakTrough pt, \n    out PeakTrough pt2\n)\n```\nDetects bullish or bearish divergence between peaks/troughs and price.\n\n## Trendline Methods\n\n### GetUpperTrendLine\n"
    }
  },
  {
    "pageContent": "ks if the most recent trough is higher than the previous trough.\n\n### HasFallingTroughs\n```csharp\npublic bool HasFallingTroughs(int idx)\n```\nChecks if the most recent trough is lower than the previous trough.\n\n## Divergence Detection\n\n### Divergence\n```csharp\npublic DivergenceType Divergence(\n    int bar, \n    TimeSeries price, \n    out PeakTrough pt, \n    out PeakTrough pt2\n)\n```\nDetects bullish or bearish divergence between peaks/troughs and price.\n\n## Trendline Methods\n\n### GetUpperTrendLine\n\n\n```csharp\npublic TrendLine GetUpperTrendLine(int idx, int numPeaks)\n\n```",
    "metadata": {
      "id": "peak-trough-calculator",
      "title": "peak-trough-calculator",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/peak-trough-calculator.md",
      "chunkIndex": "code-context-13",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public TrendLine GetLowerTrendLine(int idx, int numTroughs)\n",
    "metadata": {
      "id": "peak-trough-calculator",
      "title": "peak-trough-calculator",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/peak-trough-calculator.md",
      "chunkIndex": "code-14",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": " most recent trough is lower than the previous trough.\n\n## Divergence Detection\n\n### Divergence\n```csharp\npublic DivergenceType Divergence(\n    int bar, \n    TimeSeries price, \n    out PeakTrough pt, \n    out PeakTrough pt2\n)\n```\nDetects bullish or bearish divergence between peaks/troughs and price.\n\n## Trendline Methods\n\n### GetUpperTrendLine\n```csharp\npublic TrendLine GetUpperTrendLine(int idx, int numPeaks)\n```\nCalculates an upper trendline using the most recent peaks.\n\n### GetLowerTrendLine\n"
    }
  },
  {
    "pageContent": " most recent trough is lower than the previous trough.\n\n## Divergence Detection\n\n### Divergence\n```csharp\npublic DivergenceType Divergence(\n    int bar, \n    TimeSeries price, \n    out PeakTrough pt, \n    out PeakTrough pt2\n)\n```\nDetects bullish or bearish divergence between peaks/troughs and price.\n\n## Trendline Methods\n\n### GetUpperTrendLine\n```csharp\npublic TrendLine GetUpperTrendLine(int idx, int numPeaks)\n```\nCalculates an upper trendline using the most recent peaks.\n\n### GetLowerTrendLine\n\n\n```csharp\npublic TrendLine GetLowerTrendLine(int idx, int numTroughs)\n\n```",
    "metadata": {
      "id": "peak-trough-calculator",
      "title": "peak-trough-calculator",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/peak-trough-calculator.md",
      "chunkIndex": "code-context-14",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public TrendLine TrendlineEnvelope(\n    BarHistory bars, \n    int idx, \n    PeakTroughType ptType, \n    int points, \n    bool useDescendingPeakTroughs, \n    double allowableIncursionPct = 3, \n    bool useLog = false, \n    int maxLookbackDays = 1000\n)\n",
    "metadata": {
      "id": "peak-trough-calculator",
      "title": "peak-trough-calculator",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/peak-trough-calculator.md",
      "chunkIndex": "code-15",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": " TimeSeries price, \n    out PeakTrough pt, \n    out PeakTrough pt2\n)\n```\nDetects bullish or bearish divergence between peaks/troughs and price.\n\n## Trendline Methods\n\n### GetUpperTrendLine\n```csharp\npublic TrendLine GetUpperTrendLine(int idx, int numPeaks)\n```\nCalculates an upper trendline using the most recent peaks.\n\n### GetLowerTrendLine\n```csharp\npublic TrendLine GetLowerTrendLine(int idx, int numTroughs)\n```\nCalculates a lower trendline using the most recent troughs.\n\n### TrendlineEnvelope\n"
    }
  },
  {
    "pageContent": " TimeSeries price, \n    out PeakTrough pt, \n    out PeakTrough pt2\n)\n```\nDetects bullish or bearish divergence between peaks/troughs and price.\n\n## Trendline Methods\n\n### GetUpperTrendLine\n```csharp\npublic TrendLine GetUpperTrendLine(int idx, int numPeaks)\n```\nCalculates an upper trendline using the most recent peaks.\n\n### GetLowerTrendLine\n```csharp\npublic TrendLine GetLowerTrendLine(int idx, int numTroughs)\n```\nCalculates a lower trendline using the most recent troughs.\n\n### TrendlineEnvelope\n\n\n```csharp\npublic TrendLine TrendlineEnvelope(\n    BarHistory bars, \n    int idx, \n    PeakTroughType ptType, \n    int points, \n    bool useDescendingPeakTroughs, \n    double allowableIncursionPct = 3, \n    bool useLog = false, \n    int maxLookbackDays = 1000\n)\n\n```",
    "metadata": {
      "id": "peak-trough-calculator",
      "title": "peak-trough-calculator",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/peak-trough-calculator.md",
      "chunkIndex": "code-context-15",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public void DrawPeakLines(\n    UserStrategyBase usb, \n    WLColor color = null, \n    int lineWidth = 1, \n    LineStyle lineStyle = LineStyle.Solid, \n    string paneTag = \"Price\", \n    bool behindBars = false\n)\n",
    "metadata": {
      "id": "peak-trough-calculator",
      "title": "peak-trough-calculator",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/peak-trough-calculator.md",
      "chunkIndex": "code-16",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "endLine GetLowerTrendLine(int idx, int numTroughs)\n```\nCalculates a lower trendline using the most recent troughs.\n\n### TrendlineEnvelope\n```csharp\npublic TrendLine TrendlineEnvelope(\n    BarHistory bars, \n    int idx, \n    PeakTroughType ptType, \n    int points, \n    bool useDescendingPeakTroughs, \n    double allowableIncursionPct = 3, \n    bool useLog = false, \n    int maxLookbackDays = 1000\n)\n```\nAdvanced trendline calculation with flexible parameters.\n\n## Charting Methods\n\n### DrawPeakLines\n"
    }
  },
  {
    "pageContent": "endLine GetLowerTrendLine(int idx, int numTroughs)\n```\nCalculates a lower trendline using the most recent troughs.\n\n### TrendlineEnvelope\n```csharp\npublic TrendLine TrendlineEnvelope(\n    BarHistory bars, \n    int idx, \n    PeakTroughType ptType, \n    int points, \n    bool useDescendingPeakTroughs, \n    double allowableIncursionPct = 3, \n    bool useLog = false, \n    int maxLookbackDays = 1000\n)\n```\nAdvanced trendline calculation with flexible parameters.\n\n## Charting Methods\n\n### DrawPeakLines\n\n\n```csharp\npublic void DrawPeakLines(\n    UserStrategyBase usb, \n    WLColor color = null, \n    int lineWidth = 1, \n    LineStyle lineStyle = LineStyle.Solid, \n    string paneTag = \"Price\", \n    bool behindBars = false\n)\n\n```",
    "metadata": {
      "id": "peak-trough-calculator",
      "title": "peak-trough-calculator",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/peak-trough-calculator.md",
      "chunkIndex": "code-context-16",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public void DrawTroughLines(\n    UserStrategyBase usb, \n    WLColor color = null, \n    int lineWidth = 1, \n    LineStyle lineStyle = LineStyle.Solid, \n    string paneTag = \"Price\", \n    bool behindBars = false\n)\n",
    "metadata": {
      "id": "peak-trough-calculator",
      "title": "peak-trough-calculator",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/peak-trough-calculator.md",
      "chunkIndex": "code-17",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ngPeakTroughs, \n    double allowableIncursionPct = 3, \n    bool useLog = false, \n    int maxLookbackDays = 1000\n)\n```\nAdvanced trendline calculation with flexible parameters.\n\n## Charting Methods\n\n### DrawPeakLines\n```csharp\npublic void DrawPeakLines(\n    UserStrategyBase usb, \n    WLColor color = null, \n    int lineWidth = 1, \n    LineStyle lineStyle = LineStyle.Solid, \n    string paneTag = \"Price\", \n    bool behindBars = false\n)\n```\nDraws lines connecting confirmed peaks.\n\n### DrawTroughLines\n"
    }
  },
  {
    "pageContent": "ngPeakTroughs, \n    double allowableIncursionPct = 3, \n    bool useLog = false, \n    int maxLookbackDays = 1000\n)\n```\nAdvanced trendline calculation with flexible parameters.\n\n## Charting Methods\n\n### DrawPeakLines\n```csharp\npublic void DrawPeakLines(\n    UserStrategyBase usb, \n    WLColor color = null, \n    int lineWidth = 1, \n    LineStyle lineStyle = LineStyle.Solid, \n    string paneTag = \"Price\", \n    bool behindBars = false\n)\n```\nDraws lines connecting confirmed peaks.\n\n### DrawTroughLines\n\n\n```csharp\npublic void DrawTroughLines(\n    UserStrategyBase usb, \n    WLColor color = null, \n    int lineWidth = 1, \n    LineStyle lineStyle = LineStyle.Solid, \n    string paneTag = \"Price\", \n    bool behindBars = false\n)\n\n```",
    "metadata": {
      "id": "peak-trough-calculator",
      "title": "peak-trough-calculator",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/peak-trough-calculator.md",
      "chunkIndex": "code-context-17",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public class PeakTroughAnalyzer\n{\n    public void AnalyzePriceExtrema(BarHistory bars)\n    {\n        // Detect peaks and troughs with 5% reversal\n        var ptCalculator = new PeakTroughCalculator(bars, 5.0, PeakTroughReversalType.Percent);\n\n        // Analyze peaks\n        foreach (var peak in ptCalculator.GetPeaksAsOf(bars.Count - 1))\n        {\n            Console.WriteLine($\"Peak at {peak.PeakTroughIndex}: {peak.Value}\");\n        }\n\n        // Check trend characteristics\n        int lastIndex = bars.Count - 1;\n        bool risingPeaks = ptCalculator.HasRisingPeaks(lastIndex);\n        bool fallingTroughs = ptCalculator.HasFallingTroughs(lastIndex);\n    }\n}\n",
    "metadata": {
      "id": "peak-trough-calculator",
      "title": "peak-trough-calculator",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/peak-trough-calculator.md",
      "chunkIndex": "code-18",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "= 1, \n    LineStyle lineStyle = LineStyle.Solid, \n    string paneTag = \"Price\", \n    bool behindBars = false\n)\n```\nDraws lines connecting confirmed peaks.\n\n### DrawTroughLines\n```csharp\npublic void DrawTroughLines(\n    UserStrategyBase usb, \n    WLColor color = null, \n    int lineWidth = 1, \n    LineStyle lineStyle = LineStyle.Solid, \n    string paneTag = \"Price\", \n    bool behindBars = false\n)\n```\nDraws lines connecting confirmed troughs.\n\n## Usage Examples\n\n### Basic Peak and Trough Detection\n"
    }
  },
  {
    "pageContent": "= 1, \n    LineStyle lineStyle = LineStyle.Solid, \n    string paneTag = \"Price\", \n    bool behindBars = false\n)\n```\nDraws lines connecting confirmed peaks.\n\n### DrawTroughLines\n```csharp\npublic void DrawTroughLines(\n    UserStrategyBase usb, \n    WLColor color = null, \n    int lineWidth = 1, \n    LineStyle lineStyle = LineStyle.Solid, \n    string paneTag = \"Price\", \n    bool behindBars = false\n)\n```\nDraws lines connecting confirmed troughs.\n\n## Usage Examples\n\n### Basic Peak and Trough Detection\n\n\n```csharp\npublic class PeakTroughAnalyzer\n{\n    public void AnalyzePriceExtrema(BarHistory bars)\n    {\n        // Detect peaks and troughs with 5% reversal\n        var ptCalculator = new PeakTroughCalculator(bars, 5.0, PeakTroughReversalType.Percent);\n\n        // Analyze peaks\n        foreach (var peak in ptCalculator.GetPeaksAsOf(bars.Count - 1))\n        {\n            Console.WriteLine($\"Peak at {peak.PeakTroughIndex}: {peak.Value}\");\n        }\n\n        // Check trend characteristics\n        int lastIndex = bars.Count - 1;\n        bool risingPeaks = ptCalculator.HasRisingPeaks(lastIndex);\n        bool fallingTroughs = ptCalculator.HasFallingTroughs(lastIndex);\n    }\n}\n\n```",
    "metadata": {
      "id": "peak-trough-calculator",
      "title": "peak-trough-calculator",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/peak-trough-calculator.md",
      "chunkIndex": "code-context-18",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public class DivergenceStrategy : UserStrategyBase\n{\n    public override void Execute(BarHistory bars, int idx)\n    {\n        // Calculate RSI peaks and troughs\n        var rsiPtc = new PeakTroughCalculator(RSI.Series(bars.Close, 14), 5.0);\n\n        // Check for divergence\n        var divergenceType = rsiPtc.Divergence(idx, bars.Close, out var indicatorPt, out var pricePt);\n\n        switch (divergenceType)\n        {\n            case DivergenceType.Bullish:\n                Buy(); // Potential trend reversal\n                break;\n            case DivergenceType.Bearish:\n                Sell(); // Potential trend reversal\n                break;\n        }\n    }\n}\n",
    "metadata": {
      "id": "peak-trough-calculator",
      "title": "peak-trough-calculator",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/peak-trough-calculator.md",
      "chunkIndex": "code-19",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "bars, 5.0, PeakTroughReversalType.Percent);\n\n        // Analyze peaks\n        foreach (var peak in ptCalculator.GetPeaksAsOf(bars.Count - 1))\n        {\n            Console.WriteLine($\"Peak at {peak.PeakTroughIndex}: {peak.Value}\");\n        }\n\n        // Check trend characteristics\n        int lastIndex = bars.Count - 1;\n        bool risingPeaks = ptCalculator.HasRisingPeaks(lastIndex);\n        bool fallingTroughs = ptCalculator.HasFallingTroughs(lastIndex);\n    }\n}\n```\n\n### Divergence Detection\n"
    }
  },
  {
    "pageContent": "bars, 5.0, PeakTroughReversalType.Percent);\n\n        // Analyze peaks\n        foreach (var peak in ptCalculator.GetPeaksAsOf(bars.Count - 1))\n        {\n            Console.WriteLine($\"Peak at {peak.PeakTroughIndex}: {peak.Value}\");\n        }\n\n        // Check trend characteristics\n        int lastIndex = bars.Count - 1;\n        bool risingPeaks = ptCalculator.HasRisingPeaks(lastIndex);\n        bool fallingTroughs = ptCalculator.HasFallingTroughs(lastIndex);\n    }\n}\n```\n\n### Divergence Detection\n\n\n```csharp\npublic class DivergenceStrategy : UserStrategyBase\n{\n    public override void Execute(BarHistory bars, int idx)\n    {\n        // Calculate RSI peaks and troughs\n        var rsiPtc = new PeakTroughCalculator(RSI.Series(bars.Close, 14), 5.0);\n\n        // Check for divergence\n        var divergenceType = rsiPtc.Divergence(idx, bars.Close, out var indicatorPt, out var pricePt);\n\n        switch (divergenceType)\n        {\n            case DivergenceType.Bullish:\n                Buy(); // Potential trend reversal\n                break;\n            case DivergenceType.Bearish:\n                Sell(); // Potential trend reversal\n                break;\n        }\n    }\n}\n\n```",
    "metadata": {
      "id": "peak-trough-calculator",
      "title": "peak-trough-calculator",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/peak-trough-calculator.md",
      "chunkIndex": "code-context-19",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public class TrendlineStrategy : UserStrategyBase\n{\n    public override void Execute(BarHistory bars, int idx)\n    {\n        var ptCalculator = new PeakTroughCalculator(bars, 5.0);\n\n        // Get upper and lower trendlines\n        var upperTrendline = ptCalculator.GetUpperTrendLine(idx, 3);\n        var lowerTrendline = ptCalculator.GetLowerTrendLine(idx, 3);\n\n        // Check trendline breaks\n        if (bars.Close[idx] > upperTrendline.Value(bars.DateTimes[idx]))\n        {\n            Buy(); // Bullish trendline break\n        }\n        else if (bars.Close[idx] < lowerTrendline.Value(bars.DateTimes[idx]))\n        {\n            Sell(); // Bearish trendline break\n        }\n    }\n}\n",
    "metadata": {
      "id": "peak-trough-calculator",
      "title": "peak-trough-calculator",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/peak-trough-calculator.md",
      "chunkIndex": "code-20",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "alculator(RSI.Series(bars.Close, 14), 5.0);\n\n        // Check for divergence\n        var divergenceType = rsiPtc.Divergence(idx, bars.Close, out var indicatorPt, out var pricePt);\n\n        switch (divergenceType)\n        {\n            case DivergenceType.Bullish:\n                Buy(); // Potential trend reversal\n                break;\n            case DivergenceType.Bearish:\n                Sell(); // Potential trend reversal\n                break;\n        }\n    }\n}\n```\n\n### Trendline Analysis\n"
    }
  },
  {
    "pageContent": "alculator(RSI.Series(bars.Close, 14), 5.0);\n\n        // Check for divergence\n        var divergenceType = rsiPtc.Divergence(idx, bars.Close, out var indicatorPt, out var pricePt);\n\n        switch (divergenceType)\n        {\n            case DivergenceType.Bullish:\n                Buy(); // Potential trend reversal\n                break;\n            case DivergenceType.Bearish:\n                Sell(); // Potential trend reversal\n                break;\n        }\n    }\n}\n```\n\n### Trendline Analysis\n\n\n```csharp\npublic class TrendlineStrategy : UserStrategyBase\n{\n    public override void Execute(BarHistory bars, int idx)\n    {\n        var ptCalculator = new PeakTroughCalculator(bars, 5.0);\n\n        // Get upper and lower trendlines\n        var upperTrendline = ptCalculator.GetUpperTrendLine(idx, 3);\n        var lowerTrendline = ptCalculator.GetLowerTrendLine(idx, 3);\n\n        // Check trendline breaks\n        if (bars.Close[idx] > upperTrendline.Value(bars.DateTimes[idx]))\n        {\n            Buy(); // Bullish trendline break\n        }\n        else if (bars.Close[idx] < lowerTrendline.Value(bars.DateTimes[idx]))\n        {\n            Sell(); // Bearish trendline break\n        }\n    }\n}\n\n```",
    "metadata": {
      "id": "peak-trough-calculator",
      "title": "peak-trough-calculator",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/peak-trough-calculator.md",
      "chunkIndex": "code-context-20",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "# PeakTrough Class\n\n**Namespace:** WealthLab.Indicators  \n**Parent:** Object\n\nThe `PeakTrough` class represents a detected peak or trough in time series data, typically identified by the `PeakTroughCalculator` utility class. It provides detailed information about the location, type, and value of significant price extrema.\n\n## Properties\n\n### DetectedAtIndex\n",
    "metadata": {
      "id": "peak-trough",
      "title": "peak-trough",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/peak-trough.md",
      "chunkIndex": 0,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nThe index where the peak or trough was actually detected. Since peaks and troughs are detected after reversals, this index will always be later than the actual index of the peak or trough apex/nadir.\n\n### PeakTroughIndex\n",
    "metadata": {
      "id": "peak-trough",
      "title": "peak-trough",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/peak-trough.md",
      "chunkIndex": 1,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nThe precise index of the peak's actual apex or the trough's actual nadir.\n\n**Note:** This property is equivalent to `XIndex`.\n\n### Type\n",
    "metadata": {
      "id": "peak-trough",
      "title": "peak-trough",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/peak-trough.md",
      "chunkIndex": 2,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nSpecifies the type of extremum, which can be either:\n- `PeakTroughType.Peak`: A local maximum\n- `PeakTroughType.Trough`: A local minimum\n\n### Value\n",
    "metadata": {
      "id": "peak-trough",
      "title": "peak-trough",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/peak-trough.md",
      "chunkIndex": 3,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nThe apex value of the peak or the nadir value of the trough.\n\n**Note:** This property is equivalent to `YValue`.\n\n## Usage Examples\n\n### Basic Peak and Trough Detection\n",
    "metadata": {
      "id": "peak-trough",
      "title": "peak-trough",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/peak-trough.md",
      "chunkIndex": 4,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n### Trading Strategy with Peak/Trough Analysis\n",
    "metadata": {
      "id": "peak-trough",
      "title": "peak-trough",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/peak-trough.md",
      "chunkIndex": 5,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n### Advanced Extrema Analysis\n",
    "metadata": {
      "id": "peak-trough",
      "title": "peak-trough",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/peak-trough.md",
      "chunkIndex": 6,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n## Best Practices\n\n1. **Extrema Detection**\n   - Use appropriate time series and parameters for peak/trough calculation\n   - Consider different lookback periods and sensitivity settings\n   - Validate results across multiple market conditions\n\n2. **Index Handling**\n   - Be aware of the difference between `DetectedAtIndex` and `PeakTroughIndex`\n   - Handle edge cases near the beginning or end of time series\n   - Consider performance when processing large datasets\n\n3. **Trading Strategies**\n   - Don't rely solely on peak/trough detection\n   - Combine with other technical indicators\n   - Implement robust risk management\n\n## Notes\n\n- Part of WealthLab's technical analysis toolkit\n- Useful for trend analysis and market cycle identification\n- Supports both price and custom time series analysis\n- Provides flexible extrema detection mechanisms ",
    "metadata": {
      "id": "peak-trough",
      "title": "peak-trough",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/peak-trough.md",
      "chunkIndex": 7,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "public int DetectedAtIndex\n",
    "metadata": {
      "id": "peak-trough",
      "title": "peak-trough",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/peak-trough.md",
      "chunkIndex": "code-0",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "# PeakTrough Class\n\n**Namespace:** WealthLab.Indicators  \n**Parent:** Object\n\nThe `PeakTrough` class represents a detected peak or trough in time series data, typically identified by the `PeakTroughCalculator` utility class. It provides detailed information about the location, type, and value of significant price extrema.\n\n## Properties\n\n### DetectedAtIndex\n"
    }
  },
  {
    "pageContent": "# PeakTrough Class\n\n**Namespace:** WealthLab.Indicators  \n**Parent:** Object\n\nThe `PeakTrough` class represents a detected peak or trough in time series data, typically identified by the `PeakTroughCalculator` utility class. It provides detailed information about the location, type, and value of significant price extrema.\n\n## Properties\n\n### DetectedAtIndex\n\n\n```csharp\npublic int DetectedAtIndex\n\n```",
    "metadata": {
      "id": "peak-trough",
      "title": "peak-trough",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/peak-trough.md",
      "chunkIndex": "code-context-0",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public int PeakTroughIndex\n",
    "metadata": {
      "id": "peak-trough",
      "title": "peak-trough",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/peak-trough.md",
      "chunkIndex": "code-1",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": " peak or trough in time series data, typically identified by the `PeakTroughCalculator` utility class. It provides detailed information about the location, type, and value of significant price extrema.\n\n## Properties\n\n### DetectedAtIndex\n```csharp\npublic int DetectedAtIndex\n```\nThe index where the peak or trough was actually detected. Since peaks and troughs are detected after reversals, this index will always be later than the actual index of the peak or trough apex/nadir.\n\n### PeakTroughIndex\n"
    }
  },
  {
    "pageContent": " peak or trough in time series data, typically identified by the `PeakTroughCalculator` utility class. It provides detailed information about the location, type, and value of significant price extrema.\n\n## Properties\n\n### DetectedAtIndex\n```csharp\npublic int DetectedAtIndex\n```\nThe index where the peak or trough was actually detected. Since peaks and troughs are detected after reversals, this index will always be later than the actual index of the peak or trough apex/nadir.\n\n### PeakTroughIndex\n\n\n```csharp\npublic int PeakTroughIndex\n\n```",
    "metadata": {
      "id": "peak-trough",
      "title": "peak-trough",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/peak-trough.md",
      "chunkIndex": "code-context-1",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public PeakTroughType Type\n",
    "metadata": {
      "id": "peak-trough",
      "title": "peak-trough",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/peak-trough.md",
      "chunkIndex": "code-2",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "gnificant price extrema.\n\n## Properties\n\n### DetectedAtIndex\n```csharp\npublic int DetectedAtIndex\n```\nThe index where the peak or trough was actually detected. Since peaks and troughs are detected after reversals, this index will always be later than the actual index of the peak or trough apex/nadir.\n\n### PeakTroughIndex\n```csharp\npublic int PeakTroughIndex\n```\nThe precise index of the peak's actual apex or the trough's actual nadir.\n\n**Note:** This property is equivalent to `XIndex`.\n\n### Type\n"
    }
  },
  {
    "pageContent": "gnificant price extrema.\n\n## Properties\n\n### DetectedAtIndex\n```csharp\npublic int DetectedAtIndex\n```\nThe index where the peak or trough was actually detected. Since peaks and troughs are detected after reversals, this index will always be later than the actual index of the peak or trough apex/nadir.\n\n### PeakTroughIndex\n```csharp\npublic int PeakTroughIndex\n```\nThe precise index of the peak's actual apex or the trough's actual nadir.\n\n**Note:** This property is equivalent to `XIndex`.\n\n### Type\n\n\n```csharp\npublic PeakTroughType Type\n\n```",
    "metadata": {
      "id": "peak-trough",
      "title": "peak-trough",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/peak-trough.md",
      "chunkIndex": "code-context-2",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public double Value\n",
    "metadata": {
      "id": "peak-trough",
      "title": "peak-trough",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/peak-trough.md",
      "chunkIndex": "code-3",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "etected after reversals, this index will always be later than the actual index of the peak or trough apex/nadir.\n\n### PeakTroughIndex\n```csharp\npublic int PeakTroughIndex\n```\nThe precise index of the peak's actual apex or the trough's actual nadir.\n\n**Note:** This property is equivalent to `XIndex`.\n\n### Type\n```csharp\npublic PeakTroughType Type\n```\nSpecifies the type of extremum, which can be either:\n- `PeakTroughType.Peak`: A local maximum\n- `PeakTroughType.Trough`: A local minimum\n\n### Value\n"
    }
  },
  {
    "pageContent": "etected after reversals, this index will always be later than the actual index of the peak or trough apex/nadir.\n\n### PeakTroughIndex\n```csharp\npublic int PeakTroughIndex\n```\nThe precise index of the peak's actual apex or the trough's actual nadir.\n\n**Note:** This property is equivalent to `XIndex`.\n\n### Type\n```csharp\npublic PeakTroughType Type\n```\nSpecifies the type of extremum, which can be either:\n- `PeakTroughType.Peak`: A local maximum\n- `PeakTroughType.Trough`: A local minimum\n\n### Value\n\n\n```csharp\npublic double Value\n\n```",
    "metadata": {
      "id": "peak-trough",
      "title": "peak-trough",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/peak-trough.md",
      "chunkIndex": "code-context-3",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public class PriceExtremaAnalyzer\n{\n    public void AnalyzePeaksTroughs(TimeSeries prices)\n    {\n        // Use PeakTroughCalculator to find extrema\n        var peakTroughs = PeakTroughCalculator.Calculate(prices);\n\n        foreach (var pt in peakTroughs)\n        {\n            Console.WriteLine($\"Extremum Type: {pt.Type}\");\n            Console.WriteLine($\"Detected Index: {pt.DetectedAtIndex}\");\n            Console.WriteLine($\"Actual Extremum Index: {pt.PeakTroughIndex}\");\n            Console.WriteLine($\"Extremum Value: {pt.Value}\");\n        }\n    }\n}\n",
    "metadata": {
      "id": "peak-trough",
      "title": "peak-trough",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/peak-trough.md",
      "chunkIndex": "code-4",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "k's actual apex or the trough's actual nadir.\n\n**Note:** This property is equivalent to `XIndex`.\n\n### Type\n```csharp\npublic PeakTroughType Type\n```\nSpecifies the type of extremum, which can be either:\n- `PeakTroughType.Peak`: A local maximum\n- `PeakTroughType.Trough`: A local minimum\n\n### Value\n```csharp\npublic double Value\n```\nThe apex value of the peak or the nadir value of the trough.\n\n**Note:** This property is equivalent to `YValue`.\n\n## Usage Examples\n\n### Basic Peak and Trough Detection\n"
    }
  },
  {
    "pageContent": "k's actual apex or the trough's actual nadir.\n\n**Note:** This property is equivalent to `XIndex`.\n\n### Type\n```csharp\npublic PeakTroughType Type\n```\nSpecifies the type of extremum, which can be either:\n- `PeakTroughType.Peak`: A local maximum\n- `PeakTroughType.Trough`: A local minimum\n\n### Value\n```csharp\npublic double Value\n```\nThe apex value of the peak or the nadir value of the trough.\n\n**Note:** This property is equivalent to `YValue`.\n\n## Usage Examples\n\n### Basic Peak and Trough Detection\n\n\n```csharp\npublic class PriceExtremaAnalyzer\n{\n    public void AnalyzePeaksTroughs(TimeSeries prices)\n    {\n        // Use PeakTroughCalculator to find extrema\n        var peakTroughs = PeakTroughCalculator.Calculate(prices);\n\n        foreach (var pt in peakTroughs)\n        {\n            Console.WriteLine($\"Extremum Type: {pt.Type}\");\n            Console.WriteLine($\"Detected Index: {pt.DetectedAtIndex}\");\n            Console.WriteLine($\"Actual Extremum Index: {pt.PeakTroughIndex}\");\n            Console.WriteLine($\"Extremum Value: {pt.Value}\");\n        }\n    }\n}\n\n```",
    "metadata": {
      "id": "peak-trough",
      "title": "peak-trough",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/peak-trough.md",
      "chunkIndex": "code-context-4",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public class PeakTroughTradingStrategy : UserStrategyBase\n{\n    public override void Execute(BarHistory bars, int idx)\n    {\n        // Calculate peaks and troughs\n        var peakTroughs = PeakTroughCalculator.Calculate(bars.Close);\n\n        // Find recent peaks and troughs\n        var recentPeaks = peakTroughs\n            .Where(pt => pt.Type == PeakTroughType.Peak && \n                         pt.DetectedAtIndex <= idx)\n            .OrderByDescending(pt => pt.DetectedAtIndex)\n            .Take(3)\n            .ToList();\n\n        var recentTroughs = peakTroughs\n            .Where(pt => pt.Type == PeakTroughType.Trough && \n                         pt.DetectedAtIndex <= idx)\n            .OrderByDescending(pt => pt.DetectedAtIndex)\n            .Take(3)\n            .ToList();\n\n        // Example trading logic based on peaks and troughs\n        if (recentPeaks.Any() && recentTroughs.Any())\n        {\n            var latestPeak = recentPeaks.First();\n            var latestTrough = recentTroughs.First();\n\n            // Check for potential trend reversal\n            if (latestPeak.Value > bars.Close[idx] && \n                latestTrough.Value < bars.Close[idx])\n            {\n                // Potential trend change signal\n                Buy();\n            }\n        }\n    }\n}\n",
    "metadata": {
      "id": "peak-trough",
      "title": "peak-trough",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/peak-trough.md",
      "chunkIndex": "code-5",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "se PeakTroughCalculator to find extrema\n        var peakTroughs = PeakTroughCalculator.Calculate(prices);\n\n        foreach (var pt in peakTroughs)\n        {\n            Console.WriteLine($\"Extremum Type: {pt.Type}\");\n            Console.WriteLine($\"Detected Index: {pt.DetectedAtIndex}\");\n            Console.WriteLine($\"Actual Extremum Index: {pt.PeakTroughIndex}\");\n            Console.WriteLine($\"Extremum Value: {pt.Value}\");\n        }\n    }\n}\n```\n\n### Trading Strategy with Peak/Trough Analysis\n"
    }
  },
  {
    "pageContent": "se PeakTroughCalculator to find extrema\n        var peakTroughs = PeakTroughCalculator.Calculate(prices);\n\n        foreach (var pt in peakTroughs)\n        {\n            Console.WriteLine($\"Extremum Type: {pt.Type}\");\n            Console.WriteLine($\"Detected Index: {pt.DetectedAtIndex}\");\n            Console.WriteLine($\"Actual Extremum Index: {pt.PeakTroughIndex}\");\n            Console.WriteLine($\"Extremum Value: {pt.Value}\");\n        }\n    }\n}\n```\n\n### Trading Strategy with Peak/Trough Analysis\n\n\n```csharp\npublic class PeakTroughTradingStrategy : UserStrategyBase\n{\n    public override void Execute(BarHistory bars, int idx)\n    {\n        // Calculate peaks and troughs\n        var peakTroughs = PeakTroughCalculator.Calculate(bars.Close);\n\n        // Find recent peaks and troughs\n        var recentPeaks = peakTroughs\n            .Where(pt => pt.Type == PeakTroughType.Peak && \n                         pt.DetectedAtIndex <= idx)\n            .OrderByDescending(pt => pt.DetectedAtIndex)\n            .Take(3)\n            .ToList();\n\n        var recentTroughs = peakTroughs\n            .Where(pt => pt.Type == PeakTroughType.Trough && \n                         pt.DetectedAtIndex <= idx)\n            .OrderByDescending(pt => pt.DetectedAtIndex)\n            .Take(3)\n            .ToList();\n\n        // Example trading logic based on peaks and troughs\n        if (recentPeaks.Any() && recentTroughs.Any())\n        {\n            var latestPeak = recentPeaks.First();\n            var latestTrough = recentTroughs.First();\n\n            // Check for potential trend reversal\n            if (latestPeak.Value > bars.Close[idx] && \n                latestTrough.Value < bars.Close[idx])\n            {\n                // Potential trend change signal\n                Buy();\n            }\n        }\n    }\n}\n\n```",
    "metadata": {
      "id": "peak-trough",
      "title": "peak-trough",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/peak-trough.md",
      "chunkIndex": "code-context-5",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public class ExtremaAnalyzer\n{\n    public void AnalyzeMarketCycles(TimeSeries prices)\n    {\n        var peakTroughs = PeakTroughCalculator.Calculate(prices);\n\n        // Analyze market cycles\n        var peaks = peakTroughs.Where(pt => pt.Type == PeakTroughType.Peak);\n        var troughs = peakTroughs.Where(pt => pt.Type == PeakTroughType.Trough);\n\n        // Calculate cycle statistics\n        var cycleLengths = peaks.Zip(peaks.Skip(1), \n            (p1, p2) => p2.PeakTroughIndex - p1.PeakTroughIndex);\n\n        var averageCycleLength = cycleLengths.Average();\n        var maxPeakValue = peaks.Max(p => p.Value);\n        var minTroughValue = troughs.Min(t => t.Value);\n\n        Console.WriteLine($\"Average Cycle Length: {averageCycleLength}\");\n        Console.WriteLine($\"Highest Peak: {maxPeakValue}\");\n        Console.WriteLine($\"Lowest Trough: {minTroughValue}\");\n    }\n}\n",
    "metadata": {
      "id": "peak-trough",
      "title": "peak-trough",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/peak-trough.md",
      "chunkIndex": "code-6",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": " peaks and troughs\n        if (recentPeaks.Any() && recentTroughs.Any())\n        {\n            var latestPeak = recentPeaks.First();\n            var latestTrough = recentTroughs.First();\n\n            // Check for potential trend reversal\n            if (latestPeak.Value > bars.Close[idx] && \n                latestTrough.Value < bars.Close[idx])\n            {\n                // Potential trend change signal\n                Buy();\n            }\n        }\n    }\n}\n```\n\n### Advanced Extrema Analysis\n"
    }
  },
  {
    "pageContent": " peaks and troughs\n        if (recentPeaks.Any() && recentTroughs.Any())\n        {\n            var latestPeak = recentPeaks.First();\n            var latestTrough = recentTroughs.First();\n\n            // Check for potential trend reversal\n            if (latestPeak.Value > bars.Close[idx] && \n                latestTrough.Value < bars.Close[idx])\n            {\n                // Potential trend change signal\n                Buy();\n            }\n        }\n    }\n}\n```\n\n### Advanced Extrema Analysis\n\n\n```csharp\npublic class ExtremaAnalyzer\n{\n    public void AnalyzeMarketCycles(TimeSeries prices)\n    {\n        var peakTroughs = PeakTroughCalculator.Calculate(prices);\n\n        // Analyze market cycles\n        var peaks = peakTroughs.Where(pt => pt.Type == PeakTroughType.Peak);\n        var troughs = peakTroughs.Where(pt => pt.Type == PeakTroughType.Trough);\n\n        // Calculate cycle statistics\n        var cycleLengths = peaks.Zip(peaks.Skip(1), \n            (p1, p2) => p2.PeakTroughIndex - p1.PeakTroughIndex);\n\n        var averageCycleLength = cycleLengths.Average();\n        var maxPeakValue = peaks.Max(p => p.Value);\n        var minTroughValue = troughs.Min(t => t.Value);\n\n        Console.WriteLine($\"Average Cycle Length: {averageCycleLength}\");\n        Console.WriteLine($\"Highest Peak: {maxPeakValue}\");\n        Console.WriteLine($\"Lowest Trough: {minTroughValue}\");\n    }\n}\n\n```",
    "metadata": {
      "id": "peak-trough",
      "title": "peak-trough",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/peak-trough.md",
      "chunkIndex": "code-context-6",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "# PenBrushFactory Class\n\n**Namespace:** WealthLab.WPF  \n**Parent:** Object\n\nThe `PenBrushFactory` is a static utility class that provides themed brushes and pens for WealthLab 8 applications. It offers cached, theme-aware color and drawing utilities that ensure consistent visual styling across the application.\n\n## Brush Methods\n\n### BackgroundBrush\n",
    "metadata": {
      "id": "pen-brush-factory",
      "title": "pen-brush-factory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/pen-brush-factory.md",
      "chunkIndex": 0,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns a `SolidColorBrush` using the current WL8 theme's background color.\n\n### ForegroundBrush\n",
    "metadata": {
      "id": "pen-brush-factory",
      "title": "pen-brush-factory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/pen-brush-factory.md",
      "chunkIndex": 1,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns a `SolidColorBrush` using the current WL8 theme's foreground color.\n\n### GetBrush\n",
    "metadata": {
      "id": "pen-brush-factory",
      "title": "pen-brush-factory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/pen-brush-factory.md",
      "chunkIndex": 2,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nCreates a `SolidColorBrush` for the specified `WLColor`.\n\n### GreenTextBrush\n",
    "metadata": {
      "id": "pen-brush-factory",
      "title": "pen-brush-factory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/pen-brush-factory.md",
      "chunkIndex": 3,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns a green-colored `SolidColorBrush` appropriate for the current theme.\n\n### ProfitBrush\n",
    "metadata": {
      "id": "pen-brush-factory",
      "title": "pen-brush-factory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/pen-brush-factory.md",
      "chunkIndex": 4,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns a color-coded `SolidColorBrush` based on profit value:\n- Negative profit: Red\n- Positive profit: Green\n- Zero profit: Gray\n\n### RedTextBrush\n",
    "metadata": {
      "id": "pen-brush-factory",
      "title": "pen-brush-factory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/pen-brush-factory.md",
      "chunkIndex": 5,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns a red-colored `SolidColorBrush` appropriate for the current theme.\n\n## Color Methods\n\n### BackgroundColor\n",
    "metadata": {
      "id": "pen-brush-factory",
      "title": "pen-brush-factory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/pen-brush-factory.md",
      "chunkIndex": 6,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the background color of the current WL8 theme.\n\n### ForegroundColor\n",
    "metadata": {
      "id": "pen-brush-factory",
      "title": "pen-brush-factory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/pen-brush-factory.md",
      "chunkIndex": 7,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the foreground color of the current WL8 theme.\n\n### GreenColor\n",
    "metadata": {
      "id": "pen-brush-factory",
      "title": "pen-brush-factory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/pen-brush-factory.md",
      "chunkIndex": 8,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns a theme-appropriate green `WLColor`.\n\n### RedColor\n",
    "metadata": {
      "id": "pen-brush-factory",
      "title": "pen-brush-factory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/pen-brush-factory.md",
      "chunkIndex": 9,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns a theme-appropriate red `WLColor`.\n\n## Pen Methods\n\n### GetPen (Color and Thickness)\n",
    "metadata": {
      "id": "pen-brush-factory",
      "title": "pen-brush-factory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/pen-brush-factory.md",
      "chunkIndex": 10,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nCreates a WPF `Pen` with:\n- Specified color\n- Optional thickness (default: 1.0)\n- Optional line style (default: Solid)\n\n### GetPen (Color and Line Style)\n",
    "metadata": {
      "id": "pen-brush-factory",
      "title": "pen-brush-factory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/pen-brush-factory.md",
      "chunkIndex": 11,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nCreates a WPF `Pen` with:\n- Specified color\n- Specified line style\n- Default thickness of 1.0\n\n## Usage Examples\n\n### Creating Themed Brushes and Pens\n",
    "metadata": {
      "id": "pen-brush-factory",
      "title": "pen-brush-factory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/pen-brush-factory.md",
      "chunkIndex": 12,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n### Conditional Rendering\n",
    "metadata": {
      "id": "pen-brush-factory",
      "title": "pen-brush-factory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/pen-brush-factory.md",
      "chunkIndex": 13,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n## Best Practices\n\n1. **Theme Consistency**\n   - Always use `PenBrushFactory` for color and drawing utilities\n   - Ensures consistent styling across the application\n   - Adapts to different theme settings\n\n2. **Performance**\n   - Brushes and pens are cached\n   - Minimal overhead when creating multiple instances\n   - Reuse factory methods instead of creating custom brushes\n\n3. **Color Coding**\n   - Use `ProfitBrush` for intuitive financial visualizations\n   - Leverage theme-aware green and red colors\n   - Provide clear visual feedback\n\n## Notes\n\n- Static utility for WealthLab 8 theming\n- Supports dynamic theme adaptation\n- Provides cached, efficient color and drawing utilities\n- Simplifies creating theme-consistent visualizations ",
    "metadata": {
      "id": "pen-brush-factory",
      "title": "pen-brush-factory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/pen-brush-factory.md",
      "chunkIndex": 14,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "public static SolidColorBrush BackgroundBrush\n",
    "metadata": {
      "id": "pen-brush-factory",
      "title": "pen-brush-factory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/pen-brush-factory.md",
      "chunkIndex": "code-0",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "# PenBrushFactory Class\n\n**Namespace:** WealthLab.WPF  \n**Parent:** Object\n\nThe `PenBrushFactory` is a static utility class that provides themed brushes and pens for WealthLab 8 applications. It offers cached, theme-aware color and drawing utilities that ensure consistent visual styling across the application.\n\n## Brush Methods\n\n### BackgroundBrush\n"
    }
  },
  {
    "pageContent": "# PenBrushFactory Class\n\n**Namespace:** WealthLab.WPF  \n**Parent:** Object\n\nThe `PenBrushFactory` is a static utility class that provides themed brushes and pens for WealthLab 8 applications. It offers cached, theme-aware color and drawing utilities that ensure consistent visual styling across the application.\n\n## Brush Methods\n\n### BackgroundBrush\n\n\n```csharp\npublic static SolidColorBrush BackgroundBrush\n\n```",
    "metadata": {
      "id": "pen-brush-factory",
      "title": "pen-brush-factory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/pen-brush-factory.md",
      "chunkIndex": "code-context-0",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public static SolidColorBrush ForegroundBrush\n",
    "metadata": {
      "id": "pen-brush-factory",
      "title": "pen-brush-factory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/pen-brush-factory.md",
      "chunkIndex": "code-1",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "shFactory Class\n\n**Namespace:** WealthLab.WPF  \n**Parent:** Object\n\nThe `PenBrushFactory` is a static utility class that provides themed brushes and pens for WealthLab 8 applications. It offers cached, theme-aware color and drawing utilities that ensure consistent visual styling across the application.\n\n## Brush Methods\n\n### BackgroundBrush\n```csharp\npublic static SolidColorBrush BackgroundBrush\n```\nReturns a `SolidColorBrush` using the current WL8 theme's background color.\n\n### ForegroundBrush\n"
    }
  },
  {
    "pageContent": "shFactory Class\n\n**Namespace:** WealthLab.WPF  \n**Parent:** Object\n\nThe `PenBrushFactory` is a static utility class that provides themed brushes and pens for WealthLab 8 applications. It offers cached, theme-aware color and drawing utilities that ensure consistent visual styling across the application.\n\n## Brush Methods\n\n### BackgroundBrush\n```csharp\npublic static SolidColorBrush BackgroundBrush\n```\nReturns a `SolidColorBrush` using the current WL8 theme's background color.\n\n### ForegroundBrush\n\n\n```csharp\npublic static SolidColorBrush ForegroundBrush\n\n```",
    "metadata": {
      "id": "pen-brush-factory",
      "title": "pen-brush-factory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/pen-brush-factory.md",
      "chunkIndex": "code-context-1",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public static Brush GetBrush(WLColor color)\n",
    "metadata": {
      "id": "pen-brush-factory",
      "title": "pen-brush-factory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/pen-brush-factory.md",
      "chunkIndex": "code-2",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ens for WealthLab 8 applications. It offers cached, theme-aware color and drawing utilities that ensure consistent visual styling across the application.\n\n## Brush Methods\n\n### BackgroundBrush\n```csharp\npublic static SolidColorBrush BackgroundBrush\n```\nReturns a `SolidColorBrush` using the current WL8 theme's background color.\n\n### ForegroundBrush\n```csharp\npublic static SolidColorBrush ForegroundBrush\n```\nReturns a `SolidColorBrush` using the current WL8 theme's foreground color.\n\n### GetBrush\n"
    }
  },
  {
    "pageContent": "ens for WealthLab 8 applications. It offers cached, theme-aware color and drawing utilities that ensure consistent visual styling across the application.\n\n## Brush Methods\n\n### BackgroundBrush\n```csharp\npublic static SolidColorBrush BackgroundBrush\n```\nReturns a `SolidColorBrush` using the current WL8 theme's background color.\n\n### ForegroundBrush\n```csharp\npublic static SolidColorBrush ForegroundBrush\n```\nReturns a `SolidColorBrush` using the current WL8 theme's foreground color.\n\n### GetBrush\n\n\n```csharp\npublic static Brush GetBrush(WLColor color)\n\n```",
    "metadata": {
      "id": "pen-brush-factory",
      "title": "pen-brush-factory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/pen-brush-factory.md",
      "chunkIndex": "code-context-2",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public static SolidColorBrush GreenTextBrush\n",
    "metadata": {
      "id": "pen-brush-factory",
      "title": "pen-brush-factory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/pen-brush-factory.md",
      "chunkIndex": "code-3",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "s the application.\n\n## Brush Methods\n\n### BackgroundBrush\n```csharp\npublic static SolidColorBrush BackgroundBrush\n```\nReturns a `SolidColorBrush` using the current WL8 theme's background color.\n\n### ForegroundBrush\n```csharp\npublic static SolidColorBrush ForegroundBrush\n```\nReturns a `SolidColorBrush` using the current WL8 theme's foreground color.\n\n### GetBrush\n```csharp\npublic static Brush GetBrush(WLColor color)\n```\nCreates a `SolidColorBrush` for the specified `WLColor`.\n\n### GreenTextBrush\n"
    }
  },
  {
    "pageContent": "s the application.\n\n## Brush Methods\n\n### BackgroundBrush\n```csharp\npublic static SolidColorBrush BackgroundBrush\n```\nReturns a `SolidColorBrush` using the current WL8 theme's background color.\n\n### ForegroundBrush\n```csharp\npublic static SolidColorBrush ForegroundBrush\n```\nReturns a `SolidColorBrush` using the current WL8 theme's foreground color.\n\n### GetBrush\n```csharp\npublic static Brush GetBrush(WLColor color)\n```\nCreates a `SolidColorBrush` for the specified `WLColor`.\n\n### GreenTextBrush\n\n\n```csharp\npublic static SolidColorBrush GreenTextBrush\n\n```",
    "metadata": {
      "id": "pen-brush-factory",
      "title": "pen-brush-factory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/pen-brush-factory.md",
      "chunkIndex": "code-context-3",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public static SolidColorBrush ProfitBrush(double profit)\n",
    "metadata": {
      "id": "pen-brush-factory",
      "title": "pen-brush-factory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/pen-brush-factory.md",
      "chunkIndex": "code-4",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "he current WL8 theme's background color.\n\n### ForegroundBrush\n```csharp\npublic static SolidColorBrush ForegroundBrush\n```\nReturns a `SolidColorBrush` using the current WL8 theme's foreground color.\n\n### GetBrush\n```csharp\npublic static Brush GetBrush(WLColor color)\n```\nCreates a `SolidColorBrush` for the specified `WLColor`.\n\n### GreenTextBrush\n```csharp\npublic static SolidColorBrush GreenTextBrush\n```\nReturns a green-colored `SolidColorBrush` appropriate for the current theme.\n\n### ProfitBrush\n"
    }
  },
  {
    "pageContent": "he current WL8 theme's background color.\n\n### ForegroundBrush\n```csharp\npublic static SolidColorBrush ForegroundBrush\n```\nReturns a `SolidColorBrush` using the current WL8 theme's foreground color.\n\n### GetBrush\n```csharp\npublic static Brush GetBrush(WLColor color)\n```\nCreates a `SolidColorBrush` for the specified `WLColor`.\n\n### GreenTextBrush\n```csharp\npublic static SolidColorBrush GreenTextBrush\n```\nReturns a green-colored `SolidColorBrush` appropriate for the current theme.\n\n### ProfitBrush\n\n\n```csharp\npublic static SolidColorBrush ProfitBrush(double profit)\n\n```",
    "metadata": {
      "id": "pen-brush-factory",
      "title": "pen-brush-factory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/pen-brush-factory.md",
      "chunkIndex": "code-context-4",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public static SolidColorBrush RedTextBrush\n",
    "metadata": {
      "id": "pen-brush-factory",
      "title": "pen-brush-factory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/pen-brush-factory.md",
      "chunkIndex": "code-5",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "p\npublic static Brush GetBrush(WLColor color)\n```\nCreates a `SolidColorBrush` for the specified `WLColor`.\n\n### GreenTextBrush\n```csharp\npublic static SolidColorBrush GreenTextBrush\n```\nReturns a green-colored `SolidColorBrush` appropriate for the current theme.\n\n### ProfitBrush\n```csharp\npublic static SolidColorBrush ProfitBrush(double profit)\n```\nReturns a color-coded `SolidColorBrush` based on profit value:\n- Negative profit: Red\n- Positive profit: Green\n- Zero profit: Gray\n\n### RedTextBrush\n"
    }
  },
  {
    "pageContent": "p\npublic static Brush GetBrush(WLColor color)\n```\nCreates a `SolidColorBrush` for the specified `WLColor`.\n\n### GreenTextBrush\n```csharp\npublic static SolidColorBrush GreenTextBrush\n```\nReturns a green-colored `SolidColorBrush` appropriate for the current theme.\n\n### ProfitBrush\n```csharp\npublic static SolidColorBrush ProfitBrush(double profit)\n```\nReturns a color-coded `SolidColorBrush` based on profit value:\n- Negative profit: Red\n- Positive profit: Green\n- Zero profit: Gray\n\n### RedTextBrush\n\n\n```csharp\npublic static SolidColorBrush RedTextBrush\n\n```",
    "metadata": {
      "id": "pen-brush-factory",
      "title": "pen-brush-factory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/pen-brush-factory.md",
      "chunkIndex": "code-context-5",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public static WLColor BackgroundColor\n",
    "metadata": {
      "id": "pen-brush-factory",
      "title": "pen-brush-factory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/pen-brush-factory.md",
      "chunkIndex": "code-6",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "nTextBrush\n```\nReturns a green-colored `SolidColorBrush` appropriate for the current theme.\n\n### ProfitBrush\n```csharp\npublic static SolidColorBrush ProfitBrush(double profit)\n```\nReturns a color-coded `SolidColorBrush` based on profit value:\n- Negative profit: Red\n- Positive profit: Green\n- Zero profit: Gray\n\n### RedTextBrush\n```csharp\npublic static SolidColorBrush RedTextBrush\n```\nReturns a red-colored `SolidColorBrush` appropriate for the current theme.\n\n## Color Methods\n\n### BackgroundColor\n"
    }
  },
  {
    "pageContent": "nTextBrush\n```\nReturns a green-colored `SolidColorBrush` appropriate for the current theme.\n\n### ProfitBrush\n```csharp\npublic static SolidColorBrush ProfitBrush(double profit)\n```\nReturns a color-coded `SolidColorBrush` based on profit value:\n- Negative profit: Red\n- Positive profit: Green\n- Zero profit: Gray\n\n### RedTextBrush\n```csharp\npublic static SolidColorBrush RedTextBrush\n```\nReturns a red-colored `SolidColorBrush` appropriate for the current theme.\n\n## Color Methods\n\n### BackgroundColor\n\n\n```csharp\npublic static WLColor BackgroundColor\n\n```",
    "metadata": {
      "id": "pen-brush-factory",
      "title": "pen-brush-factory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/pen-brush-factory.md",
      "chunkIndex": "code-context-6",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public static WLColor ForegroundColor\n",
    "metadata": {
      "id": "pen-brush-factory",
      "title": "pen-brush-factory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/pen-brush-factory.md",
      "chunkIndex": "code-7",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "atic SolidColorBrush ProfitBrush(double profit)\n```\nReturns a color-coded `SolidColorBrush` based on profit value:\n- Negative profit: Red\n- Positive profit: Green\n- Zero profit: Gray\n\n### RedTextBrush\n```csharp\npublic static SolidColorBrush RedTextBrush\n```\nReturns a red-colored `SolidColorBrush` appropriate for the current theme.\n\n## Color Methods\n\n### BackgroundColor\n```csharp\npublic static WLColor BackgroundColor\n```\nReturns the background color of the current WL8 theme.\n\n### ForegroundColor\n"
    }
  },
  {
    "pageContent": "atic SolidColorBrush ProfitBrush(double profit)\n```\nReturns a color-coded `SolidColorBrush` based on profit value:\n- Negative profit: Red\n- Positive profit: Green\n- Zero profit: Gray\n\n### RedTextBrush\n```csharp\npublic static SolidColorBrush RedTextBrush\n```\nReturns a red-colored `SolidColorBrush` appropriate for the current theme.\n\n## Color Methods\n\n### BackgroundColor\n```csharp\npublic static WLColor BackgroundColor\n```\nReturns the background color of the current WL8 theme.\n\n### ForegroundColor\n\n\n```csharp\npublic static WLColor ForegroundColor\n\n```",
    "metadata": {
      "id": "pen-brush-factory",
      "title": "pen-brush-factory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/pen-brush-factory.md",
      "chunkIndex": "code-context-7",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public static WLColor GreenColor\n",
    "metadata": {
      "id": "pen-brush-factory",
      "title": "pen-brush-factory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/pen-brush-factory.md",
      "chunkIndex": "code-8",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ve profit: Red\n- Positive profit: Green\n- Zero profit: Gray\n\n### RedTextBrush\n```csharp\npublic static SolidColorBrush RedTextBrush\n```\nReturns a red-colored `SolidColorBrush` appropriate for the current theme.\n\n## Color Methods\n\n### BackgroundColor\n```csharp\npublic static WLColor BackgroundColor\n```\nReturns the background color of the current WL8 theme.\n\n### ForegroundColor\n```csharp\npublic static WLColor ForegroundColor\n```\nReturns the foreground color of the current WL8 theme.\n\n### GreenColor\n"
    }
  },
  {
    "pageContent": "ve profit: Red\n- Positive profit: Green\n- Zero profit: Gray\n\n### RedTextBrush\n```csharp\npublic static SolidColorBrush RedTextBrush\n```\nReturns a red-colored `SolidColorBrush` appropriate for the current theme.\n\n## Color Methods\n\n### BackgroundColor\n```csharp\npublic static WLColor BackgroundColor\n```\nReturns the background color of the current WL8 theme.\n\n### ForegroundColor\n```csharp\npublic static WLColor ForegroundColor\n```\nReturns the foreground color of the current WL8 theme.\n\n### GreenColor\n\n\n```csharp\npublic static WLColor GreenColor\n\n```",
    "metadata": {
      "id": "pen-brush-factory",
      "title": "pen-brush-factory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/pen-brush-factory.md",
      "chunkIndex": "code-context-8",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public static WLColor RedColor\n",
    "metadata": {
      "id": "pen-brush-factory",
      "title": "pen-brush-factory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/pen-brush-factory.md",
      "chunkIndex": "code-9",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "dColorBrush RedTextBrush\n```\nReturns a red-colored `SolidColorBrush` appropriate for the current theme.\n\n## Color Methods\n\n### BackgroundColor\n```csharp\npublic static WLColor BackgroundColor\n```\nReturns the background color of the current WL8 theme.\n\n### ForegroundColor\n```csharp\npublic static WLColor ForegroundColor\n```\nReturns the foreground color of the current WL8 theme.\n\n### GreenColor\n```csharp\npublic static WLColor GreenColor\n```\nReturns a theme-appropriate green `WLColor`.\n\n### RedColor\n"
    }
  },
  {
    "pageContent": "dColorBrush RedTextBrush\n```\nReturns a red-colored `SolidColorBrush` appropriate for the current theme.\n\n## Color Methods\n\n### BackgroundColor\n```csharp\npublic static WLColor BackgroundColor\n```\nReturns the background color of the current WL8 theme.\n\n### ForegroundColor\n```csharp\npublic static WLColor ForegroundColor\n```\nReturns the foreground color of the current WL8 theme.\n\n### GreenColor\n```csharp\npublic static WLColor GreenColor\n```\nReturns a theme-appropriate green `WLColor`.\n\n### RedColor\n\n\n```csharp\npublic static WLColor RedColor\n\n```",
    "metadata": {
      "id": "pen-brush-factory",
      "title": "pen-brush-factory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/pen-brush-factory.md",
      "chunkIndex": "code-context-9",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public static Pen GetPen(\n    WLColor color, \n    double thickness = 1.0, \n    LineStyle ls = LineStyle.Solid\n)\n",
    "metadata": {
      "id": "pen-brush-factory",
      "title": "pen-brush-factory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/pen-brush-factory.md",
      "chunkIndex": "code-10",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "olor\n```csharp\npublic static WLColor BackgroundColor\n```\nReturns the background color of the current WL8 theme.\n\n### ForegroundColor\n```csharp\npublic static WLColor ForegroundColor\n```\nReturns the foreground color of the current WL8 theme.\n\n### GreenColor\n```csharp\npublic static WLColor GreenColor\n```\nReturns a theme-appropriate green `WLColor`.\n\n### RedColor\n```csharp\npublic static WLColor RedColor\n```\nReturns a theme-appropriate red `WLColor`.\n\n## Pen Methods\n\n### GetPen (Color and Thickness)\n"
    }
  },
  {
    "pageContent": "olor\n```csharp\npublic static WLColor BackgroundColor\n```\nReturns the background color of the current WL8 theme.\n\n### ForegroundColor\n```csharp\npublic static WLColor ForegroundColor\n```\nReturns the foreground color of the current WL8 theme.\n\n### GreenColor\n```csharp\npublic static WLColor GreenColor\n```\nReturns a theme-appropriate green `WLColor`.\n\n### RedColor\n```csharp\npublic static WLColor RedColor\n```\nReturns a theme-appropriate red `WLColor`.\n\n## Pen Methods\n\n### GetPen (Color and Thickness)\n\n\n```csharp\npublic static Pen GetPen(\n    WLColor color, \n    double thickness = 1.0, \n    LineStyle ls = LineStyle.Solid\n)\n\n```",
    "metadata": {
      "id": "pen-brush-factory",
      "title": "pen-brush-factory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/pen-brush-factory.md",
      "chunkIndex": "code-context-10",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public static Pen GetPen(\n    WLColor color, \n    LineStyle ls\n)\n",
    "metadata": {
      "id": "pen-brush-factory",
      "title": "pen-brush-factory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/pen-brush-factory.md",
      "chunkIndex": "code-11",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "WLColor GreenColor\n```\nReturns a theme-appropriate green `WLColor`.\n\n### RedColor\n```csharp\npublic static WLColor RedColor\n```\nReturns a theme-appropriate red `WLColor`.\n\n## Pen Methods\n\n### GetPen (Color and Thickness)\n```csharp\npublic static Pen GetPen(\n    WLColor color, \n    double thickness = 1.0, \n    LineStyle ls = LineStyle.Solid\n)\n```\nCreates a WPF `Pen` with:\n- Specified color\n- Optional thickness (default: 1.0)\n- Optional line style (default: Solid)\n\n### GetPen (Color and Line Style)\n"
    }
  },
  {
    "pageContent": "WLColor GreenColor\n```\nReturns a theme-appropriate green `WLColor`.\n\n### RedColor\n```csharp\npublic static WLColor RedColor\n```\nReturns a theme-appropriate red `WLColor`.\n\n## Pen Methods\n\n### GetPen (Color and Thickness)\n```csharp\npublic static Pen GetPen(\n    WLColor color, \n    double thickness = 1.0, \n    LineStyle ls = LineStyle.Solid\n)\n```\nCreates a WPF `Pen` with:\n- Specified color\n- Optional thickness (default: 1.0)\n- Optional line style (default: Solid)\n\n### GetPen (Color and Line Style)\n\n\n```csharp\npublic static Pen GetPen(\n    WLColor color, \n    LineStyle ls\n)\n\n```",
    "metadata": {
      "id": "pen-brush-factory",
      "title": "pen-brush-factory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/pen-brush-factory.md",
      "chunkIndex": "code-context-11",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public class ThemeAwareRenderer\n{\n    public void RenderChart(DrawingContext dc)\n    {\n        // Use theme background\n        dc.DrawRectangle(\n            PenBrushFactory.BackgroundBrush, \n            null, \n            new Rect(0, 0, 100, 100)\n        );\n\n        // Create a green profit line\n        var profitPen = PenBrushFactory.GetPen(\n            PenBrushFactory.GreenColor, \n            2.0, \n            LineStyle.Solid\n        );\n        \n        // Draw a line using the pen\n        dc.DrawLine(\n            profitPen, \n            new Point(0, 0), \n            new Point(100, 100)\n        );\n    }\n\n    public void RenderProfitText(TextBlock textBlock, double profit)\n    {\n        // Color-code text based on profit\n        textBlock.Foreground = PenBrushFactory.ProfitBrush(profit);\n        textBlock.Text = $\"Profit: {profit:C2}\";\n    }\n}\n",
    "metadata": {
      "id": "pen-brush-factory",
      "title": "pen-brush-factory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/pen-brush-factory.md",
      "chunkIndex": "code-12",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "public static Pen GetPen(\n    WLColor color, \n    double thickness = 1.0, \n    LineStyle ls = LineStyle.Solid\n)\n```\nCreates a WPF `Pen` with:\n- Specified color\n- Optional thickness (default: 1.0)\n- Optional line style (default: Solid)\n\n### GetPen (Color and Line Style)\n```csharp\npublic static Pen GetPen(\n    WLColor color, \n    LineStyle ls\n)\n```\nCreates a WPF `Pen` with:\n- Specified color\n- Specified line style\n- Default thickness of 1.0\n\n## Usage Examples\n\n### Creating Themed Brushes and Pens\n"
    }
  },
  {
    "pageContent": "public static Pen GetPen(\n    WLColor color, \n    double thickness = 1.0, \n    LineStyle ls = LineStyle.Solid\n)\n```\nCreates a WPF `Pen` with:\n- Specified color\n- Optional thickness (default: 1.0)\n- Optional line style (default: Solid)\n\n### GetPen (Color and Line Style)\n```csharp\npublic static Pen GetPen(\n    WLColor color, \n    LineStyle ls\n)\n```\nCreates a WPF `Pen` with:\n- Specified color\n- Specified line style\n- Default thickness of 1.0\n\n## Usage Examples\n\n### Creating Themed Brushes and Pens\n\n\n```csharp\npublic class ThemeAwareRenderer\n{\n    public void RenderChart(DrawingContext dc)\n    {\n        // Use theme background\n        dc.DrawRectangle(\n            PenBrushFactory.BackgroundBrush, \n            null, \n            new Rect(0, 0, 100, 100)\n        );\n\n        // Create a green profit line\n        var profitPen = PenBrushFactory.GetPen(\n            PenBrushFactory.GreenColor, \n            2.0, \n            LineStyle.Solid\n        );\n        \n        // Draw a line using the pen\n        dc.DrawLine(\n            profitPen, \n            new Point(0, 0), \n            new Point(100, 100)\n        );\n    }\n\n    public void RenderProfitText(TextBlock textBlock, double profit)\n    {\n        // Color-code text based on profit\n        textBlock.Foreground = PenBrushFactory.ProfitBrush(profit);\n        textBlock.Text = $\"Profit: {profit:C2}\";\n    }\n}\n\n```",
    "metadata": {
      "id": "pen-brush-factory",
      "title": "pen-brush-factory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/pen-brush-factory.md",
      "chunkIndex": "code-context-12",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public class TradeVisualizer\n{\n    public void HighlightTrade(Canvas canvas, Trade trade)\n    {\n        // Choose brush based on trade profitability\n        var tradeBrush = trade.IsProfit \n            ? PenBrushFactory.GreenTextBrush \n            : PenBrushFactory.RedTextBrush;\n\n        var tradePen = PenBrushFactory.GetPen(\n            trade.IsProfit \n                ? PenBrushFactory.GreenColor \n                : PenBrushFactory.RedColor\n        );\n\n        // Render trade details\n        var tradeRect = new Rectangle\n        {\n            Fill = tradeBrush,\n            Stroke = tradePen\n        };\n        canvas.Children.Add(tradeRect);\n    }\n}\n",
    "metadata": {
      "id": "pen-brush-factory",
      "title": "pen-brush-factory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/pen-brush-factory.md",
      "chunkIndex": "code-13",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "          2.0, \n            LineStyle.Solid\n        );\n        \n        // Draw a line using the pen\n        dc.DrawLine(\n            profitPen, \n            new Point(0, 0), \n            new Point(100, 100)\n        );\n    }\n\n    public void RenderProfitText(TextBlock textBlock, double profit)\n    {\n        // Color-code text based on profit\n        textBlock.Foreground = PenBrushFactory.ProfitBrush(profit);\n        textBlock.Text = $\"Profit: {profit:C2}\";\n    }\n}\n```\n\n### Conditional Rendering\n"
    }
  },
  {
    "pageContent": "          2.0, \n            LineStyle.Solid\n        );\n        \n        // Draw a line using the pen\n        dc.DrawLine(\n            profitPen, \n            new Point(0, 0), \n            new Point(100, 100)\n        );\n    }\n\n    public void RenderProfitText(TextBlock textBlock, double profit)\n    {\n        // Color-code text based on profit\n        textBlock.Foreground = PenBrushFactory.ProfitBrush(profit);\n        textBlock.Text = $\"Profit: {profit:C2}\";\n    }\n}\n```\n\n### Conditional Rendering\n\n\n```csharp\npublic class TradeVisualizer\n{\n    public void HighlightTrade(Canvas canvas, Trade trade)\n    {\n        // Choose brush based on trade profitability\n        var tradeBrush = trade.IsProfit \n            ? PenBrushFactory.GreenTextBrush \n            : PenBrushFactory.RedTextBrush;\n\n        var tradePen = PenBrushFactory.GetPen(\n            trade.IsProfit \n                ? PenBrushFactory.GreenColor \n                : PenBrushFactory.RedColor\n        );\n\n        // Render trade details\n        var tradeRect = new Rectangle\n        {\n            Fill = tradeBrush,\n            Stroke = tradePen\n        };\n        canvas.Children.Add(tradeRect);\n    }\n}\n\n```",
    "metadata": {
      "id": "pen-brush-factory",
      "title": "pen-brush-factory",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/pen-brush-factory.md",
      "chunkIndex": "code-context-13",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "# PlotBase Class\n\n**Namespace:** WealthLab.ChartWPF  \n**Parent:** Configurable  \n**Descendants:** BarGlyphBase\n\nThe `PlotBase` class is the foundational abstract class for all objects that can be plotted on a WealthLab 8 chart. It provides essential methods and properties for rendering, configuration, and chart interaction.\n\n## Chart-Related Properties\n\n### Bars\n",
    "metadata": {
      "id": "plot-base",
      "title": "plot-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/plot-base.md",
      "chunkIndex": 0,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the `BarHistory` instance currently being charted.\n\n### ChartPreferences\n",
    "metadata": {
      "id": "plot-base",
      "title": "plot-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/plot-base.md",
      "chunkIndex": 1,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns chart rendering preferences, including colors and styles.\n\n### Color\n",
    "metadata": {
      "id": "plot-base",
      "title": "plot-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/plot-base.md",
      "chunkIndex": 2,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nSpecifies the color used when plotting this object.\n\n### DefaultBrush\n",
    "metadata": {
      "id": "plot-base",
      "title": "plot-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/plot-base.md",
      "chunkIndex": 3,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the default `Brush` for rendering the plot object.\n\n### DefaultPen\n",
    "metadata": {
      "id": "plot-base",
      "title": "plot-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/plot-base.md",
      "chunkIndex": 4,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the default `Pen` for rendering the plot object.\n\n## Rendering Methods\n\n### GetBarColor\n",
    "metadata": {
      "id": "plot-base",
      "title": "plot-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/plot-base.md",
      "chunkIndex": 5,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the color for rendering a specific bar index.\n\n### GetMaxValue\n",
    "metadata": {
      "id": "plot-base",
      "title": "plot-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/plot-base.md",
      "chunkIndex": 6,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nCalculates the highest y-axis value within the specified index range.\n\n### GetMinValue\n",
    "metadata": {
      "id": "plot-base",
      "title": "plot-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/plot-base.md",
      "chunkIndex": 7,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nCalculates the lowest y-axis value within the specified index range.\n\n### Render\n",
    "metadata": {
      "id": "plot-base",
      "title": "plot-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/plot-base.md",
      "chunkIndex": 8,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nAbstract method called to render the plot object to the specified drawing context.\n\n### PreRender and PostRender\n",
    "metadata": {
      "id": "plot-base",
      "title": "plot-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/plot-base.md",
      "chunkIndex": 9,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nMethods called before and after the main rendering phase.\n\n## Interaction Properties\n\n### IsMouseOver\n",
    "metadata": {
      "id": "plot-base",
      "title": "plot-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/plot-base.md",
      "chunkIndex": 10,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nDetermines if the mouse is hovering over the plot object.\n\n### Opacity\n",
    "metadata": {
      "id": "plot-base",
      "title": "plot-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/plot-base.md",
      "chunkIndex": 11,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nControls the rendering opacity (0-255 range).\n\n### HasMouseOverState\n",
    "metadata": {
      "id": "plot-base",
      "title": "plot-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/plot-base.md",
      "chunkIndex": 12,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nIndicates if the plot object has a special mouse-over rendering state.\n\n## Rendering Passes\n\n### RenderPass\n",
    "metadata": {
      "id": "plot-base",
      "title": "plot-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/plot-base.md",
      "chunkIndex": 13,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nSpecifies which rendering pass the object participates in (1 or 2).\n\n### RenderPasses\n",
    "metadata": {
      "id": "plot-base",
      "title": "plot-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/plot-base.md",
      "chunkIndex": 14,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nDetermines multiple rendering passes (1, 2, or 4).\n\n## Coordinate Conversion Methods\n\n### Conversion Methods\n",
    "metadata": {
      "id": "plot-base",
      "title": "plot-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/plot-base.md",
      "chunkIndex": 15,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nMethods for converting between chart coordinates (pixels, indices, dates, values).\n\n## Configuration Methods\n\n### Configuration Properties\n",
    "metadata": {
      "id": "plot-base",
      "title": "plot-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/plot-base.md",
      "chunkIndex": 16,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nInherited from `Configurable`, these provide configuration management.\n\n### Configuration Methods\n",
    "metadata": {
      "id": "plot-base",
      "title": "plot-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/plot-base.md",
      "chunkIndex": 17,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nMethods for editing and processing configuration.\n\n## Usage Examples\n\n### Custom Plot Object\n",
    "metadata": {
      "id": "plot-base",
      "title": "plot-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/plot-base.md",
      "chunkIndex": 18,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n### Interactive Plot\n",
    "metadata": {
      "id": "plot-base",
      "title": "plot-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/plot-base.md",
      "chunkIndex": 19,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n## Best Practices\n\n1. **Rendering**\n   - Implement efficient `Render` methods\n   - Use coordinate conversion methods\n   - Consider performance for large datasets\n\n2. **Interaction**\n   - Implement meaningful `IsMouseOver`\n   - Provide clear visual feedback\n   - Handle different rendering passes\n\n3. **Configuration**\n   - Use `Parameters` for customizable settings\n   - Implement `EditConfig` for user-friendly configuration\n   - Provide clear descriptions\n\n## Notes\n\n- Abstract base class for chart plot objects\n- Provides comprehensive charting infrastructure\n- Supports complex rendering and interaction scenarios\n- Extensible through inheritance and method overriding ",
    "metadata": {
      "id": "plot-base",
      "title": "plot-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/plot-base.md",
      "chunkIndex": 20,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "public BarHistory Bars\n",
    "metadata": {
      "id": "plot-base",
      "title": "plot-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/plot-base.md",
      "chunkIndex": "code-0",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "# PlotBase Class\n\n**Namespace:** WealthLab.ChartWPF  \n**Parent:** Configurable  \n**Descendants:** BarGlyphBase\n\nThe `PlotBase` class is the foundational abstract class for all objects that can be plotted on a WealthLab 8 chart. It provides essential methods and properties for rendering, configuration, and chart interaction.\n\n## Chart-Related Properties\n\n### Bars\n"
    }
  },
  {
    "pageContent": "# PlotBase Class\n\n**Namespace:** WealthLab.ChartWPF  \n**Parent:** Configurable  \n**Descendants:** BarGlyphBase\n\nThe `PlotBase` class is the foundational abstract class for all objects that can be plotted on a WealthLab 8 chart. It provides essential methods and properties for rendering, configuration, and chart interaction.\n\n## Chart-Related Properties\n\n### Bars\n\n\n```csharp\npublic BarHistory Bars\n\n```",
    "metadata": {
      "id": "plot-base",
      "title": "plot-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/plot-base.md",
      "chunkIndex": "code-context-0",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public ChartPreferences ChartPreferences\n",
    "metadata": {
      "id": "plot-base",
      "title": "plot-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/plot-base.md",
      "chunkIndex": "code-1",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "# PlotBase Class\n\n**Namespace:** WealthLab.ChartWPF  \n**Parent:** Configurable  \n**Descendants:** BarGlyphBase\n\nThe `PlotBase` class is the foundational abstract class for all objects that can be plotted on a WealthLab 8 chart. It provides essential methods and properties for rendering, configuration, and chart interaction.\n\n## Chart-Related Properties\n\n### Bars\n```csharp\npublic BarHistory Bars\n```\nReturns the `BarHistory` instance currently being charted.\n\n### ChartPreferences\n"
    }
  },
  {
    "pageContent": "# PlotBase Class\n\n**Namespace:** WealthLab.ChartWPF  \n**Parent:** Configurable  \n**Descendants:** BarGlyphBase\n\nThe `PlotBase` class is the foundational abstract class for all objects that can be plotted on a WealthLab 8 chart. It provides essential methods and properties for rendering, configuration, and chart interaction.\n\n## Chart-Related Properties\n\n### Bars\n```csharp\npublic BarHistory Bars\n```\nReturns the `BarHistory` instance currently being charted.\n\n### ChartPreferences\n\n\n```csharp\npublic ChartPreferences ChartPreferences\n\n```",
    "metadata": {
      "id": "plot-base",
      "title": "plot-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/plot-base.md",
      "chunkIndex": "code-context-1",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public WLColor Color\n",
    "metadata": {
      "id": "plot-base",
      "title": "plot-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/plot-base.md",
      "chunkIndex": "code-2",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": " `PlotBase` class is the foundational abstract class for all objects that can be plotted on a WealthLab 8 chart. It provides essential methods and properties for rendering, configuration, and chart interaction.\n\n## Chart-Related Properties\n\n### Bars\n```csharp\npublic BarHistory Bars\n```\nReturns the `BarHistory` instance currently being charted.\n\n### ChartPreferences\n```csharp\npublic ChartPreferences ChartPreferences\n```\nReturns chart rendering preferences, including colors and styles.\n\n### Color\n"
    }
  },
  {
    "pageContent": " `PlotBase` class is the foundational abstract class for all objects that can be plotted on a WealthLab 8 chart. It provides essential methods and properties for rendering, configuration, and chart interaction.\n\n## Chart-Related Properties\n\n### Bars\n```csharp\npublic BarHistory Bars\n```\nReturns the `BarHistory` instance currently being charted.\n\n### ChartPreferences\n```csharp\npublic ChartPreferences ChartPreferences\n```\nReturns chart rendering preferences, including colors and styles.\n\n### Color\n\n\n```csharp\npublic WLColor Color\n\n```",
    "metadata": {
      "id": "plot-base",
      "title": "plot-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/plot-base.md",
      "chunkIndex": "code-context-2",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public Brush DefaultBrush\n",
    "metadata": {
      "id": "plot-base",
      "title": "plot-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/plot-base.md",
      "chunkIndex": "code-3",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": " chart. It provides essential methods and properties for rendering, configuration, and chart interaction.\n\n## Chart-Related Properties\n\n### Bars\n```csharp\npublic BarHistory Bars\n```\nReturns the `BarHistory` instance currently being charted.\n\n### ChartPreferences\n```csharp\npublic ChartPreferences ChartPreferences\n```\nReturns chart rendering preferences, including colors and styles.\n\n### Color\n```csharp\npublic WLColor Color\n```\nSpecifies the color used when plotting this object.\n\n### DefaultBrush\n"
    }
  },
  {
    "pageContent": " chart. It provides essential methods and properties for rendering, configuration, and chart interaction.\n\n## Chart-Related Properties\n\n### Bars\n```csharp\npublic BarHistory Bars\n```\nReturns the `BarHistory` instance currently being charted.\n\n### ChartPreferences\n```csharp\npublic ChartPreferences ChartPreferences\n```\nReturns chart rendering preferences, including colors and styles.\n\n### Color\n```csharp\npublic WLColor Color\n```\nSpecifies the color used when plotting this object.\n\n### DefaultBrush\n\n\n```csharp\npublic Brush DefaultBrush\n\n```",
    "metadata": {
      "id": "plot-base",
      "title": "plot-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/plot-base.md",
      "chunkIndex": "code-context-3",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public Pen DefaultPen\n",
    "metadata": {
      "id": "plot-base",
      "title": "plot-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/plot-base.md",
      "chunkIndex": "code-4",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "-Related Properties\n\n### Bars\n```csharp\npublic BarHistory Bars\n```\nReturns the `BarHistory` instance currently being charted.\n\n### ChartPreferences\n```csharp\npublic ChartPreferences ChartPreferences\n```\nReturns chart rendering preferences, including colors and styles.\n\n### Color\n```csharp\npublic WLColor Color\n```\nSpecifies the color used when plotting this object.\n\n### DefaultBrush\n```csharp\npublic Brush DefaultBrush\n```\nReturns the default `Brush` for rendering the plot object.\n\n### DefaultPen\n"
    }
  },
  {
    "pageContent": "-Related Properties\n\n### Bars\n```csharp\npublic BarHistory Bars\n```\nReturns the `BarHistory` instance currently being charted.\n\n### ChartPreferences\n```csharp\npublic ChartPreferences ChartPreferences\n```\nReturns chart rendering preferences, including colors and styles.\n\n### Color\n```csharp\npublic WLColor Color\n```\nSpecifies the color used when plotting this object.\n\n### DefaultBrush\n```csharp\npublic Brush DefaultBrush\n```\nReturns the default `Brush` for rendering the plot object.\n\n### DefaultPen\n\n\n```csharp\npublic Pen DefaultPen\n\n```",
    "metadata": {
      "id": "plot-base",
      "title": "plot-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/plot-base.md",
      "chunkIndex": "code-context-4",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public virtual WLColor GetBarColor(int idx)\n",
    "metadata": {
      "id": "plot-base",
      "title": "plot-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/plot-base.md",
      "chunkIndex": "code-5",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "hartPreferences\n```csharp\npublic ChartPreferences ChartPreferences\n```\nReturns chart rendering preferences, including colors and styles.\n\n### Color\n```csharp\npublic WLColor Color\n```\nSpecifies the color used when plotting this object.\n\n### DefaultBrush\n```csharp\npublic Brush DefaultBrush\n```\nReturns the default `Brush` for rendering the plot object.\n\n### DefaultPen\n```csharp\npublic Pen DefaultPen\n```\nReturns the default `Pen` for rendering the plot object.\n\n## Rendering Methods\n\n### GetBarColor\n"
    }
  },
  {
    "pageContent": "hartPreferences\n```csharp\npublic ChartPreferences ChartPreferences\n```\nReturns chart rendering preferences, including colors and styles.\n\n### Color\n```csharp\npublic WLColor Color\n```\nSpecifies the color used when plotting this object.\n\n### DefaultBrush\n```csharp\npublic Brush DefaultBrush\n```\nReturns the default `Brush` for rendering the plot object.\n\n### DefaultPen\n```csharp\npublic Pen DefaultPen\n```\nReturns the default `Pen` for rendering the plot object.\n\n## Rendering Methods\n\n### GetBarColor\n\n\n```csharp\npublic virtual WLColor GetBarColor(int idx)\n\n```",
    "metadata": {
      "id": "plot-base",
      "title": "plot-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/plot-base.md",
      "chunkIndex": "code-context-5",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public virtual double GetMaxValue(int start, int end)\n",
    "metadata": {
      "id": "plot-base",
      "title": "plot-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/plot-base.md",
      "chunkIndex": "code-6",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "styles.\n\n### Color\n```csharp\npublic WLColor Color\n```\nSpecifies the color used when plotting this object.\n\n### DefaultBrush\n```csharp\npublic Brush DefaultBrush\n```\nReturns the default `Brush` for rendering the plot object.\n\n### DefaultPen\n```csharp\npublic Pen DefaultPen\n```\nReturns the default `Pen` for rendering the plot object.\n\n## Rendering Methods\n\n### GetBarColor\n```csharp\npublic virtual WLColor GetBarColor(int idx)\n```\nReturns the color for rendering a specific bar index.\n\n### GetMaxValue\n"
    }
  },
  {
    "pageContent": "styles.\n\n### Color\n```csharp\npublic WLColor Color\n```\nSpecifies the color used when plotting this object.\n\n### DefaultBrush\n```csharp\npublic Brush DefaultBrush\n```\nReturns the default `Brush` for rendering the plot object.\n\n### DefaultPen\n```csharp\npublic Pen DefaultPen\n```\nReturns the default `Pen` for rendering the plot object.\n\n## Rendering Methods\n\n### GetBarColor\n```csharp\npublic virtual WLColor GetBarColor(int idx)\n```\nReturns the color for rendering a specific bar index.\n\n### GetMaxValue\n\n\n```csharp\npublic virtual double GetMaxValue(int start, int end)\n\n```",
    "metadata": {
      "id": "plot-base",
      "title": "plot-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/plot-base.md",
      "chunkIndex": "code-context-6",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public virtual double GetMinValue(int start, int end)\n",
    "metadata": {
      "id": "plot-base",
      "title": "plot-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/plot-base.md",
      "chunkIndex": "code-7",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "rush\n```\nReturns the default `Brush` for rendering the plot object.\n\n### DefaultPen\n```csharp\npublic Pen DefaultPen\n```\nReturns the default `Pen` for rendering the plot object.\n\n## Rendering Methods\n\n### GetBarColor\n```csharp\npublic virtual WLColor GetBarColor(int idx)\n```\nReturns the color for rendering a specific bar index.\n\n### GetMaxValue\n```csharp\npublic virtual double GetMaxValue(int start, int end)\n```\nCalculates the highest y-axis value within the specified index range.\n\n### GetMinValue\n"
    }
  },
  {
    "pageContent": "rush\n```\nReturns the default `Brush` for rendering the plot object.\n\n### DefaultPen\n```csharp\npublic Pen DefaultPen\n```\nReturns the default `Pen` for rendering the plot object.\n\n## Rendering Methods\n\n### GetBarColor\n```csharp\npublic virtual WLColor GetBarColor(int idx)\n```\nReturns the color for rendering a specific bar index.\n\n### GetMaxValue\n```csharp\npublic virtual double GetMaxValue(int start, int end)\n```\nCalculates the highest y-axis value within the specified index range.\n\n### GetMinValue\n\n\n```csharp\npublic virtual double GetMinValue(int start, int end)\n\n```",
    "metadata": {
      "id": "plot-base",
      "title": "plot-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/plot-base.md",
      "chunkIndex": "code-context-7",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public abstract void Render(DrawingContext dc)\n",
    "metadata": {
      "id": "plot-base",
      "title": "plot-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/plot-base.md",
      "chunkIndex": "code-8",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": " rendering the plot object.\n\n## Rendering Methods\n\n### GetBarColor\n```csharp\npublic virtual WLColor GetBarColor(int idx)\n```\nReturns the color for rendering a specific bar index.\n\n### GetMaxValue\n```csharp\npublic virtual double GetMaxValue(int start, int end)\n```\nCalculates the highest y-axis value within the specified index range.\n\n### GetMinValue\n```csharp\npublic virtual double GetMinValue(int start, int end)\n```\nCalculates the lowest y-axis value within the specified index range.\n\n### Render\n"
    }
  },
  {
    "pageContent": " rendering the plot object.\n\n## Rendering Methods\n\n### GetBarColor\n```csharp\npublic virtual WLColor GetBarColor(int idx)\n```\nReturns the color for rendering a specific bar index.\n\n### GetMaxValue\n```csharp\npublic virtual double GetMaxValue(int start, int end)\n```\nCalculates the highest y-axis value within the specified index range.\n\n### GetMinValue\n```csharp\npublic virtual double GetMinValue(int start, int end)\n```\nCalculates the lowest y-axis value within the specified index range.\n\n### Render\n\n\n```csharp\npublic abstract void Render(DrawingContext dc)\n\n```",
    "metadata": {
      "id": "plot-base",
      "title": "plot-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/plot-base.md",
      "chunkIndex": "code-context-8",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public virtual void PreRender(DrawingContext dc)\npublic virtual void PostRender(DrawingContext dc)\n",
    "metadata": {
      "id": "plot-base",
      "title": "plot-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/plot-base.md",
      "chunkIndex": "code-9",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "dex.\n\n### GetMaxValue\n```csharp\npublic virtual double GetMaxValue(int start, int end)\n```\nCalculates the highest y-axis value within the specified index range.\n\n### GetMinValue\n```csharp\npublic virtual double GetMinValue(int start, int end)\n```\nCalculates the lowest y-axis value within the specified index range.\n\n### Render\n```csharp\npublic abstract void Render(DrawingContext dc)\n```\nAbstract method called to render the plot object to the specified drawing context.\n\n### PreRender and PostRender\n"
    }
  },
  {
    "pageContent": "dex.\n\n### GetMaxValue\n```csharp\npublic virtual double GetMaxValue(int start, int end)\n```\nCalculates the highest y-axis value within the specified index range.\n\n### GetMinValue\n```csharp\npublic virtual double GetMinValue(int start, int end)\n```\nCalculates the lowest y-axis value within the specified index range.\n\n### Render\n```csharp\npublic abstract void Render(DrawingContext dc)\n```\nAbstract method called to render the plot object to the specified drawing context.\n\n### PreRender and PostRender\n\n\n```csharp\npublic virtual void PreRender(DrawingContext dc)\npublic virtual void PostRender(DrawingContext dc)\n\n```",
    "metadata": {
      "id": "plot-base",
      "title": "plot-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/plot-base.md",
      "chunkIndex": "code-context-9",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public virtual bool IsMouseOver(Point pt)\n",
    "metadata": {
      "id": "plot-base",
      "title": "plot-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/plot-base.md",
      "chunkIndex": "code-10",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "Value(int start, int end)\n```\nCalculates the lowest y-axis value within the specified index range.\n\n### Render\n```csharp\npublic abstract void Render(DrawingContext dc)\n```\nAbstract method called to render the plot object to the specified drawing context.\n\n### PreRender and PostRender\n```csharp\npublic virtual void PreRender(DrawingContext dc)\npublic virtual void PostRender(DrawingContext dc)\n```\nMethods called before and after the main rendering phase.\n\n## Interaction Properties\n\n### IsMouseOver\n"
    }
  },
  {
    "pageContent": "Value(int start, int end)\n```\nCalculates the lowest y-axis value within the specified index range.\n\n### Render\n```csharp\npublic abstract void Render(DrawingContext dc)\n```\nAbstract method called to render the plot object to the specified drawing context.\n\n### PreRender and PostRender\n```csharp\npublic virtual void PreRender(DrawingContext dc)\npublic virtual void PostRender(DrawingContext dc)\n```\nMethods called before and after the main rendering phase.\n\n## Interaction Properties\n\n### IsMouseOver\n\n\n```csharp\npublic virtual bool IsMouseOver(Point pt)\n\n```",
    "metadata": {
      "id": "plot-base",
      "title": "plot-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/plot-base.md",
      "chunkIndex": "code-context-10",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public byte Opacity\n",
    "metadata": {
      "id": "plot-base",
      "title": "plot-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/plot-base.md",
      "chunkIndex": "code-11",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": " abstract void Render(DrawingContext dc)\n```\nAbstract method called to render the plot object to the specified drawing context.\n\n### PreRender and PostRender\n```csharp\npublic virtual void PreRender(DrawingContext dc)\npublic virtual void PostRender(DrawingContext dc)\n```\nMethods called before and after the main rendering phase.\n\n## Interaction Properties\n\n### IsMouseOver\n```csharp\npublic virtual bool IsMouseOver(Point pt)\n```\nDetermines if the mouse is hovering over the plot object.\n\n### Opacity\n"
    }
  },
  {
    "pageContent": " abstract void Render(DrawingContext dc)\n```\nAbstract method called to render the plot object to the specified drawing context.\n\n### PreRender and PostRender\n```csharp\npublic virtual void PreRender(DrawingContext dc)\npublic virtual void PostRender(DrawingContext dc)\n```\nMethods called before and after the main rendering phase.\n\n## Interaction Properties\n\n### IsMouseOver\n```csharp\npublic virtual bool IsMouseOver(Point pt)\n```\nDetermines if the mouse is hovering over the plot object.\n\n### Opacity\n\n\n```csharp\npublic byte Opacity\n\n```",
    "metadata": {
      "id": "plot-base",
      "title": "plot-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/plot-base.md",
      "chunkIndex": "code-context-11",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public virtual bool HasMouseOverState\n",
    "metadata": {
      "id": "plot-base",
      "title": "plot-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/plot-base.md",
      "chunkIndex": "code-12",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ecified drawing context.\n\n### PreRender and PostRender\n```csharp\npublic virtual void PreRender(DrawingContext dc)\npublic virtual void PostRender(DrawingContext dc)\n```\nMethods called before and after the main rendering phase.\n\n## Interaction Properties\n\n### IsMouseOver\n```csharp\npublic virtual bool IsMouseOver(Point pt)\n```\nDetermines if the mouse is hovering over the plot object.\n\n### Opacity\n```csharp\npublic byte Opacity\n```\nControls the rendering opacity (0-255 range).\n\n### HasMouseOverState\n"
    }
  },
  {
    "pageContent": "ecified drawing context.\n\n### PreRender and PostRender\n```csharp\npublic virtual void PreRender(DrawingContext dc)\npublic virtual void PostRender(DrawingContext dc)\n```\nMethods called before and after the main rendering phase.\n\n## Interaction Properties\n\n### IsMouseOver\n```csharp\npublic virtual bool IsMouseOver(Point pt)\n```\nDetermines if the mouse is hovering over the plot object.\n\n### Opacity\n```csharp\npublic byte Opacity\n```\nControls the rendering opacity (0-255 range).\n\n### HasMouseOverState\n\n\n```csharp\npublic virtual bool HasMouseOverState\n\n```",
    "metadata": {
      "id": "plot-base",
      "title": "plot-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/plot-base.md",
      "chunkIndex": "code-context-12",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public virtual int RenderPass\n",
    "metadata": {
      "id": "plot-base",
      "title": "plot-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/plot-base.md",
      "chunkIndex": "code-13",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "dc)\n```\nMethods called before and after the main rendering phase.\n\n## Interaction Properties\n\n### IsMouseOver\n```csharp\npublic virtual bool IsMouseOver(Point pt)\n```\nDetermines if the mouse is hovering over the plot object.\n\n### Opacity\n```csharp\npublic byte Opacity\n```\nControls the rendering opacity (0-255 range).\n\n### HasMouseOverState\n```csharp\npublic virtual bool HasMouseOverState\n```\nIndicates if the plot object has a special mouse-over rendering state.\n\n## Rendering Passes\n\n### RenderPass\n"
    }
  },
  {
    "pageContent": "dc)\n```\nMethods called before and after the main rendering phase.\n\n## Interaction Properties\n\n### IsMouseOver\n```csharp\npublic virtual bool IsMouseOver(Point pt)\n```\nDetermines if the mouse is hovering over the plot object.\n\n### Opacity\n```csharp\npublic byte Opacity\n```\nControls the rendering opacity (0-255 range).\n\n### HasMouseOverState\n```csharp\npublic virtual bool HasMouseOverState\n```\nIndicates if the plot object has a special mouse-over rendering state.\n\n## Rendering Passes\n\n### RenderPass\n\n\n```csharp\npublic virtual int RenderPass\n\n```",
    "metadata": {
      "id": "plot-base",
      "title": "plot-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/plot-base.md",
      "chunkIndex": "code-context-13",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public virtual int RenderPasses\n",
    "metadata": {
      "id": "plot-base",
      "title": "plot-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/plot-base.md",
      "chunkIndex": "code-14",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "tual bool IsMouseOver(Point pt)\n```\nDetermines if the mouse is hovering over the plot object.\n\n### Opacity\n```csharp\npublic byte Opacity\n```\nControls the rendering opacity (0-255 range).\n\n### HasMouseOverState\n```csharp\npublic virtual bool HasMouseOverState\n```\nIndicates if the plot object has a special mouse-over rendering state.\n\n## Rendering Passes\n\n### RenderPass\n```csharp\npublic virtual int RenderPass\n```\nSpecifies which rendering pass the object participates in (1 or 2).\n\n### RenderPasses\n"
    }
  },
  {
    "pageContent": "tual bool IsMouseOver(Point pt)\n```\nDetermines if the mouse is hovering over the plot object.\n\n### Opacity\n```csharp\npublic byte Opacity\n```\nControls the rendering opacity (0-255 range).\n\n### HasMouseOverState\n```csharp\npublic virtual bool HasMouseOverState\n```\nIndicates if the plot object has a special mouse-over rendering state.\n\n## Rendering Passes\n\n### RenderPass\n```csharp\npublic virtual int RenderPass\n```\nSpecifies which rendering pass the object participates in (1 or 2).\n\n### RenderPasses\n\n\n```csharp\npublic virtual int RenderPasses\n\n```",
    "metadata": {
      "id": "plot-base",
      "title": "plot-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/plot-base.md",
      "chunkIndex": "code-context-14",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public double ConvertDateTimeToX(DateTime dt)\npublic double ConvertIndexToX(int idx)\npublic double ConvertValueToY(double value)\npublic DateTime ConvertXToDateTime(double x)\npublic virtual int ConvertXToIndex(double x)\npublic double ConvertYToValue(double y)\n",
    "metadata": {
      "id": "plot-base",
      "title": "plot-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/plot-base.md",
      "chunkIndex": "code-15",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "endering opacity (0-255 range).\n\n### HasMouseOverState\n```csharp\npublic virtual bool HasMouseOverState\n```\nIndicates if the plot object has a special mouse-over rendering state.\n\n## Rendering Passes\n\n### RenderPass\n```csharp\npublic virtual int RenderPass\n```\nSpecifies which rendering pass the object participates in (1 or 2).\n\n### RenderPasses\n```csharp\npublic virtual int RenderPasses\n```\nDetermines multiple rendering passes (1, 2, or 4).\n\n## Coordinate Conversion Methods\n\n### Conversion Methods\n"
    }
  },
  {
    "pageContent": "endering opacity (0-255 range).\n\n### HasMouseOverState\n```csharp\npublic virtual bool HasMouseOverState\n```\nIndicates if the plot object has a special mouse-over rendering state.\n\n## Rendering Passes\n\n### RenderPass\n```csharp\npublic virtual int RenderPass\n```\nSpecifies which rendering pass the object participates in (1 or 2).\n\n### RenderPasses\n```csharp\npublic virtual int RenderPasses\n```\nDetermines multiple rendering passes (1, 2, or 4).\n\n## Coordinate Conversion Methods\n\n### Conversion Methods\n\n\n```csharp\npublic double ConvertDateTimeToX(DateTime dt)\npublic double ConvertIndexToX(int idx)\npublic double ConvertValueToY(double value)\npublic DateTime ConvertXToDateTime(double x)\npublic virtual int ConvertXToIndex(double x)\npublic double ConvertYToValue(double y)\n\n```",
    "metadata": {
      "id": "plot-base",
      "title": "plot-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/plot-base.md",
      "chunkIndex": "code-context-15",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public virtual string ConfigKey\npublic string Configuration\npublic virtual string Description\npublic virtual bool IsConfigurable\npublic abstract string Name\npublic ParameterList Parameters\n",
    "metadata": {
      "id": "plot-base",
      "title": "plot-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/plot-base.md",
      "chunkIndex": "code-16",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "endering passes (1, 2, or 4).\n\n## Coordinate Conversion Methods\n\n### Conversion Methods\n```csharp\npublic double ConvertDateTimeToX(DateTime dt)\npublic double ConvertIndexToX(int idx)\npublic double ConvertValueToY(double value)\npublic DateTime ConvertXToDateTime(double x)\npublic virtual int ConvertXToIndex(double x)\npublic double ConvertYToValue(double y)\n```\nMethods for converting between chart coordinates (pixels, indices, dates, values).\n\n## Configuration Methods\n\n### Configuration Properties\n"
    }
  },
  {
    "pageContent": "endering passes (1, 2, or 4).\n\n## Coordinate Conversion Methods\n\n### Conversion Methods\n```csharp\npublic double ConvertDateTimeToX(DateTime dt)\npublic double ConvertIndexToX(int idx)\npublic double ConvertValueToY(double value)\npublic DateTime ConvertXToDateTime(double x)\npublic virtual int ConvertXToIndex(double x)\npublic double ConvertYToValue(double y)\n```\nMethods for converting between chart coordinates (pixels, indices, dates, values).\n\n## Configuration Methods\n\n### Configuration Properties\n\n\n```csharp\npublic virtual string ConfigKey\npublic string Configuration\npublic virtual string Description\npublic virtual bool IsConfigurable\npublic abstract string Name\npublic ParameterList Parameters\n\n```",
    "metadata": {
      "id": "plot-base",
      "title": "plot-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/plot-base.md",
      "chunkIndex": "code-context-16",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public virtual string EditConfig()\npublic virtual void ProcessConfig()\n",
    "metadata": {
      "id": "plot-base",
      "title": "plot-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/plot-base.md",
      "chunkIndex": "code-17",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "Index(double x)\npublic double ConvertYToValue(double y)\n```\nMethods for converting between chart coordinates (pixels, indices, dates, values).\n\n## Configuration Methods\n\n### Configuration Properties\n```csharp\npublic virtual string ConfigKey\npublic string Configuration\npublic virtual string Description\npublic virtual bool IsConfigurable\npublic abstract string Name\npublic ParameterList Parameters\n```\nInherited from `Configurable`, these provide configuration management.\n\n### Configuration Methods\n"
    }
  },
  {
    "pageContent": "Index(double x)\npublic double ConvertYToValue(double y)\n```\nMethods for converting between chart coordinates (pixels, indices, dates, values).\n\n## Configuration Methods\n\n### Configuration Properties\n```csharp\npublic virtual string ConfigKey\npublic string Configuration\npublic virtual string Description\npublic virtual bool IsConfigurable\npublic abstract string Name\npublic ParameterList Parameters\n```\nInherited from `Configurable`, these provide configuration management.\n\n### Configuration Methods\n\n\n```csharp\npublic virtual string EditConfig()\npublic virtual void ProcessConfig()\n\n```",
    "metadata": {
      "id": "plot-base",
      "title": "plot-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/plot-base.md",
      "chunkIndex": "code-context-17",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public class CustomPlot : PlotBase\n{\n    public override string Name => \"Custom Plot\";\n\n    public override void Render(DrawingContext dc)\n    {\n        // Custom rendering logic\n        for (int i = 0; i < Bars.Count; i++)\n        {\n            double x = ConvertIndexToX(i);\n            double y = ConvertValueToY(Bars.Close[i]);\n\n            // Draw custom plot elements\n            dc.DrawEllipse(\n                DefaultBrush, \n                DefaultPen, \n                new Point(x, y), \n                2, 2\n            );\n        }\n    }\n\n    public override double GetMaxValue(int start, int end)\n    {\n        // Custom max value calculation\n        return Bars.High.GetMaxValue(start, end);\n    }\n\n    public override double GetMinValue(int start, int end)\n    {\n        // Custom min value calculation\n        return Bars.Low.GetMinValue(start, end);\n    }\n}\n",
    "metadata": {
      "id": "plot-base",
      "title": "plot-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/plot-base.md",
      "chunkIndex": "code-18",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "iguration Properties\n```csharp\npublic virtual string ConfigKey\npublic string Configuration\npublic virtual string Description\npublic virtual bool IsConfigurable\npublic abstract string Name\npublic ParameterList Parameters\n```\nInherited from `Configurable`, these provide configuration management.\n\n### Configuration Methods\n```csharp\npublic virtual string EditConfig()\npublic virtual void ProcessConfig()\n```\nMethods for editing and processing configuration.\n\n## Usage Examples\n\n### Custom Plot Object\n"
    }
  },
  {
    "pageContent": "iguration Properties\n```csharp\npublic virtual string ConfigKey\npublic string Configuration\npublic virtual string Description\npublic virtual bool IsConfigurable\npublic abstract string Name\npublic ParameterList Parameters\n```\nInherited from `Configurable`, these provide configuration management.\n\n### Configuration Methods\n```csharp\npublic virtual string EditConfig()\npublic virtual void ProcessConfig()\n```\nMethods for editing and processing configuration.\n\n## Usage Examples\n\n### Custom Plot Object\n\n\n```csharp\npublic class CustomPlot : PlotBase\n{\n    public override string Name => \"Custom Plot\";\n\n    public override void Render(DrawingContext dc)\n    {\n        // Custom rendering logic\n        for (int i = 0; i < Bars.Count; i++)\n        {\n            double x = ConvertIndexToX(i);\n            double y = ConvertValueToY(Bars.Close[i]);\n\n            // Draw custom plot elements\n            dc.DrawEllipse(\n                DefaultBrush, \n                DefaultPen, \n                new Point(x, y), \n                2, 2\n            );\n        }\n    }\n\n    public override double GetMaxValue(int start, int end)\n    {\n        // Custom max value calculation\n        return Bars.High.GetMaxValue(start, end);\n    }\n\n    public override double GetMinValue(int start, int end)\n    {\n        // Custom min value calculation\n        return Bars.Low.GetMinValue(start, end);\n    }\n}\n\n```",
    "metadata": {
      "id": "plot-base",
      "title": "plot-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/plot-base.md",
      "chunkIndex": "code-context-18",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public class InteractivePlot : PlotBase\n{\n    public override bool IsMouseOver(Point pt)\n    {\n        // Custom mouse-over detection\n        for (int i = 0; i < Bars.Count; i++)\n        {\n            double x = ConvertIndexToX(i);\n            double y = ConvertValueToY(Bars.Close[i]);\n\n            // Check if point is near plot points\n            if (Distance(pt, new Point(x, y)) < 5)\n                return true;\n        }\n        return false;\n    }\n\n    public override void RenderHighlight(DrawingContext dc)\n    {\n        // Render mouse-over highlight\n        // Implementation depends on specific visualization needs\n    }\n\n    private double Distance(Point p1, Point p2)\n    {\n        return Math.Sqrt(\n            Math.Pow(p1.X - p2.X, 2) + \n            Math.Pow(p1.Y - p2.Y, 2)\n        );\n    }\n}\n",
    "metadata": {
      "id": "plot-base",
      "title": "plot-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/plot-base.md",
      "chunkIndex": "code-19",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "e(\n                DefaultBrush, \n                DefaultPen, \n                new Point(x, y), \n                2, 2\n            );\n        }\n    }\n\n    public override double GetMaxValue(int start, int end)\n    {\n        // Custom max value calculation\n        return Bars.High.GetMaxValue(start, end);\n    }\n\n    public override double GetMinValue(int start, int end)\n    {\n        // Custom min value calculation\n        return Bars.Low.GetMinValue(start, end);\n    }\n}\n```\n\n### Interactive Plot\n"
    }
  },
  {
    "pageContent": "e(\n                DefaultBrush, \n                DefaultPen, \n                new Point(x, y), \n                2, 2\n            );\n        }\n    }\n\n    public override double GetMaxValue(int start, int end)\n    {\n        // Custom max value calculation\n        return Bars.High.GetMaxValue(start, end);\n    }\n\n    public override double GetMinValue(int start, int end)\n    {\n        // Custom min value calculation\n        return Bars.Low.GetMinValue(start, end);\n    }\n}\n```\n\n### Interactive Plot\n\n\n```csharp\npublic class InteractivePlot : PlotBase\n{\n    public override bool IsMouseOver(Point pt)\n    {\n        // Custom mouse-over detection\n        for (int i = 0; i < Bars.Count; i++)\n        {\n            double x = ConvertIndexToX(i);\n            double y = ConvertValueToY(Bars.Close[i]);\n\n            // Check if point is near plot points\n            if (Distance(pt, new Point(x, y)) < 5)\n                return true;\n        }\n        return false;\n    }\n\n    public override void RenderHighlight(DrawingContext dc)\n    {\n        // Render mouse-over highlight\n        // Implementation depends on specific visualization needs\n    }\n\n    private double Distance(Point p1, Point p2)\n    {\n        return Math.Sqrt(\n            Math.Pow(p1.X - p2.X, 2) + \n            Math.Pow(p1.Y - p2.Y, 2)\n        );\n    }\n}\n\n```",
    "metadata": {
      "id": "plot-base",
      "title": "plot-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/plot-base.md",
      "chunkIndex": "code-context-19",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "# PositionList Class\n\n**Namespace:** WealthLab.Backtest  \n**Parent:** List<Position>\n\nThe `PositionList` class extends the standard .NET `List<Position>` to provide additional utility methods for analyzing and aggregating position-related metrics.\n\n## Aggregate Metrics\n\n### AvgBarsHeld\n",
    "metadata": {
      "id": "position-list",
      "title": "position-list",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/position-list.md",
      "chunkIndex": 0,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nCalculates and returns the average number of bars held across all Position instances in the list.\n\n### AvgProfit\n",
    "metadata": {
      "id": "position-list",
      "title": "position-list",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/position-list.md",
      "chunkIndex": 1,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nCalculates and returns the average profit of all Position instances in the list.\n\n### AvgProfitPct\n",
    "metadata": {
      "id": "position-list",
      "title": "position-list",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/position-list.md",
      "chunkIndex": 2,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nCalculates and returns the average percentage profit of all Position instances in the list.\n\n### Profit\n",
    "metadata": {
      "id": "position-list",
      "title": "position-list",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/position-list.md",
      "chunkIndex": 3,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nCalculates and returns the total profit of all Position instances in the list.\n\n### ProfitPct\n",
    "metadata": {
      "id": "position-list",
      "title": "position-list",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/position-list.md",
      "chunkIndex": 4,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nCalculates and returns the total percentage profit of all Position instances in the list.\n\n### TotalSize\n",
    "metadata": {
      "id": "position-list",
      "title": "position-list",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/position-list.md",
      "chunkIndex": 5,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nCalculates and returns the total CostBasis plus Profit for all Position instances in the list.\n\n## Usage Examples\n\n",
    "metadata": {
      "id": "position-list",
      "title": "position-list",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/position-list.md",
      "chunkIndex": 6,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n## Best Practices\n\n1. **Performance Analysis**\n   - Use aggregate methods for quick performance insights\n   - Combine with individual Position analysis for detailed understanding\n\n2. **Metric Interpretation**\n   - Consider context when interpreting average metrics\n   - Look at both total and average performance\n   - Account for outliers in the position list\n\n3. **Filtering and Sorting**\n   - Use LINQ or custom methods to filter positions\n   - Analyze subsets of positions for more granular insights\n\n## Example: Advanced Position List Analysis\n\n",
    "metadata": {
      "id": "position-list",
      "title": "position-list",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/position-list.md",
      "chunkIndex": 7,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n## Notes\n\n- Provides convenient aggregation of Position metrics\n- Useful for performance visualization and analysis\n- Extends standard List functionality with trading-specific methods\n- Supports both equity and futures trading modes ",
    "metadata": {
      "id": "position-list",
      "title": "position-list",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/position-list.md",
      "chunkIndex": 8,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "public double AvgBarsHeld\n",
    "metadata": {
      "id": "position-list",
      "title": "position-list",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/position-list.md",
      "chunkIndex": "code-0",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "# PositionList Class\n\n**Namespace:** WealthLab.Backtest  \n**Parent:** List<Position>\n\nThe `PositionList` class extends the standard .NET `List<Position>` to provide additional utility methods for analyzing and aggregating position-related metrics.\n\n## Aggregate Metrics\n\n### AvgBarsHeld\n"
    }
  },
  {
    "pageContent": "# PositionList Class\n\n**Namespace:** WealthLab.Backtest  \n**Parent:** List<Position>\n\nThe `PositionList` class extends the standard .NET `List<Position>` to provide additional utility methods for analyzing and aggregating position-related metrics.\n\n## Aggregate Metrics\n\n### AvgBarsHeld\n\n\n```csharp\npublic double AvgBarsHeld\n\n```",
    "metadata": {
      "id": "position-list",
      "title": "position-list",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/position-list.md",
      "chunkIndex": "code-context-0",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public double AvgProfit\n",
    "metadata": {
      "id": "position-list",
      "title": "position-list",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/position-list.md",
      "chunkIndex": "code-1",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "# PositionList Class\n\n**Namespace:** WealthLab.Backtest  \n**Parent:** List<Position>\n\nThe `PositionList` class extends the standard .NET `List<Position>` to provide additional utility methods for analyzing and aggregating position-related metrics.\n\n## Aggregate Metrics\n\n### AvgBarsHeld\n```csharp\npublic double AvgBarsHeld\n```\nCalculates and returns the average number of bars held across all Position instances in the list.\n\n### AvgProfit\n"
    }
  },
  {
    "pageContent": "# PositionList Class\n\n**Namespace:** WealthLab.Backtest  \n**Parent:** List<Position>\n\nThe `PositionList` class extends the standard .NET `List<Position>` to provide additional utility methods for analyzing and aggregating position-related metrics.\n\n## Aggregate Metrics\n\n### AvgBarsHeld\n```csharp\npublic double AvgBarsHeld\n```\nCalculates and returns the average number of bars held across all Position instances in the list.\n\n### AvgProfit\n\n\n```csharp\npublic double AvgProfit\n\n```",
    "metadata": {
      "id": "position-list",
      "title": "position-list",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/position-list.md",
      "chunkIndex": "code-context-1",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public double AvgProfitPct\n",
    "metadata": {
      "id": "position-list",
      "title": "position-list",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/position-list.md",
      "chunkIndex": "code-2",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "sition>\n\nThe `PositionList` class extends the standard .NET `List<Position>` to provide additional utility methods for analyzing and aggregating position-related metrics.\n\n## Aggregate Metrics\n\n### AvgBarsHeld\n```csharp\npublic double AvgBarsHeld\n```\nCalculates and returns the average number of bars held across all Position instances in the list.\n\n### AvgProfit\n```csharp\npublic double AvgProfit\n```\nCalculates and returns the average profit of all Position instances in the list.\n\n### AvgProfitPct\n"
    }
  },
  {
    "pageContent": "sition>\n\nThe `PositionList` class extends the standard .NET `List<Position>` to provide additional utility methods for analyzing and aggregating position-related metrics.\n\n## Aggregate Metrics\n\n### AvgBarsHeld\n```csharp\npublic double AvgBarsHeld\n```\nCalculates and returns the average number of bars held across all Position instances in the list.\n\n### AvgProfit\n```csharp\npublic double AvgProfit\n```\nCalculates and returns the average profit of all Position instances in the list.\n\n### AvgProfitPct\n\n\n```csharp\npublic double AvgProfitPct\n\n```",
    "metadata": {
      "id": "position-list",
      "title": "position-list",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/position-list.md",
      "chunkIndex": "code-context-2",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public double Profit\n",
    "metadata": {
      "id": "position-list",
      "title": "position-list",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/position-list.md",
      "chunkIndex": "code-3",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "position-related metrics.\n\n## Aggregate Metrics\n\n### AvgBarsHeld\n```csharp\npublic double AvgBarsHeld\n```\nCalculates and returns the average number of bars held across all Position instances in the list.\n\n### AvgProfit\n```csharp\npublic double AvgProfit\n```\nCalculates and returns the average profit of all Position instances in the list.\n\n### AvgProfitPct\n```csharp\npublic double AvgProfitPct\n```\nCalculates and returns the average percentage profit of all Position instances in the list.\n\n### Profit\n"
    }
  },
  {
    "pageContent": "position-related metrics.\n\n## Aggregate Metrics\n\n### AvgBarsHeld\n```csharp\npublic double AvgBarsHeld\n```\nCalculates and returns the average number of bars held across all Position instances in the list.\n\n### AvgProfit\n```csharp\npublic double AvgProfit\n```\nCalculates and returns the average profit of all Position instances in the list.\n\n### AvgProfitPct\n```csharp\npublic double AvgProfitPct\n```\nCalculates and returns the average percentage profit of all Position instances in the list.\n\n### Profit\n\n\n```csharp\npublic double Profit\n\n```",
    "metadata": {
      "id": "position-list",
      "title": "position-list",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/position-list.md",
      "chunkIndex": "code-context-3",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public double ProfitPct\n",
    "metadata": {
      "id": "position-list",
      "title": "position-list",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/position-list.md",
      "chunkIndex": "code-4",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "he average number of bars held across all Position instances in the list.\n\n### AvgProfit\n```csharp\npublic double AvgProfit\n```\nCalculates and returns the average profit of all Position instances in the list.\n\n### AvgProfitPct\n```csharp\npublic double AvgProfitPct\n```\nCalculates and returns the average percentage profit of all Position instances in the list.\n\n### Profit\n```csharp\npublic double Profit\n```\nCalculates and returns the total profit of all Position instances in the list.\n\n### ProfitPct\n"
    }
  },
  {
    "pageContent": "he average number of bars held across all Position instances in the list.\n\n### AvgProfit\n```csharp\npublic double AvgProfit\n```\nCalculates and returns the average profit of all Position instances in the list.\n\n### AvgProfitPct\n```csharp\npublic double AvgProfitPct\n```\nCalculates and returns the average percentage profit of all Position instances in the list.\n\n### Profit\n```csharp\npublic double Profit\n```\nCalculates and returns the total profit of all Position instances in the list.\n\n### ProfitPct\n\n\n```csharp\npublic double ProfitPct\n\n```",
    "metadata": {
      "id": "position-list",
      "title": "position-list",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/position-list.md",
      "chunkIndex": "code-context-4",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public double TotalSize\n",
    "metadata": {
      "id": "position-list",
      "title": "position-list",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/position-list.md",
      "chunkIndex": "code-5",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "eturns the average profit of all Position instances in the list.\n\n### AvgProfitPct\n```csharp\npublic double AvgProfitPct\n```\nCalculates and returns the average percentage profit of all Position instances in the list.\n\n### Profit\n```csharp\npublic double Profit\n```\nCalculates and returns the total profit of all Position instances in the list.\n\n### ProfitPct\n```csharp\npublic double ProfitPct\n```\nCalculates and returns the total percentage profit of all Position instances in the list.\n\n### TotalSize\n"
    }
  },
  {
    "pageContent": "eturns the average profit of all Position instances in the list.\n\n### AvgProfitPct\n```csharp\npublic double AvgProfitPct\n```\nCalculates and returns the average percentage profit of all Position instances in the list.\n\n### Profit\n```csharp\npublic double Profit\n```\nCalculates and returns the total profit of all Position instances in the list.\n\n### ProfitPct\n```csharp\npublic double ProfitPct\n```\nCalculates and returns the total percentage profit of all Position instances in the list.\n\n### TotalSize\n\n\n```csharp\npublic double TotalSize\n\n```",
    "metadata": {
      "id": "position-list",
      "title": "position-list",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/position-list.md",
      "chunkIndex": "code-context-5",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public class PositionAnalyzer\n{\n    public void AnalyzePositionList(PositionList positions)\n    {\n        // Basic performance metrics\n        Console.WriteLine($\"Total Positions: {positions.Count}\");\n        Console.WriteLine($\"Total Profit: {positions.Profit:C2}\");\n        Console.WriteLine($\"Average Profit %: {positions.AvgProfitPct:P2}\");\n        Console.WriteLine($\"Average Bars Held: {positions.AvgBarsHeld:F2}\");\n        \n        // Detailed position analysis\n        foreach (var position in positions)\n        {\n            Console.WriteLine($\"Position Profit: {position.Profit:C2}\");\n            Console.WriteLine($\"Bars Held: {position.BarsHeld}\");\n        }\n    }\n}\n",
    "metadata": {
      "id": "position-list",
      "title": "position-list",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/position-list.md",
      "chunkIndex": "code-6",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "erage percentage profit of all Position instances in the list.\n\n### Profit\n```csharp\npublic double Profit\n```\nCalculates and returns the total profit of all Position instances in the list.\n\n### ProfitPct\n```csharp\npublic double ProfitPct\n```\nCalculates and returns the total percentage profit of all Position instances in the list.\n\n### TotalSize\n```csharp\npublic double TotalSize\n```\nCalculates and returns the total CostBasis plus Profit for all Position instances in the list.\n\n## Usage Examples\n\n"
    }
  },
  {
    "pageContent": "erage percentage profit of all Position instances in the list.\n\n### Profit\n```csharp\npublic double Profit\n```\nCalculates and returns the total profit of all Position instances in the list.\n\n### ProfitPct\n```csharp\npublic double ProfitPct\n```\nCalculates and returns the total percentage profit of all Position instances in the list.\n\n### TotalSize\n```csharp\npublic double TotalSize\n```\nCalculates and returns the total CostBasis plus Profit for all Position instances in the list.\n\n## Usage Examples\n\n\n\n```csharp\npublic class PositionAnalyzer\n{\n    public void AnalyzePositionList(PositionList positions)\n    {\n        // Basic performance metrics\n        Console.WriteLine($\"Total Positions: {positions.Count}\");\n        Console.WriteLine($\"Total Profit: {positions.Profit:C2}\");\n        Console.WriteLine($\"Average Profit %: {positions.AvgProfitPct:P2}\");\n        Console.WriteLine($\"Average Bars Held: {positions.AvgBarsHeld:F2}\");\n        \n        // Detailed position analysis\n        foreach (var position in positions)\n        {\n            Console.WriteLine($\"Position Profit: {position.Profit:C2}\");\n            Console.WriteLine($\"Bars Held: {position.BarsHeld}\");\n        }\n    }\n}\n\n```",
    "metadata": {
      "id": "position-list",
      "title": "position-list",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/position-list.md",
      "chunkIndex": "code-context-6",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public class AdvancedPositionAnalysis\n{\n    public void AnalyzePositionPerformance(PositionList positions)\n    {\n        // Filter and analyze long positions\n        var longPositions = positions\n            .Where(p => p.PositionType == PositionType.Long)\n            .ToList();\n        \n        // Filter and analyze short positions\n        var shortPositions = positions\n            .Where(p => p.PositionType == PositionType.Short)\n            .ToList();\n        \n        Console.WriteLine(\"Long Positions Analysis:\");\n        PrintPositionAnalysis(longPositions);\n        \n        Console.WriteLine(\"\\nShort Positions Analysis:\");\n        PrintPositionAnalysis(shortPositions);\n    }\n    \n    private void PrintPositionAnalysis(List<Position> positions)\n    {\n        if (!positions.Any())\n        {\n            Console.WriteLine(\"No positions to analyze.\");\n            return;\n        }\n        \n        Console.WriteLine($\"Total Positions: {positions.Count}\");\n        Console.WriteLine($\"Total Profit: {positions.Sum(p => p.Profit):C2}\");\n        Console.WriteLine($\"Average Profit %: {positions.Average(p => p.ProfitPercent):P2}\");\n        Console.WriteLine($\"Winning Trades: {positions.Count(p => p.Profit > 0)}\");\n        Console.WriteLine($\"Losing Trades: {positions.Count(p => p.Profit <= 0)}\");\n    }\n}\n",
    "metadata": {
      "id": "position-list",
      "title": "position-list",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/position-list.md",
      "chunkIndex": "code-7",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": " - Use aggregate methods for quick performance insights\n   - Combine with individual Position analysis for detailed understanding\n\n2. **Metric Interpretation**\n   - Consider context when interpreting average metrics\n   - Look at both total and average performance\n   - Account for outliers in the position list\n\n3. **Filtering and Sorting**\n   - Use LINQ or custom methods to filter positions\n   - Analyze subsets of positions for more granular insights\n\n## Example: Advanced Position List Analysis\n\n"
    }
  },
  {
    "pageContent": " - Use aggregate methods for quick performance insights\n   - Combine with individual Position analysis for detailed understanding\n\n2. **Metric Interpretation**\n   - Consider context when interpreting average metrics\n   - Look at both total and average performance\n   - Account for outliers in the position list\n\n3. **Filtering and Sorting**\n   - Use LINQ or custom methods to filter positions\n   - Analyze subsets of positions for more granular insights\n\n## Example: Advanced Position List Analysis\n\n\n\n```csharp\npublic class AdvancedPositionAnalysis\n{\n    public void AnalyzePositionPerformance(PositionList positions)\n    {\n        // Filter and analyze long positions\n        var longPositions = positions\n            .Where(p => p.PositionType == PositionType.Long)\n            .ToList();\n        \n        // Filter and analyze short positions\n        var shortPositions = positions\n            .Where(p => p.PositionType == PositionType.Short)\n            .ToList();\n        \n        Console.WriteLine(\"Long Positions Analysis:\");\n        PrintPositionAnalysis(longPositions);\n        \n        Console.WriteLine(\"\\nShort Positions Analysis:\");\n        PrintPositionAnalysis(shortPositions);\n    }\n    \n    private void PrintPositionAnalysis(List<Position> positions)\n    {\n        if (!positions.Any())\n        {\n            Console.WriteLine(\"No positions to analyze.\");\n            return;\n        }\n        \n        Console.WriteLine($\"Total Positions: {positions.Count}\");\n        Console.WriteLine($\"Total Profit: {positions.Sum(p => p.Profit):C2}\");\n        Console.WriteLine($\"Average Profit %: {positions.Average(p => p.ProfitPercent):P2}\");\n        Console.WriteLine($\"Winning Trades: {positions.Count(p => p.Profit > 0)}\");\n        Console.WriteLine($\"Losing Trades: {positions.Count(p => p.Profit <= 0)}\");\n    }\n}\n\n```",
    "metadata": {
      "id": "position-list",
      "title": "position-list",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/position-list.md",
      "chunkIndex": "code-context-7",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "# PositionSize Class\n\n**Namespace:** WealthLab.Backtest  \n**Parent:** Object\n\nThe `PositionSize` class represents the position sizing configuration established for a backtest, providing detailed control over trade sizing and risk management.\n\n## Position Sizing Methods\n\n### PositionSizeType\n",
    "metadata": {
      "id": "position-size",
      "title": "position-size",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/position-size.md",
      "chunkIndex": 0,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nSpecifies the position sizing method. Possible values:\n- `Dollar`: Fixed currency amount\n- `Quantity`: Fixed number of shares/contracts\n- `PctOfEquity`: Percentage of current simulated equity\n- `MaxRiskPct`: Risks a percentage of current simulated equity based on risk stop level\n- `PosSizer`: Uses a custom `PositionSizerBase` instance for advanced sizing\n\n## Sizing Parameters\n\n### Amount\n",
    "metadata": {
      "id": "position-size",
      "title": "position-size",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/position-size.md",
      "chunkIndex": 1,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nThe amount used for position sizing. Its interpretation depends on the `PositionSizeType`:\n- For `Dollar`: Specific dollar amount per trade\n- For `Quantity`: Number of shares/contracts\n- For `PctOfEquity`: Percentage of equity to allocate\n- For `MaxRiskPct`: Maximum risk percentage\n\n### StartingCapital\n",
    "metadata": {
      "id": "position-size",
      "title": "position-size",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/position-size.md",
      "chunkIndex": 2,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nThe initial capital used for the backtest.\n\n### MarginFactor\n",
    "metadata": {
      "id": "position-size",
      "title": "position-size",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/position-size.md",
      "chunkIndex": 3,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nThe margin factor to apply during the backtest.\n\n## Position Limit Controls\n\n### MaxOpenPositions\n",
    "metadata": {
      "id": "position-size",
      "title": "position-size",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/position-size.md",
      "chunkIndex": 4,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nMaximum number of open positions allowed simultaneously. Zero means no limit.\n\n### MaxOpenPositionsInSymbol\n",
    "metadata": {
      "id": "position-size",
      "title": "position-size",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/position-size.md",
      "chunkIndex": 5,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nMaximum number of open positions per symbol. Zero means no limit.\n\n### MaxOpenPositionsLong\n",
    "metadata": {
      "id": "position-size",
      "title": "position-size",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/position-size.md",
      "chunkIndex": 6,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nMaximum number of open long positions allowed. Zero means no limit.\n\n### MaxOpenPositionsShort\n",
    "metadata": {
      "id": "position-size",
      "title": "position-size",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/position-size.md",
      "chunkIndex": 7,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nMaximum number of open short positions allowed. Zero means no limit.\n\n## Advanced Positioning\n\n### PositionSizer\n",
    "metadata": {
      "id": "position-size",
      "title": "position-size",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/position-size.md",
      "chunkIndex": 8,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nContains the custom `PositionSizerBase` instance when `PositionSizeType` is set to `PosSizer`.\n\n### UseNextBarOpenAsBasisPrice\n",
    "metadata": {
      "id": "position-size",
      "title": "position-size",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/position-size.md",
      "chunkIndex": 9,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nDetermines how the cost basis of a simulated trade is established:\n- `false` (default): Cost basis uses closing price of entry bar\n- `true`: Cost basis uses opening price of next bar\n\n**Note:** \n- `false` may result in missed trades if market gaps up\n- `true` avoids missed trades but assumes broker allows dollar-value orders\n\n## Usage Examples\n\n",
    "metadata": {
      "id": "position-size",
      "title": "position-size",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/position-size.md",
      "chunkIndex": 10,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n## Best Practices\n\n1. **Risk Management**\n   - Use `MaxRiskPct` for consistent risk control\n   - Set appropriate position limits\n   - Consider correlation between positions\n\n2. **Simulation Accuracy**\n   - Choose `UseNextBarOpenAsBasisPrice` based on broker capabilities\n   - Test different position sizing methods\n   - Validate simulations against real-world trading\n\n3. **Flexibility**\n   - Leverage custom `PositionSizerBase` for complex sizing logic\n   - Adapt sizing strategy to market conditions\n   - Regularly review and adjust position sizing\n\n## Notes\n\n- Critical for controlling trade risk and capital allocation\n- Supports various position sizing strategies\n- Enables fine-grained control over backtesting\n- Helps simulate realistic trading scenarios ",
    "metadata": {
      "id": "position-size",
      "title": "position-size",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/position-size.md",
      "chunkIndex": 11,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "public PositionSizeType PositionSizeType\n",
    "metadata": {
      "id": "position-size",
      "title": "position-size",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/position-size.md",
      "chunkIndex": "code-0",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "# PositionSize Class\n\n**Namespace:** WealthLab.Backtest  \n**Parent:** Object\n\nThe `PositionSize` class represents the position sizing configuration established for a backtest, providing detailed control over trade sizing and risk management.\n\n## Position Sizing Methods\n\n### PositionSizeType\n"
    }
  },
  {
    "pageContent": "# PositionSize Class\n\n**Namespace:** WealthLab.Backtest  \n**Parent:** Object\n\nThe `PositionSize` class represents the position sizing configuration established for a backtest, providing detailed control over trade sizing and risk management.\n\n## Position Sizing Methods\n\n### PositionSizeType\n\n\n```csharp\npublic PositionSizeType PositionSizeType\n\n```",
    "metadata": {
      "id": "position-size",
      "title": "position-size",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/position-size.md",
      "chunkIndex": "code-context-0",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public double Amount\n",
    "metadata": {
      "id": "position-size",
      "title": "position-size",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/position-size.md",
      "chunkIndex": "code-1",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "nt.\n\n## Position Sizing Methods\n\n### PositionSizeType\n```csharp\npublic PositionSizeType PositionSizeType\n```\nSpecifies the position sizing method. Possible values:\n- `Dollar`: Fixed currency amount\n- `Quantity`: Fixed number of shares/contracts\n- `PctOfEquity`: Percentage of current simulated equity\n- `MaxRiskPct`: Risks a percentage of current simulated equity based on risk stop level\n- `PosSizer`: Uses a custom `PositionSizerBase` instance for advanced sizing\n\n## Sizing Parameters\n\n### Amount\n"
    }
  },
  {
    "pageContent": "nt.\n\n## Position Sizing Methods\n\n### PositionSizeType\n```csharp\npublic PositionSizeType PositionSizeType\n```\nSpecifies the position sizing method. Possible values:\n- `Dollar`: Fixed currency amount\n- `Quantity`: Fixed number of shares/contracts\n- `PctOfEquity`: Percentage of current simulated equity\n- `MaxRiskPct`: Risks a percentage of current simulated equity based on risk stop level\n- `PosSizer`: Uses a custom `PositionSizerBase` instance for advanced sizing\n\n## Sizing Parameters\n\n### Amount\n\n\n```csharp\npublic double Amount\n\n```",
    "metadata": {
      "id": "position-size",
      "title": "position-size",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/position-size.md",
      "chunkIndex": "code-context-1",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public double StartingCapital\n",
    "metadata": {
      "id": "position-size",
      "title": "position-size",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/position-size.md",
      "chunkIndex": "code-2",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "current simulated equity based on risk stop level\n- `PosSizer`: Uses a custom `PositionSizerBase` instance for advanced sizing\n\n## Sizing Parameters\n\n### Amount\n```csharp\npublic double Amount\n```\nThe amount used for position sizing. Its interpretation depends on the `PositionSizeType`:\n- For `Dollar`: Specific dollar amount per trade\n- For `Quantity`: Number of shares/contracts\n- For `PctOfEquity`: Percentage of equity to allocate\n- For `MaxRiskPct`: Maximum risk percentage\n\n### StartingCapital\n"
    }
  },
  {
    "pageContent": "current simulated equity based on risk stop level\n- `PosSizer`: Uses a custom `PositionSizerBase` instance for advanced sizing\n\n## Sizing Parameters\n\n### Amount\n```csharp\npublic double Amount\n```\nThe amount used for position sizing. Its interpretation depends on the `PositionSizeType`:\n- For `Dollar`: Specific dollar amount per trade\n- For `Quantity`: Number of shares/contracts\n- For `PctOfEquity`: Percentage of equity to allocate\n- For `MaxRiskPct`: Maximum risk percentage\n\n### StartingCapital\n\n\n```csharp\npublic double StartingCapital\n\n```",
    "metadata": {
      "id": "position-size",
      "title": "position-size",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/position-size.md",
      "chunkIndex": "code-context-2",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public double MarginFactor\n",
    "metadata": {
      "id": "position-size",
      "title": "position-size",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/position-size.md",
      "chunkIndex": "code-3",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "e for advanced sizing\n\n## Sizing Parameters\n\n### Amount\n```csharp\npublic double Amount\n```\nThe amount used for position sizing. Its interpretation depends on the `PositionSizeType`:\n- For `Dollar`: Specific dollar amount per trade\n- For `Quantity`: Number of shares/contracts\n- For `PctOfEquity`: Percentage of equity to allocate\n- For `MaxRiskPct`: Maximum risk percentage\n\n### StartingCapital\n```csharp\npublic double StartingCapital\n```\nThe initial capital used for the backtest.\n\n### MarginFactor\n"
    }
  },
  {
    "pageContent": "e for advanced sizing\n\n## Sizing Parameters\n\n### Amount\n```csharp\npublic double Amount\n```\nThe amount used for position sizing. Its interpretation depends on the `PositionSizeType`:\n- For `Dollar`: Specific dollar amount per trade\n- For `Quantity`: Number of shares/contracts\n- For `PctOfEquity`: Percentage of equity to allocate\n- For `MaxRiskPct`: Maximum risk percentage\n\n### StartingCapital\n```csharp\npublic double StartingCapital\n```\nThe initial capital used for the backtest.\n\n### MarginFactor\n\n\n```csharp\npublic double MarginFactor\n\n```",
    "metadata": {
      "id": "position-size",
      "title": "position-size",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/position-size.md",
      "chunkIndex": "code-context-3",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public int MaxOpenPositions\n",
    "metadata": {
      "id": "position-size",
      "title": "position-size",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/position-size.md",
      "chunkIndex": "code-4",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "etation depends on the `PositionSizeType`:\n- For `Dollar`: Specific dollar amount per trade\n- For `Quantity`: Number of shares/contracts\n- For `PctOfEquity`: Percentage of equity to allocate\n- For `MaxRiskPct`: Maximum risk percentage\n\n### StartingCapital\n```csharp\npublic double StartingCapital\n```\nThe initial capital used for the backtest.\n\n### MarginFactor\n```csharp\npublic double MarginFactor\n```\nThe margin factor to apply during the backtest.\n\n## Position Limit Controls\n\n### MaxOpenPositions\n"
    }
  },
  {
    "pageContent": "etation depends on the `PositionSizeType`:\n- For `Dollar`: Specific dollar amount per trade\n- For `Quantity`: Number of shares/contracts\n- For `PctOfEquity`: Percentage of equity to allocate\n- For `MaxRiskPct`: Maximum risk percentage\n\n### StartingCapital\n```csharp\npublic double StartingCapital\n```\nThe initial capital used for the backtest.\n\n### MarginFactor\n```csharp\npublic double MarginFactor\n```\nThe margin factor to apply during the backtest.\n\n## Position Limit Controls\n\n### MaxOpenPositions\n\n\n```csharp\npublic int MaxOpenPositions\n\n```",
    "metadata": {
      "id": "position-size",
      "title": "position-size",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/position-size.md",
      "chunkIndex": "code-context-4",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public int MaxOpenPositionsInSymbol\n",
    "metadata": {
      "id": "position-size",
      "title": "position-size",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/position-size.md",
      "chunkIndex": "code-5",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "quity`: Percentage of equity to allocate\n- For `MaxRiskPct`: Maximum risk percentage\n\n### StartingCapital\n```csharp\npublic double StartingCapital\n```\nThe initial capital used for the backtest.\n\n### MarginFactor\n```csharp\npublic double MarginFactor\n```\nThe margin factor to apply during the backtest.\n\n## Position Limit Controls\n\n### MaxOpenPositions\n```csharp\npublic int MaxOpenPositions\n```\nMaximum number of open positions allowed simultaneously. Zero means no limit.\n\n### MaxOpenPositionsInSymbol\n"
    }
  },
  {
    "pageContent": "quity`: Percentage of equity to allocate\n- For `MaxRiskPct`: Maximum risk percentage\n\n### StartingCapital\n```csharp\npublic double StartingCapital\n```\nThe initial capital used for the backtest.\n\n### MarginFactor\n```csharp\npublic double MarginFactor\n```\nThe margin factor to apply during the backtest.\n\n## Position Limit Controls\n\n### MaxOpenPositions\n```csharp\npublic int MaxOpenPositions\n```\nMaximum number of open positions allowed simultaneously. Zero means no limit.\n\n### MaxOpenPositionsInSymbol\n\n\n```csharp\npublic int MaxOpenPositionsInSymbol\n\n```",
    "metadata": {
      "id": "position-size",
      "title": "position-size",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/position-size.md",
      "chunkIndex": "code-context-5",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public int MaxOpenPositionsLong\n",
    "metadata": {
      "id": "position-size",
      "title": "position-size",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/position-size.md",
      "chunkIndex": "code-6",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "tal\n```\nThe initial capital used for the backtest.\n\n### MarginFactor\n```csharp\npublic double MarginFactor\n```\nThe margin factor to apply during the backtest.\n\n## Position Limit Controls\n\n### MaxOpenPositions\n```csharp\npublic int MaxOpenPositions\n```\nMaximum number of open positions allowed simultaneously. Zero means no limit.\n\n### MaxOpenPositionsInSymbol\n```csharp\npublic int MaxOpenPositionsInSymbol\n```\nMaximum number of open positions per symbol. Zero means no limit.\n\n### MaxOpenPositionsLong\n"
    }
  },
  {
    "pageContent": "tal\n```\nThe initial capital used for the backtest.\n\n### MarginFactor\n```csharp\npublic double MarginFactor\n```\nThe margin factor to apply during the backtest.\n\n## Position Limit Controls\n\n### MaxOpenPositions\n```csharp\npublic int MaxOpenPositions\n```\nMaximum number of open positions allowed simultaneously. Zero means no limit.\n\n### MaxOpenPositionsInSymbol\n```csharp\npublic int MaxOpenPositionsInSymbol\n```\nMaximum number of open positions per symbol. Zero means no limit.\n\n### MaxOpenPositionsLong\n\n\n```csharp\npublic int MaxOpenPositionsLong\n\n```",
    "metadata": {
      "id": "position-size",
      "title": "position-size",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/position-size.md",
      "chunkIndex": "code-context-6",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public int MaxOpenPositionsShort\n",
    "metadata": {
      "id": "position-size",
      "title": "position-size",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/position-size.md",
      "chunkIndex": "code-7",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ng the backtest.\n\n## Position Limit Controls\n\n### MaxOpenPositions\n```csharp\npublic int MaxOpenPositions\n```\nMaximum number of open positions allowed simultaneously. Zero means no limit.\n\n### MaxOpenPositionsInSymbol\n```csharp\npublic int MaxOpenPositionsInSymbol\n```\nMaximum number of open positions per symbol. Zero means no limit.\n\n### MaxOpenPositionsLong\n```csharp\npublic int MaxOpenPositionsLong\n```\nMaximum number of open long positions allowed. Zero means no limit.\n\n### MaxOpenPositionsShort\n"
    }
  },
  {
    "pageContent": "ng the backtest.\n\n## Position Limit Controls\n\n### MaxOpenPositions\n```csharp\npublic int MaxOpenPositions\n```\nMaximum number of open positions allowed simultaneously. Zero means no limit.\n\n### MaxOpenPositionsInSymbol\n```csharp\npublic int MaxOpenPositionsInSymbol\n```\nMaximum number of open positions per symbol. Zero means no limit.\n\n### MaxOpenPositionsLong\n```csharp\npublic int MaxOpenPositionsLong\n```\nMaximum number of open long positions allowed. Zero means no limit.\n\n### MaxOpenPositionsShort\n\n\n```csharp\npublic int MaxOpenPositionsShort\n\n```",
    "metadata": {
      "id": "position-size",
      "title": "position-size",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/position-size.md",
      "chunkIndex": "code-context-7",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public PositionSizerBase PositionSizer\n",
    "metadata": {
      "id": "position-size",
      "title": "position-size",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/position-size.md",
      "chunkIndex": "code-8",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "usly. Zero means no limit.\n\n### MaxOpenPositionsInSymbol\n```csharp\npublic int MaxOpenPositionsInSymbol\n```\nMaximum number of open positions per symbol. Zero means no limit.\n\n### MaxOpenPositionsLong\n```csharp\npublic int MaxOpenPositionsLong\n```\nMaximum number of open long positions allowed. Zero means no limit.\n\n### MaxOpenPositionsShort\n```csharp\npublic int MaxOpenPositionsShort\n```\nMaximum number of open short positions allowed. Zero means no limit.\n\n## Advanced Positioning\n\n### PositionSizer\n"
    }
  },
  {
    "pageContent": "usly. Zero means no limit.\n\n### MaxOpenPositionsInSymbol\n```csharp\npublic int MaxOpenPositionsInSymbol\n```\nMaximum number of open positions per symbol. Zero means no limit.\n\n### MaxOpenPositionsLong\n```csharp\npublic int MaxOpenPositionsLong\n```\nMaximum number of open long positions allowed. Zero means no limit.\n\n### MaxOpenPositionsShort\n```csharp\npublic int MaxOpenPositionsShort\n```\nMaximum number of open short positions allowed. Zero means no limit.\n\n## Advanced Positioning\n\n### PositionSizer\n\n\n```csharp\npublic PositionSizerBase PositionSizer\n\n```",
    "metadata": {
      "id": "position-size",
      "title": "position-size",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/position-size.md",
      "chunkIndex": "code-context-8",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public bool UseNextBarOpenAsBasisPrice\n",
    "metadata": {
      "id": "position-size",
      "title": "position-size",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/position-size.md",
      "chunkIndex": "code-9",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "xOpenPositionsLong\n```csharp\npublic int MaxOpenPositionsLong\n```\nMaximum number of open long positions allowed. Zero means no limit.\n\n### MaxOpenPositionsShort\n```csharp\npublic int MaxOpenPositionsShort\n```\nMaximum number of open short positions allowed. Zero means no limit.\n\n## Advanced Positioning\n\n### PositionSizer\n```csharp\npublic PositionSizerBase PositionSizer\n```\nContains the custom `PositionSizerBase` instance when `PositionSizeType` is set to `PosSizer`.\n\n### UseNextBarOpenAsBasisPrice\n"
    }
  },
  {
    "pageContent": "xOpenPositionsLong\n```csharp\npublic int MaxOpenPositionsLong\n```\nMaximum number of open long positions allowed. Zero means no limit.\n\n### MaxOpenPositionsShort\n```csharp\npublic int MaxOpenPositionsShort\n```\nMaximum number of open short positions allowed. Zero means no limit.\n\n## Advanced Positioning\n\n### PositionSizer\n```csharp\npublic PositionSizerBase PositionSizer\n```\nContains the custom `PositionSizerBase` instance when `PositionSizeType` is set to `PosSizer`.\n\n### UseNextBarOpenAsBasisPrice\n\n\n```csharp\npublic bool UseNextBarOpenAsBasisPrice\n\n```",
    "metadata": {
      "id": "position-size",
      "title": "position-size",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/position-size.md",
      "chunkIndex": "code-context-9",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public class BacktestConfigurer\n{\n    public void ConfigurePositionSizing(PositionSize posSize)\n    {\n        // Configure dollar-based position sizing\n        posSize.PositionSizeType = PositionSizeType.Dollar;\n        posSize.Amount = 10000; // $10,000 per trade\n        posSize.StartingCapital = 100000;\n\n        // Limit total open positions\n        posSize.MaxOpenPositions = 5;\n        posSize.MaxOpenPositionsLong = 3;\n        posSize.MaxOpenPositionsShort = 2;\n\n        // Use next bar's open price for more accurate simulations\n        posSize.UseNextBarOpenAsBasisPrice = true;\n    }\n\n    public void ConfigureRiskBasedSizing(PositionSize posSize)\n    {\n        // Configure risk percentage-based sizing\n        posSize.PositionSizeType = PositionSizeType.MaxRiskPct;\n        posSize.Amount = 0.02; // 2% risk per trade\n        posSize.StartingCapital = 100000;\n    }\n\n    public void ConfigureCustomPositionSizer(PositionSize posSize, PositionSizerBase customSizer)\n    {\n        // Use a custom position sizer for advanced logic\n        posSize.PositionSizeType = PositionSizeType.PosSizer;\n        posSize.PositionSizer = customSizer;\n    }\n}\n",
    "metadata": {
      "id": "position-size",
      "title": "position-size",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/position-size.md",
      "chunkIndex": "code-10",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "onSizerBase` instance when `PositionSizeType` is set to `PosSizer`.\n\n### UseNextBarOpenAsBasisPrice\n```csharp\npublic bool UseNextBarOpenAsBasisPrice\n```\nDetermines how the cost basis of a simulated trade is established:\n- `false` (default): Cost basis uses closing price of entry bar\n- `true`: Cost basis uses opening price of next bar\n\n**Note:** \n- `false` may result in missed trades if market gaps up\n- `true` avoids missed trades but assumes broker allows dollar-value orders\n\n## Usage Examples\n\n"
    }
  },
  {
    "pageContent": "onSizerBase` instance when `PositionSizeType` is set to `PosSizer`.\n\n### UseNextBarOpenAsBasisPrice\n```csharp\npublic bool UseNextBarOpenAsBasisPrice\n```\nDetermines how the cost basis of a simulated trade is established:\n- `false` (default): Cost basis uses closing price of entry bar\n- `true`: Cost basis uses opening price of next bar\n\n**Note:** \n- `false` may result in missed trades if market gaps up\n- `true` avoids missed trades but assumes broker allows dollar-value orders\n\n## Usage Examples\n\n\n\n```csharp\npublic class BacktestConfigurer\n{\n    public void ConfigurePositionSizing(PositionSize posSize)\n    {\n        // Configure dollar-based position sizing\n        posSize.PositionSizeType = PositionSizeType.Dollar;\n        posSize.Amount = 10000; // $10,000 per trade\n        posSize.StartingCapital = 100000;\n\n        // Limit total open positions\n        posSize.MaxOpenPositions = 5;\n        posSize.MaxOpenPositionsLong = 3;\n        posSize.MaxOpenPositionsShort = 2;\n\n        // Use next bar's open price for more accurate simulations\n        posSize.UseNextBarOpenAsBasisPrice = true;\n    }\n\n    public void ConfigureRiskBasedSizing(PositionSize posSize)\n    {\n        // Configure risk percentage-based sizing\n        posSize.PositionSizeType = PositionSizeType.MaxRiskPct;\n        posSize.Amount = 0.02; // 2% risk per trade\n        posSize.StartingCapital = 100000;\n    }\n\n    public void ConfigureCustomPositionSizer(PositionSize posSize, PositionSizerBase customSizer)\n    {\n        // Use a custom position sizer for advanced logic\n        posSize.PositionSizeType = PositionSizeType.PosSizer;\n        posSize.PositionSizer = customSizer;\n    }\n}\n\n```",
    "metadata": {
      "id": "position-size",
      "title": "position-size",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/position-size.md",
      "chunkIndex": "code-context-10",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "# Position Class\n\n**Namespace:** WealthLab.Backtest  \n**Parent:** Object\n\nThe `Position` class represents a long or short position generated by the backtester, providing detailed information about trade execution, performance, and metrics.\n\n## Core Properties\n\n### Bars\n",
    "metadata": {
      "id": "position",
      "title": "position",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/position.md",
      "chunkIndex": 0,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the `BarHistory` instance that this Position was based on. Useful for determining which symbol a particular Position was established on, especially in multi-symbol strategies.\n\n### BarsHeld\n",
    "metadata": {
      "id": "position",
      "title": "position",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/position.md",
      "chunkIndex": 1,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the number of bars the position was held. If the Position is still active, returns the total number of bars held as of the last chart bar.\n\n### IsOpen\n",
    "metadata": {
      "id": "position",
      "title": "position",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/position.md",
      "chunkIndex": 2,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns `true` if the Position is currently open (not yet exited).\n\n### PositionType\n",
    "metadata": {
      "id": "position",
      "title": "position",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/position.md",
      "chunkIndex": 3,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the position type, with possible values:\n- `PositionType.Long`\n- `PositionType.Short`\n\n## Entry Details\n\n### EntryBar\n",
    "metadata": {
      "id": "position",
      "title": "position",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/position.md",
      "chunkIndex": 4,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the bar number where the Position entry occurred.\n\n### EntryDate\n",
    "metadata": {
      "id": "position",
      "title": "position",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/position.md",
      "chunkIndex": 5,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the DateTime the Position was entered.\n\n### EntryPrice\n",
    "metadata": {
      "id": "position",
      "title": "position",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/position.md",
      "chunkIndex": 6,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the price at which the Position was entered.\n\n### EntryOrderType\n",
    "metadata": {
      "id": "position",
      "title": "position",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/position.md",
      "chunkIndex": 7,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the type of order used to establish the Position:\n- `OrderType.Market`\n- `OrderType.Limit`\n- `OrderType.Stop`\n- `OrderType.MarketClose`\n- `OrderType.LimitMove`\n- `OrderType.FixedPrice`\n\n### BasisPrice\n",
    "metadata": {
      "id": "position",
      "title": "position",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/position.md",
      "chunkIndex": 8,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nThe price used to establish the Position's share size. For market orders, typically the previous bar's closing price, but configurable in Strategy Settings.\n\n## Exit Details\n\n### ExitBar\n",
    "metadata": {
      "id": "position",
      "title": "position",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/position.md",
      "chunkIndex": 9,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the bar number where the Position exit occurred. Returns -1 if the Position is still open.\n\n### ExitDate\n",
    "metadata": {
      "id": "position",
      "title": "position",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/position.md",
      "chunkIndex": 10,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the DateTime the Position was exited. Returns `DateTime.MaxValue` if the Position is still open.\n\n### ExitPrice\n",
    "metadata": {
      "id": "position",
      "title": "position",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/position.md",
      "chunkIndex": 11,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the price at which the Position was exited. Returns zero if the Position is still open.\n\n### ExitOrderType\n",
    "metadata": {
      "id": "position",
      "title": "position",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/position.md",
      "chunkIndex": 12,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the type of order used to close the Position:\n- `OrderType.Market`\n- `OrderType.Limit`\n- `OrderType.Stop`\n- `OrderType.MarketClose`\n- `OrderType.FixedPrice`\n\n## Performance Metrics\n\n### Profit\n",
    "metadata": {
      "id": "position",
      "title": "position",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/position.md",
      "chunkIndex": 13,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the Position's profit with commissions deducted. Primarily for Performance Visualizers.\n\n### ProfitPercent\n",
    "metadata": {
      "id": "position",
      "title": "position",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/position.md",
      "chunkIndex": 14,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the percentage profit in the base currency, with commissions deducted.\n\n### MAE (Maximum Adverse Excursion)\n",
    "metadata": {
      "id": "position",
      "title": "position",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/position.md",
      "chunkIndex": 15,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the largest intraday loss experienced by the Position, with commissions applied.\n\n### MFE (Maximum Favorable Excursion)\n",
    "metadata": {
      "id": "position",
      "title": "position",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/position.md",
      "chunkIndex": 16,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the highest intraday profit experienced by the Position, with commissions applied.\n\n## Commission and Cost\n\n### Commission\n",
    "metadata": {
      "id": "position",
      "title": "position",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/position.md",
      "chunkIndex": 17,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the total commission (entry plus exit) in the base currency.\n\n### CostBasis\n",
    "metadata": {
      "id": "position",
      "title": "position",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/position.md",
      "chunkIndex": 18,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the cost basis in the base currency, calculated as EntryPrice multiplied by Quantity.\n\n## Additional Methods and Properties\n\n### DaysInPosition\n",
    "metadata": {
      "id": "position",
      "title": "position",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/position.md",
      "chunkIndex": 19,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the number of trading days passed since establishing the Position when using intraday data.\n\n### GetMetric\n",
    "metadata": {
      "id": "position",
      "title": "position",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/position.md",
      "chunkIndex": 20,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the value of a Position Metric, either built-in or custom.\n\n### SetMetric\n",
    "metadata": {
      "id": "position",
      "title": "position",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/position.md",
      "chunkIndex": 21,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nAdds a custom Position Metric.\n\n## Usage Examples\n\n",
    "metadata": {
      "id": "position",
      "title": "position",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/position.md",
      "chunkIndex": 22,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n## Best Practices\n\n1. Use Position properties primarily in Performance Visualizers\n2. For strategy development, use methods like `ProfitAsOf` during backtesting\n3. Be aware of multi-currency backtest implications\n4. Leverage custom metrics for advanced analysis\n\n## Notes\n\n- Intended for performance analysis and visualization\n- Provides comprehensive trade execution and performance details\n- Supports both equity and futures trading modes ",
    "metadata": {
      "id": "position",
      "title": "position",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/position.md",
      "chunkIndex": 23,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "public BarHistory Bars\n",
    "metadata": {
      "id": "position",
      "title": "position",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/position.md",
      "chunkIndex": "code-0",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "# Position Class\n\n**Namespace:** WealthLab.Backtest  \n**Parent:** Object\n\nThe `Position` class represents a long or short position generated by the backtester, providing detailed information about trade execution, performance, and metrics.\n\n## Core Properties\n\n### Bars\n"
    }
  },
  {
    "pageContent": "# Position Class\n\n**Namespace:** WealthLab.Backtest  \n**Parent:** Object\n\nThe `Position` class represents a long or short position generated by the backtester, providing detailed information about trade execution, performance, and metrics.\n\n## Core Properties\n\n### Bars\n\n\n```csharp\npublic BarHistory Bars\n\n```",
    "metadata": {
      "id": "position",
      "title": "position",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/position.md",
      "chunkIndex": "code-context-0",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public int BarsHeld\n",
    "metadata": {
      "id": "position",
      "title": "position",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/position.md",
      "chunkIndex": "code-1",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ition Class\n\n**Namespace:** WealthLab.Backtest  \n**Parent:** Object\n\nThe `Position` class represents a long or short position generated by the backtester, providing detailed information about trade execution, performance, and metrics.\n\n## Core Properties\n\n### Bars\n```csharp\npublic BarHistory Bars\n```\nReturns the `BarHistory` instance that this Position was based on. Useful for determining which symbol a particular Position was established on, especially in multi-symbol strategies.\n\n### BarsHeld\n"
    }
  },
  {
    "pageContent": "ition Class\n\n**Namespace:** WealthLab.Backtest  \n**Parent:** Object\n\nThe `Position` class represents a long or short position generated by the backtester, providing detailed information about trade execution, performance, and metrics.\n\n## Core Properties\n\n### Bars\n```csharp\npublic BarHistory Bars\n```\nReturns the `BarHistory` instance that this Position was based on. Useful for determining which symbol a particular Position was established on, especially in multi-symbol strategies.\n\n### BarsHeld\n\n\n```csharp\npublic int BarsHeld\n\n```",
    "metadata": {
      "id": "position",
      "title": "position",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/position.md",
      "chunkIndex": "code-context-1",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public bool IsOpen\n",
    "metadata": {
      "id": "position",
      "title": "position",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/position.md",
      "chunkIndex": "code-2",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "rade execution, performance, and metrics.\n\n## Core Properties\n\n### Bars\n```csharp\npublic BarHistory Bars\n```\nReturns the `BarHistory` instance that this Position was based on. Useful for determining which symbol a particular Position was established on, especially in multi-symbol strategies.\n\n### BarsHeld\n```csharp\npublic int BarsHeld\n```\nReturns the number of bars the position was held. If the Position is still active, returns the total number of bars held as of the last chart bar.\n\n### IsOpen\n"
    }
  },
  {
    "pageContent": "rade execution, performance, and metrics.\n\n## Core Properties\n\n### Bars\n```csharp\npublic BarHistory Bars\n```\nReturns the `BarHistory` instance that this Position was based on. Useful for determining which symbol a particular Position was established on, especially in multi-symbol strategies.\n\n### BarsHeld\n```csharp\npublic int BarsHeld\n```\nReturns the number of bars the position was held. If the Position is still active, returns the total number of bars held as of the last chart bar.\n\n### IsOpen\n\n\n```csharp\npublic bool IsOpen\n\n```",
    "metadata": {
      "id": "position",
      "title": "position",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/position.md",
      "chunkIndex": "code-context-2",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public PositionType PositionType\n",
    "metadata": {
      "id": "position",
      "title": "position",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/position.md",
      "chunkIndex": "code-3",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "he `BarHistory` instance that this Position was based on. Useful for determining which symbol a particular Position was established on, especially in multi-symbol strategies.\n\n### BarsHeld\n```csharp\npublic int BarsHeld\n```\nReturns the number of bars the position was held. If the Position is still active, returns the total number of bars held as of the last chart bar.\n\n### IsOpen\n```csharp\npublic bool IsOpen\n```\nReturns `true` if the Position is currently open (not yet exited).\n\n### PositionType\n"
    }
  },
  {
    "pageContent": "he `BarHistory` instance that this Position was based on. Useful for determining which symbol a particular Position was established on, especially in multi-symbol strategies.\n\n### BarsHeld\n```csharp\npublic int BarsHeld\n```\nReturns the number of bars the position was held. If the Position is still active, returns the total number of bars held as of the last chart bar.\n\n### IsOpen\n```csharp\npublic bool IsOpen\n```\nReturns `true` if the Position is currently open (not yet exited).\n\n### PositionType\n\n\n```csharp\npublic PositionType PositionType\n\n```",
    "metadata": {
      "id": "position",
      "title": "position",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/position.md",
      "chunkIndex": "code-context-3",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public int EntryBar\n",
    "metadata": {
      "id": "position",
      "title": "position",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/position.md",
      "chunkIndex": "code-4",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": ".\n\n### BarsHeld\n```csharp\npublic int BarsHeld\n```\nReturns the number of bars the position was held. If the Position is still active, returns the total number of bars held as of the last chart bar.\n\n### IsOpen\n```csharp\npublic bool IsOpen\n```\nReturns `true` if the Position is currently open (not yet exited).\n\n### PositionType\n```csharp\npublic PositionType PositionType\n```\nReturns the position type, with possible values:\n- `PositionType.Long`\n- `PositionType.Short`\n\n## Entry Details\n\n### EntryBar\n"
    }
  },
  {
    "pageContent": ".\n\n### BarsHeld\n```csharp\npublic int BarsHeld\n```\nReturns the number of bars the position was held. If the Position is still active, returns the total number of bars held as of the last chart bar.\n\n### IsOpen\n```csharp\npublic bool IsOpen\n```\nReturns `true` if the Position is currently open (not yet exited).\n\n### PositionType\n```csharp\npublic PositionType PositionType\n```\nReturns the position type, with possible values:\n- `PositionType.Long`\n- `PositionType.Short`\n\n## Entry Details\n\n### EntryBar\n\n\n```csharp\npublic int EntryBar\n\n```",
    "metadata": {
      "id": "position",
      "title": "position",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/position.md",
      "chunkIndex": "code-context-4",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public DateTime EntryDate\n",
    "metadata": {
      "id": "position",
      "title": "position",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/position.md",
      "chunkIndex": "code-5",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "Position is still active, returns the total number of bars held as of the last chart bar.\n\n### IsOpen\n```csharp\npublic bool IsOpen\n```\nReturns `true` if the Position is currently open (not yet exited).\n\n### PositionType\n```csharp\npublic PositionType PositionType\n```\nReturns the position type, with possible values:\n- `PositionType.Long`\n- `PositionType.Short`\n\n## Entry Details\n\n### EntryBar\n```csharp\npublic int EntryBar\n```\nReturns the bar number where the Position entry occurred.\n\n### EntryDate\n"
    }
  },
  {
    "pageContent": "Position is still active, returns the total number of bars held as of the last chart bar.\n\n### IsOpen\n```csharp\npublic bool IsOpen\n```\nReturns `true` if the Position is currently open (not yet exited).\n\n### PositionType\n```csharp\npublic PositionType PositionType\n```\nReturns the position type, with possible values:\n- `PositionType.Long`\n- `PositionType.Short`\n\n## Entry Details\n\n### EntryBar\n```csharp\npublic int EntryBar\n```\nReturns the bar number where the Position entry occurred.\n\n### EntryDate\n\n\n```csharp\npublic DateTime EntryDate\n\n```",
    "metadata": {
      "id": "position",
      "title": "position",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/position.md",
      "chunkIndex": "code-context-5",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public double EntryPrice\n",
    "metadata": {
      "id": "position",
      "title": "position",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/position.md",
      "chunkIndex": "code-6",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "``csharp\npublic bool IsOpen\n```\nReturns `true` if the Position is currently open (not yet exited).\n\n### PositionType\n```csharp\npublic PositionType PositionType\n```\nReturns the position type, with possible values:\n- `PositionType.Long`\n- `PositionType.Short`\n\n## Entry Details\n\n### EntryBar\n```csharp\npublic int EntryBar\n```\nReturns the bar number where the Position entry occurred.\n\n### EntryDate\n```csharp\npublic DateTime EntryDate\n```\nReturns the DateTime the Position was entered.\n\n### EntryPrice\n"
    }
  },
  {
    "pageContent": "``csharp\npublic bool IsOpen\n```\nReturns `true` if the Position is currently open (not yet exited).\n\n### PositionType\n```csharp\npublic PositionType PositionType\n```\nReturns the position type, with possible values:\n- `PositionType.Long`\n- `PositionType.Short`\n\n## Entry Details\n\n### EntryBar\n```csharp\npublic int EntryBar\n```\nReturns the bar number where the Position entry occurred.\n\n### EntryDate\n```csharp\npublic DateTime EntryDate\n```\nReturns the DateTime the Position was entered.\n\n### EntryPrice\n\n\n```csharp\npublic double EntryPrice\n\n```",
    "metadata": {
      "id": "position",
      "title": "position",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/position.md",
      "chunkIndex": "code-context-6",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public OrderType EntryOrderType\n",
    "metadata": {
      "id": "position",
      "title": "position",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/position.md",
      "chunkIndex": "code-7",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "Type\n```csharp\npublic PositionType PositionType\n```\nReturns the position type, with possible values:\n- `PositionType.Long`\n- `PositionType.Short`\n\n## Entry Details\n\n### EntryBar\n```csharp\npublic int EntryBar\n```\nReturns the bar number where the Position entry occurred.\n\n### EntryDate\n```csharp\npublic DateTime EntryDate\n```\nReturns the DateTime the Position was entered.\n\n### EntryPrice\n```csharp\npublic double EntryPrice\n```\nReturns the price at which the Position was entered.\n\n### EntryOrderType\n"
    }
  },
  {
    "pageContent": "Type\n```csharp\npublic PositionType PositionType\n```\nReturns the position type, with possible values:\n- `PositionType.Long`\n- `PositionType.Short`\n\n## Entry Details\n\n### EntryBar\n```csharp\npublic int EntryBar\n```\nReturns the bar number where the Position entry occurred.\n\n### EntryDate\n```csharp\npublic DateTime EntryDate\n```\nReturns the DateTime the Position was entered.\n\n### EntryPrice\n```csharp\npublic double EntryPrice\n```\nReturns the price at which the Position was entered.\n\n### EntryOrderType\n\n\n```csharp\npublic OrderType EntryOrderType\n\n```",
    "metadata": {
      "id": "position",
      "title": "position",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/position.md",
      "chunkIndex": "code-context-7",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public double BasisPrice\n",
    "metadata": {
      "id": "position",
      "title": "position",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/position.md",
      "chunkIndex": "code-8",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ntry occurred.\n\n### EntryDate\n```csharp\npublic DateTime EntryDate\n```\nReturns the DateTime the Position was entered.\n\n### EntryPrice\n```csharp\npublic double EntryPrice\n```\nReturns the price at which the Position was entered.\n\n### EntryOrderType\n```csharp\npublic OrderType EntryOrderType\n```\nReturns the type of order used to establish the Position:\n- `OrderType.Market`\n- `OrderType.Limit`\n- `OrderType.Stop`\n- `OrderType.MarketClose`\n- `OrderType.LimitMove`\n- `OrderType.FixedPrice`\n\n### BasisPrice\n"
    }
  },
  {
    "pageContent": "ntry occurred.\n\n### EntryDate\n```csharp\npublic DateTime EntryDate\n```\nReturns the DateTime the Position was entered.\n\n### EntryPrice\n```csharp\npublic double EntryPrice\n```\nReturns the price at which the Position was entered.\n\n### EntryOrderType\n```csharp\npublic OrderType EntryOrderType\n```\nReturns the type of order used to establish the Position:\n- `OrderType.Market`\n- `OrderType.Limit`\n- `OrderType.Stop`\n- `OrderType.MarketClose`\n- `OrderType.LimitMove`\n- `OrderType.FixedPrice`\n\n### BasisPrice\n\n\n```csharp\npublic double BasisPrice\n\n```",
    "metadata": {
      "id": "position",
      "title": "position",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/position.md",
      "chunkIndex": "code-context-8",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public int ExitBar\n",
    "metadata": {
      "id": "position",
      "title": "position",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/position.md",
      "chunkIndex": "code-9",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "### EntryOrderType\n```csharp\npublic OrderType EntryOrderType\n```\nReturns the type of order used to establish the Position:\n- `OrderType.Market`\n- `OrderType.Limit`\n- `OrderType.Stop`\n- `OrderType.MarketClose`\n- `OrderType.LimitMove`\n- `OrderType.FixedPrice`\n\n### BasisPrice\n```csharp\npublic double BasisPrice\n```\nThe price used to establish the Position's share size. For market orders, typically the previous bar's closing price, but configurable in Strategy Settings.\n\n## Exit Details\n\n### ExitBar\n"
    }
  },
  {
    "pageContent": "### EntryOrderType\n```csharp\npublic OrderType EntryOrderType\n```\nReturns the type of order used to establish the Position:\n- `OrderType.Market`\n- `OrderType.Limit`\n- `OrderType.Stop`\n- `OrderType.MarketClose`\n- `OrderType.LimitMove`\n- `OrderType.FixedPrice`\n\n### BasisPrice\n```csharp\npublic double BasisPrice\n```\nThe price used to establish the Position's share size. For market orders, typically the previous bar's closing price, but configurable in Strategy Settings.\n\n## Exit Details\n\n### ExitBar\n\n\n```csharp\npublic int ExitBar\n\n```",
    "metadata": {
      "id": "position",
      "title": "position",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/position.md",
      "chunkIndex": "code-context-9",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public DateTime ExitDate\n",
    "metadata": {
      "id": "position",
      "title": "position",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/position.md",
      "chunkIndex": "code-10",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "`OrderType.Limit`\n- `OrderType.Stop`\n- `OrderType.MarketClose`\n- `OrderType.LimitMove`\n- `OrderType.FixedPrice`\n\n### BasisPrice\n```csharp\npublic double BasisPrice\n```\nThe price used to establish the Position's share size. For market orders, typically the previous bar's closing price, but configurable in Strategy Settings.\n\n## Exit Details\n\n### ExitBar\n```csharp\npublic int ExitBar\n```\nReturns the bar number where the Position exit occurred. Returns -1 if the Position is still open.\n\n### ExitDate\n"
    }
  },
  {
    "pageContent": "`OrderType.Limit`\n- `OrderType.Stop`\n- `OrderType.MarketClose`\n- `OrderType.LimitMove`\n- `OrderType.FixedPrice`\n\n### BasisPrice\n```csharp\npublic double BasisPrice\n```\nThe price used to establish the Position's share size. For market orders, typically the previous bar's closing price, but configurable in Strategy Settings.\n\n## Exit Details\n\n### ExitBar\n```csharp\npublic int ExitBar\n```\nReturns the bar number where the Position exit occurred. Returns -1 if the Position is still open.\n\n### ExitDate\n\n\n```csharp\npublic DateTime ExitDate\n\n```",
    "metadata": {
      "id": "position",
      "title": "position",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/position.md",
      "chunkIndex": "code-context-10",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public double ExitPrice\n",
    "metadata": {
      "id": "position",
      "title": "position",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/position.md",
      "chunkIndex": "code-11",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ice\n```\nThe price used to establish the Position's share size. For market orders, typically the previous bar's closing price, but configurable in Strategy Settings.\n\n## Exit Details\n\n### ExitBar\n```csharp\npublic int ExitBar\n```\nReturns the bar number where the Position exit occurred. Returns -1 if the Position is still open.\n\n### ExitDate\n```csharp\npublic DateTime ExitDate\n```\nReturns the DateTime the Position was exited. Returns `DateTime.MaxValue` if the Position is still open.\n\n### ExitPrice\n"
    }
  },
  {
    "pageContent": "ice\n```\nThe price used to establish the Position's share size. For market orders, typically the previous bar's closing price, but configurable in Strategy Settings.\n\n## Exit Details\n\n### ExitBar\n```csharp\npublic int ExitBar\n```\nReturns the bar number where the Position exit occurred. Returns -1 if the Position is still open.\n\n### ExitDate\n```csharp\npublic DateTime ExitDate\n```\nReturns the DateTime the Position was exited. Returns `DateTime.MaxValue` if the Position is still open.\n\n### ExitPrice\n\n\n```csharp\npublic double ExitPrice\n\n```",
    "metadata": {
      "id": "position",
      "title": "position",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/position.md",
      "chunkIndex": "code-context-11",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public OrderType ExitOrderType\n",
    "metadata": {
      "id": "position",
      "title": "position",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/position.md",
      "chunkIndex": "code-12",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "y Settings.\n\n## Exit Details\n\n### ExitBar\n```csharp\npublic int ExitBar\n```\nReturns the bar number where the Position exit occurred. Returns -1 if the Position is still open.\n\n### ExitDate\n```csharp\npublic DateTime ExitDate\n```\nReturns the DateTime the Position was exited. Returns `DateTime.MaxValue` if the Position is still open.\n\n### ExitPrice\n```csharp\npublic double ExitPrice\n```\nReturns the price at which the Position was exited. Returns zero if the Position is still open.\n\n### ExitOrderType\n"
    }
  },
  {
    "pageContent": "y Settings.\n\n## Exit Details\n\n### ExitBar\n```csharp\npublic int ExitBar\n```\nReturns the bar number where the Position exit occurred. Returns -1 if the Position is still open.\n\n### ExitDate\n```csharp\npublic DateTime ExitDate\n```\nReturns the DateTime the Position was exited. Returns `DateTime.MaxValue` if the Position is still open.\n\n### ExitPrice\n```csharp\npublic double ExitPrice\n```\nReturns the price at which the Position was exited. Returns zero if the Position is still open.\n\n### ExitOrderType\n\n\n```csharp\npublic OrderType ExitOrderType\n\n```",
    "metadata": {
      "id": "position",
      "title": "position",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/position.md",
      "chunkIndex": "code-context-12",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public double Profit\n",
    "metadata": {
      "id": "position",
      "title": "position",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/position.md",
      "chunkIndex": "code-13",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "e the Position was exited. Returns `DateTime.MaxValue` if the Position is still open.\n\n### ExitPrice\n```csharp\npublic double ExitPrice\n```\nReturns the price at which the Position was exited. Returns zero if the Position is still open.\n\n### ExitOrderType\n```csharp\npublic OrderType ExitOrderType\n```\nReturns the type of order used to close the Position:\n- `OrderType.Market`\n- `OrderType.Limit`\n- `OrderType.Stop`\n- `OrderType.MarketClose`\n- `OrderType.FixedPrice`\n\n## Performance Metrics\n\n### Profit\n"
    }
  },
  {
    "pageContent": "e the Position was exited. Returns `DateTime.MaxValue` if the Position is still open.\n\n### ExitPrice\n```csharp\npublic double ExitPrice\n```\nReturns the price at which the Position was exited. Returns zero if the Position is still open.\n\n### ExitOrderType\n```csharp\npublic OrderType ExitOrderType\n```\nReturns the type of order used to close the Position:\n- `OrderType.Market`\n- `OrderType.Limit`\n- `OrderType.Stop`\n- `OrderType.MarketClose`\n- `OrderType.FixedPrice`\n\n## Performance Metrics\n\n### Profit\n\n\n```csharp\npublic double Profit\n\n```",
    "metadata": {
      "id": "position",
      "title": "position",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/position.md",
      "chunkIndex": "code-context-13",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public double ProfitPercent\n",
    "metadata": {
      "id": "position",
      "title": "position",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/position.md",
      "chunkIndex": "code-14",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": " price at which the Position was exited. Returns zero if the Position is still open.\n\n### ExitOrderType\n```csharp\npublic OrderType ExitOrderType\n```\nReturns the type of order used to close the Position:\n- `OrderType.Market`\n- `OrderType.Limit`\n- `OrderType.Stop`\n- `OrderType.MarketClose`\n- `OrderType.FixedPrice`\n\n## Performance Metrics\n\n### Profit\n```csharp\npublic double Profit\n```\nReturns the Position's profit with commissions deducted. Primarily for Performance Visualizers.\n\n### ProfitPercent\n"
    }
  },
  {
    "pageContent": " price at which the Position was exited. Returns zero if the Position is still open.\n\n### ExitOrderType\n```csharp\npublic OrderType ExitOrderType\n```\nReturns the type of order used to close the Position:\n- `OrderType.Market`\n- `OrderType.Limit`\n- `OrderType.Stop`\n- `OrderType.MarketClose`\n- `OrderType.FixedPrice`\n\n## Performance Metrics\n\n### Profit\n```csharp\npublic double Profit\n```\nReturns the Position's profit with commissions deducted. Primarily for Performance Visualizers.\n\n### ProfitPercent\n\n\n```csharp\npublic double ProfitPercent\n\n```",
    "metadata": {
      "id": "position",
      "title": "position",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/position.md",
      "chunkIndex": "code-context-14",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public double MAE\npublic double MAEPercent\n",
    "metadata": {
      "id": "position",
      "title": "position",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/position.md",
      "chunkIndex": "code-15",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "he type of order used to close the Position:\n- `OrderType.Market`\n- `OrderType.Limit`\n- `OrderType.Stop`\n- `OrderType.MarketClose`\n- `OrderType.FixedPrice`\n\n## Performance Metrics\n\n### Profit\n```csharp\npublic double Profit\n```\nReturns the Position's profit with commissions deducted. Primarily for Performance Visualizers.\n\n### ProfitPercent\n```csharp\npublic double ProfitPercent\n```\nReturns the percentage profit in the base currency, with commissions deducted.\n\n### MAE (Maximum Adverse Excursion)\n"
    }
  },
  {
    "pageContent": "he type of order used to close the Position:\n- `OrderType.Market`\n- `OrderType.Limit`\n- `OrderType.Stop`\n- `OrderType.MarketClose`\n- `OrderType.FixedPrice`\n\n## Performance Metrics\n\n### Profit\n```csharp\npublic double Profit\n```\nReturns the Position's profit with commissions deducted. Primarily for Performance Visualizers.\n\n### ProfitPercent\n```csharp\npublic double ProfitPercent\n```\nReturns the percentage profit in the base currency, with commissions deducted.\n\n### MAE (Maximum Adverse Excursion)\n\n\n```csharp\npublic double MAE\npublic double MAEPercent\n\n```",
    "metadata": {
      "id": "position",
      "title": "position",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/position.md",
      "chunkIndex": "code-context-15",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public double MFE\npublic double MFEPercent\n",
    "metadata": {
      "id": "position",
      "title": "position",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/position.md",
      "chunkIndex": "code-16",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "Profit\n```csharp\npublic double Profit\n```\nReturns the Position's profit with commissions deducted. Primarily for Performance Visualizers.\n\n### ProfitPercent\n```csharp\npublic double ProfitPercent\n```\nReturns the percentage profit in the base currency, with commissions deducted.\n\n### MAE (Maximum Adverse Excursion)\n```csharp\npublic double MAE\npublic double MAEPercent\n```\nReturns the largest intraday loss experienced by the Position, with commissions applied.\n\n### MFE (Maximum Favorable Excursion)\n"
    }
  },
  {
    "pageContent": "Profit\n```csharp\npublic double Profit\n```\nReturns the Position's profit with commissions deducted. Primarily for Performance Visualizers.\n\n### ProfitPercent\n```csharp\npublic double ProfitPercent\n```\nReturns the percentage profit in the base currency, with commissions deducted.\n\n### MAE (Maximum Adverse Excursion)\n```csharp\npublic double MAE\npublic double MAEPercent\n```\nReturns the largest intraday loss experienced by the Position, with commissions applied.\n\n### MFE (Maximum Favorable Excursion)\n\n\n```csharp\npublic double MFE\npublic double MFEPercent\n\n```",
    "metadata": {
      "id": "position",
      "title": "position",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/position.md",
      "chunkIndex": "code-context-16",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public double Commission\n",
    "metadata": {
      "id": "position",
      "title": "position",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/position.md",
      "chunkIndex": "code-17",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ercent\n```\nReturns the percentage profit in the base currency, with commissions deducted.\n\n### MAE (Maximum Adverse Excursion)\n```csharp\npublic double MAE\npublic double MAEPercent\n```\nReturns the largest intraday loss experienced by the Position, with commissions applied.\n\n### MFE (Maximum Favorable Excursion)\n```csharp\npublic double MFE\npublic double MFEPercent\n```\nReturns the highest intraday profit experienced by the Position, with commissions applied.\n\n## Commission and Cost\n\n### Commission\n"
    }
  },
  {
    "pageContent": "ercent\n```\nReturns the percentage profit in the base currency, with commissions deducted.\n\n### MAE (Maximum Adverse Excursion)\n```csharp\npublic double MAE\npublic double MAEPercent\n```\nReturns the largest intraday loss experienced by the Position, with commissions applied.\n\n### MFE (Maximum Favorable Excursion)\n```csharp\npublic double MFE\npublic double MFEPercent\n```\nReturns the highest intraday profit experienced by the Position, with commissions applied.\n\n## Commission and Cost\n\n### Commission\n\n\n```csharp\npublic double Commission\n\n```",
    "metadata": {
      "id": "position",
      "title": "position",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/position.md",
      "chunkIndex": "code-context-17",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public double CostBasis\n",
    "metadata": {
      "id": "position",
      "title": "position",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/position.md",
      "chunkIndex": "code-18",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "on)\n```csharp\npublic double MAE\npublic double MAEPercent\n```\nReturns the largest intraday loss experienced by the Position, with commissions applied.\n\n### MFE (Maximum Favorable Excursion)\n```csharp\npublic double MFE\npublic double MFEPercent\n```\nReturns the highest intraday profit experienced by the Position, with commissions applied.\n\n## Commission and Cost\n\n### Commission\n```csharp\npublic double Commission\n```\nReturns the total commission (entry plus exit) in the base currency.\n\n### CostBasis\n"
    }
  },
  {
    "pageContent": "on)\n```csharp\npublic double MAE\npublic double MAEPercent\n```\nReturns the largest intraday loss experienced by the Position, with commissions applied.\n\n### MFE (Maximum Favorable Excursion)\n```csharp\npublic double MFE\npublic double MFEPercent\n```\nReturns the highest intraday profit experienced by the Position, with commissions applied.\n\n## Commission and Cost\n\n### Commission\n```csharp\npublic double Commission\n```\nReturns the total commission (entry plus exit) in the base currency.\n\n### CostBasis\n\n\n```csharp\npublic double CostBasis\n\n```",
    "metadata": {
      "id": "position",
      "title": "position",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/position.md",
      "chunkIndex": "code-context-18",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public int DaysInPosition(int idx, bool countByLastBarOfDay)\n",
    "metadata": {
      "id": "position",
      "title": "position",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/position.md",
      "chunkIndex": "code-19",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "``csharp\npublic double MFE\npublic double MFEPercent\n```\nReturns the highest intraday profit experienced by the Position, with commissions applied.\n\n## Commission and Cost\n\n### Commission\n```csharp\npublic double Commission\n```\nReturns the total commission (entry plus exit) in the base currency.\n\n### CostBasis\n```csharp\npublic double CostBasis\n```\nReturns the cost basis in the base currency, calculated as EntryPrice multiplied by Quantity.\n\n## Additional Methods and Properties\n\n### DaysInPosition\n"
    }
  },
  {
    "pageContent": "``csharp\npublic double MFE\npublic double MFEPercent\n```\nReturns the highest intraday profit experienced by the Position, with commissions applied.\n\n## Commission and Cost\n\n### Commission\n```csharp\npublic double Commission\n```\nReturns the total commission (entry plus exit) in the base currency.\n\n### CostBasis\n```csharp\npublic double CostBasis\n```\nReturns the cost basis in the base currency, calculated as EntryPrice multiplied by Quantity.\n\n## Additional Methods and Properties\n\n### DaysInPosition\n\n\n```csharp\npublic int DaysInPosition(int idx, bool countByLastBarOfDay)\n\n```",
    "metadata": {
      "id": "position",
      "title": "position",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/position.md",
      "chunkIndex": "code-context-19",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public double GetMetric(string metricName)\n",
    "metadata": {
      "id": "position",
      "title": "position",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/position.md",
      "chunkIndex": "code-20",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "csharp\npublic double Commission\n```\nReturns the total commission (entry plus exit) in the base currency.\n\n### CostBasis\n```csharp\npublic double CostBasis\n```\nReturns the cost basis in the base currency, calculated as EntryPrice multiplied by Quantity.\n\n## Additional Methods and Properties\n\n### DaysInPosition\n```csharp\npublic int DaysInPosition(int idx, bool countByLastBarOfDay)\n```\nReturns the number of trading days passed since establishing the Position when using intraday data.\n\n### GetMetric\n"
    }
  },
  {
    "pageContent": "csharp\npublic double Commission\n```\nReturns the total commission (entry plus exit) in the base currency.\n\n### CostBasis\n```csharp\npublic double CostBasis\n```\nReturns the cost basis in the base currency, calculated as EntryPrice multiplied by Quantity.\n\n## Additional Methods and Properties\n\n### DaysInPosition\n```csharp\npublic int DaysInPosition(int idx, bool countByLastBarOfDay)\n```\nReturns the number of trading days passed since establishing the Position when using intraday data.\n\n### GetMetric\n\n\n```csharp\npublic double GetMetric(string metricName)\n\n```",
    "metadata": {
      "id": "position",
      "title": "position",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/position.md",
      "chunkIndex": "code-context-20",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public void SetMetric(string metric, double value)\n",
    "metadata": {
      "id": "position",
      "title": "position",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/position.md",
      "chunkIndex": "code-21",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "uble CostBasis\n```\nReturns the cost basis in the base currency, calculated as EntryPrice multiplied by Quantity.\n\n## Additional Methods and Properties\n\n### DaysInPosition\n```csharp\npublic int DaysInPosition(int idx, bool countByLastBarOfDay)\n```\nReturns the number of trading days passed since establishing the Position when using intraday data.\n\n### GetMetric\n```csharp\npublic double GetMetric(string metricName)\n```\nReturns the value of a Position Metric, either built-in or custom.\n\n### SetMetric\n"
    }
  },
  {
    "pageContent": "uble CostBasis\n```\nReturns the cost basis in the base currency, calculated as EntryPrice multiplied by Quantity.\n\n## Additional Methods and Properties\n\n### DaysInPosition\n```csharp\npublic int DaysInPosition(int idx, bool countByLastBarOfDay)\n```\nReturns the number of trading days passed since establishing the Position when using intraday data.\n\n### GetMetric\n```csharp\npublic double GetMetric(string metricName)\n```\nReturns the value of a Position Metric, either built-in or custom.\n\n### SetMetric\n\n\n```csharp\npublic void SetMetric(string metric, double value)\n\n```",
    "metadata": {
      "id": "position",
      "title": "position",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/position.md",
      "chunkIndex": "code-context-21",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "// Analyzing a Position's performance\npublic void AnalyzePosition(Position pos)\n{\n    if (pos.IsOpen)\n    {\n        Console.WriteLine(\"Position is still active\");\n        return;\n    }\n\n    Console.WriteLine($\"Profit: {pos.Profit:C2}\");\n    Console.WriteLine($\"Profit %: {pos.ProfitPercent:P2}\");\n    Console.WriteLine($\"Maximum Adverse Excursion: {pos.MAE:C2}\");\n    Console.WriteLine($\"Days Held: {pos.BarsHeld}\");\n}\n",
    "metadata": {
      "id": "position",
      "title": "position",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/position.md",
      "chunkIndex": "code-22",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": " Additional Methods and Properties\n\n### DaysInPosition\n```csharp\npublic int DaysInPosition(int idx, bool countByLastBarOfDay)\n```\nReturns the number of trading days passed since establishing the Position when using intraday data.\n\n### GetMetric\n```csharp\npublic double GetMetric(string metricName)\n```\nReturns the value of a Position Metric, either built-in or custom.\n\n### SetMetric\n```csharp\npublic void SetMetric(string metric, double value)\n```\nAdds a custom Position Metric.\n\n## Usage Examples\n\n"
    }
  },
  {
    "pageContent": " Additional Methods and Properties\n\n### DaysInPosition\n```csharp\npublic int DaysInPosition(int idx, bool countByLastBarOfDay)\n```\nReturns the number of trading days passed since establishing the Position when using intraday data.\n\n### GetMetric\n```csharp\npublic double GetMetric(string metricName)\n```\nReturns the value of a Position Metric, either built-in or custom.\n\n### SetMetric\n```csharp\npublic void SetMetric(string metric, double value)\n```\nAdds a custom Position Metric.\n\n## Usage Examples\n\n\n\n```csharp\n// Analyzing a Position's performance\npublic void AnalyzePosition(Position pos)\n{\n    if (pos.IsOpen)\n    {\n        Console.WriteLine(\"Position is still active\");\n        return;\n    }\n\n    Console.WriteLine($\"Profit: {pos.Profit:C2}\");\n    Console.WriteLine($\"Profit %: {pos.ProfitPercent:P2}\");\n    Console.WriteLine($\"Maximum Adverse Excursion: {pos.MAE:C2}\");\n    Console.WriteLine($\"Days Held: {pos.BarsHeld}\");\n}\n\n```",
    "metadata": {
      "id": "position",
      "title": "position",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/position.md",
      "chunkIndex": "code-context-22",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "# PriceGrid Class\n\n**Namespace:** WealthLab.Core  \n**Parent:** Object\n\nThe `PriceGrid` class provides a powerful utility for mapping price data into a 2D grid, enabling advanced pattern matching and comparative analysis of price data.\n\n## Constructors\n\n### PriceGrid(Width, Height)\n",
    "metadata": {
      "id": "price-grid",
      "title": "price-grid",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/price-grid.md",
      "chunkIndex": 0,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nCreates an empty grid with specified dimensions, initially filled with '.' characters.\n\n**Parameters:**\n- `width`: Number of columns in the grid\n- `height`: Number of rows in the grid\n\n### PriceGrid(Width, Height, BarHistory)\n",
    "metadata": {
      "id": "price-grid",
      "title": "price-grid",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/price-grid.md",
      "chunkIndex": 1,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nCreates a grid populated with price data from a specified range of a `BarHistory`.\n\n**Parameters:**\n- `width`: Number of columns in the grid\n- `height`: Number of rows in the grid\n- `bars`: `BarHistory` containing price data\n- `startIndex`: Starting index of data range\n- `endIndex`: Ending index of data range\n\n**Grid Filling Logic:**\n- Cells with data are marked with 'X'\n- Cells without data are marked with '.'\n\n## Core Properties\n\n### Width\n",
    "metadata": {
      "id": "price-grid",
      "title": "price-grid",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/price-grid.md",
      "chunkIndex": 2,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the width (number of columns) of the PriceGrid.\n\n### Height\n",
    "metadata": {
      "id": "price-grid",
      "title": "price-grid",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/price-grid.md",
      "chunkIndex": 3,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the height (number of rows) of the PriceGrid.\n\n### Pictogram\n",
    "metadata": {
      "id": "price-grid",
      "title": "price-grid",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/price-grid.md",
      "chunkIndex": 4,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns a string representation of the grid, visualizing '.' and 'X' data.\n\n## Grid Manipulation Methods\n\n### Fill\n",
    "metadata": {
      "id": "price-grid",
      "title": "price-grid",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/price-grid.md",
      "chunkIndex": 5,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nTwo overloads for filling the grid:\n1. Fill entire grid with a specified character\n2. Fill grid with price data from a `BarHistory` range\n\n## Comparison and Persistence\n\n### Compare\n",
    "metadata": {
      "id": "price-grid",
      "title": "price-grid",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/price-grid.md",
      "chunkIndex": 6,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nCompares two `PriceGrid` instances with matching dimensions.\n\n**Return Value:**\n- Percentage of matching cells (0-100)\n\n**Comparison Modes:**\n- **New Logic (default):** \n  - Compares only cells with data in the base grid\n  - More accurate, generally lower scores\n- **Legacy Logic:** \n  - Compares each cell, including empty spaces\n  - Higher scores due to matching empty cells\n\n### Persist\n",
    "metadata": {
      "id": "price-grid",
      "title": "price-grid",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/price-grid.md",
      "chunkIndex": 7,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns a string representation of the grid for later reconstruction.\n\n### Parse (Static Method)\n",
    "metadata": {
      "id": "price-grid",
      "title": "price-grid",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/price-grid.md",
      "chunkIndex": 8,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReconstructs a `PriceGrid` from a persisted string.\n\n**Persist String Format:**\n`Width,Height,StartChar,{Count1, Count2, ..., CountN}`\n\n## Usage Examples\n\n### Basic Grid Creation and Comparison\n",
    "metadata": {
      "id": "price-grid",
      "title": "price-grid",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/price-grid.md",
      "chunkIndex": 9,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n### Advanced Pattern Matching\n",
    "metadata": {
      "id": "price-grid",
      "title": "price-grid",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/price-grid.md",
      "chunkIndex": 10,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n## Best Practices\n\n1. **Grid Sizing**\n   - Choose grid dimensions carefully\n   - Ensure meaningful representation of price data\n\n2. **Comparison Techniques**\n   - Use default comparison logic for more accurate results\n   - Consider legacy logic for specific use cases\n   - Validate pattern matching across different market conditions\n\n3. **Performance**\n   - Limit grid size for large datasets\n   - Cache and reuse grids when possible\n   - Optimize comparison algorithms\n\n## Notes\n\n- Powerful tool for price pattern recognition\n- Supports flexible grid-based price data analysis\n- Useful in technical analysis and trading strategy development\n- Provides both visual and numerical pattern comparison ",
    "metadata": {
      "id": "price-grid",
      "title": "price-grid",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/price-grid.md",
      "chunkIndex": 11,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "public PriceGrid(int width, int height)\n",
    "metadata": {
      "id": "price-grid",
      "title": "price-grid",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/price-grid.md",
      "chunkIndex": "code-0",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "# PriceGrid Class\n\n**Namespace:** WealthLab.Core  \n**Parent:** Object\n\nThe `PriceGrid` class provides a powerful utility for mapping price data into a 2D grid, enabling advanced pattern matching and comparative analysis of price data.\n\n## Constructors\n\n### PriceGrid(Width, Height)\n"
    }
  },
  {
    "pageContent": "# PriceGrid Class\n\n**Namespace:** WealthLab.Core  \n**Parent:** Object\n\nThe `PriceGrid` class provides a powerful utility for mapping price data into a 2D grid, enabling advanced pattern matching and comparative analysis of price data.\n\n## Constructors\n\n### PriceGrid(Width, Height)\n\n\n```csharp\npublic PriceGrid(int width, int height)\n\n```",
    "metadata": {
      "id": "price-grid",
      "title": "price-grid",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/price-grid.md",
      "chunkIndex": "code-context-0",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public PriceGrid(int width, int height, BarHistory bars, int startIndex, int endIndex)\n",
    "metadata": {
      "id": "price-grid",
      "title": "price-grid",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/price-grid.md",
      "chunkIndex": "code-1",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": " Object\n\nThe `PriceGrid` class provides a powerful utility for mapping price data into a 2D grid, enabling advanced pattern matching and comparative analysis of price data.\n\n## Constructors\n\n### PriceGrid(Width, Height)\n```csharp\npublic PriceGrid(int width, int height)\n```\nCreates an empty grid with specified dimensions, initially filled with '.' characters.\n\n**Parameters:**\n- `width`: Number of columns in the grid\n- `height`: Number of rows in the grid\n\n### PriceGrid(Width, Height, BarHistory)\n"
    }
  },
  {
    "pageContent": " Object\n\nThe `PriceGrid` class provides a powerful utility for mapping price data into a 2D grid, enabling advanced pattern matching and comparative analysis of price data.\n\n## Constructors\n\n### PriceGrid(Width, Height)\n```csharp\npublic PriceGrid(int width, int height)\n```\nCreates an empty grid with specified dimensions, initially filled with '.' characters.\n\n**Parameters:**\n- `width`: Number of columns in the grid\n- `height`: Number of rows in the grid\n\n### PriceGrid(Width, Height, BarHistory)\n\n\n```csharp\npublic PriceGrid(int width, int height, BarHistory bars, int startIndex, int endIndex)\n\n```",
    "metadata": {
      "id": "price-grid",
      "title": "price-grid",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/price-grid.md",
      "chunkIndex": "code-context-1",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public int Width\n",
    "metadata": {
      "id": "price-grid",
      "title": "price-grid",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/price-grid.md",
      "chunkIndex": "code-2",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "t, BarHistory bars, int startIndex, int endIndex)\n```\nCreates a grid populated with price data from a specified range of a `BarHistory`.\n\n**Parameters:**\n- `width`: Number of columns in the grid\n- `height`: Number of rows in the grid\n- `bars`: `BarHistory` containing price data\n- `startIndex`: Starting index of data range\n- `endIndex`: Ending index of data range\n\n**Grid Filling Logic:**\n- Cells with data are marked with 'X'\n- Cells without data are marked with '.'\n\n## Core Properties\n\n### Width\n"
    }
  },
  {
    "pageContent": "t, BarHistory bars, int startIndex, int endIndex)\n```\nCreates a grid populated with price data from a specified range of a `BarHistory`.\n\n**Parameters:**\n- `width`: Number of columns in the grid\n- `height`: Number of rows in the grid\n- `bars`: `BarHistory` containing price data\n- `startIndex`: Starting index of data range\n- `endIndex`: Ending index of data range\n\n**Grid Filling Logic:**\n- Cells with data are marked with 'X'\n- Cells without data are marked with '.'\n\n## Core Properties\n\n### Width\n\n\n```csharp\npublic int Width\n\n```",
    "metadata": {
      "id": "price-grid",
      "title": "price-grid",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/price-grid.md",
      "chunkIndex": "code-context-2",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public int Height\n",
    "metadata": {
      "id": "price-grid",
      "title": "price-grid",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/price-grid.md",
      "chunkIndex": "code-3",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": " a specified range of a `BarHistory`.\n\n**Parameters:**\n- `width`: Number of columns in the grid\n- `height`: Number of rows in the grid\n- `bars`: `BarHistory` containing price data\n- `startIndex`: Starting index of data range\n- `endIndex`: Ending index of data range\n\n**Grid Filling Logic:**\n- Cells with data are marked with 'X'\n- Cells without data are marked with '.'\n\n## Core Properties\n\n### Width\n```csharp\npublic int Width\n```\nReturns the width (number of columns) of the PriceGrid.\n\n### Height\n"
    }
  },
  {
    "pageContent": " a specified range of a `BarHistory`.\n\n**Parameters:**\n- `width`: Number of columns in the grid\n- `height`: Number of rows in the grid\n- `bars`: `BarHistory` containing price data\n- `startIndex`: Starting index of data range\n- `endIndex`: Ending index of data range\n\n**Grid Filling Logic:**\n- Cells with data are marked with 'X'\n- Cells without data are marked with '.'\n\n## Core Properties\n\n### Width\n```csharp\npublic int Width\n```\nReturns the width (number of columns) of the PriceGrid.\n\n### Height\n\n\n```csharp\npublic int Height\n\n```",
    "metadata": {
      "id": "price-grid",
      "title": "price-grid",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/price-grid.md",
      "chunkIndex": "code-context-3",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public string Pictogram\n",
    "metadata": {
      "id": "price-grid",
      "title": "price-grid",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/price-grid.md",
      "chunkIndex": "code-4",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ight`: Number of rows in the grid\n- `bars`: `BarHistory` containing price data\n- `startIndex`: Starting index of data range\n- `endIndex`: Ending index of data range\n\n**Grid Filling Logic:**\n- Cells with data are marked with 'X'\n- Cells without data are marked with '.'\n\n## Core Properties\n\n### Width\n```csharp\npublic int Width\n```\nReturns the width (number of columns) of the PriceGrid.\n\n### Height\n```csharp\npublic int Height\n```\nReturns the height (number of rows) of the PriceGrid.\n\n### Pictogram\n"
    }
  },
  {
    "pageContent": "ight`: Number of rows in the grid\n- `bars`: `BarHistory` containing price data\n- `startIndex`: Starting index of data range\n- `endIndex`: Ending index of data range\n\n**Grid Filling Logic:**\n- Cells with data are marked with 'X'\n- Cells without data are marked with '.'\n\n## Core Properties\n\n### Width\n```csharp\npublic int Width\n```\nReturns the width (number of columns) of the PriceGrid.\n\n### Height\n```csharp\npublic int Height\n```\nReturns the height (number of rows) of the PriceGrid.\n\n### Pictogram\n\n\n```csharp\npublic string Pictogram\n\n```",
    "metadata": {
      "id": "price-grid",
      "title": "price-grid",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/price-grid.md",
      "chunkIndex": "code-context-4",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public void Fill(char c)\npublic void Fill(BarHistory bars, int startIndex, int endIndex)\n",
    "metadata": {
      "id": "price-grid",
      "title": "price-grid",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/price-grid.md",
      "chunkIndex": "code-5",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": " data range\n\n**Grid Filling Logic:**\n- Cells with data are marked with 'X'\n- Cells without data are marked with '.'\n\n## Core Properties\n\n### Width\n```csharp\npublic int Width\n```\nReturns the width (number of columns) of the PriceGrid.\n\n### Height\n```csharp\npublic int Height\n```\nReturns the height (number of rows) of the PriceGrid.\n\n### Pictogram\n```csharp\npublic string Pictogram\n```\nReturns a string representation of the grid, visualizing '.' and 'X' data.\n\n## Grid Manipulation Methods\n\n### Fill\n"
    }
  },
  {
    "pageContent": " data range\n\n**Grid Filling Logic:**\n- Cells with data are marked with 'X'\n- Cells without data are marked with '.'\n\n## Core Properties\n\n### Width\n```csharp\npublic int Width\n```\nReturns the width (number of columns) of the PriceGrid.\n\n### Height\n```csharp\npublic int Height\n```\nReturns the height (number of rows) of the PriceGrid.\n\n### Pictogram\n```csharp\npublic string Pictogram\n```\nReturns a string representation of the grid, visualizing '.' and 'X' data.\n\n## Grid Manipulation Methods\n\n### Fill\n\n\n```csharp\npublic void Fill(char c)\npublic void Fill(BarHistory bars, int startIndex, int endIndex)\n\n```",
    "metadata": {
      "id": "price-grid",
      "title": "price-grid",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/price-grid.md",
      "chunkIndex": "code-context-5",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public double Compare(PriceGrid pg, bool legacyCompareLogic = false)\n",
    "metadata": {
      "id": "price-grid",
      "title": "price-grid",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/price-grid.md",
      "chunkIndex": "code-6",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": " the height (number of rows) of the PriceGrid.\n\n### Pictogram\n```csharp\npublic string Pictogram\n```\nReturns a string representation of the grid, visualizing '.' and 'X' data.\n\n## Grid Manipulation Methods\n\n### Fill\n```csharp\npublic void Fill(char c)\npublic void Fill(BarHistory bars, int startIndex, int endIndex)\n```\nTwo overloads for filling the grid:\n1. Fill entire grid with a specified character\n2. Fill grid with price data from a `BarHistory` range\n\n## Comparison and Persistence\n\n### Compare\n"
    }
  },
  {
    "pageContent": " the height (number of rows) of the PriceGrid.\n\n### Pictogram\n```csharp\npublic string Pictogram\n```\nReturns a string representation of the grid, visualizing '.' and 'X' data.\n\n## Grid Manipulation Methods\n\n### Fill\n```csharp\npublic void Fill(char c)\npublic void Fill(BarHistory bars, int startIndex, int endIndex)\n```\nTwo overloads for filling the grid:\n1. Fill entire grid with a specified character\n2. Fill grid with price data from a `BarHistory` range\n\n## Comparison and Persistence\n\n### Compare\n\n\n```csharp\npublic double Compare(PriceGrid pg, bool legacyCompareLogic = false)\n\n```",
    "metadata": {
      "id": "price-grid",
      "title": "price-grid",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/price-grid.md",
      "chunkIndex": "code-context-6",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public string Persist()\n",
    "metadata": {
      "id": "price-grid",
      "title": "price-grid",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/price-grid.md",
      "chunkIndex": "code-7",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "d Persistence\n\n### Compare\n```csharp\npublic double Compare(PriceGrid pg, bool legacyCompareLogic = false)\n```\nCompares two `PriceGrid` instances with matching dimensions.\n\n**Return Value:**\n- Percentage of matching cells (0-100)\n\n**Comparison Modes:**\n- **New Logic (default):** \n  - Compares only cells with data in the base grid\n  - More accurate, generally lower scores\n- **Legacy Logic:** \n  - Compares each cell, including empty spaces\n  - Higher scores due to matching empty cells\n\n### Persist\n"
    }
  },
  {
    "pageContent": "d Persistence\n\n### Compare\n```csharp\npublic double Compare(PriceGrid pg, bool legacyCompareLogic = false)\n```\nCompares two `PriceGrid` instances with matching dimensions.\n\n**Return Value:**\n- Percentage of matching cells (0-100)\n\n**Comparison Modes:**\n- **New Logic (default):** \n  - Compares only cells with data in the base grid\n  - More accurate, generally lower scores\n- **Legacy Logic:** \n  - Compares each cell, including empty spaces\n  - Higher scores due to matching empty cells\n\n### Persist\n\n\n```csharp\npublic string Persist()\n\n```",
    "metadata": {
      "id": "price-grid",
      "title": "price-grid",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/price-grid.md",
      "chunkIndex": "code-context-7",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public static PriceGrid Parse(string s)\n",
    "metadata": {
      "id": "price-grid",
      "title": "price-grid",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/price-grid.md",
      "chunkIndex": "code-8",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "instances with matching dimensions.\n\n**Return Value:**\n- Percentage of matching cells (0-100)\n\n**Comparison Modes:**\n- **New Logic (default):** \n  - Compares only cells with data in the base grid\n  - More accurate, generally lower scores\n- **Legacy Logic:** \n  - Compares each cell, including empty spaces\n  - Higher scores due to matching empty cells\n\n### Persist\n```csharp\npublic string Persist()\n```\nReturns a string representation of the grid for later reconstruction.\n\n### Parse (Static Method)\n"
    }
  },
  {
    "pageContent": "instances with matching dimensions.\n\n**Return Value:**\n- Percentage of matching cells (0-100)\n\n**Comparison Modes:**\n- **New Logic (default):** \n  - Compares only cells with data in the base grid\n  - More accurate, generally lower scores\n- **Legacy Logic:** \n  - Compares each cell, including empty spaces\n  - Higher scores due to matching empty cells\n\n### Persist\n```csharp\npublic string Persist()\n```\nReturns a string representation of the grid for later reconstruction.\n\n### Parse (Static Method)\n\n\n```csharp\npublic static PriceGrid Parse(string s)\n\n```",
    "metadata": {
      "id": "price-grid",
      "title": "price-grid",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/price-grid.md",
      "chunkIndex": "code-context-8",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public class PricePatternAnalyzer\n{\n    public void AnalyzePricePatterns(BarHistory bars)\n    {\n        // Create price grids for different periods\n        var recentGrid = new PriceGrid(10, 10, bars, 0, 100);\n        var historicalGrid = new PriceGrid(10, 10, bars, 200, 300);\n\n        // Compare grid patterns\n        double similarityScore = recentGrid.Compare(historicalGrid);\n        Console.WriteLine($\"Pattern Similarity: {similarityScore}%\");\n\n        // Visualize grid\n        Console.WriteLine(recentGrid.Pictogram);\n    }\n}\n",
    "metadata": {
      "id": "price-grid",
      "title": "price-grid",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/price-grid.md",
      "chunkIndex": "code-9",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": " Logic:** \n  - Compares each cell, including empty spaces\n  - Higher scores due to matching empty cells\n\n### Persist\n```csharp\npublic string Persist()\n```\nReturns a string representation of the grid for later reconstruction.\n\n### Parse (Static Method)\n```csharp\npublic static PriceGrid Parse(string s)\n```\nReconstructs a `PriceGrid` from a persisted string.\n\n**Persist String Format:**\n`Width,Height,StartChar,{Count1, Count2, ..., CountN}`\n\n## Usage Examples\n\n### Basic Grid Creation and Comparison\n"
    }
  },
  {
    "pageContent": " Logic:** \n  - Compares each cell, including empty spaces\n  - Higher scores due to matching empty cells\n\n### Persist\n```csharp\npublic string Persist()\n```\nReturns a string representation of the grid for later reconstruction.\n\n### Parse (Static Method)\n```csharp\npublic static PriceGrid Parse(string s)\n```\nReconstructs a `PriceGrid` from a persisted string.\n\n**Persist String Format:**\n`Width,Height,StartChar,{Count1, Count2, ..., CountN}`\n\n## Usage Examples\n\n### Basic Grid Creation and Comparison\n\n\n```csharp\npublic class PricePatternAnalyzer\n{\n    public void AnalyzePricePatterns(BarHistory bars)\n    {\n        // Create price grids for different periods\n        var recentGrid = new PriceGrid(10, 10, bars, 0, 100);\n        var historicalGrid = new PriceGrid(10, 10, bars, 200, 300);\n\n        // Compare grid patterns\n        double similarityScore = recentGrid.Compare(historicalGrid);\n        Console.WriteLine($\"Pattern Similarity: {similarityScore}%\");\n\n        // Visualize grid\n        Console.WriteLine(recentGrid.Pictogram);\n    }\n}\n\n```",
    "metadata": {
      "id": "price-grid",
      "title": "price-grid",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/price-grid.md",
      "chunkIndex": "code-context-9",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public class PatternMatcher\n{\n    public bool FindRepeatingPattern(BarHistory bars)\n    {\n        // Create multiple grids from different periods\n        var grids = new List<PriceGrid>();\n        for (int i = 0; i < bars.Count; i += 100)\n        {\n            var grid = new PriceGrid(10, 10, bars, i, i + 100);\n            grids.Add(grid);\n        }\n\n        // Compare grids for similar patterns\n        for (int i = 0; i < grids.Count; i++)\n        {\n            for (int j = i + 1; j < grids.Count; j++)\n            {\n                double similarity = grids[i].Compare(grids[j]);\n                if (similarity > 75)\n                {\n                    Console.WriteLine($\"Similar patterns found: {similarity}%\");\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    }\n}\n",
    "metadata": {
      "id": "price-grid",
      "title": "price-grid",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/price-grid.md",
      "chunkIndex": "code-10",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ns(BarHistory bars)\n    {\n        // Create price grids for different periods\n        var recentGrid = new PriceGrid(10, 10, bars, 0, 100);\n        var historicalGrid = new PriceGrid(10, 10, bars, 200, 300);\n\n        // Compare grid patterns\n        double similarityScore = recentGrid.Compare(historicalGrid);\n        Console.WriteLine($\"Pattern Similarity: {similarityScore}%\");\n\n        // Visualize grid\n        Console.WriteLine(recentGrid.Pictogram);\n    }\n}\n```\n\n### Advanced Pattern Matching\n"
    }
  },
  {
    "pageContent": "ns(BarHistory bars)\n    {\n        // Create price grids for different periods\n        var recentGrid = new PriceGrid(10, 10, bars, 0, 100);\n        var historicalGrid = new PriceGrid(10, 10, bars, 200, 300);\n\n        // Compare grid patterns\n        double similarityScore = recentGrid.Compare(historicalGrid);\n        Console.WriteLine($\"Pattern Similarity: {similarityScore}%\");\n\n        // Visualize grid\n        Console.WriteLine(recentGrid.Pictogram);\n    }\n}\n```\n\n### Advanced Pattern Matching\n\n\n```csharp\npublic class PatternMatcher\n{\n    public bool FindRepeatingPattern(BarHistory bars)\n    {\n        // Create multiple grids from different periods\n        var grids = new List<PriceGrid>();\n        for (int i = 0; i < bars.Count; i += 100)\n        {\n            var grid = new PriceGrid(10, 10, bars, i, i + 100);\n            grids.Add(grid);\n        }\n\n        // Compare grids for similar patterns\n        for (int i = 0; i < grids.Count; i++)\n        {\n            for (int j = i + 1; j < grids.Count; j++)\n            {\n                double similarity = grids[i].Compare(grids[j]);\n                if (similarity > 75)\n                {\n                    Console.WriteLine($\"Similar patterns found: {similarity}%\");\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    }\n}\n\n```",
    "metadata": {
      "id": "price-grid",
      "title": "price-grid",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/price-grid.md",
      "chunkIndex": "code-context-10",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "# SavedOptimizationResults Class\n\n**Namespace:** WealthLab.Backtest  \n**Parent:** Object\n\nThe `SavedOptimizationResults` class encapsulates comprehensive information about a saved optimization run, providing detailed insights into the optimization process, settings, and results.\n\n## Constructors\n\n### Default Constructor\n",
    "metadata": {
      "id": "saved-optimization-results",
      "title": "saved-optimization-results",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/saved-optimization-results.md",
      "chunkIndex": 0,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nCreates an empty `SavedOptimizationResults` instance.\n\n### Standard Optimization Constructor\n",
    "metadata": {
      "id": "saved-optimization-results",
      "title": "saved-optimization-results",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/saved-optimization-results.md",
      "chunkIndex": 1,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nCreates an instance for a standard optimization run.\n\n**Parameters:**\n- `s`: The `Strategy` that was optimized\n- `opt`: The `OptimizerBase` used for optimization\n\n### Walk Forward Optimization Constructor\n",
    "metadata": {
      "id": "saved-optimization-results",
      "title": "saved-optimization-results",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/saved-optimization-results.md",
      "chunkIndex": 2,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nCreates an instance for a Walk Forward Optimization (WFO) run.\n\n**Parameters:**\n- `s`: The `Strategy` that was optimized\n- `opt`: The `OptimizerBase` used for optimization\n- `wfo`: The `WFOOptimizer` used for Walk Forward Optimization\n\n## Persistence Methods\n\n### Persist\n",
    "metadata": {
      "id": "saved-optimization-results",
      "title": "saved-optimization-results",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/saved-optimization-results.md",
      "chunkIndex": 3,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nConverts the optimization results into an encoded string format that can be stored or transmitted.\n\n**Returns:** A string representation of the optimization results.\n\n### Parse (Static Method)\n",
    "metadata": {
      "id": "saved-optimization-results",
      "title": "saved-optimization-results",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/saved-optimization-results.md",
      "chunkIndex": 4,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReconstructs a `SavedOptimizationResults` instance from a previously persisted string.\n\n**Parameters:**\n- `s`: The encoded string representation of optimization results\n\n**Returns:** A new `SavedOptimizationResults` instance\n\n## Key Properties\n\n### Optimization Metadata\n\n#### RunType\n",
    "metadata": {
      "id": "saved-optimization-results",
      "title": "saved-optimization-results",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/saved-optimization-results.md",
      "chunkIndex": 5,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nIndicates the type of optimization:\n- `Standard`\n- `WFO` (Walk Forward Optimization)\n- `SymbolBySymbol`\n\n#### IsComplete\n",
    "metadata": {
      "id": "saved-optimization-results",
      "title": "saved-optimization-results",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/saved-optimization-results.md",
      "chunkIndex": 6,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nIndicates whether the optimization run was fully completed or paused.\n\n### Strategy and Optimization Details\n\n#### Strategy\n",
    "metadata": {
      "id": "saved-optimization-results",
      "title": "saved-optimization-results",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/saved-optimization-results.md",
      "chunkIndex": 7,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nThe `Strategy` instance that was optimized.\n\n#### StrategyParameters\n",
    "metadata": {
      "id": "saved-optimization-results",
      "title": "saved-optimization-results",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/saved-optimization-results.md",
      "chunkIndex": 8,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nStrategy parameters at the time of optimization, with `IsChecked` property reflecting enabled parameter checkboxes.\n\n#### Optimizer\n",
    "metadata": {
      "id": "saved-optimization-results",
      "title": "saved-optimization-results",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/saved-optimization-results.md",
      "chunkIndex": 9,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nThe optimization method used.\n\n#### OptimizerParameters\n",
    "metadata": {
      "id": "saved-optimization-results",
      "title": "saved-optimization-results",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/saved-optimization-results.md",
      "chunkIndex": 10,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nParameters used for the optimizer.\n\n### Backtest Configuration\n\n#### BacktestSettings\n",
    "metadata": {
      "id": "saved-optimization-results",
      "title": "saved-optimization-results",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/saved-optimization-results.md",
      "chunkIndex": 11,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nBacktest settings used during optimization runs.\n\n#### PositionSize\n",
    "metadata": {
      "id": "saved-optimization-results",
      "title": "saved-optimization-results",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/saved-optimization-results.md",
      "chunkIndex": 12,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nPosition sizing configuration used during optimization.\n\n#### DataRange\n",
    "metadata": {
      "id": "saved-optimization-results",
      "title": "saved-optimization-results",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/saved-optimization-results.md",
      "chunkIndex": 13,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nThe date range used for optimization.\n\n#### Scale\n",
    "metadata": {
      "id": "saved-optimization-results",
      "title": "saved-optimization-results",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/saved-optimization-results.md",
      "chunkIndex": 14,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nThe data scale (e.g., daily, weekly) used during optimization.\n\n### Symbol and Dataset Properties\n\n#### SingleSymbol\n",
    "metadata": {
      "id": "saved-optimization-results",
      "title": "saved-optimization-results",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/saved-optimization-results.md",
      "chunkIndex": 15,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nIndicates whether optimization was performed on a single symbol or a dataset.\n\n#### Symbol\n",
    "metadata": {
      "id": "saved-optimization-results",
      "title": "saved-optimization-results",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/saved-optimization-results.md",
      "chunkIndex": 16,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nThe symbol used if `SingleSymbol` is true.\n\n#### DataSetName\n",
    "metadata": {
      "id": "saved-optimization-results",
      "title": "saved-optimization-results",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/saved-optimization-results.md",
      "chunkIndex": 17,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nThe name of the dataset used if `SingleSymbol` is false.\n\n#### BenchmarkSymbol\n",
    "metadata": {
      "id": "saved-optimization-results",
      "title": "saved-optimization-results",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/saved-optimization-results.md",
      "chunkIndex": 18,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nThe benchmark symbol used during optimization.\n\n### Results Properties\n\n#### Results\n",
    "metadata": {
      "id": "saved-optimization-results",
      "title": "saved-optimization-results",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/saved-optimization-results.md",
      "chunkIndex": 19,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nContains optimization results for standard or WFO runs.\n\n#### SymBySym\n",
    "metadata": {
      "id": "saved-optimization-results",
      "title": "saved-optimization-results",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/saved-optimization-results.md",
      "chunkIndex": 20,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nContains optimization results by symbol for Symbol-by-Symbol runs.\n\n#### WFOOptimizer\n",
    "metadata": {
      "id": "saved-optimization-results",
      "title": "saved-optimization-results",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/saved-optimization-results.md",
      "chunkIndex": 21,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nThe Walk Forward Optimizer used (if applicable).\n\n## Usage Examples\n\n### Saving and Restoring Optimization Results\n",
    "metadata": {
      "id": "saved-optimization-results",
      "title": "saved-optimization-results",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/saved-optimization-results.md",
      "chunkIndex": 22,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n### Analyzing Optimization Results\n",
    "metadata": {
      "id": "saved-optimization-results",
      "title": "saved-optimization-results",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/saved-optimization-results.md",
      "chunkIndex": 23,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n## Best Practices\n\n1. **Result Persistence**\n   - Use `Persist()` and `Parse()` for saving and loading results\n   - Store results in a secure, version-controlled manner\n\n2. **Result Analysis**\n   - Check `RunType` before processing results\n   - Handle different optimization scenarios\n   - Validate results before further processing\n\n3. **Performance Considerations**\n   - Be mindful of memory usage with large result sets\n   - Use efficient data structures for result storage\n   - Implement lazy loading if necessary\n\n## Notes\n\n- Comprehensive snapshot of an optimization run\n- Supports multiple optimization types\n- Provides detailed metadata and results\n- Enables result persistence and analysis\n- Flexible design for various optimization scenarios\n\n## Requirements\n\n- Understanding of WealthLab optimization processes\n- Familiarity with strategy and optimization concepts\n- Knowledge of .NET collections and serialization ",
    "metadata": {
      "id": "saved-optimization-results",
      "title": "saved-optimization-results",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/saved-optimization-results.md",
      "chunkIndex": 24,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "public SavedOptimizationResults()\n",
    "metadata": {
      "id": "saved-optimization-results",
      "title": "saved-optimization-results",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/saved-optimization-results.md",
      "chunkIndex": "code-0",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "# SavedOptimizationResults Class\n\n**Namespace:** WealthLab.Backtest  \n**Parent:** Object\n\nThe `SavedOptimizationResults` class encapsulates comprehensive information about a saved optimization run, providing detailed insights into the optimization process, settings, and results.\n\n## Constructors\n\n### Default Constructor\n"
    }
  },
  {
    "pageContent": "# SavedOptimizationResults Class\n\n**Namespace:** WealthLab.Backtest  \n**Parent:** Object\n\nThe `SavedOptimizationResults` class encapsulates comprehensive information about a saved optimization run, providing detailed insights into the optimization process, settings, and results.\n\n## Constructors\n\n### Default Constructor\n\n\n```csharp\npublic SavedOptimizationResults()\n\n```",
    "metadata": {
      "id": "saved-optimization-results",
      "title": "saved-optimization-results",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/saved-optimization-results.md",
      "chunkIndex": "code-context-0",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public SavedOptimizationResults(Strategy s, OptimizerBase opt)\n",
    "metadata": {
      "id": "saved-optimization-results",
      "title": "saved-optimization-results",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/saved-optimization-results.md",
      "chunkIndex": "code-1",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "# SavedOptimizationResults Class\n\n**Namespace:** WealthLab.Backtest  \n**Parent:** Object\n\nThe `SavedOptimizationResults` class encapsulates comprehensive information about a saved optimization run, providing detailed insights into the optimization process, settings, and results.\n\n## Constructors\n\n### Default Constructor\n```csharp\npublic SavedOptimizationResults()\n```\nCreates an empty `SavedOptimizationResults` instance.\n\n### Standard Optimization Constructor\n"
    }
  },
  {
    "pageContent": "# SavedOptimizationResults Class\n\n**Namespace:** WealthLab.Backtest  \n**Parent:** Object\n\nThe `SavedOptimizationResults` class encapsulates comprehensive information about a saved optimization run, providing detailed insights into the optimization process, settings, and results.\n\n## Constructors\n\n### Default Constructor\n```csharp\npublic SavedOptimizationResults()\n```\nCreates an empty `SavedOptimizationResults` instance.\n\n### Standard Optimization Constructor\n\n\n```csharp\npublic SavedOptimizationResults(Strategy s, OptimizerBase opt)\n\n```",
    "metadata": {
      "id": "saved-optimization-results",
      "title": "saved-optimization-results",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/saved-optimization-results.md",
      "chunkIndex": "code-context-1",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public SavedOptimizationResults(Strategy s, OptimizerBase opt, WFOOptimizer wfo)\n",
    "metadata": {
      "id": "saved-optimization-results",
      "title": "saved-optimization-results",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/saved-optimization-results.md",
      "chunkIndex": "code-2",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "on process, settings, and results.\n\n## Constructors\n\n### Default Constructor\n```csharp\npublic SavedOptimizationResults()\n```\nCreates an empty `SavedOptimizationResults` instance.\n\n### Standard Optimization Constructor\n```csharp\npublic SavedOptimizationResults(Strategy s, OptimizerBase opt)\n```\nCreates an instance for a standard optimization run.\n\n**Parameters:**\n- `s`: The `Strategy` that was optimized\n- `opt`: The `OptimizerBase` used for optimization\n\n### Walk Forward Optimization Constructor\n"
    }
  },
  {
    "pageContent": "on process, settings, and results.\n\n## Constructors\n\n### Default Constructor\n```csharp\npublic SavedOptimizationResults()\n```\nCreates an empty `SavedOptimizationResults` instance.\n\n### Standard Optimization Constructor\n```csharp\npublic SavedOptimizationResults(Strategy s, OptimizerBase opt)\n```\nCreates an instance for a standard optimization run.\n\n**Parameters:**\n- `s`: The `Strategy` that was optimized\n- `opt`: The `OptimizerBase` used for optimization\n\n### Walk Forward Optimization Constructor\n\n\n```csharp\npublic SavedOptimizationResults(Strategy s, OptimizerBase opt, WFOOptimizer wfo)\n\n```",
    "metadata": {
      "id": "saved-optimization-results",
      "title": "saved-optimization-results",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/saved-optimization-results.md",
      "chunkIndex": "code-context-2",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public string Persist()\n",
    "metadata": {
      "id": "saved-optimization-results",
      "title": "saved-optimization-results",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/saved-optimization-results.md",
      "chunkIndex": "code-3",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "`s`: The `Strategy` that was optimized\n- `opt`: The `OptimizerBase` used for optimization\n\n### Walk Forward Optimization Constructor\n```csharp\npublic SavedOptimizationResults(Strategy s, OptimizerBase opt, WFOOptimizer wfo)\n```\nCreates an instance for a Walk Forward Optimization (WFO) run.\n\n**Parameters:**\n- `s`: The `Strategy` that was optimized\n- `opt`: The `OptimizerBase` used for optimization\n- `wfo`: The `WFOOptimizer` used for Walk Forward Optimization\n\n## Persistence Methods\n\n### Persist\n"
    }
  },
  {
    "pageContent": "`s`: The `Strategy` that was optimized\n- `opt`: The `OptimizerBase` used for optimization\n\n### Walk Forward Optimization Constructor\n```csharp\npublic SavedOptimizationResults(Strategy s, OptimizerBase opt, WFOOptimizer wfo)\n```\nCreates an instance for a Walk Forward Optimization (WFO) run.\n\n**Parameters:**\n- `s`: The `Strategy` that was optimized\n- `opt`: The `OptimizerBase` used for optimization\n- `wfo`: The `WFOOptimizer` used for Walk Forward Optimization\n\n## Persistence Methods\n\n### Persist\n\n\n```csharp\npublic string Persist()\n\n```",
    "metadata": {
      "id": "saved-optimization-results",
      "title": "saved-optimization-results",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/saved-optimization-results.md",
      "chunkIndex": "code-context-3",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public static SavedOptimizationResults Parse(string s)\n",
    "metadata": {
      "id": "saved-optimization-results",
      "title": "saved-optimization-results",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/saved-optimization-results.md",
      "chunkIndex": "code-4",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ates an instance for a Walk Forward Optimization (WFO) run.\n\n**Parameters:**\n- `s`: The `Strategy` that was optimized\n- `opt`: The `OptimizerBase` used for optimization\n- `wfo`: The `WFOOptimizer` used for Walk Forward Optimization\n\n## Persistence Methods\n\n### Persist\n```csharp\npublic string Persist()\n```\nConverts the optimization results into an encoded string format that can be stored or transmitted.\n\n**Returns:** A string representation of the optimization results.\n\n### Parse (Static Method)\n"
    }
  },
  {
    "pageContent": "ates an instance for a Walk Forward Optimization (WFO) run.\n\n**Parameters:**\n- `s`: The `Strategy` that was optimized\n- `opt`: The `OptimizerBase` used for optimization\n- `wfo`: The `WFOOptimizer` used for Walk Forward Optimization\n\n## Persistence Methods\n\n### Persist\n```csharp\npublic string Persist()\n```\nConverts the optimization results into an encoded string format that can be stored or transmitted.\n\n**Returns:** A string representation of the optimization results.\n\n### Parse (Static Method)\n\n\n```csharp\npublic static SavedOptimizationResults Parse(string s)\n\n```",
    "metadata": {
      "id": "saved-optimization-results",
      "title": "saved-optimization-results",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/saved-optimization-results.md",
      "chunkIndex": "code-context-4",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public OptimizationRunType RunType\n",
    "metadata": {
      "id": "saved-optimization-results",
      "title": "saved-optimization-results",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/saved-optimization-results.md",
      "chunkIndex": "code-5",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ed string format that can be stored or transmitted.\n\n**Returns:** A string representation of the optimization results.\n\n### Parse (Static Method)\n```csharp\npublic static SavedOptimizationResults Parse(string s)\n```\nReconstructs a `SavedOptimizationResults` instance from a previously persisted string.\n\n**Parameters:**\n- `s`: The encoded string representation of optimization results\n\n**Returns:** A new `SavedOptimizationResults` instance\n\n## Key Properties\n\n### Optimization Metadata\n\n#### RunType\n"
    }
  },
  {
    "pageContent": "ed string format that can be stored or transmitted.\n\n**Returns:** A string representation of the optimization results.\n\n### Parse (Static Method)\n```csharp\npublic static SavedOptimizationResults Parse(string s)\n```\nReconstructs a `SavedOptimizationResults` instance from a previously persisted string.\n\n**Parameters:**\n- `s`: The encoded string representation of optimization results\n\n**Returns:** A new `SavedOptimizationResults` instance\n\n## Key Properties\n\n### Optimization Metadata\n\n#### RunType\n\n\n```csharp\npublic OptimizationRunType RunType\n\n```",
    "metadata": {
      "id": "saved-optimization-results",
      "title": "saved-optimization-results",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/saved-optimization-results.md",
      "chunkIndex": "code-context-5",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public bool IsComplete\n",
    "metadata": {
      "id": "saved-optimization-results",
      "title": "saved-optimization-results",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/saved-optimization-results.md",
      "chunkIndex": "code-6",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "SavedOptimizationResults Parse(string s)\n```\nReconstructs a `SavedOptimizationResults` instance from a previously persisted string.\n\n**Parameters:**\n- `s`: The encoded string representation of optimization results\n\n**Returns:** A new `SavedOptimizationResults` instance\n\n## Key Properties\n\n### Optimization Metadata\n\n#### RunType\n```csharp\npublic OptimizationRunType RunType\n```\nIndicates the type of optimization:\n- `Standard`\n- `WFO` (Walk Forward Optimization)\n- `SymbolBySymbol`\n\n#### IsComplete\n"
    }
  },
  {
    "pageContent": "SavedOptimizationResults Parse(string s)\n```\nReconstructs a `SavedOptimizationResults` instance from a previously persisted string.\n\n**Parameters:**\n- `s`: The encoded string representation of optimization results\n\n**Returns:** A new `SavedOptimizationResults` instance\n\n## Key Properties\n\n### Optimization Metadata\n\n#### RunType\n```csharp\npublic OptimizationRunType RunType\n```\nIndicates the type of optimization:\n- `Standard`\n- `WFO` (Walk Forward Optimization)\n- `SymbolBySymbol`\n\n#### IsComplete\n\n\n```csharp\npublic bool IsComplete\n\n```",
    "metadata": {
      "id": "saved-optimization-results",
      "title": "saved-optimization-results",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/saved-optimization-results.md",
      "chunkIndex": "code-context-6",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public Strategy Strategy\n",
    "metadata": {
      "id": "saved-optimization-results",
      "title": "saved-optimization-results",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/saved-optimization-results.md",
      "chunkIndex": "code-7",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ncoded string representation of optimization results\n\n**Returns:** A new `SavedOptimizationResults` instance\n\n## Key Properties\n\n### Optimization Metadata\n\n#### RunType\n```csharp\npublic OptimizationRunType RunType\n```\nIndicates the type of optimization:\n- `Standard`\n- `WFO` (Walk Forward Optimization)\n- `SymbolBySymbol`\n\n#### IsComplete\n```csharp\npublic bool IsComplete\n```\nIndicates whether the optimization run was fully completed or paused.\n\n### Strategy and Optimization Details\n\n#### Strategy\n"
    }
  },
  {
    "pageContent": "ncoded string representation of optimization results\n\n**Returns:** A new `SavedOptimizationResults` instance\n\n## Key Properties\n\n### Optimization Metadata\n\n#### RunType\n```csharp\npublic OptimizationRunType RunType\n```\nIndicates the type of optimization:\n- `Standard`\n- `WFO` (Walk Forward Optimization)\n- `SymbolBySymbol`\n\n#### IsComplete\n```csharp\npublic bool IsComplete\n```\nIndicates whether the optimization run was fully completed or paused.\n\n### Strategy and Optimization Details\n\n#### Strategy\n\n\n```csharp\npublic Strategy Strategy\n\n```",
    "metadata": {
      "id": "saved-optimization-results",
      "title": "saved-optimization-results",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/saved-optimization-results.md",
      "chunkIndex": "code-context-7",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public ParameterList StrategyParameters\n",
    "metadata": {
      "id": "saved-optimization-results",
      "title": "saved-optimization-results",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/saved-optimization-results.md",
      "chunkIndex": "code-8",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "\n\n## Key Properties\n\n### Optimization Metadata\n\n#### RunType\n```csharp\npublic OptimizationRunType RunType\n```\nIndicates the type of optimization:\n- `Standard`\n- `WFO` (Walk Forward Optimization)\n- `SymbolBySymbol`\n\n#### IsComplete\n```csharp\npublic bool IsComplete\n```\nIndicates whether the optimization run was fully completed or paused.\n\n### Strategy and Optimization Details\n\n#### Strategy\n```csharp\npublic Strategy Strategy\n```\nThe `Strategy` instance that was optimized.\n\n#### StrategyParameters\n"
    }
  },
  {
    "pageContent": "\n\n## Key Properties\n\n### Optimization Metadata\n\n#### RunType\n```csharp\npublic OptimizationRunType RunType\n```\nIndicates the type of optimization:\n- `Standard`\n- `WFO` (Walk Forward Optimization)\n- `SymbolBySymbol`\n\n#### IsComplete\n```csharp\npublic bool IsComplete\n```\nIndicates whether the optimization run was fully completed or paused.\n\n### Strategy and Optimization Details\n\n#### Strategy\n```csharp\npublic Strategy Strategy\n```\nThe `Strategy` instance that was optimized.\n\n#### StrategyParameters\n\n\n```csharp\npublic ParameterList StrategyParameters\n\n```",
    "metadata": {
      "id": "saved-optimization-results",
      "title": "saved-optimization-results",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/saved-optimization-results.md",
      "chunkIndex": "code-context-8",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public OptimizerBase Optimizer\n",
    "metadata": {
      "id": "saved-optimization-results",
      "title": "saved-optimization-results",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/saved-optimization-results.md",
      "chunkIndex": "code-9",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ization)\n- `SymbolBySymbol`\n\n#### IsComplete\n```csharp\npublic bool IsComplete\n```\nIndicates whether the optimization run was fully completed or paused.\n\n### Strategy and Optimization Details\n\n#### Strategy\n```csharp\npublic Strategy Strategy\n```\nThe `Strategy` instance that was optimized.\n\n#### StrategyParameters\n```csharp\npublic ParameterList StrategyParameters\n```\nStrategy parameters at the time of optimization, with `IsChecked` property reflecting enabled parameter checkboxes.\n\n#### Optimizer\n"
    }
  },
  {
    "pageContent": "ization)\n- `SymbolBySymbol`\n\n#### IsComplete\n```csharp\npublic bool IsComplete\n```\nIndicates whether the optimization run was fully completed or paused.\n\n### Strategy and Optimization Details\n\n#### Strategy\n```csharp\npublic Strategy Strategy\n```\nThe `Strategy` instance that was optimized.\n\n#### StrategyParameters\n```csharp\npublic ParameterList StrategyParameters\n```\nStrategy parameters at the time of optimization, with `IsChecked` property reflecting enabled parameter checkboxes.\n\n#### Optimizer\n\n\n```csharp\npublic OptimizerBase Optimizer\n\n```",
    "metadata": {
      "id": "saved-optimization-results",
      "title": "saved-optimization-results",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/saved-optimization-results.md",
      "chunkIndex": "code-context-9",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public ParameterList OptimizerParameters\n",
    "metadata": {
      "id": "saved-optimization-results",
      "title": "saved-optimization-results",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/saved-optimization-results.md",
      "chunkIndex": "code-10",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "he optimization run was fully completed or paused.\n\n### Strategy and Optimization Details\n\n#### Strategy\n```csharp\npublic Strategy Strategy\n```\nThe `Strategy` instance that was optimized.\n\n#### StrategyParameters\n```csharp\npublic ParameterList StrategyParameters\n```\nStrategy parameters at the time of optimization, with `IsChecked` property reflecting enabled parameter checkboxes.\n\n#### Optimizer\n```csharp\npublic OptimizerBase Optimizer\n```\nThe optimization method used.\n\n#### OptimizerParameters\n"
    }
  },
  {
    "pageContent": "he optimization run was fully completed or paused.\n\n### Strategy and Optimization Details\n\n#### Strategy\n```csharp\npublic Strategy Strategy\n```\nThe `Strategy` instance that was optimized.\n\n#### StrategyParameters\n```csharp\npublic ParameterList StrategyParameters\n```\nStrategy parameters at the time of optimization, with `IsChecked` property reflecting enabled parameter checkboxes.\n\n#### Optimizer\n```csharp\npublic OptimizerBase Optimizer\n```\nThe optimization method used.\n\n#### OptimizerParameters\n\n\n```csharp\npublic ParameterList OptimizerParameters\n\n```",
    "metadata": {
      "id": "saved-optimization-results",
      "title": "saved-optimization-results",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/saved-optimization-results.md",
      "chunkIndex": "code-context-10",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public BacktestSettings BacktestSettings\n",
    "metadata": {
      "id": "saved-optimization-results",
      "title": "saved-optimization-results",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/saved-optimization-results.md",
      "chunkIndex": "code-11",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "``\nThe `Strategy` instance that was optimized.\n\n#### StrategyParameters\n```csharp\npublic ParameterList StrategyParameters\n```\nStrategy parameters at the time of optimization, with `IsChecked` property reflecting enabled parameter checkboxes.\n\n#### Optimizer\n```csharp\npublic OptimizerBase Optimizer\n```\nThe optimization method used.\n\n#### OptimizerParameters\n```csharp\npublic ParameterList OptimizerParameters\n```\nParameters used for the optimizer.\n\n### Backtest Configuration\n\n#### BacktestSettings\n"
    }
  },
  {
    "pageContent": "``\nThe `Strategy` instance that was optimized.\n\n#### StrategyParameters\n```csharp\npublic ParameterList StrategyParameters\n```\nStrategy parameters at the time of optimization, with `IsChecked` property reflecting enabled parameter checkboxes.\n\n#### Optimizer\n```csharp\npublic OptimizerBase Optimizer\n```\nThe optimization method used.\n\n#### OptimizerParameters\n```csharp\npublic ParameterList OptimizerParameters\n```\nParameters used for the optimizer.\n\n### Backtest Configuration\n\n#### BacktestSettings\n\n\n```csharp\npublic BacktestSettings BacktestSettings\n\n```",
    "metadata": {
      "id": "saved-optimization-results",
      "title": "saved-optimization-results",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/saved-optimization-results.md",
      "chunkIndex": "code-context-11",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public PositionSize PositionSize\n",
    "metadata": {
      "id": "saved-optimization-results",
      "title": "saved-optimization-results",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/saved-optimization-results.md",
      "chunkIndex": "code-12",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "``\nStrategy parameters at the time of optimization, with `IsChecked` property reflecting enabled parameter checkboxes.\n\n#### Optimizer\n```csharp\npublic OptimizerBase Optimizer\n```\nThe optimization method used.\n\n#### OptimizerParameters\n```csharp\npublic ParameterList OptimizerParameters\n```\nParameters used for the optimizer.\n\n### Backtest Configuration\n\n#### BacktestSettings\n```csharp\npublic BacktestSettings BacktestSettings\n```\nBacktest settings used during optimization runs.\n\n#### PositionSize\n"
    }
  },
  {
    "pageContent": "``\nStrategy parameters at the time of optimization, with `IsChecked` property reflecting enabled parameter checkboxes.\n\n#### Optimizer\n```csharp\npublic OptimizerBase Optimizer\n```\nThe optimization method used.\n\n#### OptimizerParameters\n```csharp\npublic ParameterList OptimizerParameters\n```\nParameters used for the optimizer.\n\n### Backtest Configuration\n\n#### BacktestSettings\n```csharp\npublic BacktestSettings BacktestSettings\n```\nBacktest settings used during optimization runs.\n\n#### PositionSize\n\n\n```csharp\npublic PositionSize PositionSize\n\n```",
    "metadata": {
      "id": "saved-optimization-results",
      "title": "saved-optimization-results",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/saved-optimization-results.md",
      "chunkIndex": "code-context-12",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public DataRange DataRange\n",
    "metadata": {
      "id": "saved-optimization-results",
      "title": "saved-optimization-results",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/saved-optimization-results.md",
      "chunkIndex": "code-13",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "\n#### Optimizer\n```csharp\npublic OptimizerBase Optimizer\n```\nThe optimization method used.\n\n#### OptimizerParameters\n```csharp\npublic ParameterList OptimizerParameters\n```\nParameters used for the optimizer.\n\n### Backtest Configuration\n\n#### BacktestSettings\n```csharp\npublic BacktestSettings BacktestSettings\n```\nBacktest settings used during optimization runs.\n\n#### PositionSize\n```csharp\npublic PositionSize PositionSize\n```\nPosition sizing configuration used during optimization.\n\n#### DataRange\n"
    }
  },
  {
    "pageContent": "\n#### Optimizer\n```csharp\npublic OptimizerBase Optimizer\n```\nThe optimization method used.\n\n#### OptimizerParameters\n```csharp\npublic ParameterList OptimizerParameters\n```\nParameters used for the optimizer.\n\n### Backtest Configuration\n\n#### BacktestSettings\n```csharp\npublic BacktestSettings BacktestSettings\n```\nBacktest settings used during optimization runs.\n\n#### PositionSize\n```csharp\npublic PositionSize PositionSize\n```\nPosition sizing configuration used during optimization.\n\n#### DataRange\n\n\n```csharp\npublic DataRange DataRange\n\n```",
    "metadata": {
      "id": "saved-optimization-results",
      "title": "saved-optimization-results",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/saved-optimization-results.md",
      "chunkIndex": "code-context-13",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public HistoryScale Scale\n",
    "metadata": {
      "id": "saved-optimization-results",
      "title": "saved-optimization-results",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/saved-optimization-results.md",
      "chunkIndex": "code-14",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "\n#### OptimizerParameters\n```csharp\npublic ParameterList OptimizerParameters\n```\nParameters used for the optimizer.\n\n### Backtest Configuration\n\n#### BacktestSettings\n```csharp\npublic BacktestSettings BacktestSettings\n```\nBacktest settings used during optimization runs.\n\n#### PositionSize\n```csharp\npublic PositionSize PositionSize\n```\nPosition sizing configuration used during optimization.\n\n#### DataRange\n```csharp\npublic DataRange DataRange\n```\nThe date range used for optimization.\n\n#### Scale\n"
    }
  },
  {
    "pageContent": "\n#### OptimizerParameters\n```csharp\npublic ParameterList OptimizerParameters\n```\nParameters used for the optimizer.\n\n### Backtest Configuration\n\n#### BacktestSettings\n```csharp\npublic BacktestSettings BacktestSettings\n```\nBacktest settings used during optimization runs.\n\n#### PositionSize\n```csharp\npublic PositionSize PositionSize\n```\nPosition sizing configuration used during optimization.\n\n#### DataRange\n```csharp\npublic DataRange DataRange\n```\nThe date range used for optimization.\n\n#### Scale\n\n\n```csharp\npublic HistoryScale Scale\n\n```",
    "metadata": {
      "id": "saved-optimization-results",
      "title": "saved-optimization-results",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/saved-optimization-results.md",
      "chunkIndex": "code-context-14",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public bool SingleSymbol\n",
    "metadata": {
      "id": "saved-optimization-results",
      "title": "saved-optimization-results",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/saved-optimization-results.md",
      "chunkIndex": "code-15",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "tSettings\n```csharp\npublic BacktestSettings BacktestSettings\n```\nBacktest settings used during optimization runs.\n\n#### PositionSize\n```csharp\npublic PositionSize PositionSize\n```\nPosition sizing configuration used during optimization.\n\n#### DataRange\n```csharp\npublic DataRange DataRange\n```\nThe date range used for optimization.\n\n#### Scale\n```csharp\npublic HistoryScale Scale\n```\nThe data scale (e.g., daily, weekly) used during optimization.\n\n### Symbol and Dataset Properties\n\n#### SingleSymbol\n"
    }
  },
  {
    "pageContent": "tSettings\n```csharp\npublic BacktestSettings BacktestSettings\n```\nBacktest settings used during optimization runs.\n\n#### PositionSize\n```csharp\npublic PositionSize PositionSize\n```\nPosition sizing configuration used during optimization.\n\n#### DataRange\n```csharp\npublic DataRange DataRange\n```\nThe date range used for optimization.\n\n#### Scale\n```csharp\npublic HistoryScale Scale\n```\nThe data scale (e.g., daily, weekly) used during optimization.\n\n### Symbol and Dataset Properties\n\n#### SingleSymbol\n\n\n```csharp\npublic bool SingleSymbol\n\n```",
    "metadata": {
      "id": "saved-optimization-results",
      "title": "saved-optimization-results",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/saved-optimization-results.md",
      "chunkIndex": "code-context-15",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public string Symbol\n",
    "metadata": {
      "id": "saved-optimization-results",
      "title": "saved-optimization-results",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/saved-optimization-results.md",
      "chunkIndex": "code-16",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ze\n```csharp\npublic PositionSize PositionSize\n```\nPosition sizing configuration used during optimization.\n\n#### DataRange\n```csharp\npublic DataRange DataRange\n```\nThe date range used for optimization.\n\n#### Scale\n```csharp\npublic HistoryScale Scale\n```\nThe data scale (e.g., daily, weekly) used during optimization.\n\n### Symbol and Dataset Properties\n\n#### SingleSymbol\n```csharp\npublic bool SingleSymbol\n```\nIndicates whether optimization was performed on a single symbol or a dataset.\n\n#### Symbol\n"
    }
  },
  {
    "pageContent": "ze\n```csharp\npublic PositionSize PositionSize\n```\nPosition sizing configuration used during optimization.\n\n#### DataRange\n```csharp\npublic DataRange DataRange\n```\nThe date range used for optimization.\n\n#### Scale\n```csharp\npublic HistoryScale Scale\n```\nThe data scale (e.g., daily, weekly) used during optimization.\n\n### Symbol and Dataset Properties\n\n#### SingleSymbol\n```csharp\npublic bool SingleSymbol\n```\nIndicates whether optimization was performed on a single symbol or a dataset.\n\n#### Symbol\n\n\n```csharp\npublic string Symbol\n\n```",
    "metadata": {
      "id": "saved-optimization-results",
      "title": "saved-optimization-results",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/saved-optimization-results.md",
      "chunkIndex": "code-context-16",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public string DataSetName\n",
    "metadata": {
      "id": "saved-optimization-results",
      "title": "saved-optimization-results",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/saved-optimization-results.md",
      "chunkIndex": "code-17",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "mization.\n\n#### DataRange\n```csharp\npublic DataRange DataRange\n```\nThe date range used for optimization.\n\n#### Scale\n```csharp\npublic HistoryScale Scale\n```\nThe data scale (e.g., daily, weekly) used during optimization.\n\n### Symbol and Dataset Properties\n\n#### SingleSymbol\n```csharp\npublic bool SingleSymbol\n```\nIndicates whether optimization was performed on a single symbol or a dataset.\n\n#### Symbol\n```csharp\npublic string Symbol\n```\nThe symbol used if `SingleSymbol` is true.\n\n#### DataSetName\n"
    }
  },
  {
    "pageContent": "mization.\n\n#### DataRange\n```csharp\npublic DataRange DataRange\n```\nThe date range used for optimization.\n\n#### Scale\n```csharp\npublic HistoryScale Scale\n```\nThe data scale (e.g., daily, weekly) used during optimization.\n\n### Symbol and Dataset Properties\n\n#### SingleSymbol\n```csharp\npublic bool SingleSymbol\n```\nIndicates whether optimization was performed on a single symbol or a dataset.\n\n#### Symbol\n```csharp\npublic string Symbol\n```\nThe symbol used if `SingleSymbol` is true.\n\n#### DataSetName\n\n\n```csharp\npublic string DataSetName\n\n```",
    "metadata": {
      "id": "saved-optimization-results",
      "title": "saved-optimization-results",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/saved-optimization-results.md",
      "chunkIndex": "code-context-17",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public string BenchmarkSymbol\n",
    "metadata": {
      "id": "saved-optimization-results",
      "title": "saved-optimization-results",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/saved-optimization-results.md",
      "chunkIndex": "code-18",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "`csharp\npublic HistoryScale Scale\n```\nThe data scale (e.g., daily, weekly) used during optimization.\n\n### Symbol and Dataset Properties\n\n#### SingleSymbol\n```csharp\npublic bool SingleSymbol\n```\nIndicates whether optimization was performed on a single symbol or a dataset.\n\n#### Symbol\n```csharp\npublic string Symbol\n```\nThe symbol used if `SingleSymbol` is true.\n\n#### DataSetName\n```csharp\npublic string DataSetName\n```\nThe name of the dataset used if `SingleSymbol` is false.\n\n#### BenchmarkSymbol\n"
    }
  },
  {
    "pageContent": "`csharp\npublic HistoryScale Scale\n```\nThe data scale (e.g., daily, weekly) used during optimization.\n\n### Symbol and Dataset Properties\n\n#### SingleSymbol\n```csharp\npublic bool SingleSymbol\n```\nIndicates whether optimization was performed on a single symbol or a dataset.\n\n#### Symbol\n```csharp\npublic string Symbol\n```\nThe symbol used if `SingleSymbol` is true.\n\n#### DataSetName\n```csharp\npublic string DataSetName\n```\nThe name of the dataset used if `SingleSymbol` is false.\n\n#### BenchmarkSymbol\n\n\n```csharp\npublic string BenchmarkSymbol\n\n```",
    "metadata": {
      "id": "saved-optimization-results",
      "title": "saved-optimization-results",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/saved-optimization-results.md",
      "chunkIndex": "code-context-18",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public OptimizationResultList Results\n",
    "metadata": {
      "id": "saved-optimization-results",
      "title": "saved-optimization-results",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/saved-optimization-results.md",
      "chunkIndex": "code-19",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "erties\n\n#### SingleSymbol\n```csharp\npublic bool SingleSymbol\n```\nIndicates whether optimization was performed on a single symbol or a dataset.\n\n#### Symbol\n```csharp\npublic string Symbol\n```\nThe symbol used if `SingleSymbol` is true.\n\n#### DataSetName\n```csharp\npublic string DataSetName\n```\nThe name of the dataset used if `SingleSymbol` is false.\n\n#### BenchmarkSymbol\n```csharp\npublic string BenchmarkSymbol\n```\nThe benchmark symbol used during optimization.\n\n### Results Properties\n\n#### Results\n"
    }
  },
  {
    "pageContent": "erties\n\n#### SingleSymbol\n```csharp\npublic bool SingleSymbol\n```\nIndicates whether optimization was performed on a single symbol or a dataset.\n\n#### Symbol\n```csharp\npublic string Symbol\n```\nThe symbol used if `SingleSymbol` is true.\n\n#### DataSetName\n```csharp\npublic string DataSetName\n```\nThe name of the dataset used if `SingleSymbol` is false.\n\n#### BenchmarkSymbol\n```csharp\npublic string BenchmarkSymbol\n```\nThe benchmark symbol used during optimization.\n\n### Results Properties\n\n#### Results\n\n\n```csharp\npublic OptimizationResultList Results\n\n```",
    "metadata": {
      "id": "saved-optimization-results",
      "title": "saved-optimization-results",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/saved-optimization-results.md",
      "chunkIndex": "code-context-19",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public Dictionary<string, OptimizationResultList> SymBySym\n",
    "metadata": {
      "id": "saved-optimization-results",
      "title": "saved-optimization-results",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/saved-optimization-results.md",
      "chunkIndex": "code-20",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ymbol or a dataset.\n\n#### Symbol\n```csharp\npublic string Symbol\n```\nThe symbol used if `SingleSymbol` is true.\n\n#### DataSetName\n```csharp\npublic string DataSetName\n```\nThe name of the dataset used if `SingleSymbol` is false.\n\n#### BenchmarkSymbol\n```csharp\npublic string BenchmarkSymbol\n```\nThe benchmark symbol used during optimization.\n\n### Results Properties\n\n#### Results\n```csharp\npublic OptimizationResultList Results\n```\nContains optimization results for standard or WFO runs.\n\n#### SymBySym\n"
    }
  },
  {
    "pageContent": "ymbol or a dataset.\n\n#### Symbol\n```csharp\npublic string Symbol\n```\nThe symbol used if `SingleSymbol` is true.\n\n#### DataSetName\n```csharp\npublic string DataSetName\n```\nThe name of the dataset used if `SingleSymbol` is false.\n\n#### BenchmarkSymbol\n```csharp\npublic string BenchmarkSymbol\n```\nThe benchmark symbol used during optimization.\n\n### Results Properties\n\n#### Results\n```csharp\npublic OptimizationResultList Results\n```\nContains optimization results for standard or WFO runs.\n\n#### SymBySym\n\n\n```csharp\npublic Dictionary<string, OptimizationResultList> SymBySym\n\n```",
    "metadata": {
      "id": "saved-optimization-results",
      "title": "saved-optimization-results",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/saved-optimization-results.md",
      "chunkIndex": "code-context-20",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public WFOOptimizer WFOOptimizer\n",
    "metadata": {
      "id": "saved-optimization-results",
      "title": "saved-optimization-results",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/saved-optimization-results.md",
      "chunkIndex": "code-21",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "tName\n```\nThe name of the dataset used if `SingleSymbol` is false.\n\n#### BenchmarkSymbol\n```csharp\npublic string BenchmarkSymbol\n```\nThe benchmark symbol used during optimization.\n\n### Results Properties\n\n#### Results\n```csharp\npublic OptimizationResultList Results\n```\nContains optimization results for standard or WFO runs.\n\n#### SymBySym\n```csharp\npublic Dictionary<string, OptimizationResultList> SymBySym\n```\nContains optimization results by symbol for Symbol-by-Symbol runs.\n\n#### WFOOptimizer\n"
    }
  },
  {
    "pageContent": "tName\n```\nThe name of the dataset used if `SingleSymbol` is false.\n\n#### BenchmarkSymbol\n```csharp\npublic string BenchmarkSymbol\n```\nThe benchmark symbol used during optimization.\n\n### Results Properties\n\n#### Results\n```csharp\npublic OptimizationResultList Results\n```\nContains optimization results for standard or WFO runs.\n\n#### SymBySym\n```csharp\npublic Dictionary<string, OptimizationResultList> SymBySym\n```\nContains optimization results by symbol for Symbol-by-Symbol runs.\n\n#### WFOOptimizer\n\n\n```csharp\npublic WFOOptimizer WFOOptimizer\n\n```",
    "metadata": {
      "id": "saved-optimization-results",
      "title": "saved-optimization-results",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/saved-optimization-results.md",
      "chunkIndex": "code-context-21",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public class OptimizationResultManager\n{\n    public void SaveOptimizationResults(SavedOptimizationResults results)\n    {\n        // Persist results to a file or database\n        string encodedResults = results.Persist();\n        File.WriteAllText(\"optimization_results.txt\", encodedResults);\n    }\n\n    public SavedOptimizationResults LoadOptimizationResults()\n    {\n        // Restore results from a file\n        string encodedResults = File.ReadAllText(\"optimization_results.txt\");\n        return SavedOptimizationResults.Parse(encodedResults);\n    }\n}\n",
    "metadata": {
      "id": "saved-optimization-results",
      "title": "saved-optimization-results",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/saved-optimization-results.md",
      "chunkIndex": "code-22",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ing optimization.\n\n### Results Properties\n\n#### Results\n```csharp\npublic OptimizationResultList Results\n```\nContains optimization results for standard or WFO runs.\n\n#### SymBySym\n```csharp\npublic Dictionary<string, OptimizationResultList> SymBySym\n```\nContains optimization results by symbol for Symbol-by-Symbol runs.\n\n#### WFOOptimizer\n```csharp\npublic WFOOptimizer WFOOptimizer\n```\nThe Walk Forward Optimizer used (if applicable).\n\n## Usage Examples\n\n### Saving and Restoring Optimization Results\n"
    }
  },
  {
    "pageContent": "ing optimization.\n\n### Results Properties\n\n#### Results\n```csharp\npublic OptimizationResultList Results\n```\nContains optimization results for standard or WFO runs.\n\n#### SymBySym\n```csharp\npublic Dictionary<string, OptimizationResultList> SymBySym\n```\nContains optimization results by symbol for Symbol-by-Symbol runs.\n\n#### WFOOptimizer\n```csharp\npublic WFOOptimizer WFOOptimizer\n```\nThe Walk Forward Optimizer used (if applicable).\n\n## Usage Examples\n\n### Saving and Restoring Optimization Results\n\n\n```csharp\npublic class OptimizationResultManager\n{\n    public void SaveOptimizationResults(SavedOptimizationResults results)\n    {\n        // Persist results to a file or database\n        string encodedResults = results.Persist();\n        File.WriteAllText(\"optimization_results.txt\", encodedResults);\n    }\n\n    public SavedOptimizationResults LoadOptimizationResults()\n    {\n        // Restore results from a file\n        string encodedResults = File.ReadAllText(\"optimization_results.txt\");\n        return SavedOptimizationResults.Parse(encodedResults);\n    }\n}\n\n```",
    "metadata": {
      "id": "saved-optimization-results",
      "title": "saved-optimization-results",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/saved-optimization-results.md",
      "chunkIndex": "code-context-22",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public class OptimizationAnalyzer\n{\n    public void AnalyzeResults(SavedOptimizationResults savedResults)\n    {\n        Console.WriteLine($\"Optimization Type: {savedResults.RunType}\");\n        Console.WriteLine($\"Strategy: {savedResults.Strategy.Name}\");\n        Console.WriteLine($\"Is Complete: {savedResults.IsComplete}\");\n\n        // Analyze results based on run type\n        switch (savedResults.RunType)\n        {\n            case OptimizationRunType.Standard:\n                AnalyzeStandardResults(savedResults.Results);\n                break;\n            case OptimizationRunType.WFO:\n                AnalyzeWFOResults(savedResults.Results, savedResults.WFOOptimizer);\n                break;\n            case OptimizationRunType.SymbolBySymbol:\n                AnalyzeSymbolResults(savedResults.SymBySym);\n                break;\n        }\n    }\n\n    private void AnalyzeStandardResults(OptimizationResultList results)\n    {\n        // Implement standard result analysis\n    }\n\n    private void AnalyzeWFOResults(OptimizationResultList results, WFOOptimizer wfoOptimizer)\n    {\n        // Implement WFO result analysis\n    }\n\n    private void AnalyzeSymbolResults(Dictionary<string, OptimizationResultList> symbolResults)\n    {\n        // Implement symbol-by-symbol result analysis\n    }\n}\n",
    "metadata": {
      "id": "saved-optimization-results",
      "title": "saved-optimization-results",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/saved-optimization-results.md",
      "chunkIndex": "code-23",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ionResults results)\n    {\n        // Persist results to a file or database\n        string encodedResults = results.Persist();\n        File.WriteAllText(\"optimization_results.txt\", encodedResults);\n    }\n\n    public SavedOptimizationResults LoadOptimizationResults()\n    {\n        // Restore results from a file\n        string encodedResults = File.ReadAllText(\"optimization_results.txt\");\n        return SavedOptimizationResults.Parse(encodedResults);\n    }\n}\n```\n\n### Analyzing Optimization Results\n"
    }
  },
  {
    "pageContent": "ionResults results)\n    {\n        // Persist results to a file or database\n        string encodedResults = results.Persist();\n        File.WriteAllText(\"optimization_results.txt\", encodedResults);\n    }\n\n    public SavedOptimizationResults LoadOptimizationResults()\n    {\n        // Restore results from a file\n        string encodedResults = File.ReadAllText(\"optimization_results.txt\");\n        return SavedOptimizationResults.Parse(encodedResults);\n    }\n}\n```\n\n### Analyzing Optimization Results\n\n\n```csharp\npublic class OptimizationAnalyzer\n{\n    public void AnalyzeResults(SavedOptimizationResults savedResults)\n    {\n        Console.WriteLine($\"Optimization Type: {savedResults.RunType}\");\n        Console.WriteLine($\"Strategy: {savedResults.Strategy.Name}\");\n        Console.WriteLine($\"Is Complete: {savedResults.IsComplete}\");\n\n        // Analyze results based on run type\n        switch (savedResults.RunType)\n        {\n            case OptimizationRunType.Standard:\n                AnalyzeStandardResults(savedResults.Results);\n                break;\n            case OptimizationRunType.WFO:\n                AnalyzeWFOResults(savedResults.Results, savedResults.WFOOptimizer);\n                break;\n            case OptimizationRunType.SymbolBySymbol:\n                AnalyzeSymbolResults(savedResults.SymBySym);\n                break;\n        }\n    }\n\n    private void AnalyzeStandardResults(OptimizationResultList results)\n    {\n        // Implement standard result analysis\n    }\n\n    private void AnalyzeWFOResults(OptimizationResultList results, WFOOptimizer wfoOptimizer)\n    {\n        // Implement WFO result analysis\n    }\n\n    private void AnalyzeSymbolResults(Dictionary<string, OptimizationResultList> symbolResults)\n    {\n        // Implement symbol-by-symbol result analysis\n    }\n}\n\n```",
    "metadata": {
      "id": "saved-optimization-results",
      "title": "saved-optimization-results",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/saved-optimization-results.md",
      "chunkIndex": "code-context-23",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "# StrategyEvolverResult Class\n\n**Namespace:** WealthLab.Backtest  \n**Parent:** Object\n\nThe `StrategyEvolverResult` class represents the outcome of a single Strategy Evolver run, encapsulating performance metrics, genetic information, and strategy details generated through the evolutionary optimization process.\n\n## Methods\n\n### GenerateStrategy\n",
    "metadata": {
      "id": "strategy-evolver-result",
      "title": "strategy-evolver-result",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-evolver-result.md",
      "chunkIndex": 0,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nGenerates and returns a new `Strategy` instance based on the Building Blocks of this run's evolved Genes.\n\n**Features:**\n- Creates a strategy from the run's genetic code\n- Assigns the position size used during the run\n- Provides a way to instantiate the evolved strategy for further analysis or backtesting\n\n**Usage Example:**\n",
    "metadata": {
      "id": "strategy-evolver-result",
      "title": "strategy-evolver-result",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-evolver-result.md",
      "chunkIndex": 1,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n## Identification Properties\n\n### Name\n",
    "metadata": {
      "id": "strategy-evolver-result",
      "title": "strategy-evolver-result",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-evolver-result.md",
      "chunkIndex": 2,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nThe name of the run, composed of the word \"Strategy\" followed by its `PatternNumber`.\n\n### DisplayName\n",
    "metadata": {
      "id": "strategy-evolver-result",
      "title": "strategy-evolver-result",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-evolver-result.md",
      "chunkIndex": 3,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nA combination of the run's `Name` and `GeneCode`.\n\n### PatternNumber\n",
    "metadata": {
      "id": "strategy-evolver-result",
      "title": "strategy-evolver-result",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-evolver-result.md",
      "chunkIndex": 4,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nIndicates the order of occurrence within the overall evolution process.\n\n### GeneCode\n",
    "metadata": {
      "id": "strategy-evolver-result",
      "title": "strategy-evolver-result",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-evolver-result.md",
      "chunkIndex": 5,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nA concatenated string of codes representing the Evolver Genes that compose the Strategy.\n\n## Evolutionary Properties\n\n### Generation\n",
    "metadata": {
      "id": "strategy-evolver-result",
      "title": "strategy-evolver-result",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-evolver-result.md",
      "chunkIndex": 6,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nThe generation number in which this Evolver run occurred.\n\n### GenerationsSurvived\n",
    "metadata": {
      "id": "strategy-evolver-result",
      "title": "strategy-evolver-result",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-evolver-result.md",
      "chunkIndex": 7,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nThe number of generations this strategy survived during the evolution process.\n\n### IsApex\n",
    "metadata": {
      "id": "strategy-evolver-result",
      "title": "strategy-evolver-result",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-evolver-result.md",
      "chunkIndex": 8,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nIndicates whether the Strategy was flagged as an Apex Strategy during the Evolver run.\n\n### SlotNumber\n",
    "metadata": {
      "id": "strategy-evolver-result",
      "title": "strategy-evolver-result",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-evolver-result.md",
      "chunkIndex": 9,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nThe initial slot number of the run:\n- Slots 1-5: Pre-set template Strategies\n- Slots 6-10: User-defined Strategies in Evolver Preferences\n\n## Strategy Configuration Properties\n\n### IsSinglePosition\n",
    "metadata": {
      "id": "strategy-evolver-result",
      "title": "strategy-evolver-result",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-evolver-result.md",
      "chunkIndex": 10,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nDetermines whether the Building Block Strategy employed a single-position or multiple-position approach.\n\n### PosSize\n",
    "metadata": {
      "id": "strategy-evolver-result",
      "title": "strategy-evolver-result",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-evolver-result.md",
      "chunkIndex": 11,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the position sizing method used during the run.\n\n### StrategyData\n",
    "metadata": {
      "id": "strategy-evolver-result",
      "title": "strategy-evolver-result",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-evolver-result.md",
      "chunkIndex": 12,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nAn encoded string representing the run's Strategy Building Blocks, used in `GenerateStrategy()` method.\n\n## Performance and Filtering Properties\n\n### PerformanceMetrics\n",
    "metadata": {
      "id": "strategy-evolver-result",
      "title": "strategy-evolver-result",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-evolver-result.md",
      "chunkIndex": 13,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nContains performance metrics determined by the ScoreCard used during the Evolver run.\n\n### WasFiltered\n",
    "metadata": {
      "id": "strategy-evolver-result",
      "title": "strategy-evolver-result",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-evolver-result.md",
      "chunkIndex": 14,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nIndicates whether the run was filtered out due to:\n- Failing to pass selected Filter Set criteria\n- Being a duplicate of another Strategy in the generation\n\n## Advanced Usage Example\n\n",
    "metadata": {
      "id": "strategy-evolver-result",
      "title": "strategy-evolver-result",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-evolver-result.md",
      "chunkIndex": 15,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n## Best Practices\n\n1. **Performance Analysis**\n   - Carefully examine performance metrics\n   - Consider multiple metrics, not just a single value\n   - Look at consistency across generations\n\n2. **Strategy Generation**\n   - Use `GenerateStrategy()` to instantiate evolved strategies\n   - Validate generated strategies before deployment\n   - Perform additional backtesting and validation\n\n3. **Filtering and Selection**\n   - Pay attention to `WasFiltered` property\n   - Understand why strategies might be filtered\n   - Consider refining evolution parameters\n\n## Notes\n\n- Provides comprehensive insights into evolutionary strategy development\n- Supports detailed performance and genetic analysis\n- Enables programmatic strategy generation and evaluation\n\n## Requirements\n\n- Understanding of genetic algorithm concepts\n- Familiarity with strategy evolution and optimization\n- Knowledge of performance metric interpretation\n\n## Caution\n\n🧬 Evolved strategies require thorough validation and should not be blindly deployed. Always perform extensive backtesting and real-world validation. 🧬 ",
    "metadata": {
      "id": "strategy-evolver-result",
      "title": "strategy-evolver-result",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-evolver-result.md",
      "chunkIndex": 16,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "public Strategy GenerateStrategy()\n",
    "metadata": {
      "id": "strategy-evolver-result",
      "title": "strategy-evolver-result",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-evolver-result.md",
      "chunkIndex": "code-0",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "# StrategyEvolverResult Class\n\n**Namespace:** WealthLab.Backtest  \n**Parent:** Object\n\nThe `StrategyEvolverResult` class represents the outcome of a single Strategy Evolver run, encapsulating performance metrics, genetic information, and strategy details generated through the evolutionary optimization process.\n\n## Methods\n\n### GenerateStrategy\n"
    }
  },
  {
    "pageContent": "# StrategyEvolverResult Class\n\n**Namespace:** WealthLab.Backtest  \n**Parent:** Object\n\nThe `StrategyEvolverResult` class represents the outcome of a single Strategy Evolver run, encapsulating performance metrics, genetic information, and strategy details generated through the evolutionary optimization process.\n\n## Methods\n\n### GenerateStrategy\n\n\n```csharp\npublic Strategy GenerateStrategy()\n\n```",
    "metadata": {
      "id": "strategy-evolver-result",
      "title": "strategy-evolver-result",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-evolver-result.md",
      "chunkIndex": "code-context-0",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public class StrategyEvolverAnalyzer\n{\n    public void AnalyzeEvolvedStrategy(StrategyEvolverResult result)\n    {\n        // Generate the strategy from the evolver result\n        Strategy evolvedStrategy = result.GenerateStrategy();\n        \n        // Perform additional analysis\n        Console.WriteLine($\"Strategy Generation: {result.Generation}\");\n        Console.WriteLine($\"Performance Metrics:\");\n        foreach (var metric in result.PerformanceMetrics)\n        {\n            Console.WriteLine($\"  {metric.Key}: {metric.Value}\");\n        }\n    }\n}\n",
    "metadata": {
      "id": "strategy-evolver-result",
      "title": "strategy-evolver-result",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-evolver-result.md",
      "chunkIndex": "code-1",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "nformation, and strategy details generated through the evolutionary optimization process.\n\n## Methods\n\n### GenerateStrategy\n```csharp\npublic Strategy GenerateStrategy()\n```\nGenerates and returns a new `Strategy` instance based on the Building Blocks of this run's evolved Genes.\n\n**Features:**\n- Creates a strategy from the run's genetic code\n- Assigns the position size used during the run\n- Provides a way to instantiate the evolved strategy for further analysis or backtesting\n\n**Usage Example:**\n"
    }
  },
  {
    "pageContent": "nformation, and strategy details generated through the evolutionary optimization process.\n\n## Methods\n\n### GenerateStrategy\n```csharp\npublic Strategy GenerateStrategy()\n```\nGenerates and returns a new `Strategy` instance based on the Building Blocks of this run's evolved Genes.\n\n**Features:**\n- Creates a strategy from the run's genetic code\n- Assigns the position size used during the run\n- Provides a way to instantiate the evolved strategy for further analysis or backtesting\n\n**Usage Example:**\n\n\n```csharp\npublic class StrategyEvolverAnalyzer\n{\n    public void AnalyzeEvolvedStrategy(StrategyEvolverResult result)\n    {\n        // Generate the strategy from the evolver result\n        Strategy evolvedStrategy = result.GenerateStrategy();\n        \n        // Perform additional analysis\n        Console.WriteLine($\"Strategy Generation: {result.Generation}\");\n        Console.WriteLine($\"Performance Metrics:\");\n        foreach (var metric in result.PerformanceMetrics)\n        {\n            Console.WriteLine($\"  {metric.Key}: {metric.Value}\");\n        }\n    }\n}\n\n```",
    "metadata": {
      "id": "strategy-evolver-result",
      "title": "strategy-evolver-result",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-evolver-result.md",
      "chunkIndex": "code-context-1",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public string Name\n",
    "metadata": {
      "id": "strategy-evolver-result",
      "title": "strategy-evolver-result",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-evolver-result.md",
      "chunkIndex": "code-2",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "esult)\n    {\n        // Generate the strategy from the evolver result\n        Strategy evolvedStrategy = result.GenerateStrategy();\n        \n        // Perform additional analysis\n        Console.WriteLine($\"Strategy Generation: {result.Generation}\");\n        Console.WriteLine($\"Performance Metrics:\");\n        foreach (var metric in result.PerformanceMetrics)\n        {\n            Console.WriteLine($\"  {metric.Key}: {metric.Value}\");\n        }\n    }\n}\n```\n\n## Identification Properties\n\n### Name\n"
    }
  },
  {
    "pageContent": "esult)\n    {\n        // Generate the strategy from the evolver result\n        Strategy evolvedStrategy = result.GenerateStrategy();\n        \n        // Perform additional analysis\n        Console.WriteLine($\"Strategy Generation: {result.Generation}\");\n        Console.WriteLine($\"Performance Metrics:\");\n        foreach (var metric in result.PerformanceMetrics)\n        {\n            Console.WriteLine($\"  {metric.Key}: {metric.Value}\");\n        }\n    }\n}\n```\n\n## Identification Properties\n\n### Name\n\n\n```csharp\npublic string Name\n\n```",
    "metadata": {
      "id": "strategy-evolver-result",
      "title": "strategy-evolver-result",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-evolver-result.md",
      "chunkIndex": "code-context-2",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public string DisplayName\n",
    "metadata": {
      "id": "strategy-evolver-result",
      "title": "strategy-evolver-result",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-evolver-result.md",
      "chunkIndex": "code-3",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "    \n        // Perform additional analysis\n        Console.WriteLine($\"Strategy Generation: {result.Generation}\");\n        Console.WriteLine($\"Performance Metrics:\");\n        foreach (var metric in result.PerformanceMetrics)\n        {\n            Console.WriteLine($\"  {metric.Key}: {metric.Value}\");\n        }\n    }\n}\n```\n\n## Identification Properties\n\n### Name\n```csharp\npublic string Name\n```\nThe name of the run, composed of the word \"Strategy\" followed by its `PatternNumber`.\n\n### DisplayName\n"
    }
  },
  {
    "pageContent": "    \n        // Perform additional analysis\n        Console.WriteLine($\"Strategy Generation: {result.Generation}\");\n        Console.WriteLine($\"Performance Metrics:\");\n        foreach (var metric in result.PerformanceMetrics)\n        {\n            Console.WriteLine($\"  {metric.Key}: {metric.Value}\");\n        }\n    }\n}\n```\n\n## Identification Properties\n\n### Name\n```csharp\npublic string Name\n```\nThe name of the run, composed of the word \"Strategy\" followed by its `PatternNumber`.\n\n### DisplayName\n\n\n```csharp\npublic string DisplayName\n\n```",
    "metadata": {
      "id": "strategy-evolver-result",
      "title": "strategy-evolver-result",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-evolver-result.md",
      "chunkIndex": "code-context-3",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public int PatternNumber\n",
    "metadata": {
      "id": "strategy-evolver-result",
      "title": "strategy-evolver-result",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-evolver-result.md",
      "chunkIndex": "code-4",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "on}\");\n        Console.WriteLine($\"Performance Metrics:\");\n        foreach (var metric in result.PerformanceMetrics)\n        {\n            Console.WriteLine($\"  {metric.Key}: {metric.Value}\");\n        }\n    }\n}\n```\n\n## Identification Properties\n\n### Name\n```csharp\npublic string Name\n```\nThe name of the run, composed of the word \"Strategy\" followed by its `PatternNumber`.\n\n### DisplayName\n```csharp\npublic string DisplayName\n```\nA combination of the run's `Name` and `GeneCode`.\n\n### PatternNumber\n"
    }
  },
  {
    "pageContent": "on}\");\n        Console.WriteLine($\"Performance Metrics:\");\n        foreach (var metric in result.PerformanceMetrics)\n        {\n            Console.WriteLine($\"  {metric.Key}: {metric.Value}\");\n        }\n    }\n}\n```\n\n## Identification Properties\n\n### Name\n```csharp\npublic string Name\n```\nThe name of the run, composed of the word \"Strategy\" followed by its `PatternNumber`.\n\n### DisplayName\n```csharp\npublic string DisplayName\n```\nA combination of the run's `Name` and `GeneCode`.\n\n### PatternNumber\n\n\n```csharp\npublic int PatternNumber\n\n```",
    "metadata": {
      "id": "strategy-evolver-result",
      "title": "strategy-evolver-result",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-evolver-result.md",
      "chunkIndex": "code-context-4",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public string GeneCode\n",
    "metadata": {
      "id": "strategy-evolver-result",
      "title": "strategy-evolver-result",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-evolver-result.md",
      "chunkIndex": "code-5",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "{\n            Console.WriteLine($\"  {metric.Key}: {metric.Value}\");\n        }\n    }\n}\n```\n\n## Identification Properties\n\n### Name\n```csharp\npublic string Name\n```\nThe name of the run, composed of the word \"Strategy\" followed by its `PatternNumber`.\n\n### DisplayName\n```csharp\npublic string DisplayName\n```\nA combination of the run's `Name` and `GeneCode`.\n\n### PatternNumber\n```csharp\npublic int PatternNumber\n```\nIndicates the order of occurrence within the overall evolution process.\n\n### GeneCode\n"
    }
  },
  {
    "pageContent": "{\n            Console.WriteLine($\"  {metric.Key}: {metric.Value}\");\n        }\n    }\n}\n```\n\n## Identification Properties\n\n### Name\n```csharp\npublic string Name\n```\nThe name of the run, composed of the word \"Strategy\" followed by its `PatternNumber`.\n\n### DisplayName\n```csharp\npublic string DisplayName\n```\nA combination of the run's `Name` and `GeneCode`.\n\n### PatternNumber\n```csharp\npublic int PatternNumber\n```\nIndicates the order of occurrence within the overall evolution process.\n\n### GeneCode\n\n\n```csharp\npublic string GeneCode\n\n```",
    "metadata": {
      "id": "strategy-evolver-result",
      "title": "strategy-evolver-result",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-evolver-result.md",
      "chunkIndex": "code-context-5",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public int Generation\n",
    "metadata": {
      "id": "strategy-evolver-result",
      "title": "strategy-evolver-result",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-evolver-result.md",
      "chunkIndex": "code-6",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "e of the run, composed of the word \"Strategy\" followed by its `PatternNumber`.\n\n### DisplayName\n```csharp\npublic string DisplayName\n```\nA combination of the run's `Name` and `GeneCode`.\n\n### PatternNumber\n```csharp\npublic int PatternNumber\n```\nIndicates the order of occurrence within the overall evolution process.\n\n### GeneCode\n```csharp\npublic string GeneCode\n```\nA concatenated string of codes representing the Evolver Genes that compose the Strategy.\n\n## Evolutionary Properties\n\n### Generation\n"
    }
  },
  {
    "pageContent": "e of the run, composed of the word \"Strategy\" followed by its `PatternNumber`.\n\n### DisplayName\n```csharp\npublic string DisplayName\n```\nA combination of the run's `Name` and `GeneCode`.\n\n### PatternNumber\n```csharp\npublic int PatternNumber\n```\nIndicates the order of occurrence within the overall evolution process.\n\n### GeneCode\n```csharp\npublic string GeneCode\n```\nA concatenated string of codes representing the Evolver Genes that compose the Strategy.\n\n## Evolutionary Properties\n\n### Generation\n\n\n```csharp\npublic int Generation\n\n```",
    "metadata": {
      "id": "strategy-evolver-result",
      "title": "strategy-evolver-result",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-evolver-result.md",
      "chunkIndex": "code-context-6",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public int GenerationsSurvived\n",
    "metadata": {
      "id": "strategy-evolver-result",
      "title": "strategy-evolver-result",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-evolver-result.md",
      "chunkIndex": "code-7",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": " DisplayName\n```\nA combination of the run's `Name` and `GeneCode`.\n\n### PatternNumber\n```csharp\npublic int PatternNumber\n```\nIndicates the order of occurrence within the overall evolution process.\n\n### GeneCode\n```csharp\npublic string GeneCode\n```\nA concatenated string of codes representing the Evolver Genes that compose the Strategy.\n\n## Evolutionary Properties\n\n### Generation\n```csharp\npublic int Generation\n```\nThe generation number in which this Evolver run occurred.\n\n### GenerationsSurvived\n"
    }
  },
  {
    "pageContent": " DisplayName\n```\nA combination of the run's `Name` and `GeneCode`.\n\n### PatternNumber\n```csharp\npublic int PatternNumber\n```\nIndicates the order of occurrence within the overall evolution process.\n\n### GeneCode\n```csharp\npublic string GeneCode\n```\nA concatenated string of codes representing the Evolver Genes that compose the Strategy.\n\n## Evolutionary Properties\n\n### Generation\n```csharp\npublic int Generation\n```\nThe generation number in which this Evolver run occurred.\n\n### GenerationsSurvived\n\n\n```csharp\npublic int GenerationsSurvived\n\n```",
    "metadata": {
      "id": "strategy-evolver-result",
      "title": "strategy-evolver-result",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-evolver-result.md",
      "chunkIndex": "code-context-7",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public bool IsApex\n",
    "metadata": {
      "id": "strategy-evolver-result",
      "title": "strategy-evolver-result",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-evolver-result.md",
      "chunkIndex": "code-8",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "he order of occurrence within the overall evolution process.\n\n### GeneCode\n```csharp\npublic string GeneCode\n```\nA concatenated string of codes representing the Evolver Genes that compose the Strategy.\n\n## Evolutionary Properties\n\n### Generation\n```csharp\npublic int Generation\n```\nThe generation number in which this Evolver run occurred.\n\n### GenerationsSurvived\n```csharp\npublic int GenerationsSurvived\n```\nThe number of generations this strategy survived during the evolution process.\n\n### IsApex\n"
    }
  },
  {
    "pageContent": "he order of occurrence within the overall evolution process.\n\n### GeneCode\n```csharp\npublic string GeneCode\n```\nA concatenated string of codes representing the Evolver Genes that compose the Strategy.\n\n## Evolutionary Properties\n\n### Generation\n```csharp\npublic int Generation\n```\nThe generation number in which this Evolver run occurred.\n\n### GenerationsSurvived\n```csharp\npublic int GenerationsSurvived\n```\nThe number of generations this strategy survived during the evolution process.\n\n### IsApex\n\n\n```csharp\npublic bool IsApex\n\n```",
    "metadata": {
      "id": "strategy-evolver-result",
      "title": "strategy-evolver-result",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-evolver-result.md",
      "chunkIndex": "code-context-8",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public int SlotNumber\n",
    "metadata": {
      "id": "strategy-evolver-result",
      "title": "strategy-evolver-result",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-evolver-result.md",
      "chunkIndex": "code-9",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": " codes representing the Evolver Genes that compose the Strategy.\n\n## Evolutionary Properties\n\n### Generation\n```csharp\npublic int Generation\n```\nThe generation number in which this Evolver run occurred.\n\n### GenerationsSurvived\n```csharp\npublic int GenerationsSurvived\n```\nThe number of generations this strategy survived during the evolution process.\n\n### IsApex\n```csharp\npublic bool IsApex\n```\nIndicates whether the Strategy was flagged as an Apex Strategy during the Evolver run.\n\n### SlotNumber\n"
    }
  },
  {
    "pageContent": " codes representing the Evolver Genes that compose the Strategy.\n\n## Evolutionary Properties\n\n### Generation\n```csharp\npublic int Generation\n```\nThe generation number in which this Evolver run occurred.\n\n### GenerationsSurvived\n```csharp\npublic int GenerationsSurvived\n```\nThe number of generations this strategy survived during the evolution process.\n\n### IsApex\n```csharp\npublic bool IsApex\n```\nIndicates whether the Strategy was flagged as an Apex Strategy during the Evolver run.\n\n### SlotNumber\n\n\n```csharp\npublic int SlotNumber\n\n```",
    "metadata": {
      "id": "strategy-evolver-result",
      "title": "strategy-evolver-result",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-evolver-result.md",
      "chunkIndex": "code-context-9",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public bool IsSinglePosition\n",
    "metadata": {
      "id": "strategy-evolver-result",
      "title": "strategy-evolver-result",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-evolver-result.md",
      "chunkIndex": "code-10",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "arp\npublic int GenerationsSurvived\n```\nThe number of generations this strategy survived during the evolution process.\n\n### IsApex\n```csharp\npublic bool IsApex\n```\nIndicates whether the Strategy was flagged as an Apex Strategy during the Evolver run.\n\n### SlotNumber\n```csharp\npublic int SlotNumber\n```\nThe initial slot number of the run:\n- Slots 1-5: Pre-set template Strategies\n- Slots 6-10: User-defined Strategies in Evolver Preferences\n\n## Strategy Configuration Properties\n\n### IsSinglePosition\n"
    }
  },
  {
    "pageContent": "arp\npublic int GenerationsSurvived\n```\nThe number of generations this strategy survived during the evolution process.\n\n### IsApex\n```csharp\npublic bool IsApex\n```\nIndicates whether the Strategy was flagged as an Apex Strategy during the Evolver run.\n\n### SlotNumber\n```csharp\npublic int SlotNumber\n```\nThe initial slot number of the run:\n- Slots 1-5: Pre-set template Strategies\n- Slots 6-10: User-defined Strategies in Evolver Preferences\n\n## Strategy Configuration Properties\n\n### IsSinglePosition\n\n\n```csharp\npublic bool IsSinglePosition\n\n```",
    "metadata": {
      "id": "strategy-evolver-result",
      "title": "strategy-evolver-result",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-evolver-result.md",
      "chunkIndex": "code-context-10",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public PositionSize PosSize\n",
    "metadata": {
      "id": "strategy-evolver-result",
      "title": "strategy-evolver-result",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-evolver-result.md",
      "chunkIndex": "code-11",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "`\nIndicates whether the Strategy was flagged as an Apex Strategy during the Evolver run.\n\n### SlotNumber\n```csharp\npublic int SlotNumber\n```\nThe initial slot number of the run:\n- Slots 1-5: Pre-set template Strategies\n- Slots 6-10: User-defined Strategies in Evolver Preferences\n\n## Strategy Configuration Properties\n\n### IsSinglePosition\n```csharp\npublic bool IsSinglePosition\n```\nDetermines whether the Building Block Strategy employed a single-position or multiple-position approach.\n\n### PosSize\n"
    }
  },
  {
    "pageContent": "`\nIndicates whether the Strategy was flagged as an Apex Strategy during the Evolver run.\n\n### SlotNumber\n```csharp\npublic int SlotNumber\n```\nThe initial slot number of the run:\n- Slots 1-5: Pre-set template Strategies\n- Slots 6-10: User-defined Strategies in Evolver Preferences\n\n## Strategy Configuration Properties\n\n### IsSinglePosition\n```csharp\npublic bool IsSinglePosition\n```\nDetermines whether the Building Block Strategy employed a single-position or multiple-position approach.\n\n### PosSize\n\n\n```csharp\npublic PositionSize PosSize\n\n```",
    "metadata": {
      "id": "strategy-evolver-result",
      "title": "strategy-evolver-result",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-evolver-result.md",
      "chunkIndex": "code-context-11",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public string StrategyData\n",
    "metadata": {
      "id": "strategy-evolver-result",
      "title": "strategy-evolver-result",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-evolver-result.md",
      "chunkIndex": "code-12",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ublic int SlotNumber\n```\nThe initial slot number of the run:\n- Slots 1-5: Pre-set template Strategies\n- Slots 6-10: User-defined Strategies in Evolver Preferences\n\n## Strategy Configuration Properties\n\n### IsSinglePosition\n```csharp\npublic bool IsSinglePosition\n```\nDetermines whether the Building Block Strategy employed a single-position or multiple-position approach.\n\n### PosSize\n```csharp\npublic PositionSize PosSize\n```\nReturns the position sizing method used during the run.\n\n### StrategyData\n"
    }
  },
  {
    "pageContent": "ublic int SlotNumber\n```\nThe initial slot number of the run:\n- Slots 1-5: Pre-set template Strategies\n- Slots 6-10: User-defined Strategies in Evolver Preferences\n\n## Strategy Configuration Properties\n\n### IsSinglePosition\n```csharp\npublic bool IsSinglePosition\n```\nDetermines whether the Building Block Strategy employed a single-position or multiple-position approach.\n\n### PosSize\n```csharp\npublic PositionSize PosSize\n```\nReturns the position sizing method used during the run.\n\n### StrategyData\n\n\n```csharp\npublic string StrategyData\n\n```",
    "metadata": {
      "id": "strategy-evolver-result",
      "title": "strategy-evolver-result",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-evolver-result.md",
      "chunkIndex": "code-context-12",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public Dictionary<string, double> PerformanceMetrics\n",
    "metadata": {
      "id": "strategy-evolver-result",
      "title": "strategy-evolver-result",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-evolver-result.md",
      "chunkIndex": "code-13",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "nglePosition\n```csharp\npublic bool IsSinglePosition\n```\nDetermines whether the Building Block Strategy employed a single-position or multiple-position approach.\n\n### PosSize\n```csharp\npublic PositionSize PosSize\n```\nReturns the position sizing method used during the run.\n\n### StrategyData\n```csharp\npublic string StrategyData\n```\nAn encoded string representing the run's Strategy Building Blocks, used in `GenerateStrategy()` method.\n\n## Performance and Filtering Properties\n\n### PerformanceMetrics\n"
    }
  },
  {
    "pageContent": "nglePosition\n```csharp\npublic bool IsSinglePosition\n```\nDetermines whether the Building Block Strategy employed a single-position or multiple-position approach.\n\n### PosSize\n```csharp\npublic PositionSize PosSize\n```\nReturns the position sizing method used during the run.\n\n### StrategyData\n```csharp\npublic string StrategyData\n```\nAn encoded string representing the run's Strategy Building Blocks, used in `GenerateStrategy()` method.\n\n## Performance and Filtering Properties\n\n### PerformanceMetrics\n\n\n```csharp\npublic Dictionary<string, double> PerformanceMetrics\n\n```",
    "metadata": {
      "id": "strategy-evolver-result",
      "title": "strategy-evolver-result",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-evolver-result.md",
      "chunkIndex": "code-context-13",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public bool WasFiltered\n",
    "metadata": {
      "id": "strategy-evolver-result",
      "title": "strategy-evolver-result",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-evolver-result.md",
      "chunkIndex": "code-14",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ize\n```csharp\npublic PositionSize PosSize\n```\nReturns the position sizing method used during the run.\n\n### StrategyData\n```csharp\npublic string StrategyData\n```\nAn encoded string representing the run's Strategy Building Blocks, used in `GenerateStrategy()` method.\n\n## Performance and Filtering Properties\n\n### PerformanceMetrics\n```csharp\npublic Dictionary<string, double> PerformanceMetrics\n```\nContains performance metrics determined by the ScoreCard used during the Evolver run.\n\n### WasFiltered\n"
    }
  },
  {
    "pageContent": "ize\n```csharp\npublic PositionSize PosSize\n```\nReturns the position sizing method used during the run.\n\n### StrategyData\n```csharp\npublic string StrategyData\n```\nAn encoded string representing the run's Strategy Building Blocks, used in `GenerateStrategy()` method.\n\n## Performance and Filtering Properties\n\n### PerformanceMetrics\n```csharp\npublic Dictionary<string, double> PerformanceMetrics\n```\nContains performance metrics determined by the ScoreCard used during the Evolver run.\n\n### WasFiltered\n\n\n```csharp\npublic bool WasFiltered\n\n```",
    "metadata": {
      "id": "strategy-evolver-result",
      "title": "strategy-evolver-result",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-evolver-result.md",
      "chunkIndex": "code-context-14",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public class EvolutionaryStrategyAnalyzer\n{\n    public void AnalyzeEvolverResults(List<StrategyEvolverResult> results)\n    {\n        // Sort results by performance\n        var sortedResults = results\n            .Where(r => !r.WasFiltered)\n            .OrderByDescending(r => r.PerformanceMetrics[\"NetProfit\"])\n            .ToList();\n\n        foreach (var result in sortedResults)\n        {\n            Console.WriteLine($\"Strategy: {result.DisplayName}\");\n            Console.WriteLine($\"Generation: {result.Generation}\");\n            Console.WriteLine($\"Generations Survived: {result.GenerationsSurvived}\");\n            Console.WriteLine($\"Is Apex Strategy: {result.IsApex}\");\n\n            // Detailed performance metrics\n            Console.WriteLine(\"Performance Metrics:\");\n            foreach (var metric in result.PerformanceMetrics)\n            {\n                Console.WriteLine($\"  {metric.Key}: {metric.Value}\");\n            }\n\n            // Generate and analyze the strategy\n            var strategy = result.GenerateStrategy();\n            AnalyzeStrategyDetails(strategy);\n\n            Console.WriteLine(\"---\");\n        }\n    }\n\n    private void AnalyzeStrategyDetails(Strategy strategy)\n    {\n        // Implement strategy-specific analysis\n        Console.WriteLine($\"Position Size Type: {strategy.PositionSize.PositionSizeType}\");\n        Console.WriteLine($\"Benchmark Symbol: {strategy.Benchmark}\");\n    }\n}\n",
    "metadata": {
      "id": "strategy-evolver-result",
      "title": "strategy-evolver-result",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-evolver-result.md",
      "chunkIndex": "code-15",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ocks, used in `GenerateStrategy()` method.\n\n## Performance and Filtering Properties\n\n### PerformanceMetrics\n```csharp\npublic Dictionary<string, double> PerformanceMetrics\n```\nContains performance metrics determined by the ScoreCard used during the Evolver run.\n\n### WasFiltered\n```csharp\npublic bool WasFiltered\n```\nIndicates whether the run was filtered out due to:\n- Failing to pass selected Filter Set criteria\n- Being a duplicate of another Strategy in the generation\n\n## Advanced Usage Example\n\n"
    }
  },
  {
    "pageContent": "ocks, used in `GenerateStrategy()` method.\n\n## Performance and Filtering Properties\n\n### PerformanceMetrics\n```csharp\npublic Dictionary<string, double> PerformanceMetrics\n```\nContains performance metrics determined by the ScoreCard used during the Evolver run.\n\n### WasFiltered\n```csharp\npublic bool WasFiltered\n```\nIndicates whether the run was filtered out due to:\n- Failing to pass selected Filter Set criteria\n- Being a duplicate of another Strategy in the generation\n\n## Advanced Usage Example\n\n\n\n```csharp\npublic class EvolutionaryStrategyAnalyzer\n{\n    public void AnalyzeEvolverResults(List<StrategyEvolverResult> results)\n    {\n        // Sort results by performance\n        var sortedResults = results\n            .Where(r => !r.WasFiltered)\n            .OrderByDescending(r => r.PerformanceMetrics[\"NetProfit\"])\n            .ToList();\n\n        foreach (var result in sortedResults)\n        {\n            Console.WriteLine($\"Strategy: {result.DisplayName}\");\n            Console.WriteLine($\"Generation: {result.Generation}\");\n            Console.WriteLine($\"Generations Survived: {result.GenerationsSurvived}\");\n            Console.WriteLine($\"Is Apex Strategy: {result.IsApex}\");\n\n            // Detailed performance metrics\n            Console.WriteLine(\"Performance Metrics:\");\n            foreach (var metric in result.PerformanceMetrics)\n            {\n                Console.WriteLine($\"  {metric.Key}: {metric.Value}\");\n            }\n\n            // Generate and analyze the strategy\n            var strategy = result.GenerateStrategy();\n            AnalyzeStrategyDetails(strategy);\n\n            Console.WriteLine(\"---\");\n        }\n    }\n\n    private void AnalyzeStrategyDetails(Strategy strategy)\n    {\n        // Implement strategy-specific analysis\n        Console.WriteLine($\"Position Size Type: {strategy.PositionSize.PositionSizeType}\");\n        Console.WriteLine($\"Benchmark Symbol: {strategy.Benchmark}\");\n    }\n}\n\n```",
    "metadata": {
      "id": "strategy-evolver-result",
      "title": "strategy-evolver-result",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-evolver-result.md",
      "chunkIndex": "code-context-15",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "# StrategyEvolverResults Class\n\n**Namespace:** WealthLab.Backtest  \n**Parent:** Object\n\nThe `StrategyEvolverResults` class encapsulates the comprehensive results of a Strategy Evolver run, providing access to both the most recent evolution results and historical Apex Strategy runs.\n\n## Overview\n\nThis class serves as a container for strategy evolution results, offering insights into the entire evolutionary optimization process. It maintains two key collections:\n- The most recent Evolver run results\n- A list of Apex Strategy run results\n\n## Properties\n\n### Results\n",
    "metadata": {
      "id": "strategy-evolver-results",
      "title": "strategy-evolver-results",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-evolver-results.md",
      "chunkIndex": 0,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the `StrategyEvolverResultList` containing the results of the most recent Evolver runs.\n\n**Usage Example:**\n",
    "metadata": {
      "id": "strategy-evolver-results",
      "title": "strategy-evolver-results",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-evolver-results.md",
      "chunkIndex": 1,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n### ApexResults\n",
    "metadata": {
      "id": "strategy-evolver-results",
      "title": "strategy-evolver-results",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-evolver-results.md",
      "chunkIndex": 2,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nContains a list of `StrategyEvolverResultList` instances representing completed Apex Strategy runs.\n\n**Usage Example:**\n",
    "metadata": {
      "id": "strategy-evolver-results",
      "title": "strategy-evolver-results",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-evolver-results.md",
      "chunkIndex": 3,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n## Advanced Analysis Example\n\n",
    "metadata": {
      "id": "strategy-evolver-results",
      "title": "strategy-evolver-results",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-evolver-results.md",
      "chunkIndex": 4,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n## Best Practices\n\n1. **Result Interpretation**\n   - Analyze both recent and Apex Strategy results\n   - Look for consistent performance patterns\n   - Avoid over-relying on a single metric\n\n2. **Apex Strategy Evaluation**\n   - Compare multiple Apex Strategy runs\n   - Identify robust and consistent strategies\n   - Consider performance across different market conditions\n\n3. **Performance Analysis**\n   - Use multiple performance metrics\n   - Validate strategies through extensive backtesting\n   - Be cautious of potential overfitting\n\n## Performance Considerations\n\n- Large numbers of Apex runs can consume significant memory\n- Implement lazy loading or streaming for large result sets\n- Cache intermediate analysis results\n- Use efficient LINQ queries\n\n## Caution\n\n🧬 Evolutionary strategy results require careful interpretation:\n- Not all improvements are statistically significant\n- Beware of overfitting\n- Always validate strategies through comprehensive testing 🧬\n\n## Requirements\n\n- Deep understanding of genetic algorithm optimization\n- Proficiency in performance metric analysis\n- Knowledge of strategy development techniques\n\n## Notes\n\n- Provides a comprehensive view of the strategy evolution process\n- Supports in-depth analysis of multiple evolution runs\n- Enables data-driven strategy development and selection ",
    "metadata": {
      "id": "strategy-evolver-results",
      "title": "strategy-evolver-results",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-evolver-results.md",
      "chunkIndex": 5,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "public StrategyEvolverResultList Results\n",
    "metadata": {
      "id": "strategy-evolver-results",
      "title": "strategy-evolver-results",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-evolver-results.md",
      "chunkIndex": "code-0",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "*Parent:** Object\n\nThe `StrategyEvolverResults` class encapsulates the comprehensive results of a Strategy Evolver run, providing access to both the most recent evolution results and historical Apex Strategy runs.\n\n## Overview\n\nThis class serves as a container for strategy evolution results, offering insights into the entire evolutionary optimization process. It maintains two key collections:\n- The most recent Evolver run results\n- A list of Apex Strategy run results\n\n## Properties\n\n### Results\n"
    }
  },
  {
    "pageContent": "*Parent:** Object\n\nThe `StrategyEvolverResults` class encapsulates the comprehensive results of a Strategy Evolver run, providing access to both the most recent evolution results and historical Apex Strategy runs.\n\n## Overview\n\nThis class serves as a container for strategy evolution results, offering insights into the entire evolutionary optimization process. It maintains two key collections:\n- The most recent Evolver run results\n- A list of Apex Strategy run results\n\n## Properties\n\n### Results\n\n\n```csharp\npublic StrategyEvolverResultList Results\n\n```",
    "metadata": {
      "id": "strategy-evolver-results",
      "title": "strategy-evolver-results",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-evolver-results.md",
      "chunkIndex": "code-context-0",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public class RecentRunAnalyzer\n{\n    public void AnalyzeLatestEvolution(StrategyEvolverResults evolutionResults)\n    {\n        // Access most recent run results\n        var latestResults = evolutionResults.Results;\n        \n        // Analyze latest generation\n        int latestGeneration = latestResults.MaxGeneration;\n        Console.WriteLine($\"Latest Generation: {latestGeneration}\");\n        \n        // Find best strategy in the latest generation\n        var bestStrategy = latestResults.FindBest(\"NetProfit\", latestGeneration, true);\n        Console.WriteLine($\"Best Strategy: {bestStrategy.DisplayName}\");\n    }\n}\n",
    "metadata": {
      "id": "strategy-evolver-results",
      "title": "strategy-evolver-results",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-evolver-results.md",
      "chunkIndex": "code-1",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "results and historical Apex Strategy runs.\n\n## Overview\n\nThis class serves as a container for strategy evolution results, offering insights into the entire evolutionary optimization process. It maintains two key collections:\n- The most recent Evolver run results\n- A list of Apex Strategy run results\n\n## Properties\n\n### Results\n```csharp\npublic StrategyEvolverResultList Results\n```\nReturns the `StrategyEvolverResultList` containing the results of the most recent Evolver runs.\n\n**Usage Example:**\n"
    }
  },
  {
    "pageContent": "results and historical Apex Strategy runs.\n\n## Overview\n\nThis class serves as a container for strategy evolution results, offering insights into the entire evolutionary optimization process. It maintains two key collections:\n- The most recent Evolver run results\n- A list of Apex Strategy run results\n\n## Properties\n\n### Results\n```csharp\npublic StrategyEvolverResultList Results\n```\nReturns the `StrategyEvolverResultList` containing the results of the most recent Evolver runs.\n\n**Usage Example:**\n\n\n```csharp\npublic class RecentRunAnalyzer\n{\n    public void AnalyzeLatestEvolution(StrategyEvolverResults evolutionResults)\n    {\n        // Access most recent run results\n        var latestResults = evolutionResults.Results;\n        \n        // Analyze latest generation\n        int latestGeneration = latestResults.MaxGeneration;\n        Console.WriteLine($\"Latest Generation: {latestGeneration}\");\n        \n        // Find best strategy in the latest generation\n        var bestStrategy = latestResults.FindBest(\"NetProfit\", latestGeneration, true);\n        Console.WriteLine($\"Best Strategy: {bestStrategy.DisplayName}\");\n    }\n}\n\n```",
    "metadata": {
      "id": "strategy-evolver-results",
      "title": "strategy-evolver-results",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-evolver-results.md",
      "chunkIndex": "code-context-1",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public List<StrategyEvolverResultList> ApexResults\n",
    "metadata": {
      "id": "strategy-evolver-results",
      "title": "strategy-evolver-results",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-evolver-results.md",
      "chunkIndex": "code-2",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "cent run results\n        var latestResults = evolutionResults.Results;\n        \n        // Analyze latest generation\n        int latestGeneration = latestResults.MaxGeneration;\n        Console.WriteLine($\"Latest Generation: {latestGeneration}\");\n        \n        // Find best strategy in the latest generation\n        var bestStrategy = latestResults.FindBest(\"NetProfit\", latestGeneration, true);\n        Console.WriteLine($\"Best Strategy: {bestStrategy.DisplayName}\");\n    }\n}\n```\n\n### ApexResults\n"
    }
  },
  {
    "pageContent": "cent run results\n        var latestResults = evolutionResults.Results;\n        \n        // Analyze latest generation\n        int latestGeneration = latestResults.MaxGeneration;\n        Console.WriteLine($\"Latest Generation: {latestGeneration}\");\n        \n        // Find best strategy in the latest generation\n        var bestStrategy = latestResults.FindBest(\"NetProfit\", latestGeneration, true);\n        Console.WriteLine($\"Best Strategy: {bestStrategy.DisplayName}\");\n    }\n}\n```\n\n### ApexResults\n\n\n```csharp\npublic List<StrategyEvolverResultList> ApexResults\n\n```",
    "metadata": {
      "id": "strategy-evolver-results",
      "title": "strategy-evolver-results",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-evolver-results.md",
      "chunkIndex": "code-context-2",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public class ApexStrategyAnalyzer\n{\n    public void AnalyzeApexStrategies(StrategyEvolverResults evolutionResults)\n    {\n        Console.WriteLine($\"Total Apex Runs: {evolutionResults.ApexResults.Count}\");\n        \n        foreach (var apexResultList in evolutionResults.ApexResults)\n        {\n            AnalyzeApexRun(apexResultList);\n        }\n    }\n    \n    private void AnalyzeApexRun(StrategyEvolverResultList apexResults)\n    {\n        // Detailed analysis of each Apex Strategy run\n        int generations = apexResults.MaxGeneration;\n        \n        // Find best strategies across different metrics\n        var bestNetProfit = apexResults.FindBest(\"NetProfit\", generations, true);\n        var bestProfitFactor = apexResults.FindBest(\"ProfitFactor\", generations, true);\n        \n        Console.WriteLine($\"Apex Run Generations: {generations}\");\n        Console.WriteLine($\"Best Net Profit Strategy: {bestNetProfit.DisplayName}\");\n        Console.WriteLine($\"Best Profit Factor Strategy: {bestProfitFactor.DisplayName}\");\n    }\n}\n",
    "metadata": {
      "id": "strategy-evolver-results",
      "title": "strategy-evolver-results",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-evolver-results.md",
      "chunkIndex": "code-3",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "Console.WriteLine($\"Latest Generation: {latestGeneration}\");\n        \n        // Find best strategy in the latest generation\n        var bestStrategy = latestResults.FindBest(\"NetProfit\", latestGeneration, true);\n        Console.WriteLine($\"Best Strategy: {bestStrategy.DisplayName}\");\n    }\n}\n```\n\n### ApexResults\n```csharp\npublic List<StrategyEvolverResultList> ApexResults\n```\nContains a list of `StrategyEvolverResultList` instances representing completed Apex Strategy runs.\n\n**Usage Example:**\n"
    }
  },
  {
    "pageContent": "Console.WriteLine($\"Latest Generation: {latestGeneration}\");\n        \n        // Find best strategy in the latest generation\n        var bestStrategy = latestResults.FindBest(\"NetProfit\", latestGeneration, true);\n        Console.WriteLine($\"Best Strategy: {bestStrategy.DisplayName}\");\n    }\n}\n```\n\n### ApexResults\n```csharp\npublic List<StrategyEvolverResultList> ApexResults\n```\nContains a list of `StrategyEvolverResultList` instances representing completed Apex Strategy runs.\n\n**Usage Example:**\n\n\n```csharp\npublic class ApexStrategyAnalyzer\n{\n    public void AnalyzeApexStrategies(StrategyEvolverResults evolutionResults)\n    {\n        Console.WriteLine($\"Total Apex Runs: {evolutionResults.ApexResults.Count}\");\n        \n        foreach (var apexResultList in evolutionResults.ApexResults)\n        {\n            AnalyzeApexRun(apexResultList);\n        }\n    }\n    \n    private void AnalyzeApexRun(StrategyEvolverResultList apexResults)\n    {\n        // Detailed analysis of each Apex Strategy run\n        int generations = apexResults.MaxGeneration;\n        \n        // Find best strategies across different metrics\n        var bestNetProfit = apexResults.FindBest(\"NetProfit\", generations, true);\n        var bestProfitFactor = apexResults.FindBest(\"ProfitFactor\", generations, true);\n        \n        Console.WriteLine($\"Apex Run Generations: {generations}\");\n        Console.WriteLine($\"Best Net Profit Strategy: {bestNetProfit.DisplayName}\");\n        Console.WriteLine($\"Best Profit Factor Strategy: {bestProfitFactor.DisplayName}\");\n    }\n}\n\n```",
    "metadata": {
      "id": "strategy-evolver-results",
      "title": "strategy-evolver-results",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-evolver-results.md",
      "chunkIndex": "code-context-3",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public class ComprehensiveEvolutionAnalyzer\n{\n    public void PerformDetailedAnalysis(StrategyEvolverResults evolutionResults)\n    {\n        // Analyze most recent run\n        AnalyzeRecentRun(evolutionResults.Results);\n        \n        // Analyze Apex Strategies\n        AnalyzeApexStrategies(evolutionResults.ApexResults);\n        \n        // Compare Apex Strategies\n        CompareApexRuns(evolutionResults.ApexResults);\n    }\n    \n    private void AnalyzeRecentRun(StrategyEvolverResultList recentResults)\n    {\n        Console.WriteLine(\"Recent Run Analysis:\");\n        // Implement recent run analysis logic\n    }\n    \n    private void AnalyzeApexStrategies(List<StrategyEvolverResultList> apexResults)\n    {\n        Console.WriteLine(\"Apex Strategies Analysis:\");\n        // Implement Apex strategies analysis logic\n    }\n    \n    private void CompareApexRuns(List<StrategyEvolverResultList> apexResults)\n    {\n        Console.WriteLine(\"Apex Runs Comparison:\");\n        \n        // Compare performance across Apex runs\n        var performanceComparison = apexResults\n            .Select((results, index) => new \n            {\n                RunIndex = index,\n                MaxNetProfit = results.GetMaxMetric(\"NetProfit\", results.MaxGeneration, false),\n                MaxProfitFactor = results.GetMaxMetric(\"ProfitFactor\", results.MaxGeneration, false)\n            })\n            .ToList();\n        \n        foreach (var runPerformance in performanceComparison)\n        {\n            Console.WriteLine($\"Apex Run {runPerformance.RunIndex}:\");\n            Console.WriteLine($\"  Max Net Profit: {runPerformance.MaxNetProfit}\");\n            Console.WriteLine($\"  Max Profit Factor: {runPerformance.MaxProfitFactor}\");\n        }\n    }\n}\n",
    "metadata": {
      "id": "strategy-evolver-results",
      "title": "strategy-evolver-results",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-evolver-results.md",
      "chunkIndex": "code-4",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "trategies across different metrics\n        var bestNetProfit = apexResults.FindBest(\"NetProfit\", generations, true);\n        var bestProfitFactor = apexResults.FindBest(\"ProfitFactor\", generations, true);\n        \n        Console.WriteLine($\"Apex Run Generations: {generations}\");\n        Console.WriteLine($\"Best Net Profit Strategy: {bestNetProfit.DisplayName}\");\n        Console.WriteLine($\"Best Profit Factor Strategy: {bestProfitFactor.DisplayName}\");\n    }\n}\n```\n\n## Advanced Analysis Example\n\n"
    }
  },
  {
    "pageContent": "trategies across different metrics\n        var bestNetProfit = apexResults.FindBest(\"NetProfit\", generations, true);\n        var bestProfitFactor = apexResults.FindBest(\"ProfitFactor\", generations, true);\n        \n        Console.WriteLine($\"Apex Run Generations: {generations}\");\n        Console.WriteLine($\"Best Net Profit Strategy: {bestNetProfit.DisplayName}\");\n        Console.WriteLine($\"Best Profit Factor Strategy: {bestProfitFactor.DisplayName}\");\n    }\n}\n```\n\n## Advanced Analysis Example\n\n\n\n```csharp\npublic class ComprehensiveEvolutionAnalyzer\n{\n    public void PerformDetailedAnalysis(StrategyEvolverResults evolutionResults)\n    {\n        // Analyze most recent run\n        AnalyzeRecentRun(evolutionResults.Results);\n        \n        // Analyze Apex Strategies\n        AnalyzeApexStrategies(evolutionResults.ApexResults);\n        \n        // Compare Apex Strategies\n        CompareApexRuns(evolutionResults.ApexResults);\n    }\n    \n    private void AnalyzeRecentRun(StrategyEvolverResultList recentResults)\n    {\n        Console.WriteLine(\"Recent Run Analysis:\");\n        // Implement recent run analysis logic\n    }\n    \n    private void AnalyzeApexStrategies(List<StrategyEvolverResultList> apexResults)\n    {\n        Console.WriteLine(\"Apex Strategies Analysis:\");\n        // Implement Apex strategies analysis logic\n    }\n    \n    private void CompareApexRuns(List<StrategyEvolverResultList> apexResults)\n    {\n        Console.WriteLine(\"Apex Runs Comparison:\");\n        \n        // Compare performance across Apex runs\n        var performanceComparison = apexResults\n            .Select((results, index) => new \n            {\n                RunIndex = index,\n                MaxNetProfit = results.GetMaxMetric(\"NetProfit\", results.MaxGeneration, false),\n                MaxProfitFactor = results.GetMaxMetric(\"ProfitFactor\", results.MaxGeneration, false)\n            })\n            .ToList();\n        \n        foreach (var runPerformance in performanceComparison)\n        {\n            Console.WriteLine($\"Apex Run {runPerformance.RunIndex}:\");\n            Console.WriteLine($\"  Max Net Profit: {runPerformance.MaxNetProfit}\");\n            Console.WriteLine($\"  Max Profit Factor: {runPerformance.MaxProfitFactor}\");\n        }\n    }\n}\n\n```",
    "metadata": {
      "id": "strategy-evolver-results",
      "title": "strategy-evolver-results",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-evolver-results.md",
      "chunkIndex": "code-context-4",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "# StrategyOptimizer Class\n\n**Namespace:** WealthLab.Backtest  \n**Parent:** OptimizationRunnerBase\n\nThe `StrategyOptimizer` class is responsible for executing optimization runs for trading strategies, providing a comprehensive framework for parameter exploration and performance evaluation.\n\n## Overview\n\n`StrategyOptimizer` serves as a critical component in the strategy development process, enabling:\n- Systematic parameter optimization\n- Performance metric collection\n- Backtest execution across parameter variations\n\n## Base Class Properties\n\n### BacktestSettings\n",
    "metadata": {
      "id": "strategy-optimizer",
      "title": "strategy-optimizer",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-optimizer.md",
      "chunkIndex": 0,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the backtest settings used for the optimization run.\n\n### CompiledStrategy\n",
    "metadata": {
      "id": "strategy-optimizer",
      "title": "strategy-optimizer",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-optimizer.md",
      "chunkIndex": 1,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the compiled `StrategyBase`-derived class being optimized.\n\n### OptimizationMethod\n",
    "metadata": {
      "id": "strategy-optimizer",
      "title": "strategy-optimizer",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-optimizer.md",
      "chunkIndex": 2,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the `OptimizerBase`-derived optimizer selected for the optimization.\n\n### OptimizerHost\n",
    "metadata": {
      "id": "strategy-optimizer",
      "title": "strategy-optimizer",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-optimizer.md",
      "chunkIndex": 3,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nProvides communication interface between the optimizer and its host.\n\n### PositionSize\n",
    "metadata": {
      "id": "strategy-optimizer",
      "title": "strategy-optimizer",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-optimizer.md",
      "chunkIndex": 4,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the position sizing configuration used during optimization.\n\n### ScoreCard\n",
    "metadata": {
      "id": "strategy-optimizer",
      "title": "strategy-optimizer",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-optimizer.md",
      "chunkIndex": 5,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the `ScoreCardBase` instance used for performance evaluation.\n\n### SymbolData\n",
    "metadata": {
      "id": "strategy-optimizer",
      "title": "strategy-optimizer",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-optimizer.md",
      "chunkIndex": 6,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nContains the historical data used for optimization across multiple symbols.\n\n## Methods\n\n### ExecuteOptimizationRun\n",
    "metadata": {
      "id": "strategy-optimizer",
      "title": "strategy-optimizer",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-optimizer.md",
      "chunkIndex": 7,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nExecutes a single optimization run with specified parameter values.\n\n**Parameters:**\n- `pl`: Parameter list defining optimization parameters\n- `bmBacktester`: Optional benchmark backtester\n- `addToResults`: Whether to add result to optimization results list\n\n**Returns:** An `OptimizationResult` containing performance metrics\n\n### FindMetric\n",
    "metadata": {
      "id": "strategy-optimizer",
      "title": "strategy-optimizer",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-optimizer.md",
      "chunkIndex": 8,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nSearches optimization results for a specific metric value matching given parameter values.\n\n**Parameters:**\n- `metric`: Performance metric name\n- `paramValues`: Parameter values to match\n\n**Returns:** Metric value or `Double.NaN` if not found\n\n### GetUniqueValues\n",
    "metadata": {
      "id": "strategy-optimizer",
      "title": "strategy-optimizer",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-optimizer.md",
      "chunkIndex": 9,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nRetrieves unique parameter values for a specific parameter index.\n\n**Parameters:**\n- `idx`: Parameter index in strategy's parameter list\n\n**Returns:** List of unique parameter values used in optimization\n\n## Properties\n\n### Results\n",
    "metadata": {
      "id": "strategy-optimizer",
      "title": "strategy-optimizer",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-optimizer.md",
      "chunkIndex": 10,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nContains all recorded optimization run results.\n\n## Usage Examples\n\n### Basic Optimization\n",
    "metadata": {
      "id": "strategy-optimizer",
      "title": "strategy-optimizer",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-optimizer.md",
      "chunkIndex": 11,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n### Advanced Optimization Analysis\n",
    "metadata": {
      "id": "strategy-optimizer",
      "title": "strategy-optimizer",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-optimizer.md",
      "chunkIndex": 12,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n### Progress Reporting\n",
    "metadata": {
      "id": "strategy-optimizer",
      "title": "strategy-optimizer",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-optimizer.md",
      "chunkIndex": 13,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n## Best Practices\n\n1. **Parameter Selection**\n   - Choose meaningful parameters to optimize\n   - Consider parameter interactions\n   - Use reasonable parameter ranges\n\n2. **Performance Metrics**\n   - Use multiple performance metrics\n   - Balance return and risk metrics\n   - Avoid overfitting\n\n3. **Optimization Techniques**\n   - Use appropriate optimization methods\n   - Consider computational complexity\n   - Implement early stopping if needed\n\n## Performance Considerations\n\n- Optimization runs can be computationally intensive\n- Use parallel processing for large parameter spaces\n- Implement caching mechanisms\n- Monitor memory usage\n\n## Caution\n\n🔬 Optimization results are not guaranteed to predict future performance. \nAlways validate strategies through:\n- Out-of-sample testing\n- Walk-forward analysis\n- Real-world paper trading 🔬\n\n## Requirements\n\n- Deep understanding of trading strategy development\n- Proficiency in performance metric analysis\n- Knowledge of optimization techniques\n\n## Notes\n\n- Provides systematic approach to strategy parameter tuning\n- Supports complex optimization scenarios\n- Enables data-driven strategy refinement ",
    "metadata": {
      "id": "strategy-optimizer",
      "title": "strategy-optimizer",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-optimizer.md",
      "chunkIndex": 14,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "public BacktestSettings BacktestSettings\n",
    "metadata": {
      "id": "strategy-optimizer",
      "title": "strategy-optimizer",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-optimizer.md",
      "chunkIndex": "code-0",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "rent:** OptimizationRunnerBase\n\nThe `StrategyOptimizer` class is responsible for executing optimization runs for trading strategies, providing a comprehensive framework for parameter exploration and performance evaluation.\n\n## Overview\n\n`StrategyOptimizer` serves as a critical component in the strategy development process, enabling:\n- Systematic parameter optimization\n- Performance metric collection\n- Backtest execution across parameter variations\n\n## Base Class Properties\n\n### BacktestSettings\n"
    }
  },
  {
    "pageContent": "rent:** OptimizationRunnerBase\n\nThe `StrategyOptimizer` class is responsible for executing optimization runs for trading strategies, providing a comprehensive framework for parameter exploration and performance evaluation.\n\n## Overview\n\n`StrategyOptimizer` serves as a critical component in the strategy development process, enabling:\n- Systematic parameter optimization\n- Performance metric collection\n- Backtest execution across parameter variations\n\n## Base Class Properties\n\n### BacktestSettings\n\n\n```csharp\npublic BacktestSettings BacktestSettings\n\n```",
    "metadata": {
      "id": "strategy-optimizer",
      "title": "strategy-optimizer",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-optimizer.md",
      "chunkIndex": "code-context-0",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public StrategyBase CompiledStrategy\n",
    "metadata": {
      "id": "strategy-optimizer",
      "title": "strategy-optimizer",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-optimizer.md",
      "chunkIndex": "code-1",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ding a comprehensive framework for parameter exploration and performance evaluation.\n\n## Overview\n\n`StrategyOptimizer` serves as a critical component in the strategy development process, enabling:\n- Systematic parameter optimization\n- Performance metric collection\n- Backtest execution across parameter variations\n\n## Base Class Properties\n\n### BacktestSettings\n```csharp\npublic BacktestSettings BacktestSettings\n```\nReturns the backtest settings used for the optimization run.\n\n### CompiledStrategy\n"
    }
  },
  {
    "pageContent": "ding a comprehensive framework for parameter exploration and performance evaluation.\n\n## Overview\n\n`StrategyOptimizer` serves as a critical component in the strategy development process, enabling:\n- Systematic parameter optimization\n- Performance metric collection\n- Backtest execution across parameter variations\n\n## Base Class Properties\n\n### BacktestSettings\n```csharp\npublic BacktestSettings BacktestSettings\n```\nReturns the backtest settings used for the optimization run.\n\n### CompiledStrategy\n\n\n```csharp\npublic StrategyBase CompiledStrategy\n\n```",
    "metadata": {
      "id": "strategy-optimizer",
      "title": "strategy-optimizer",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-optimizer.md",
      "chunkIndex": "code-context-1",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public OptimizerBase OptimizationMethod\n",
    "metadata": {
      "id": "strategy-optimizer",
      "title": "strategy-optimizer",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-optimizer.md",
      "chunkIndex": "code-2",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "mponent in the strategy development process, enabling:\n- Systematic parameter optimization\n- Performance metric collection\n- Backtest execution across parameter variations\n\n## Base Class Properties\n\n### BacktestSettings\n```csharp\npublic BacktestSettings BacktestSettings\n```\nReturns the backtest settings used for the optimization run.\n\n### CompiledStrategy\n```csharp\npublic StrategyBase CompiledStrategy\n```\nReturns the compiled `StrategyBase`-derived class being optimized.\n\n### OptimizationMethod\n"
    }
  },
  {
    "pageContent": "mponent in the strategy development process, enabling:\n- Systematic parameter optimization\n- Performance metric collection\n- Backtest execution across parameter variations\n\n## Base Class Properties\n\n### BacktestSettings\n```csharp\npublic BacktestSettings BacktestSettings\n```\nReturns the backtest settings used for the optimization run.\n\n### CompiledStrategy\n```csharp\npublic StrategyBase CompiledStrategy\n```\nReturns the compiled `StrategyBase`-derived class being optimized.\n\n### OptimizationMethod\n\n\n```csharp\npublic OptimizerBase OptimizationMethod\n\n```",
    "metadata": {
      "id": "strategy-optimizer",
      "title": "strategy-optimizer",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-optimizer.md",
      "chunkIndex": "code-context-2",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public IOptimizerHost OptimizerHost\n",
    "metadata": {
      "id": "strategy-optimizer",
      "title": "strategy-optimizer",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-optimizer.md",
      "chunkIndex": "code-3",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": " parameter variations\n\n## Base Class Properties\n\n### BacktestSettings\n```csharp\npublic BacktestSettings BacktestSettings\n```\nReturns the backtest settings used for the optimization run.\n\n### CompiledStrategy\n```csharp\npublic StrategyBase CompiledStrategy\n```\nReturns the compiled `StrategyBase`-derived class being optimized.\n\n### OptimizationMethod\n```csharp\npublic OptimizerBase OptimizationMethod\n```\nReturns the `OptimizerBase`-derived optimizer selected for the optimization.\n\n### OptimizerHost\n"
    }
  },
  {
    "pageContent": " parameter variations\n\n## Base Class Properties\n\n### BacktestSettings\n```csharp\npublic BacktestSettings BacktestSettings\n```\nReturns the backtest settings used for the optimization run.\n\n### CompiledStrategy\n```csharp\npublic StrategyBase CompiledStrategy\n```\nReturns the compiled `StrategyBase`-derived class being optimized.\n\n### OptimizationMethod\n```csharp\npublic OptimizerBase OptimizationMethod\n```\nReturns the `OptimizerBase`-derived optimizer selected for the optimization.\n\n### OptimizerHost\n\n\n```csharp\npublic IOptimizerHost OptimizerHost\n\n```",
    "metadata": {
      "id": "strategy-optimizer",
      "title": "strategy-optimizer",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-optimizer.md",
      "chunkIndex": "code-context-3",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public PositionSize PositionSize\n",
    "metadata": {
      "id": "strategy-optimizer",
      "title": "strategy-optimizer",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-optimizer.md",
      "chunkIndex": "code-4",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "backtest settings used for the optimization run.\n\n### CompiledStrategy\n```csharp\npublic StrategyBase CompiledStrategy\n```\nReturns the compiled `StrategyBase`-derived class being optimized.\n\n### OptimizationMethod\n```csharp\npublic OptimizerBase OptimizationMethod\n```\nReturns the `OptimizerBase`-derived optimizer selected for the optimization.\n\n### OptimizerHost\n```csharp\npublic IOptimizerHost OptimizerHost\n```\nProvides communication interface between the optimizer and its host.\n\n### PositionSize\n"
    }
  },
  {
    "pageContent": "backtest settings used for the optimization run.\n\n### CompiledStrategy\n```csharp\npublic StrategyBase CompiledStrategy\n```\nReturns the compiled `StrategyBase`-derived class being optimized.\n\n### OptimizationMethod\n```csharp\npublic OptimizerBase OptimizationMethod\n```\nReturns the `OptimizerBase`-derived optimizer selected for the optimization.\n\n### OptimizerHost\n```csharp\npublic IOptimizerHost OptimizerHost\n```\nProvides communication interface between the optimizer and its host.\n\n### PositionSize\n\n\n```csharp\npublic PositionSize PositionSize\n\n```",
    "metadata": {
      "id": "strategy-optimizer",
      "title": "strategy-optimizer",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-optimizer.md",
      "chunkIndex": "code-context-4",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public ScoreCardBase ScoreCard\n",
    "metadata": {
      "id": "strategy-optimizer",
      "title": "strategy-optimizer",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-optimizer.md",
      "chunkIndex": "code-5",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "the compiled `StrategyBase`-derived class being optimized.\n\n### OptimizationMethod\n```csharp\npublic OptimizerBase OptimizationMethod\n```\nReturns the `OptimizerBase`-derived optimizer selected for the optimization.\n\n### OptimizerHost\n```csharp\npublic IOptimizerHost OptimizerHost\n```\nProvides communication interface between the optimizer and its host.\n\n### PositionSize\n```csharp\npublic PositionSize PositionSize\n```\nReturns the position sizing configuration used during optimization.\n\n### ScoreCard\n"
    }
  },
  {
    "pageContent": "the compiled `StrategyBase`-derived class being optimized.\n\n### OptimizationMethod\n```csharp\npublic OptimizerBase OptimizationMethod\n```\nReturns the `OptimizerBase`-derived optimizer selected for the optimization.\n\n### OptimizerHost\n```csharp\npublic IOptimizerHost OptimizerHost\n```\nProvides communication interface between the optimizer and its host.\n\n### PositionSize\n```csharp\npublic PositionSize PositionSize\n```\nReturns the position sizing configuration used during optimization.\n\n### ScoreCard\n\n\n```csharp\npublic ScoreCardBase ScoreCard\n\n```",
    "metadata": {
      "id": "strategy-optimizer",
      "title": "strategy-optimizer",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-optimizer.md",
      "chunkIndex": "code-context-5",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public List<BarHistory> SymbolData\n",
    "metadata": {
      "id": "strategy-optimizer",
      "title": "strategy-optimizer",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-optimizer.md",
      "chunkIndex": "code-6",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "d\n```\nReturns the `OptimizerBase`-derived optimizer selected for the optimization.\n\n### OptimizerHost\n```csharp\npublic IOptimizerHost OptimizerHost\n```\nProvides communication interface between the optimizer and its host.\n\n### PositionSize\n```csharp\npublic PositionSize PositionSize\n```\nReturns the position sizing configuration used during optimization.\n\n### ScoreCard\n```csharp\npublic ScoreCardBase ScoreCard\n```\nReturns the `ScoreCardBase` instance used for performance evaluation.\n\n### SymbolData\n"
    }
  },
  {
    "pageContent": "d\n```\nReturns the `OptimizerBase`-derived optimizer selected for the optimization.\n\n### OptimizerHost\n```csharp\npublic IOptimizerHost OptimizerHost\n```\nProvides communication interface between the optimizer and its host.\n\n### PositionSize\n```csharp\npublic PositionSize PositionSize\n```\nReturns the position sizing configuration used during optimization.\n\n### ScoreCard\n```csharp\npublic ScoreCardBase ScoreCard\n```\nReturns the `ScoreCardBase` instance used for performance evaluation.\n\n### SymbolData\n\n\n```csharp\npublic List<BarHistory> SymbolData\n\n```",
    "metadata": {
      "id": "strategy-optimizer",
      "title": "strategy-optimizer",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-optimizer.md",
      "chunkIndex": "code-context-6",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public OptimizationResult ExecuteOptimizationRun(\n    ParameterList pl, \n    Backtester bmBacktester = null, \n    bool addToResults = true\n)\n",
    "metadata": {
      "id": "strategy-optimizer",
      "title": "strategy-optimizer",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-optimizer.md",
      "chunkIndex": "code-7",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "unication interface between the optimizer and its host.\n\n### PositionSize\n```csharp\npublic PositionSize PositionSize\n```\nReturns the position sizing configuration used during optimization.\n\n### ScoreCard\n```csharp\npublic ScoreCardBase ScoreCard\n```\nReturns the `ScoreCardBase` instance used for performance evaluation.\n\n### SymbolData\n```csharp\npublic List<BarHistory> SymbolData\n```\nContains the historical data used for optimization across multiple symbols.\n\n## Methods\n\n### ExecuteOptimizationRun\n"
    }
  },
  {
    "pageContent": "unication interface between the optimizer and its host.\n\n### PositionSize\n```csharp\npublic PositionSize PositionSize\n```\nReturns the position sizing configuration used during optimization.\n\n### ScoreCard\n```csharp\npublic ScoreCardBase ScoreCard\n```\nReturns the `ScoreCardBase` instance used for performance evaluation.\n\n### SymbolData\n```csharp\npublic List<BarHistory> SymbolData\n```\nContains the historical data used for optimization across multiple symbols.\n\n## Methods\n\n### ExecuteOptimizationRun\n\n\n```csharp\npublic OptimizationResult ExecuteOptimizationRun(\n    ParameterList pl, \n    Backtester bmBacktester = null, \n    bool addToResults = true\n)\n\n```",
    "metadata": {
      "id": "strategy-optimizer",
      "title": "strategy-optimizer",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-optimizer.md",
      "chunkIndex": "code-context-7",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public double FindMetric(string metric, List<double> paramValues)\n",
    "metadata": {
      "id": "strategy-optimizer",
      "title": "strategy-optimizer",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-optimizer.md",
      "chunkIndex": "code-8",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "n\n```csharp\npublic OptimizationResult ExecuteOptimizationRun(\n    ParameterList pl, \n    Backtester bmBacktester = null, \n    bool addToResults = true\n)\n```\nExecutes a single optimization run with specified parameter values.\n\n**Parameters:**\n- `pl`: Parameter list defining optimization parameters\n- `bmBacktester`: Optional benchmark backtester\n- `addToResults`: Whether to add result to optimization results list\n\n**Returns:** An `OptimizationResult` containing performance metrics\n\n### FindMetric\n"
    }
  },
  {
    "pageContent": "n\n```csharp\npublic OptimizationResult ExecuteOptimizationRun(\n    ParameterList pl, \n    Backtester bmBacktester = null, \n    bool addToResults = true\n)\n```\nExecutes a single optimization run with specified parameter values.\n\n**Parameters:**\n- `pl`: Parameter list defining optimization parameters\n- `bmBacktester`: Optional benchmark backtester\n- `addToResults`: Whether to add result to optimization results list\n\n**Returns:** An `OptimizationResult` containing performance metrics\n\n### FindMetric\n\n\n```csharp\npublic double FindMetric(string metric, List<double> paramValues)\n\n```",
    "metadata": {
      "id": "strategy-optimizer",
      "title": "strategy-optimizer",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-optimizer.md",
      "chunkIndex": "code-context-8",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public List<double> GetUniqueValues(int idx)\n",
    "metadata": {
      "id": "strategy-optimizer",
      "title": "strategy-optimizer",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-optimizer.md",
      "chunkIndex": "code-9",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "r\n- `addToResults`: Whether to add result to optimization results list\n\n**Returns:** An `OptimizationResult` containing performance metrics\n\n### FindMetric\n```csharp\npublic double FindMetric(string metric, List<double> paramValues)\n```\nSearches optimization results for a specific metric value matching given parameter values.\n\n**Parameters:**\n- `metric`: Performance metric name\n- `paramValues`: Parameter values to match\n\n**Returns:** Metric value or `Double.NaN` if not found\n\n### GetUniqueValues\n"
    }
  },
  {
    "pageContent": "r\n- `addToResults`: Whether to add result to optimization results list\n\n**Returns:** An `OptimizationResult` containing performance metrics\n\n### FindMetric\n```csharp\npublic double FindMetric(string metric, List<double> paramValues)\n```\nSearches optimization results for a specific metric value matching given parameter values.\n\n**Parameters:**\n- `metric`: Performance metric name\n- `paramValues`: Parameter values to match\n\n**Returns:** Metric value or `Double.NaN` if not found\n\n### GetUniqueValues\n\n\n```csharp\npublic List<double> GetUniqueValues(int idx)\n\n```",
    "metadata": {
      "id": "strategy-optimizer",
      "title": "strategy-optimizer",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-optimizer.md",
      "chunkIndex": "code-context-9",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public OptimizationResultList Results\n",
    "metadata": {
      "id": "strategy-optimizer",
      "title": "strategy-optimizer",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-optimizer.md",
      "chunkIndex": "code-10",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ue matching given parameter values.\n\n**Parameters:**\n- `metric`: Performance metric name\n- `paramValues`: Parameter values to match\n\n**Returns:** Metric value or `Double.NaN` if not found\n\n### GetUniqueValues\n```csharp\npublic List<double> GetUniqueValues(int idx)\n```\nRetrieves unique parameter values for a specific parameter index.\n\n**Parameters:**\n- `idx`: Parameter index in strategy's parameter list\n\n**Returns:** List of unique parameter values used in optimization\n\n## Properties\n\n### Results\n"
    }
  },
  {
    "pageContent": "ue matching given parameter values.\n\n**Parameters:**\n- `metric`: Performance metric name\n- `paramValues`: Parameter values to match\n\n**Returns:** Metric value or `Double.NaN` if not found\n\n### GetUniqueValues\n```csharp\npublic List<double> GetUniqueValues(int idx)\n```\nRetrieves unique parameter values for a specific parameter index.\n\n**Parameters:**\n- `idx`: Parameter index in strategy's parameter list\n\n**Returns:** List of unique parameter values used in optimization\n\n## Properties\n\n### Results\n\n\n```csharp\npublic OptimizationResultList Results\n\n```",
    "metadata": {
      "id": "strategy-optimizer",
      "title": "strategy-optimizer",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-optimizer.md",
      "chunkIndex": "code-context-10",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public class StrategyOptimizer\n{\n    public void PerformParameterOptimization(Strategy strategy)\n    {\n        // Create strategy optimizer\n        var optimizer = new StrategyOptimizer\n        {\n            CompiledStrategy = strategy,\n            BacktestSettings = new BacktestSettings(),\n            ScoreCard = new NetProfitScoreCard()\n        };\n\n        // Optimize RSI period parameter\n        var rsiPeriodParam = strategy.Parameters.FindName(\"RSI Period\");\n        \n        // Execute optimization runs\n        for (int period = 5; period <= 30; period += 5)\n        {\n            rsiPeriodParam.Value = period;\n            \n            var result = optimizer.ExecuteOptimizationRun(strategy.Parameters);\n            \n            Console.WriteLine($\"RSI Period: {period}\");\n            Console.WriteLine($\"Net Profit: {result.PerformanceMetrics[\"NetProfit\"]}\");\n        }\n    }\n}\n",
    "metadata": {
      "id": "strategy-optimizer",
      "title": "strategy-optimizer",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-optimizer.md",
      "chunkIndex": "code-11",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "** Metric value or `Double.NaN` if not found\n\n### GetUniqueValues\n```csharp\npublic List<double> GetUniqueValues(int idx)\n```\nRetrieves unique parameter values for a specific parameter index.\n\n**Parameters:**\n- `idx`: Parameter index in strategy's parameter list\n\n**Returns:** List of unique parameter values used in optimization\n\n## Properties\n\n### Results\n```csharp\npublic OptimizationResultList Results\n```\nContains all recorded optimization run results.\n\n## Usage Examples\n\n### Basic Optimization\n"
    }
  },
  {
    "pageContent": "** Metric value or `Double.NaN` if not found\n\n### GetUniqueValues\n```csharp\npublic List<double> GetUniqueValues(int idx)\n```\nRetrieves unique parameter values for a specific parameter index.\n\n**Parameters:**\n- `idx`: Parameter index in strategy's parameter list\n\n**Returns:** List of unique parameter values used in optimization\n\n## Properties\n\n### Results\n```csharp\npublic OptimizationResultList Results\n```\nContains all recorded optimization run results.\n\n## Usage Examples\n\n### Basic Optimization\n\n\n```csharp\npublic class StrategyOptimizer\n{\n    public void PerformParameterOptimization(Strategy strategy)\n    {\n        // Create strategy optimizer\n        var optimizer = new StrategyOptimizer\n        {\n            CompiledStrategy = strategy,\n            BacktestSettings = new BacktestSettings(),\n            ScoreCard = new NetProfitScoreCard()\n        };\n\n        // Optimize RSI period parameter\n        var rsiPeriodParam = strategy.Parameters.FindName(\"RSI Period\");\n        \n        // Execute optimization runs\n        for (int period = 5; period <= 30; period += 5)\n        {\n            rsiPeriodParam.Value = period;\n            \n            var result = optimizer.ExecuteOptimizationRun(strategy.Parameters);\n            \n            Console.WriteLine($\"RSI Period: {period}\");\n            Console.WriteLine($\"Net Profit: {result.PerformanceMetrics[\"NetProfit\"]}\");\n        }\n    }\n}\n\n```",
    "metadata": {
      "id": "strategy-optimizer",
      "title": "strategy-optimizer",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-optimizer.md",
      "chunkIndex": "code-context-11",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public class OptimizationAnalyzer\n{\n    public void AnalyzeOptimizationResults(StrategyOptimizer optimizer)\n    {\n        // Sort results by net profit\n        var sortedResults = optimizer.Results\n            .OrderByDescending(r => r.PerformanceMetrics[\"NetProfit\"])\n            .ToList();\n\n        Console.WriteLine(\"Top Performing Parameter Combinations:\");\n        foreach (var result in sortedResults.Take(5))\n        {\n            Console.WriteLine(\"\\nParameter Values:\");\n            for (int i = 0; i < result.ParameterValues.Count; i++)\n            {\n                Console.WriteLine($\"  P{i}: {result.ParameterValues[i]}\");\n            }\n\n            Console.WriteLine(\"Performance Metrics:\");\n            foreach (var metric in result.PerformanceMetrics)\n            {\n                Console.WriteLine($\"  {metric.Key}: {metric.Value}\");\n            }\n        }\n    }\n}\n",
    "metadata": {
      "id": "strategy-optimizer",
      "title": "strategy-optimizer",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-optimizer.md",
      "chunkIndex": "code-12",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "y.Parameters.FindName(\"RSI Period\");\n        \n        // Execute optimization runs\n        for (int period = 5; period <= 30; period += 5)\n        {\n            rsiPeriodParam.Value = period;\n            \n            var result = optimizer.ExecuteOptimizationRun(strategy.Parameters);\n            \n            Console.WriteLine($\"RSI Period: {period}\");\n            Console.WriteLine($\"Net Profit: {result.PerformanceMetrics[\"NetProfit\"]}\");\n        }\n    }\n}\n```\n\n### Advanced Optimization Analysis\n"
    }
  },
  {
    "pageContent": "y.Parameters.FindName(\"RSI Period\");\n        \n        // Execute optimization runs\n        for (int period = 5; period <= 30; period += 5)\n        {\n            rsiPeriodParam.Value = period;\n            \n            var result = optimizer.ExecuteOptimizationRun(strategy.Parameters);\n            \n            Console.WriteLine($\"RSI Period: {period}\");\n            Console.WriteLine($\"Net Profit: {result.PerformanceMetrics[\"NetProfit\"]}\");\n        }\n    }\n}\n```\n\n### Advanced Optimization Analysis\n\n\n```csharp\npublic class OptimizationAnalyzer\n{\n    public void AnalyzeOptimizationResults(StrategyOptimizer optimizer)\n    {\n        // Sort results by net profit\n        var sortedResults = optimizer.Results\n            .OrderByDescending(r => r.PerformanceMetrics[\"NetProfit\"])\n            .ToList();\n\n        Console.WriteLine(\"Top Performing Parameter Combinations:\");\n        foreach (var result in sortedResults.Take(5))\n        {\n            Console.WriteLine(\"\\nParameter Values:\");\n            for (int i = 0; i < result.ParameterValues.Count; i++)\n            {\n                Console.WriteLine($\"  P{i}: {result.ParameterValues[i]}\");\n            }\n\n            Console.WriteLine(\"Performance Metrics:\");\n            foreach (var metric in result.PerformanceMetrics)\n            {\n                Console.WriteLine($\"  {metric.Key}: {metric.Value}\");\n            }\n        }\n    }\n}\n\n```",
    "metadata": {
      "id": "strategy-optimizer",
      "title": "strategy-optimizer",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-optimizer.md",
      "chunkIndex": "code-context-12",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public class CustomOptimizer : OptimizerBase\n{\n    public override void Optimize(StrategyOptimizer optimizer)\n    {\n        // Implement custom optimization logic\n        for (double progress = 0; progress <= 100; progress += 10)\n        {\n            // Execute optimization runs\n            ExecuteOptimizationRuns(optimizer);\n            \n            // Report progress\n            optimizer.ReportEstimatedCompletion(progress);\n        }\n    }\n}\n",
    "metadata": {
      "id": "strategy-optimizer",
      "title": "strategy-optimizer",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-optimizer.md",
      "chunkIndex": "code-13",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "5))\n        {\n            Console.WriteLine(\"\\nParameter Values:\");\n            for (int i = 0; i < result.ParameterValues.Count; i++)\n            {\n                Console.WriteLine($\"  P{i}: {result.ParameterValues[i]}\");\n            }\n\n            Console.WriteLine(\"Performance Metrics:\");\n            foreach (var metric in result.PerformanceMetrics)\n            {\n                Console.WriteLine($\"  {metric.Key}: {metric.Value}\");\n            }\n        }\n    }\n}\n```\n\n### Progress Reporting\n"
    }
  },
  {
    "pageContent": "5))\n        {\n            Console.WriteLine(\"\\nParameter Values:\");\n            for (int i = 0; i < result.ParameterValues.Count; i++)\n            {\n                Console.WriteLine($\"  P{i}: {result.ParameterValues[i]}\");\n            }\n\n            Console.WriteLine(\"Performance Metrics:\");\n            foreach (var metric in result.PerformanceMetrics)\n            {\n                Console.WriteLine($\"  {metric.Key}: {metric.Value}\");\n            }\n        }\n    }\n}\n```\n\n### Progress Reporting\n\n\n```csharp\npublic class CustomOptimizer : OptimizerBase\n{\n    public override void Optimize(StrategyOptimizer optimizer)\n    {\n        // Implement custom optimization logic\n        for (double progress = 0; progress <= 100; progress += 10)\n        {\n            // Execute optimization runs\n            ExecuteOptimizationRuns(optimizer);\n            \n            // Report progress\n            optimizer.ReportEstimatedCompletion(progress);\n        }\n    }\n}\n\n```",
    "metadata": {
      "id": "strategy-optimizer",
      "title": "strategy-optimizer",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-optimizer.md",
      "chunkIndex": "code-context-13",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "# StrategyRunner Class\n\n**Namespace:** WealthLab.Backtest  \n**Parent:** Object\n\nThe `StrategyRunner` class provides a simplified and flexible approach to running strategy backtests, optimizations, and performance analysis in WealthLab 8.\n\n## Overview\n\n`StrategyRunner` serves as a powerful utility for:\n- Running strategy backtests\n- Performing parameter optimizations\n- Collecting and analyzing performance metrics\n- Supporting both manual and automated strategy evaluation\n\n## Properties\n\n### BacktestSettings\n",
    "metadata": {
      "id": "strategy-runner",
      "title": "strategy-runner",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-runner.md",
      "chunkIndex": 0,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nConfigures the settings used during the backtest, including commission, slippage, and other simulation parameters.\n\n### BenchmarkData\n",
    "metadata": {
      "id": "strategy-runner",
      "title": "strategy-runner",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-runner.md",
      "chunkIndex": 1,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nSpecifies the historical data for benchmark comparison. Used for calculating performance metrics like Alpha and Beta.\n\n### BenchmarkSymbol\n",
    "metadata": {
      "id": "strategy-runner",
      "title": "strategy-runner",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-runner.md",
      "chunkIndex": 2,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nDefines the symbol to use for benchmark backtesting if `BenchmarkData` is not provided.\n\n### Data\n",
    "metadata": {
      "id": "strategy-runner",
      "title": "strategy-runner",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-runner.md",
      "chunkIndex": 3,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nContains the historical data sources for backtesting when no DataSet or Symbols are specified.\n\n### DataRange\n",
    "metadata": {
      "id": "strategy-runner",
      "title": "strategy-runner",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-runner.md",
      "chunkIndex": 4,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nDetermines the date range for the backtest. Default is the most recent 10 years.\n\n### DataSet\n",
    "metadata": {
      "id": "strategy-runner",
      "title": "strategy-runner",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-runner.md",
      "chunkIndex": 5,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nSpecifies the DataSet to use as the data source for backtesting.\n\n### PositionSize\n",
    "metadata": {
      "id": "strategy-runner",
      "title": "strategy-runner",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-runner.md",
      "chunkIndex": 6,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nConfigures the position sizing method for the backtest. Default is 10% of equity.\n\n### Scale\n",
    "metadata": {
      "id": "strategy-runner",
      "title": "strategy-runner",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-runner.md",
      "chunkIndex": 7,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nSets the data frequency for the backtest. Default is Daily.\n\n### Symbols\n",
    "metadata": {
      "id": "strategy-runner",
      "title": "strategy-runner",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-runner.md",
      "chunkIndex": 8,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nList of symbols to use for backtesting when no DataSet is specified.\n\n## Methods\n\n### RunBacktest\n",
    "metadata": {
      "id": "strategy-runner",
      "title": "strategy-runner",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-runner.md",
      "chunkIndex": 9,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nExecutes a backtest for a specified strategy.\n\n**Overloads:**\n- By strategy name\n- By `StrategyBase` instance\n\n**Data Source Priority:**\n1. DataSet symbols\n2. Symbols list\n3. Manually provided Data\n\n**Returns:** A `Backtester` instance with performance metrics\n\n### PerformOptimization\n",
    "metadata": {
      "id": "strategy-runner",
      "title": "strategy-runner",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-runner.md",
      "chunkIndex": 10,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nPerforms strategy parameter optimization.\n\n**Parameters:**\n- `optMethod`: Optimization method name\n- `stratName` or `s`: Strategy to optimize\n- `runComplete`: Optional callback method for run completion tracking\n\n**Returns:** `OptimizationResultList` containing optimization results\n\n## Usage Examples\n\n### Basic Backtest\n",
    "metadata": {
      "id": "strategy-runner",
      "title": "strategy-runner",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-runner.md",
      "chunkIndex": 11,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n### Optimization Example\n",
    "metadata": {
      "id": "strategy-runner",
      "title": "strategy-runner",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-runner.md",
      "chunkIndex": 12,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n### Multi-Symbol Backtest\n",
    "metadata": {
      "id": "strategy-runner",
      "title": "strategy-runner",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-runner.md",
      "chunkIndex": 13,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n## Best Practices\n\n1. **Data Source Management**\n   - Prefer using DataSets for organized data\n   - Manually manage symbols and data when needed\n   - Ensure data quality and consistency\n\n2. **Backtest Configuration**\n   - Set realistic commission and slippage\n   - Use appropriate position sizing\n   - Consider transaction costs\n\n3. **Optimization Strategies**\n   - Use multiple performance metrics\n   - Avoid overfitting\n   - Validate results with out-of-sample testing\n\n## Performance Considerations\n\n- Large datasets can consume significant memory\n- Optimize data loading and processing\n- Consider parallel processing for complex optimizations\n- Monitor system resources during long-running tests\n\n## Caution\n\n🔍 Backtesting and optimization results do not guarantee future performance:\n- Market conditions change\n- Past performance is not predictive\n- Always validate strategies through comprehensive testing 🔍\n\n## Requirements\n\n- Deep understanding of trading strategy development\n- Proficiency in performance metric analysis\n- Knowledge of historical market data management\n\n## Notes\n\n- Provides a flexible framework for strategy evaluation\n- Supports complex backtesting scenarios\n- Enables data-driven strategy refinement ",
    "metadata": {
      "id": "strategy-runner",
      "title": "strategy-runner",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-runner.md",
      "chunkIndex": 14,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "public BacktestSettings BacktestSettings\n",
    "metadata": {
      "id": "strategy-runner",
      "title": "strategy-runner",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-runner.md",
      "chunkIndex": "code-0",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "nner Class\n\n**Namespace:** WealthLab.Backtest  \n**Parent:** Object\n\nThe `StrategyRunner` class provides a simplified and flexible approach to running strategy backtests, optimizations, and performance analysis in WealthLab 8.\n\n## Overview\n\n`StrategyRunner` serves as a powerful utility for:\n- Running strategy backtests\n- Performing parameter optimizations\n- Collecting and analyzing performance metrics\n- Supporting both manual and automated strategy evaluation\n\n## Properties\n\n### BacktestSettings\n"
    }
  },
  {
    "pageContent": "nner Class\n\n**Namespace:** WealthLab.Backtest  \n**Parent:** Object\n\nThe `StrategyRunner` class provides a simplified and flexible approach to running strategy backtests, optimizations, and performance analysis in WealthLab 8.\n\n## Overview\n\n`StrategyRunner` serves as a powerful utility for:\n- Running strategy backtests\n- Performing parameter optimizations\n- Collecting and analyzing performance metrics\n- Supporting both manual and automated strategy evaluation\n\n## Properties\n\n### BacktestSettings\n\n\n```csharp\npublic BacktestSettings BacktestSettings\n\n```",
    "metadata": {
      "id": "strategy-runner",
      "title": "strategy-runner",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-runner.md",
      "chunkIndex": "code-context-0",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public BarHistory BenchmarkData\n",
    "metadata": {
      "id": "strategy-runner",
      "title": "strategy-runner",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-runner.md",
      "chunkIndex": "code-1",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "performance analysis in WealthLab 8.\n\n## Overview\n\n`StrategyRunner` serves as a powerful utility for:\n- Running strategy backtests\n- Performing parameter optimizations\n- Collecting and analyzing performance metrics\n- Supporting both manual and automated strategy evaluation\n\n## Properties\n\n### BacktestSettings\n```csharp\npublic BacktestSettings BacktestSettings\n```\nConfigures the settings used during the backtest, including commission, slippage, and other simulation parameters.\n\n### BenchmarkData\n"
    }
  },
  {
    "pageContent": "performance analysis in WealthLab 8.\n\n## Overview\n\n`StrategyRunner` serves as a powerful utility for:\n- Running strategy backtests\n- Performing parameter optimizations\n- Collecting and analyzing performance metrics\n- Supporting both manual and automated strategy evaluation\n\n## Properties\n\n### BacktestSettings\n```csharp\npublic BacktestSettings BacktestSettings\n```\nConfigures the settings used during the backtest, including commission, slippage, and other simulation parameters.\n\n### BenchmarkData\n\n\n```csharp\npublic BarHistory BenchmarkData\n\n```",
    "metadata": {
      "id": "strategy-runner",
      "title": "strategy-runner",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-runner.md",
      "chunkIndex": "code-context-1",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public string BenchmarkSymbol\n",
    "metadata": {
      "id": "strategy-runner",
      "title": "strategy-runner",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-runner.md",
      "chunkIndex": "code-2",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "analyzing performance metrics\n- Supporting both manual and automated strategy evaluation\n\n## Properties\n\n### BacktestSettings\n```csharp\npublic BacktestSettings BacktestSettings\n```\nConfigures the settings used during the backtest, including commission, slippage, and other simulation parameters.\n\n### BenchmarkData\n```csharp\npublic BarHistory BenchmarkData\n```\nSpecifies the historical data for benchmark comparison. Used for calculating performance metrics like Alpha and Beta.\n\n### BenchmarkSymbol\n"
    }
  },
  {
    "pageContent": "analyzing performance metrics\n- Supporting both manual and automated strategy evaluation\n\n## Properties\n\n### BacktestSettings\n```csharp\npublic BacktestSettings BacktestSettings\n```\nConfigures the settings used during the backtest, including commission, slippage, and other simulation parameters.\n\n### BenchmarkData\n```csharp\npublic BarHistory BenchmarkData\n```\nSpecifies the historical data for benchmark comparison. Used for calculating performance metrics like Alpha and Beta.\n\n### BenchmarkSymbol\n\n\n```csharp\npublic string BenchmarkSymbol\n\n```",
    "metadata": {
      "id": "strategy-runner",
      "title": "strategy-runner",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-runner.md",
      "chunkIndex": "code-context-2",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public List<BarHistory> Data\n",
    "metadata": {
      "id": "strategy-runner",
      "title": "strategy-runner",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-runner.md",
      "chunkIndex": "code-3",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": " BacktestSettings BacktestSettings\n```\nConfigures the settings used during the backtest, including commission, slippage, and other simulation parameters.\n\n### BenchmarkData\n```csharp\npublic BarHistory BenchmarkData\n```\nSpecifies the historical data for benchmark comparison. Used for calculating performance metrics like Alpha and Beta.\n\n### BenchmarkSymbol\n```csharp\npublic string BenchmarkSymbol\n```\nDefines the symbol to use for benchmark backtesting if `BenchmarkData` is not provided.\n\n### Data\n"
    }
  },
  {
    "pageContent": " BacktestSettings BacktestSettings\n```\nConfigures the settings used during the backtest, including commission, slippage, and other simulation parameters.\n\n### BenchmarkData\n```csharp\npublic BarHistory BenchmarkData\n```\nSpecifies the historical data for benchmark comparison. Used for calculating performance metrics like Alpha and Beta.\n\n### BenchmarkSymbol\n```csharp\npublic string BenchmarkSymbol\n```\nDefines the symbol to use for benchmark backtesting if `BenchmarkData` is not provided.\n\n### Data\n\n\n```csharp\npublic List<BarHistory> Data\n\n```",
    "metadata": {
      "id": "strategy-runner",
      "title": "strategy-runner",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-runner.md",
      "chunkIndex": "code-context-3",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public DataRange DataRange\n",
    "metadata": {
      "id": "strategy-runner",
      "title": "strategy-runner",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-runner.md",
      "chunkIndex": "code-4",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "\n\n### BenchmarkData\n```csharp\npublic BarHistory BenchmarkData\n```\nSpecifies the historical data for benchmark comparison. Used for calculating performance metrics like Alpha and Beta.\n\n### BenchmarkSymbol\n```csharp\npublic string BenchmarkSymbol\n```\nDefines the symbol to use for benchmark backtesting if `BenchmarkData` is not provided.\n\n### Data\n```csharp\npublic List<BarHistory> Data\n```\nContains the historical data sources for backtesting when no DataSet or Symbols are specified.\n\n### DataRange\n"
    }
  },
  {
    "pageContent": "\n\n### BenchmarkData\n```csharp\npublic BarHistory BenchmarkData\n```\nSpecifies the historical data for benchmark comparison. Used for calculating performance metrics like Alpha and Beta.\n\n### BenchmarkSymbol\n```csharp\npublic string BenchmarkSymbol\n```\nDefines the symbol to use for benchmark backtesting if `BenchmarkData` is not provided.\n\n### Data\n```csharp\npublic List<BarHistory> Data\n```\nContains the historical data sources for backtesting when no DataSet or Symbols are specified.\n\n### DataRange\n\n\n```csharp\npublic DataRange DataRange\n\n```",
    "metadata": {
      "id": "strategy-runner",
      "title": "strategy-runner",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-runner.md",
      "chunkIndex": "code-context-4",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public DataSet DataSet\n",
    "metadata": {
      "id": "strategy-runner",
      "title": "strategy-runner",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-runner.md",
      "chunkIndex": "code-5",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ulating performance metrics like Alpha and Beta.\n\n### BenchmarkSymbol\n```csharp\npublic string BenchmarkSymbol\n```\nDefines the symbol to use for benchmark backtesting if `BenchmarkData` is not provided.\n\n### Data\n```csharp\npublic List<BarHistory> Data\n```\nContains the historical data sources for backtesting when no DataSet or Symbols are specified.\n\n### DataRange\n```csharp\npublic DataRange DataRange\n```\nDetermines the date range for the backtest. Default is the most recent 10 years.\n\n### DataSet\n"
    }
  },
  {
    "pageContent": "ulating performance metrics like Alpha and Beta.\n\n### BenchmarkSymbol\n```csharp\npublic string BenchmarkSymbol\n```\nDefines the symbol to use for benchmark backtesting if `BenchmarkData` is not provided.\n\n### Data\n```csharp\npublic List<BarHistory> Data\n```\nContains the historical data sources for backtesting when no DataSet or Symbols are specified.\n\n### DataRange\n```csharp\npublic DataRange DataRange\n```\nDetermines the date range for the backtest. Default is the most recent 10 years.\n\n### DataSet\n\n\n```csharp\npublic DataSet DataSet\n\n```",
    "metadata": {
      "id": "strategy-runner",
      "title": "strategy-runner",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-runner.md",
      "chunkIndex": "code-context-5",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public PositionSize PositionSize\n",
    "metadata": {
      "id": "strategy-runner",
      "title": "strategy-runner",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-runner.md",
      "chunkIndex": "code-6",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "s the symbol to use for benchmark backtesting if `BenchmarkData` is not provided.\n\n### Data\n```csharp\npublic List<BarHistory> Data\n```\nContains the historical data sources for backtesting when no DataSet or Symbols are specified.\n\n### DataRange\n```csharp\npublic DataRange DataRange\n```\nDetermines the date range for the backtest. Default is the most recent 10 years.\n\n### DataSet\n```csharp\npublic DataSet DataSet\n```\nSpecifies the DataSet to use as the data source for backtesting.\n\n### PositionSize\n"
    }
  },
  {
    "pageContent": "s the symbol to use for benchmark backtesting if `BenchmarkData` is not provided.\n\n### Data\n```csharp\npublic List<BarHistory> Data\n```\nContains the historical data sources for backtesting when no DataSet or Symbols are specified.\n\n### DataRange\n```csharp\npublic DataRange DataRange\n```\nDetermines the date range for the backtest. Default is the most recent 10 years.\n\n### DataSet\n```csharp\npublic DataSet DataSet\n```\nSpecifies the DataSet to use as the data source for backtesting.\n\n### PositionSize\n\n\n```csharp\npublic PositionSize PositionSize\n\n```",
    "metadata": {
      "id": "strategy-runner",
      "title": "strategy-runner",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-runner.md",
      "chunkIndex": "code-context-6",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public HistoryScale Scale\n",
    "metadata": {
      "id": "strategy-runner",
      "title": "strategy-runner",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-runner.md",
      "chunkIndex": "code-7",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ins the historical data sources for backtesting when no DataSet or Symbols are specified.\n\n### DataRange\n```csharp\npublic DataRange DataRange\n```\nDetermines the date range for the backtest. Default is the most recent 10 years.\n\n### DataSet\n```csharp\npublic DataSet DataSet\n```\nSpecifies the DataSet to use as the data source for backtesting.\n\n### PositionSize\n```csharp\npublic PositionSize PositionSize\n```\nConfigures the position sizing method for the backtest. Default is 10% of equity.\n\n### Scale\n"
    }
  },
  {
    "pageContent": "ins the historical data sources for backtesting when no DataSet or Symbols are specified.\n\n### DataRange\n```csharp\npublic DataRange DataRange\n```\nDetermines the date range for the backtest. Default is the most recent 10 years.\n\n### DataSet\n```csharp\npublic DataSet DataSet\n```\nSpecifies the DataSet to use as the data source for backtesting.\n\n### PositionSize\n```csharp\npublic PositionSize PositionSize\n```\nConfigures the position sizing method for the backtest. Default is 10% of equity.\n\n### Scale\n\n\n```csharp\npublic HistoryScale Scale\n\n```",
    "metadata": {
      "id": "strategy-runner",
      "title": "strategy-runner",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-runner.md",
      "chunkIndex": "code-context-7",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public List<string> Symbols\n",
    "metadata": {
      "id": "strategy-runner",
      "title": "strategy-runner",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-runner.md",
      "chunkIndex": "code-8",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "p\npublic DataRange DataRange\n```\nDetermines the date range for the backtest. Default is the most recent 10 years.\n\n### DataSet\n```csharp\npublic DataSet DataSet\n```\nSpecifies the DataSet to use as the data source for backtesting.\n\n### PositionSize\n```csharp\npublic PositionSize PositionSize\n```\nConfigures the position sizing method for the backtest. Default is 10% of equity.\n\n### Scale\n```csharp\npublic HistoryScale Scale\n```\nSets the data frequency for the backtest. Default is Daily.\n\n### Symbols\n"
    }
  },
  {
    "pageContent": "p\npublic DataRange DataRange\n```\nDetermines the date range for the backtest. Default is the most recent 10 years.\n\n### DataSet\n```csharp\npublic DataSet DataSet\n```\nSpecifies the DataSet to use as the data source for backtesting.\n\n### PositionSize\n```csharp\npublic PositionSize PositionSize\n```\nConfigures the position sizing method for the backtest. Default is 10% of equity.\n\n### Scale\n```csharp\npublic HistoryScale Scale\n```\nSets the data frequency for the backtest. Default is Daily.\n\n### Symbols\n\n\n```csharp\npublic List<string> Symbols\n\n```",
    "metadata": {
      "id": "strategy-runner",
      "title": "strategy-runner",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-runner.md",
      "chunkIndex": "code-context-8",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public Backtester RunBacktest(string strategyName)\npublic Backtester RunBacktest(StrategyBase sb)\n",
    "metadata": {
      "id": "strategy-runner",
      "title": "strategy-runner",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-runner.md",
      "chunkIndex": "code-9",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "lic DataSet DataSet\n```\nSpecifies the DataSet to use as the data source for backtesting.\n\n### PositionSize\n```csharp\npublic PositionSize PositionSize\n```\nConfigures the position sizing method for the backtest. Default is 10% of equity.\n\n### Scale\n```csharp\npublic HistoryScale Scale\n```\nSets the data frequency for the backtest. Default is Daily.\n\n### Symbols\n```csharp\npublic List<string> Symbols\n```\nList of symbols to use for backtesting when no DataSet is specified.\n\n## Methods\n\n### RunBacktest\n"
    }
  },
  {
    "pageContent": "lic DataSet DataSet\n```\nSpecifies the DataSet to use as the data source for backtesting.\n\n### PositionSize\n```csharp\npublic PositionSize PositionSize\n```\nConfigures the position sizing method for the backtest. Default is 10% of equity.\n\n### Scale\n```csharp\npublic HistoryScale Scale\n```\nSets the data frequency for the backtest. Default is Daily.\n\n### Symbols\n```csharp\npublic List<string> Symbols\n```\nList of symbols to use for backtesting when no DataSet is specified.\n\n## Methods\n\n### RunBacktest\n\n\n```csharp\npublic Backtester RunBacktest(string strategyName)\npublic Backtester RunBacktest(StrategyBase sb)\n\n```",
    "metadata": {
      "id": "strategy-runner",
      "title": "strategy-runner",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-runner.md",
      "chunkIndex": "code-context-9",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public OptimizationResultList PerformOptimization(\n    string optMethod, \n    string stratName, \n    OptimizationRunComplete runComplete = null\n)\npublic OptimizationResultList PerformOptimization(\n    string optMethod, \n    Strategy s, \n    OptimizationRunComplete runComplete = null\n)\n",
    "metadata": {
      "id": "strategy-runner",
      "title": "strategy-runner",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-runner.md",
      "chunkIndex": "code-10",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "```\nList of symbols to use for backtesting when no DataSet is specified.\n\n## Methods\n\n### RunBacktest\n```csharp\npublic Backtester RunBacktest(string strategyName)\npublic Backtester RunBacktest(StrategyBase sb)\n```\nExecutes a backtest for a specified strategy.\n\n**Overloads:**\n- By strategy name\n- By `StrategyBase` instance\n\n**Data Source Priority:**\n1. DataSet symbols\n2. Symbols list\n3. Manually provided Data\n\n**Returns:** A `Backtester` instance with performance metrics\n\n### PerformOptimization\n"
    }
  },
  {
    "pageContent": "```\nList of symbols to use for backtesting when no DataSet is specified.\n\n## Methods\n\n### RunBacktest\n```csharp\npublic Backtester RunBacktest(string strategyName)\npublic Backtester RunBacktest(StrategyBase sb)\n```\nExecutes a backtest for a specified strategy.\n\n**Overloads:**\n- By strategy name\n- By `StrategyBase` instance\n\n**Data Source Priority:**\n1. DataSet symbols\n2. Symbols list\n3. Manually provided Data\n\n**Returns:** A `Backtester` instance with performance metrics\n\n### PerformOptimization\n\n\n```csharp\npublic OptimizationResultList PerformOptimization(\n    string optMethod, \n    string stratName, \n    OptimizationRunComplete runComplete = null\n)\npublic OptimizationResultList PerformOptimization(\n    string optMethod, \n    Strategy s, \n    OptimizationRunComplete runComplete = null\n)\n\n```",
    "metadata": {
      "id": "strategy-runner",
      "title": "strategy-runner",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-runner.md",
      "chunkIndex": "code-context-10",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public class StrategyTester\n{\n    public void TestStrategy()\n    {\n        // Create StrategyRunner\n        var runner = new StrategyRunner\n        {\n            // Configure backtest settings\n            BacktestSettings = new BacktestSettings \n            { \n                CommissionAmount = 5.0, \n                CommissionType = CommissionTypes.Flat \n            },\n            \n            // Set data source\n            DataSet = DataSetFactory.GetDataSet(\"MyMarketData\"),\n            \n            // Configure position sizing\n            PositionSize = new PositionSize \n            { \n                PositionSizeType = PositionSizeType.PctOfEquity, \n                Amount = 0.1 // 10% of equity\n            },\n            \n            // Set benchmark\n            BenchmarkSymbol = \"SPY\",\n            \n            // Set backtest range\n            DataRange = new DataRange(\n                DateTime.Now.AddYears(-5), \n                DateTime.Now\n            )\n        };\n\n        // Run backtest\n        var backtester = runner.RunBacktest(\"MyTradingStrategy\");\n\n        // Analyze results\n        Console.WriteLine($\"Net Profit: {backtester.Metrics[\"NetProfit\"]}\");\n        Console.WriteLine($\"Sharpe Ratio: {backtester.Metrics[\"SharpeRatio\"]}\");\n    }\n}\n",
    "metadata": {
      "id": "strategy-runner",
      "title": "strategy-runner",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-runner.md",
      "chunkIndex": "code-11",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "nRunComplete runComplete = null\n)\npublic OptimizationResultList PerformOptimization(\n    string optMethod, \n    Strategy s, \n    OptimizationRunComplete runComplete = null\n)\n```\nPerforms strategy parameter optimization.\n\n**Parameters:**\n- `optMethod`: Optimization method name\n- `stratName` or `s`: Strategy to optimize\n- `runComplete`: Optional callback method for run completion tracking\n\n**Returns:** `OptimizationResultList` containing optimization results\n\n## Usage Examples\n\n### Basic Backtest\n"
    }
  },
  {
    "pageContent": "nRunComplete runComplete = null\n)\npublic OptimizationResultList PerformOptimization(\n    string optMethod, \n    Strategy s, \n    OptimizationRunComplete runComplete = null\n)\n```\nPerforms strategy parameter optimization.\n\n**Parameters:**\n- `optMethod`: Optimization method name\n- `stratName` or `s`: Strategy to optimize\n- `runComplete`: Optional callback method for run completion tracking\n\n**Returns:** `OptimizationResultList` containing optimization results\n\n## Usage Examples\n\n### Basic Backtest\n\n\n```csharp\npublic class StrategyTester\n{\n    public void TestStrategy()\n    {\n        // Create StrategyRunner\n        var runner = new StrategyRunner\n        {\n            // Configure backtest settings\n            BacktestSettings = new BacktestSettings \n            { \n                CommissionAmount = 5.0, \n                CommissionType = CommissionTypes.Flat \n            },\n            \n            // Set data source\n            DataSet = DataSetFactory.GetDataSet(\"MyMarketData\"),\n            \n            // Configure position sizing\n            PositionSize = new PositionSize \n            { \n                PositionSizeType = PositionSizeType.PctOfEquity, \n                Amount = 0.1 // 10% of equity\n            },\n            \n            // Set benchmark\n            BenchmarkSymbol = \"SPY\",\n            \n            // Set backtest range\n            DataRange = new DataRange(\n                DateTime.Now.AddYears(-5), \n                DateTime.Now\n            )\n        };\n\n        // Run backtest\n        var backtester = runner.RunBacktest(\"MyTradingStrategy\");\n\n        // Analyze results\n        Console.WriteLine($\"Net Profit: {backtester.Metrics[\"NetProfit\"]}\");\n        Console.WriteLine($\"Sharpe Ratio: {backtester.Metrics[\"SharpeRatio\"]}\");\n    }\n}\n\n```",
    "metadata": {
      "id": "strategy-runner",
      "title": "strategy-runner",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-runner.md",
      "chunkIndex": "code-context-11",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public class StrategyOptimizer\n{\n    public void OptimizeStrategy()\n    {\n        var runner = new StrategyRunner\n        {\n            DataSet = DataSetFactory.GetDataSet(\"TechStocks\"),\n            Scale = new HistoryScale(Frequency.Daily)\n        };\n\n        // Perform optimization with progress tracking\n        var results = runner.PerformOptimization(\n            \"Grid\", \n            \"RSIStrategy\", \n            (result, progress) => \n            {\n                Console.WriteLine($\"Optimization Progress: {progress}%\");\n                Console.WriteLine($\"Net Profit: {result.PerformanceMetrics[\"NetProfit\"]}\");\n            }\n        );\n\n        // Analyze top results\n        var bestResult = results\n            .OrderByDescending(r => r.PerformanceMetrics[\"NetProfit\"])\n            .First();\n\n        Console.WriteLine(\"Best Strategy Parameters:\");\n        for (int i = 0; i < bestResult.ParameterValues.Count; i++)\n        {\n            Console.WriteLine($\"P{i}: {bestResult.ParameterValues[i]}\");\n        }\n    }\n}\n",
    "metadata": {
      "id": "strategy-runner",
      "title": "strategy-runner",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-runner.md",
      "chunkIndex": "code-12",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "\n            \n            // Set backtest range\n            DataRange = new DataRange(\n                DateTime.Now.AddYears(-5), \n                DateTime.Now\n            )\n        };\n\n        // Run backtest\n        var backtester = runner.RunBacktest(\"MyTradingStrategy\");\n\n        // Analyze results\n        Console.WriteLine($\"Net Profit: {backtester.Metrics[\"NetProfit\"]}\");\n        Console.WriteLine($\"Sharpe Ratio: {backtester.Metrics[\"SharpeRatio\"]}\");\n    }\n}\n```\n\n### Optimization Example\n"
    }
  },
  {
    "pageContent": "\n            \n            // Set backtest range\n            DataRange = new DataRange(\n                DateTime.Now.AddYears(-5), \n                DateTime.Now\n            )\n        };\n\n        // Run backtest\n        var backtester = runner.RunBacktest(\"MyTradingStrategy\");\n\n        // Analyze results\n        Console.WriteLine($\"Net Profit: {backtester.Metrics[\"NetProfit\"]}\");\n        Console.WriteLine($\"Sharpe Ratio: {backtester.Metrics[\"SharpeRatio\"]}\");\n    }\n}\n```\n\n### Optimization Example\n\n\n```csharp\npublic class StrategyOptimizer\n{\n    public void OptimizeStrategy()\n    {\n        var runner = new StrategyRunner\n        {\n            DataSet = DataSetFactory.GetDataSet(\"TechStocks\"),\n            Scale = new HistoryScale(Frequency.Daily)\n        };\n\n        // Perform optimization with progress tracking\n        var results = runner.PerformOptimization(\n            \"Grid\", \n            \"RSIStrategy\", \n            (result, progress) => \n            {\n                Console.WriteLine($\"Optimization Progress: {progress}%\");\n                Console.WriteLine($\"Net Profit: {result.PerformanceMetrics[\"NetProfit\"]}\");\n            }\n        );\n\n        // Analyze top results\n        var bestResult = results\n            .OrderByDescending(r => r.PerformanceMetrics[\"NetProfit\"])\n            .First();\n\n        Console.WriteLine(\"Best Strategy Parameters:\");\n        for (int i = 0; i < bestResult.ParameterValues.Count; i++)\n        {\n            Console.WriteLine($\"P{i}: {bestResult.ParameterValues[i]}\");\n        }\n    }\n}\n\n```",
    "metadata": {
      "id": "strategy-runner",
      "title": "strategy-runner",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-runner.md",
      "chunkIndex": "code-context-12",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public class MultiSymbolTester\n{\n    public void TestMultipleSymbols()\n    {\n        var runner = new StrategyRunner\n        {\n            Symbols = new List<string> { \"AAPL\", \"GOOGL\", \"MSFT\" },\n            Scale = new HistoryScale(Frequency.Daily)\n        };\n\n        var backtester = runner.RunBacktest(\"MultiSymbolStrategy\");\n\n        // Analyze aggregate performance\n        Console.WriteLine($\"Total Net Profit: {backtester.Metrics[\"NetProfit\"]}\");\n    }\n}\n",
    "metadata": {
      "id": "strategy-runner",
      "title": "strategy-runner",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-runner.md",
      "chunkIndex": "code-13",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ne($\"Net Profit: {result.PerformanceMetrics[\"NetProfit\"]}\");\n            }\n        );\n\n        // Analyze top results\n        var bestResult = results\n            .OrderByDescending(r => r.PerformanceMetrics[\"NetProfit\"])\n            .First();\n\n        Console.WriteLine(\"Best Strategy Parameters:\");\n        for (int i = 0; i < bestResult.ParameterValues.Count; i++)\n        {\n            Console.WriteLine($\"P{i}: {bestResult.ParameterValues[i]}\");\n        }\n    }\n}\n```\n\n### Multi-Symbol Backtest\n"
    }
  },
  {
    "pageContent": "ne($\"Net Profit: {result.PerformanceMetrics[\"NetProfit\"]}\");\n            }\n        );\n\n        // Analyze top results\n        var bestResult = results\n            .OrderByDescending(r => r.PerformanceMetrics[\"NetProfit\"])\n            .First();\n\n        Console.WriteLine(\"Best Strategy Parameters:\");\n        for (int i = 0; i < bestResult.ParameterValues.Count; i++)\n        {\n            Console.WriteLine($\"P{i}: {bestResult.ParameterValues[i]}\");\n        }\n    }\n}\n```\n\n### Multi-Symbol Backtest\n\n\n```csharp\npublic class MultiSymbolTester\n{\n    public void TestMultipleSymbols()\n    {\n        var runner = new StrategyRunner\n        {\n            Symbols = new List<string> { \"AAPL\", \"GOOGL\", \"MSFT\" },\n            Scale = new HistoryScale(Frequency.Daily)\n        };\n\n        var backtester = runner.RunBacktest(\"MultiSymbolStrategy\");\n\n        // Analyze aggregate performance\n        Console.WriteLine($\"Total Net Profit: {backtester.Metrics[\"NetProfit\"]}\");\n    }\n}\n\n```",
    "metadata": {
      "id": "strategy-runner",
      "title": "strategy-runner",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy-runner.md",
      "chunkIndex": "code-context-13",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "# Strategy Class\n\n**Namespace:** WealthLab.Backtest  \n**Parent:** Object\n\nThe `Strategy` class encapsulates comprehensive information about a trading strategy, including metadata, configuration, and execution parameters used during backtesting.\n\n## 🚨 Important Warning 🚨\n**Do not modify a Strategy's Properties in Strategy code. Doing so may cause unexpected behavior and potential issues with your backtesting environment.**\n\n## Strategy Metadata Properties\n\n### Author\n",
    "metadata": {
      "id": "strategy",
      "title": "strategy",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy.md",
      "chunkIndex": 0,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the WealthLab username of the Strategy's author.\n\n### LibraryName\n",
    "metadata": {
      "id": "strategy",
      "title": "strategy",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy.md",
      "chunkIndex": 1,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the name of the assembly for a compiled strategy.\n\n### FolderName\n",
    "metadata": {
      "id": "strategy",
      "title": "strategy",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy.md",
      "chunkIndex": 2,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the name of the folder where the strategy was last saved.\n\n### StrategyData\n",
    "metadata": {
      "id": "strategy",
      "title": "strategy",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy.md",
      "chunkIndex": 3,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nContains a copy of the strategy code, rules, and other configuration details.\n\n## Backtest Configuration Properties\n\n### Benchmark\n",
    "metadata": {
      "id": "strategy",
      "title": "strategy",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy.md",
      "chunkIndex": 4,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nSpecifies the symbol to use for the comparison benchmark backtest (buy & hold run).\n\n### SingleSymbol\n",
    "metadata": {
      "id": "strategy",
      "title": "strategy",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy.md",
      "chunkIndex": 5,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nThe symbol used for a single symbol backtest.\n\n### SingleSymbolMode\n",
    "metadata": {
      "id": "strategy",
      "title": "strategy",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy.md",
      "chunkIndex": 6,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nIndicates whether the strategy was run in single symbol mode (`true`) or portfolio backtest mode (`false`).\n\n### DataSetName\n",
    "metadata": {
      "id": "strategy",
      "title": "strategy",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy.md",
      "chunkIndex": 7,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the name of the DataSet selected for a Portfolio Backtest.\n\n### DataRange\n",
    "metadata": {
      "id": "strategy",
      "title": "strategy",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy.md",
      "chunkIndex": 8,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the date range used for the backtest.\n\n## Position and Risk Management Properties\n\n### PositionSize\n",
    "metadata": {
      "id": "strategy",
      "title": "strategy",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy.md",
      "chunkIndex": 9,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the position sizing method used in the backtest.\n\n### RetainNSF\n",
    "metadata": {
      "id": "strategy",
      "title": "strategy",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy.md",
      "chunkIndex": 10,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nDetermines if the strategy should retain Positions with Insufficient Funds.\n\n## Advanced Backtesting Properties\n\n### RunWithPreferredValues\n",
    "metadata": {
      "id": "strategy",
      "title": "strategy",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy.md",
      "chunkIndex": 11,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nIndicates whether the strategy should be run using Preferred Values from an optimization.\n\n### GranularLimitStopScale\n",
    "metadata": {
      "id": "strategy",
      "title": "strategy",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy.md",
      "chunkIndex": 12,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the intraday scale for granular stop/limit processing.\n- If returns `HistoryScale.Daily`, granular processing is disabled\n- For intraday scales, enables more precise stop/limit handling\n\n### UpdateGranularData\n",
    "metadata": {
      "id": "strategy",
      "title": "strategy",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy.md",
      "chunkIndex": 13,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nDetermines if granular data should be updated during the backtest.\n\n## Usage Examples\n\n### Basic Strategy Inspection\n",
    "metadata": {
      "id": "strategy",
      "title": "strategy",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy.md",
      "chunkIndex": 14,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n### Advanced Backtest Configuration Analysis\n",
    "metadata": {
      "id": "strategy",
      "title": "strategy",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy.md",
      "chunkIndex": 15,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n## Best Practices\n\n1. **Strategy Inspection**\n   - Use properties for metadata and configuration analysis\n   - Avoid modifying properties during runtime\n   - Treat strategy properties as read-only\n\n2. **Backtest Configuration**\n   - Carefully review position sizing and risk management settings\n   - Understand the implications of `RetainNSF` and `RunWithPreferredValues`\n   - Pay attention to granular processing settings for intraday strategies\n\n3. **Performance Considerations**\n   - Be mindful of computational overhead when inspecting strategy properties\n   - Use properties judiciously in performance-critical code paths\n\n## Notes\n\n- Provides a comprehensive view of strategy configuration\n- Supports both single symbol and portfolio backtesting\n- Offers insights into strategy metadata and execution parameters\n- Designed for flexible strategy analysis and inspection\n\n## Requirements\n\n- Understanding of WealthLab backtesting concepts\n- Familiarity with trading strategy configuration\n- Knowledge of position sizing and risk management principles\n\n## Caution\n\n🚨 Modifying strategy properties during execution can lead to unpredictable results and is strongly discouraged. 🚨 ",
    "metadata": {
      "id": "strategy",
      "title": "strategy",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy.md",
      "chunkIndex": 16,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "public string Author\n",
    "metadata": {
      "id": "strategy",
      "title": "strategy",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy.md",
      "chunkIndex": "code-0",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "# Strategy Class\n\n**Namespace:** WealthLab.Backtest  \n**Parent:** Object\n\nThe `Strategy` class encapsulates comprehensive information about a trading strategy, including metadata, configuration, and execution parameters used during backtesting.\n\n## 🚨 Important Warning 🚨\n**Do not modify a Strategy's Properties in Strategy code. Doing so may cause unexpected behavior and potential issues with your backtesting environment.**\n\n## Strategy Metadata Properties\n\n### Author\n"
    }
  },
  {
    "pageContent": "# Strategy Class\n\n**Namespace:** WealthLab.Backtest  \n**Parent:** Object\n\nThe `Strategy` class encapsulates comprehensive information about a trading strategy, including metadata, configuration, and execution parameters used during backtesting.\n\n## 🚨 Important Warning 🚨\n**Do not modify a Strategy's Properties in Strategy code. Doing so may cause unexpected behavior and potential issues with your backtesting environment.**\n\n## Strategy Metadata Properties\n\n### Author\n\n\n```csharp\npublic string Author\n\n```",
    "metadata": {
      "id": "strategy",
      "title": "strategy",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy.md",
      "chunkIndex": "code-context-0",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public string LibraryName\n",
    "metadata": {
      "id": "strategy",
      "title": "strategy",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy.md",
      "chunkIndex": "code-1",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ategy` class encapsulates comprehensive information about a trading strategy, including metadata, configuration, and execution parameters used during backtesting.\n\n## 🚨 Important Warning 🚨\n**Do not modify a Strategy's Properties in Strategy code. Doing so may cause unexpected behavior and potential issues with your backtesting environment.**\n\n## Strategy Metadata Properties\n\n### Author\n```csharp\npublic string Author\n```\nReturns the WealthLab username of the Strategy's author.\n\n### LibraryName\n"
    }
  },
  {
    "pageContent": "ategy` class encapsulates comprehensive information about a trading strategy, including metadata, configuration, and execution parameters used during backtesting.\n\n## 🚨 Important Warning 🚨\n**Do not modify a Strategy's Properties in Strategy code. Doing so may cause unexpected behavior and potential issues with your backtesting environment.**\n\n## Strategy Metadata Properties\n\n### Author\n```csharp\npublic string Author\n```\nReturns the WealthLab username of the Strategy's author.\n\n### LibraryName\n\n\n```csharp\npublic string LibraryName\n\n```",
    "metadata": {
      "id": "strategy",
      "title": "strategy",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy.md",
      "chunkIndex": "code-context-1",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public string FolderName\n",
    "metadata": {
      "id": "strategy",
      "title": "strategy",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy.md",
      "chunkIndex": "code-2",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "nd execution parameters used during backtesting.\n\n## 🚨 Important Warning 🚨\n**Do not modify a Strategy's Properties in Strategy code. Doing so may cause unexpected behavior and potential issues with your backtesting environment.**\n\n## Strategy Metadata Properties\n\n### Author\n```csharp\npublic string Author\n```\nReturns the WealthLab username of the Strategy's author.\n\n### LibraryName\n```csharp\npublic string LibraryName\n```\nReturns the name of the assembly for a compiled strategy.\n\n### FolderName\n"
    }
  },
  {
    "pageContent": "nd execution parameters used during backtesting.\n\n## 🚨 Important Warning 🚨\n**Do not modify a Strategy's Properties in Strategy code. Doing so may cause unexpected behavior and potential issues with your backtesting environment.**\n\n## Strategy Metadata Properties\n\n### Author\n```csharp\npublic string Author\n```\nReturns the WealthLab username of the Strategy's author.\n\n### LibraryName\n```csharp\npublic string LibraryName\n```\nReturns the name of the assembly for a compiled strategy.\n\n### FolderName\n\n\n```csharp\npublic string FolderName\n\n```",
    "metadata": {
      "id": "strategy",
      "title": "strategy",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy.md",
      "chunkIndex": "code-context-2",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public string StrategyData\n",
    "metadata": {
      "id": "strategy",
      "title": "strategy",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy.md",
      "chunkIndex": "code-3",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ategy code. Doing so may cause unexpected behavior and potential issues with your backtesting environment.**\n\n## Strategy Metadata Properties\n\n### Author\n```csharp\npublic string Author\n```\nReturns the WealthLab username of the Strategy's author.\n\n### LibraryName\n```csharp\npublic string LibraryName\n```\nReturns the name of the assembly for a compiled strategy.\n\n### FolderName\n```csharp\npublic string FolderName\n```\nReturns the name of the folder where the strategy was last saved.\n\n### StrategyData\n"
    }
  },
  {
    "pageContent": "ategy code. Doing so may cause unexpected behavior and potential issues with your backtesting environment.**\n\n## Strategy Metadata Properties\n\n### Author\n```csharp\npublic string Author\n```\nReturns the WealthLab username of the Strategy's author.\n\n### LibraryName\n```csharp\npublic string LibraryName\n```\nReturns the name of the assembly for a compiled strategy.\n\n### FolderName\n```csharp\npublic string FolderName\n```\nReturns the name of the folder where the strategy was last saved.\n\n### StrategyData\n\n\n```csharp\npublic string StrategyData\n\n```",
    "metadata": {
      "id": "strategy",
      "title": "strategy",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy.md",
      "chunkIndex": "code-context-3",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public string Benchmark\n",
    "metadata": {
      "id": "strategy",
      "title": "strategy",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy.md",
      "chunkIndex": "code-4",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "tring Author\n```\nReturns the WealthLab username of the Strategy's author.\n\n### LibraryName\n```csharp\npublic string LibraryName\n```\nReturns the name of the assembly for a compiled strategy.\n\n### FolderName\n```csharp\npublic string FolderName\n```\nReturns the name of the folder where the strategy was last saved.\n\n### StrategyData\n```csharp\npublic string StrategyData\n```\nContains a copy of the strategy code, rules, and other configuration details.\n\n## Backtest Configuration Properties\n\n### Benchmark\n"
    }
  },
  {
    "pageContent": "tring Author\n```\nReturns the WealthLab username of the Strategy's author.\n\n### LibraryName\n```csharp\npublic string LibraryName\n```\nReturns the name of the assembly for a compiled strategy.\n\n### FolderName\n```csharp\npublic string FolderName\n```\nReturns the name of the folder where the strategy was last saved.\n\n### StrategyData\n```csharp\npublic string StrategyData\n```\nContains a copy of the strategy code, rules, and other configuration details.\n\n## Backtest Configuration Properties\n\n### Benchmark\n\n\n```csharp\npublic string Benchmark\n\n```",
    "metadata": {
      "id": "strategy",
      "title": "strategy",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy.md",
      "chunkIndex": "code-context-4",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public string SingleSymbol\n",
    "metadata": {
      "id": "strategy",
      "title": "strategy",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy.md",
      "chunkIndex": "code-5",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "he name of the assembly for a compiled strategy.\n\n### FolderName\n```csharp\npublic string FolderName\n```\nReturns the name of the folder where the strategy was last saved.\n\n### StrategyData\n```csharp\npublic string StrategyData\n```\nContains a copy of the strategy code, rules, and other configuration details.\n\n## Backtest Configuration Properties\n\n### Benchmark\n```csharp\npublic string Benchmark\n```\nSpecifies the symbol to use for the comparison benchmark backtest (buy & hold run).\n\n### SingleSymbol\n"
    }
  },
  {
    "pageContent": "he name of the assembly for a compiled strategy.\n\n### FolderName\n```csharp\npublic string FolderName\n```\nReturns the name of the folder where the strategy was last saved.\n\n### StrategyData\n```csharp\npublic string StrategyData\n```\nContains a copy of the strategy code, rules, and other configuration details.\n\n## Backtest Configuration Properties\n\n### Benchmark\n```csharp\npublic string Benchmark\n```\nSpecifies the symbol to use for the comparison benchmark backtest (buy & hold run).\n\n### SingleSymbol\n\n\n```csharp\npublic string SingleSymbol\n\n```",
    "metadata": {
      "id": "strategy",
      "title": "strategy",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy.md",
      "chunkIndex": "code-context-5",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public bool SingleSymbolMode\n",
    "metadata": {
      "id": "strategy",
      "title": "strategy",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy.md",
      "chunkIndex": "code-6",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ns the name of the folder where the strategy was last saved.\n\n### StrategyData\n```csharp\npublic string StrategyData\n```\nContains a copy of the strategy code, rules, and other configuration details.\n\n## Backtest Configuration Properties\n\n### Benchmark\n```csharp\npublic string Benchmark\n```\nSpecifies the symbol to use for the comparison benchmark backtest (buy & hold run).\n\n### SingleSymbol\n```csharp\npublic string SingleSymbol\n```\nThe symbol used for a single symbol backtest.\n\n### SingleSymbolMode\n"
    }
  },
  {
    "pageContent": "ns the name of the folder where the strategy was last saved.\n\n### StrategyData\n```csharp\npublic string StrategyData\n```\nContains a copy of the strategy code, rules, and other configuration details.\n\n## Backtest Configuration Properties\n\n### Benchmark\n```csharp\npublic string Benchmark\n```\nSpecifies the symbol to use for the comparison benchmark backtest (buy & hold run).\n\n### SingleSymbol\n```csharp\npublic string SingleSymbol\n```\nThe symbol used for a single symbol backtest.\n\n### SingleSymbolMode\n\n\n```csharp\npublic bool SingleSymbolMode\n\n```",
    "metadata": {
      "id": "strategy",
      "title": "strategy",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy.md",
      "chunkIndex": "code-context-6",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public string DataSetName\n",
    "metadata": {
      "id": "strategy",
      "title": "strategy",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy.md",
      "chunkIndex": "code-7",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": " other configuration details.\n\n## Backtest Configuration Properties\n\n### Benchmark\n```csharp\npublic string Benchmark\n```\nSpecifies the symbol to use for the comparison benchmark backtest (buy & hold run).\n\n### SingleSymbol\n```csharp\npublic string SingleSymbol\n```\nThe symbol used for a single symbol backtest.\n\n### SingleSymbolMode\n```csharp\npublic bool SingleSymbolMode\n```\nIndicates whether the strategy was run in single symbol mode (`true`) or portfolio backtest mode (`false`).\n\n### DataSetName\n"
    }
  },
  {
    "pageContent": " other configuration details.\n\n## Backtest Configuration Properties\n\n### Benchmark\n```csharp\npublic string Benchmark\n```\nSpecifies the symbol to use for the comparison benchmark backtest (buy & hold run).\n\n### SingleSymbol\n```csharp\npublic string SingleSymbol\n```\nThe symbol used for a single symbol backtest.\n\n### SingleSymbolMode\n```csharp\npublic bool SingleSymbolMode\n```\nIndicates whether the strategy was run in single symbol mode (`true`) or portfolio backtest mode (`false`).\n\n### DataSetName\n\n\n```csharp\npublic string DataSetName\n\n```",
    "metadata": {
      "id": "strategy",
      "title": "strategy",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy.md",
      "chunkIndex": "code-context-7",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public DataRange DataRange\n",
    "metadata": {
      "id": "strategy",
      "title": "strategy",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy.md",
      "chunkIndex": "code-8",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "pecifies the symbol to use for the comparison benchmark backtest (buy & hold run).\n\n### SingleSymbol\n```csharp\npublic string SingleSymbol\n```\nThe symbol used for a single symbol backtest.\n\n### SingleSymbolMode\n```csharp\npublic bool SingleSymbolMode\n```\nIndicates whether the strategy was run in single symbol mode (`true`) or portfolio backtest mode (`false`).\n\n### DataSetName\n```csharp\npublic string DataSetName\n```\nReturns the name of the DataSet selected for a Portfolio Backtest.\n\n### DataRange\n"
    }
  },
  {
    "pageContent": "pecifies the symbol to use for the comparison benchmark backtest (buy & hold run).\n\n### SingleSymbol\n```csharp\npublic string SingleSymbol\n```\nThe symbol used for a single symbol backtest.\n\n### SingleSymbolMode\n```csharp\npublic bool SingleSymbolMode\n```\nIndicates whether the strategy was run in single symbol mode (`true`) or portfolio backtest mode (`false`).\n\n### DataSetName\n```csharp\npublic string DataSetName\n```\nReturns the name of the DataSet selected for a Portfolio Backtest.\n\n### DataRange\n\n\n```csharp\npublic DataRange DataRange\n\n```",
    "metadata": {
      "id": "strategy",
      "title": "strategy",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy.md",
      "chunkIndex": "code-context-8",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public PositionSize PositionSize\n",
    "metadata": {
      "id": "strategy",
      "title": "strategy",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy.md",
      "chunkIndex": "code-9",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "bol used for a single symbol backtest.\n\n### SingleSymbolMode\n```csharp\npublic bool SingleSymbolMode\n```\nIndicates whether the strategy was run in single symbol mode (`true`) or portfolio backtest mode (`false`).\n\n### DataSetName\n```csharp\npublic string DataSetName\n```\nReturns the name of the DataSet selected for a Portfolio Backtest.\n\n### DataRange\n```csharp\npublic DataRange DataRange\n```\nReturns the date range used for the backtest.\n\n## Position and Risk Management Properties\n\n### PositionSize\n"
    }
  },
  {
    "pageContent": "bol used for a single symbol backtest.\n\n### SingleSymbolMode\n```csharp\npublic bool SingleSymbolMode\n```\nIndicates whether the strategy was run in single symbol mode (`true`) or portfolio backtest mode (`false`).\n\n### DataSetName\n```csharp\npublic string DataSetName\n```\nReturns the name of the DataSet selected for a Portfolio Backtest.\n\n### DataRange\n```csharp\npublic DataRange DataRange\n```\nReturns the date range used for the backtest.\n\n## Position and Risk Management Properties\n\n### PositionSize\n\n\n```csharp\npublic PositionSize PositionSize\n\n```",
    "metadata": {
      "id": "strategy",
      "title": "strategy",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy.md",
      "chunkIndex": "code-context-9",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public bool RetainNSF\n",
    "metadata": {
      "id": "strategy",
      "title": "strategy",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy.md",
      "chunkIndex": "code-10",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "er the strategy was run in single symbol mode (`true`) or portfolio backtest mode (`false`).\n\n### DataSetName\n```csharp\npublic string DataSetName\n```\nReturns the name of the DataSet selected for a Portfolio Backtest.\n\n### DataRange\n```csharp\npublic DataRange DataRange\n```\nReturns the date range used for the backtest.\n\n## Position and Risk Management Properties\n\n### PositionSize\n```csharp\npublic PositionSize PositionSize\n```\nReturns the position sizing method used in the backtest.\n\n### RetainNSF\n"
    }
  },
  {
    "pageContent": "er the strategy was run in single symbol mode (`true`) or portfolio backtest mode (`false`).\n\n### DataSetName\n```csharp\npublic string DataSetName\n```\nReturns the name of the DataSet selected for a Portfolio Backtest.\n\n### DataRange\n```csharp\npublic DataRange DataRange\n```\nReturns the date range used for the backtest.\n\n## Position and Risk Management Properties\n\n### PositionSize\n```csharp\npublic PositionSize PositionSize\n```\nReturns the position sizing method used in the backtest.\n\n### RetainNSF\n\n\n```csharp\npublic bool RetainNSF\n\n```",
    "metadata": {
      "id": "strategy",
      "title": "strategy",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy.md",
      "chunkIndex": "code-context-10",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public bool RunWithPreferredValues\n",
    "metadata": {
      "id": "strategy",
      "title": "strategy",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy.md",
      "chunkIndex": "code-11",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "taSet selected for a Portfolio Backtest.\n\n### DataRange\n```csharp\npublic DataRange DataRange\n```\nReturns the date range used for the backtest.\n\n## Position and Risk Management Properties\n\n### PositionSize\n```csharp\npublic PositionSize PositionSize\n```\nReturns the position sizing method used in the backtest.\n\n### RetainNSF\n```csharp\npublic bool RetainNSF\n```\nDetermines if the strategy should retain Positions with Insufficient Funds.\n\n## Advanced Backtesting Properties\n\n### RunWithPreferredValues\n"
    }
  },
  {
    "pageContent": "taSet selected for a Portfolio Backtest.\n\n### DataRange\n```csharp\npublic DataRange DataRange\n```\nReturns the date range used for the backtest.\n\n## Position and Risk Management Properties\n\n### PositionSize\n```csharp\npublic PositionSize PositionSize\n```\nReturns the position sizing method used in the backtest.\n\n### RetainNSF\n```csharp\npublic bool RetainNSF\n```\nDetermines if the strategy should retain Positions with Insufficient Funds.\n\n## Advanced Backtesting Properties\n\n### RunWithPreferredValues\n\n\n```csharp\npublic bool RunWithPreferredValues\n\n```",
    "metadata": {
      "id": "strategy",
      "title": "strategy",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy.md",
      "chunkIndex": "code-context-11",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public HistoryScale GranularLimitStopScale\n",
    "metadata": {
      "id": "strategy",
      "title": "strategy",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy.md",
      "chunkIndex": "code-12",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "nagement Properties\n\n### PositionSize\n```csharp\npublic PositionSize PositionSize\n```\nReturns the position sizing method used in the backtest.\n\n### RetainNSF\n```csharp\npublic bool RetainNSF\n```\nDetermines if the strategy should retain Positions with Insufficient Funds.\n\n## Advanced Backtesting Properties\n\n### RunWithPreferredValues\n```csharp\npublic bool RunWithPreferredValues\n```\nIndicates whether the strategy should be run using Preferred Values from an optimization.\n\n### GranularLimitStopScale\n"
    }
  },
  {
    "pageContent": "nagement Properties\n\n### PositionSize\n```csharp\npublic PositionSize PositionSize\n```\nReturns the position sizing method used in the backtest.\n\n### RetainNSF\n```csharp\npublic bool RetainNSF\n```\nDetermines if the strategy should retain Positions with Insufficient Funds.\n\n## Advanced Backtesting Properties\n\n### RunWithPreferredValues\n```csharp\npublic bool RunWithPreferredValues\n```\nIndicates whether the strategy should be run using Preferred Values from an optimization.\n\n### GranularLimitStopScale\n\n\n```csharp\npublic HistoryScale GranularLimitStopScale\n\n```",
    "metadata": {
      "id": "strategy",
      "title": "strategy",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy.md",
      "chunkIndex": "code-context-12",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public bool UpdateGranularData\n",
    "metadata": {
      "id": "strategy",
      "title": "strategy",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy.md",
      "chunkIndex": "code-13",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "vanced Backtesting Properties\n\n### RunWithPreferredValues\n```csharp\npublic bool RunWithPreferredValues\n```\nIndicates whether the strategy should be run using Preferred Values from an optimization.\n\n### GranularLimitStopScale\n```csharp\npublic HistoryScale GranularLimitStopScale\n```\nReturns the intraday scale for granular stop/limit processing.\n- If returns `HistoryScale.Daily`, granular processing is disabled\n- For intraday scales, enables more precise stop/limit handling\n\n### UpdateGranularData\n"
    }
  },
  {
    "pageContent": "vanced Backtesting Properties\n\n### RunWithPreferredValues\n```csharp\npublic bool RunWithPreferredValues\n```\nIndicates whether the strategy should be run using Preferred Values from an optimization.\n\n### GranularLimitStopScale\n```csharp\npublic HistoryScale GranularLimitStopScale\n```\nReturns the intraday scale for granular stop/limit processing.\n- If returns `HistoryScale.Daily`, granular processing is disabled\n- For intraday scales, enables more precise stop/limit handling\n\n### UpdateGranularData\n\n\n```csharp\npublic bool UpdateGranularData\n\n```",
    "metadata": {
      "id": "strategy",
      "title": "strategy",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy.md",
      "chunkIndex": "code-context-13",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public class StrategyInspector\n{\n    public void InspectStrategyDetails(Strategy strategy)\n    {\n        Console.WriteLine($\"Strategy Author: {strategy.Author}\");\n        Console.WriteLine($\"Benchmark Symbol: {strategy.Benchmark}\");\n        Console.WriteLine($\"Backtest Mode: {(strategy.SingleSymbolMode ? \"Single Symbol\" : \"Portfolio\")}\");\n        \n        if (strategy.SingleSymbolMode)\n        {\n            Console.WriteLine($\"Test Symbol: {strategy.SingleSymbol}\");\n        }\n        else\n        {\n            Console.WriteLine($\"DataSet: {strategy.DataSetName}\");\n        }\n\n        // Inspect Position Sizing\n        var posSize = strategy.PositionSize;\n        Console.WriteLine($\"Position Size Type: {posSize.PositionSizeType}\");\n        Console.WriteLine($\"Max Open Positions: {posSize.MaxOpenPositions}\");\n    }\n}\n",
    "metadata": {
      "id": "strategy",
      "title": "strategy",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy.md",
      "chunkIndex": "code-14",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "erred Values from an optimization.\n\n### GranularLimitStopScale\n```csharp\npublic HistoryScale GranularLimitStopScale\n```\nReturns the intraday scale for granular stop/limit processing.\n- If returns `HistoryScale.Daily`, granular processing is disabled\n- For intraday scales, enables more precise stop/limit handling\n\n### UpdateGranularData\n```csharp\npublic bool UpdateGranularData\n```\nDetermines if granular data should be updated during the backtest.\n\n## Usage Examples\n\n### Basic Strategy Inspection\n"
    }
  },
  {
    "pageContent": "erred Values from an optimization.\n\n### GranularLimitStopScale\n```csharp\npublic HistoryScale GranularLimitStopScale\n```\nReturns the intraday scale for granular stop/limit processing.\n- If returns `HistoryScale.Daily`, granular processing is disabled\n- For intraday scales, enables more precise stop/limit handling\n\n### UpdateGranularData\n```csharp\npublic bool UpdateGranularData\n```\nDetermines if granular data should be updated during the backtest.\n\n## Usage Examples\n\n### Basic Strategy Inspection\n\n\n```csharp\npublic class StrategyInspector\n{\n    public void InspectStrategyDetails(Strategy strategy)\n    {\n        Console.WriteLine($\"Strategy Author: {strategy.Author}\");\n        Console.WriteLine($\"Benchmark Symbol: {strategy.Benchmark}\");\n        Console.WriteLine($\"Backtest Mode: {(strategy.SingleSymbolMode ? \"Single Symbol\" : \"Portfolio\")}\");\n        \n        if (strategy.SingleSymbolMode)\n        {\n            Console.WriteLine($\"Test Symbol: {strategy.SingleSymbol}\");\n        }\n        else\n        {\n            Console.WriteLine($\"DataSet: {strategy.DataSetName}\");\n        }\n\n        // Inspect Position Sizing\n        var posSize = strategy.PositionSize;\n        Console.WriteLine($\"Position Size Type: {posSize.PositionSizeType}\");\n        Console.WriteLine($\"Max Open Positions: {posSize.MaxOpenPositions}\");\n    }\n}\n\n```",
    "metadata": {
      "id": "strategy",
      "title": "strategy",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy.md",
      "chunkIndex": "code-context-14",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public class BacktestConfigAnalyzer\n{\n    public void AnalyzeStrategyConfig(Strategy strategy)\n    {\n        // Check granular processing settings\n        if (strategy.UpdateGranularData)\n        {\n            var granularScale = strategy.GranularLimitStopScale;\n            Console.WriteLine($\"Granular Processing Scale: {granularScale.Description}\");\n        }\n\n        // Analyze date range and optimization settings\n        Console.WriteLine($\"Backtest Date Range: {strategy.DataRange.StartDate} - {strategy.DataRange.EndDate}\");\n        Console.WriteLine($\"Run with Preferred Values: {strategy.RunWithPreferredValues}\");\n        \n        // Check NSF (Not Sufficient Funds) handling\n        if (strategy.RetainNSF)\n        {\n            Console.WriteLine(\"Strategy retains positions with insufficient funds\");\n        }\n    }\n}\n",
    "metadata": {
      "id": "strategy",
      "title": "strategy",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy.md",
      "chunkIndex": "code-15",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "eSymbolMode)\n        {\n            Console.WriteLine($\"Test Symbol: {strategy.SingleSymbol}\");\n        }\n        else\n        {\n            Console.WriteLine($\"DataSet: {strategy.DataSetName}\");\n        }\n\n        // Inspect Position Sizing\n        var posSize = strategy.PositionSize;\n        Console.WriteLine($\"Position Size Type: {posSize.PositionSizeType}\");\n        Console.WriteLine($\"Max Open Positions: {posSize.MaxOpenPositions}\");\n    }\n}\n```\n\n### Advanced Backtest Configuration Analysis\n"
    }
  },
  {
    "pageContent": "eSymbolMode)\n        {\n            Console.WriteLine($\"Test Symbol: {strategy.SingleSymbol}\");\n        }\n        else\n        {\n            Console.WriteLine($\"DataSet: {strategy.DataSetName}\");\n        }\n\n        // Inspect Position Sizing\n        var posSize = strategy.PositionSize;\n        Console.WriteLine($\"Position Size Type: {posSize.PositionSizeType}\");\n        Console.WriteLine($\"Max Open Positions: {posSize.MaxOpenPositions}\");\n    }\n}\n```\n\n### Advanced Backtest Configuration Analysis\n\n\n```csharp\npublic class BacktestConfigAnalyzer\n{\n    public void AnalyzeStrategyConfig(Strategy strategy)\n    {\n        // Check granular processing settings\n        if (strategy.UpdateGranularData)\n        {\n            var granularScale = strategy.GranularLimitStopScale;\n            Console.WriteLine($\"Granular Processing Scale: {granularScale.Description}\");\n        }\n\n        // Analyze date range and optimization settings\n        Console.WriteLine($\"Backtest Date Range: {strategy.DataRange.StartDate} - {strategy.DataRange.EndDate}\");\n        Console.WriteLine($\"Run with Preferred Values: {strategy.RunWithPreferredValues}\");\n        \n        // Check NSF (Not Sufficient Funds) handling\n        if (strategy.RetainNSF)\n        {\n            Console.WriteLine(\"Strategy retains positions with insufficient funds\");\n        }\n    }\n}\n\n```",
    "metadata": {
      "id": "strategy",
      "title": "strategy",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/strategy.md",
      "chunkIndex": "code-context-15",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "# SymbolInfo Class\n\n**Namespace:** WealthLab.Core  \n**Parent:** Object\n\nThe `SymbolInfo` class represents comprehensive information about a single tradable instrument. It provides detailed metadata about a symbol, which is crucial for accurate backtesting, especially in futures trading modes.\n\n## Overview\n\n`SymbolInfo` instances can be:\n- Created within a Historical Data Provider\n- Defined in WealthLab's Markets & Symbols tool\n- Used to provide precise trading instrument details\n\n## Properties\n\n### DisplayDecimals\n",
    "metadata": {
      "id": "symbol-info",
      "title": "symbol-info",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/symbol-info.md",
      "chunkIndex": 0,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nSpecifies the number of decimal places to use when displaying values for this symbol.\n\n**Example:**\n",
    "metadata": {
      "id": "symbol-info",
      "title": "symbol-info",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/symbol-info.md",
      "chunkIndex": 1,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n### Margin\n",
    "metadata": {
      "id": "symbol-info",
      "title": "symbol-info",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/symbol-info.md",
      "chunkIndex": 2,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nRepresents the funds required to maintain a single share or contract position.\n\n**Notes:**\n- Used only when Futures Mode is enabled\n- Critical for accurate futures trading simulations\n\n### Market\n",
    "metadata": {
      "id": "symbol-info",
      "title": "symbol-info",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/symbol-info.md",
      "chunkIndex": 3,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nContains the market details for the symbol, represented by a `MarketDetails` instance.\n\n### PointValue\n",
    "metadata": {
      "id": "symbol-info",
      "title": "symbol-info",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/symbol-info.md",
      "chunkIndex": 4,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nDescribes the base currency value gained when a single share or contract moves up one point.\n\n**Notes:**\n- Used only in Futures Mode\n- Essential for calculating precise futures trading gains/losses\n\n### QuantityDecimals\n",
    "metadata": {
      "id": "symbol-info",
      "title": "symbol-info",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/symbol-info.md",
      "chunkIndex": 5,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nSpecifies the number of decimal places used when representing position quantities.\n\n**Example:**\n",
    "metadata": {
      "id": "symbol-info",
      "title": "symbol-info",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/symbol-info.md",
      "chunkIndex": 6,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n### Symbol\n",
    "metadata": {
      "id": "symbol-info",
      "title": "symbol-info",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/symbol-info.md",
      "chunkIndex": 7,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nThe unique identifier for the trading instrument.\n\n**Examples:**\n- Stocks: \"MSFT\" (Microsoft Corporation)\n- Futures: \"ES\" (E-mini S&P 500 Futures)\n- Forex: \"EURUSD\" (Euro/US Dollar)\n\n### TickSize\n",
    "metadata": {
      "id": "symbol-info",
      "title": "symbol-info",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/symbol-info.md",
      "chunkIndex": 8,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nRepresents the minimum price granularity for the symbol.\n\n**Notes:**\n- Used only in Futures Mode\n- Determines the smallest price increment possible\n\n## Usage Examples\n\n### Basic Symbol Information Retrieval\n",
    "metadata": {
      "id": "symbol-info",
      "title": "symbol-info",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/symbol-info.md",
      "chunkIndex": 9,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n### Futures Trading Simulation\n",
    "metadata": {
      "id": "symbol-info",
      "title": "symbol-info",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/symbol-info.md",
      "chunkIndex": 10,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n## Best Practices\n\n1. **Accuracy**\n   - Always verify symbol details before trading\n   - Keep symbol information up-to-date\n   - Use market-specific configurations\n\n2. **Futures Trading**\n   - Pay special attention to Margin, PointValue, and TickSize\n   - Understand how these properties impact trading simulations\n\n3. **Display and Quantity Formatting**\n   - Use `DisplayDecimals` and `QuantityDecimals` for consistent presentation\n   - Ensure proper decimal handling in trading algorithms\n\n## Performance Considerations\n\n- `SymbolInfo` instances are typically lightweight\n- Cache and reuse instances when possible\n- Minimize repeated property access in performance-critical code\n\n## Notes\n\n- Critical for accurate backtesting and trading simulations\n- Provides instrument-specific trading metadata\n- Supports both equity and futures trading modes ",
    "metadata": {
      "id": "symbol-info",
      "title": "symbol-info",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/symbol-info.md",
      "chunkIndex": 11,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "public int DisplayDecimals\n",
    "metadata": {
      "id": "symbol-info",
      "title": "symbol-info",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/symbol-info.md",
      "chunkIndex": "code-0",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "**Namespace:** WealthLab.Core  \n**Parent:** Object\n\nThe `SymbolInfo` class represents comprehensive information about a single tradable instrument. It provides detailed metadata about a symbol, which is crucial for accurate backtesting, especially in futures trading modes.\n\n## Overview\n\n`SymbolInfo` instances can be:\n- Created within a Historical Data Provider\n- Defined in WealthLab's Markets & Symbols tool\n- Used to provide precise trading instrument details\n\n## Properties\n\n### DisplayDecimals\n"
    }
  },
  {
    "pageContent": "**Namespace:** WealthLab.Core  \n**Parent:** Object\n\nThe `SymbolInfo` class represents comprehensive information about a single tradable instrument. It provides detailed metadata about a symbol, which is crucial for accurate backtesting, especially in futures trading modes.\n\n## Overview\n\n`SymbolInfo` instances can be:\n- Created within a Historical Data Provider\n- Defined in WealthLab's Markets & Symbols tool\n- Used to provide precise trading instrument details\n\n## Properties\n\n### DisplayDecimals\n\n\n```csharp\npublic int DisplayDecimals\n\n```",
    "metadata": {
      "id": "symbol-info",
      "title": "symbol-info",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/symbol-info.md",
      "chunkIndex": "code-context-0",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "// For a stock trading at $123.4567, different DisplayDecimals settings\nint decimals = symbolInfo.DisplayDecimals;\n// If 2: displays as 123.46\n// If 4: displays as 123.4567\n",
    "metadata": {
      "id": "symbol-info",
      "title": "symbol-info",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/symbol-info.md",
      "chunkIndex": "code-1",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ument. It provides detailed metadata about a symbol, which is crucial for accurate backtesting, especially in futures trading modes.\n\n## Overview\n\n`SymbolInfo` instances can be:\n- Created within a Historical Data Provider\n- Defined in WealthLab's Markets & Symbols tool\n- Used to provide precise trading instrument details\n\n## Properties\n\n### DisplayDecimals\n```csharp\npublic int DisplayDecimals\n```\nSpecifies the number of decimal places to use when displaying values for this symbol.\n\n**Example:**\n"
    }
  },
  {
    "pageContent": "ument. It provides detailed metadata about a symbol, which is crucial for accurate backtesting, especially in futures trading modes.\n\n## Overview\n\n`SymbolInfo` instances can be:\n- Created within a Historical Data Provider\n- Defined in WealthLab's Markets & Symbols tool\n- Used to provide precise trading instrument details\n\n## Properties\n\n### DisplayDecimals\n```csharp\npublic int DisplayDecimals\n```\nSpecifies the number of decimal places to use when displaying values for this symbol.\n\n**Example:**\n\n\n```csharp\n// For a stock trading at $123.4567, different DisplayDecimals settings\nint decimals = symbolInfo.DisplayDecimals;\n// If 2: displays as 123.46\n// If 4: displays as 123.4567\n\n```",
    "metadata": {
      "id": "symbol-info",
      "title": "symbol-info",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/symbol-info.md",
      "chunkIndex": "code-context-1",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public double Margin\n",
    "metadata": {
      "id": "symbol-info",
      "title": "symbol-info",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/symbol-info.md",
      "chunkIndex": "code-2",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "storical Data Provider\n- Defined in WealthLab's Markets & Symbols tool\n- Used to provide precise trading instrument details\n\n## Properties\n\n### DisplayDecimals\n```csharp\npublic int DisplayDecimals\n```\nSpecifies the number of decimal places to use when displaying values for this symbol.\n\n**Example:**\n```csharp\n// For a stock trading at $123.4567, different DisplayDecimals settings\nint decimals = symbolInfo.DisplayDecimals;\n// If 2: displays as 123.46\n// If 4: displays as 123.4567\n```\n\n### Margin\n"
    }
  },
  {
    "pageContent": "storical Data Provider\n- Defined in WealthLab's Markets & Symbols tool\n- Used to provide precise trading instrument details\n\n## Properties\n\n### DisplayDecimals\n```csharp\npublic int DisplayDecimals\n```\nSpecifies the number of decimal places to use when displaying values for this symbol.\n\n**Example:**\n```csharp\n// For a stock trading at $123.4567, different DisplayDecimals settings\nint decimals = symbolInfo.DisplayDecimals;\n// If 2: displays as 123.46\n// If 4: displays as 123.4567\n```\n\n### Margin\n\n\n```csharp\npublic double Margin\n\n```",
    "metadata": {
      "id": "symbol-info",
      "title": "symbol-info",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/symbol-info.md",
      "chunkIndex": "code-context-2",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public MarketDetails Market\n",
    "metadata": {
      "id": "symbol-info",
      "title": "symbol-info",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/symbol-info.md",
      "chunkIndex": "code-3",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "l places to use when displaying values for this symbol.\n\n**Example:**\n```csharp\n// For a stock trading at $123.4567, different DisplayDecimals settings\nint decimals = symbolInfo.DisplayDecimals;\n// If 2: displays as 123.46\n// If 4: displays as 123.4567\n```\n\n### Margin\n```csharp\npublic double Margin\n```\nRepresents the funds required to maintain a single share or contract position.\n\n**Notes:**\n- Used only when Futures Mode is enabled\n- Critical for accurate futures trading simulations\n\n### Market\n"
    }
  },
  {
    "pageContent": "l places to use when displaying values for this symbol.\n\n**Example:**\n```csharp\n// For a stock trading at $123.4567, different DisplayDecimals settings\nint decimals = symbolInfo.DisplayDecimals;\n// If 2: displays as 123.46\n// If 4: displays as 123.4567\n```\n\n### Margin\n```csharp\npublic double Margin\n```\nRepresents the funds required to maintain a single share or contract position.\n\n**Notes:**\n- Used only when Futures Mode is enabled\n- Critical for accurate futures trading simulations\n\n### Market\n\n\n```csharp\npublic MarketDetails Market\n\n```",
    "metadata": {
      "id": "symbol-info",
      "title": "symbol-info",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/symbol-info.md",
      "chunkIndex": "code-context-3",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public double PointValue\n",
    "metadata": {
      "id": "symbol-info",
      "title": "symbol-info",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/symbol-info.md",
      "chunkIndex": "code-4",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ttings\nint decimals = symbolInfo.DisplayDecimals;\n// If 2: displays as 123.46\n// If 4: displays as 123.4567\n```\n\n### Margin\n```csharp\npublic double Margin\n```\nRepresents the funds required to maintain a single share or contract position.\n\n**Notes:**\n- Used only when Futures Mode is enabled\n- Critical for accurate futures trading simulations\n\n### Market\n```csharp\npublic MarketDetails Market\n```\nContains the market details for the symbol, represented by a `MarketDetails` instance.\n\n### PointValue\n"
    }
  },
  {
    "pageContent": "ttings\nint decimals = symbolInfo.DisplayDecimals;\n// If 2: displays as 123.46\n// If 4: displays as 123.4567\n```\n\n### Margin\n```csharp\npublic double Margin\n```\nRepresents the funds required to maintain a single share or contract position.\n\n**Notes:**\n- Used only when Futures Mode is enabled\n- Critical for accurate futures trading simulations\n\n### Market\n```csharp\npublic MarketDetails Market\n```\nContains the market details for the symbol, represented by a `MarketDetails` instance.\n\n### PointValue\n\n\n```csharp\npublic double PointValue\n\n```",
    "metadata": {
      "id": "symbol-info",
      "title": "symbol-info",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/symbol-info.md",
      "chunkIndex": "code-context-4",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public int QuantityDecimals\n",
    "metadata": {
      "id": "symbol-info",
      "title": "symbol-info",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/symbol-info.md",
      "chunkIndex": "code-5",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ly when Futures Mode is enabled\n- Critical for accurate futures trading simulations\n\n### Market\n```csharp\npublic MarketDetails Market\n```\nContains the market details for the symbol, represented by a `MarketDetails` instance.\n\n### PointValue\n```csharp\npublic double PointValue\n```\nDescribes the base currency value gained when a single share or contract moves up one point.\n\n**Notes:**\n- Used only in Futures Mode\n- Essential for calculating precise futures trading gains/losses\n\n### QuantityDecimals\n"
    }
  },
  {
    "pageContent": "ly when Futures Mode is enabled\n- Critical for accurate futures trading simulations\n\n### Market\n```csharp\npublic MarketDetails Market\n```\nContains the market details for the symbol, represented by a `MarketDetails` instance.\n\n### PointValue\n```csharp\npublic double PointValue\n```\nDescribes the base currency value gained when a single share or contract moves up one point.\n\n**Notes:**\n- Used only in Futures Mode\n- Essential for calculating precise futures trading gains/losses\n\n### QuantityDecimals\n\n\n```csharp\npublic int QuantityDecimals\n\n```",
    "metadata": {
      "id": "symbol-info",
      "title": "symbol-info",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/symbol-info.md",
      "chunkIndex": "code-context-5",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "// Determines precision of share/contract quantities\nint qtyDecimals = symbolInfo.QuantityDecimals;\n// If 0: 100 shares\n// If 2: 100.00 shares\n",
    "metadata": {
      "id": "symbol-info",
      "title": "symbol-info",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/symbol-info.md",
      "chunkIndex": "code-6",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ontains the market details for the symbol, represented by a `MarketDetails` instance.\n\n### PointValue\n```csharp\npublic double PointValue\n```\nDescribes the base currency value gained when a single share or contract moves up one point.\n\n**Notes:**\n- Used only in Futures Mode\n- Essential for calculating precise futures trading gains/losses\n\n### QuantityDecimals\n```csharp\npublic int QuantityDecimals\n```\nSpecifies the number of decimal places used when representing position quantities.\n\n**Example:**\n"
    }
  },
  {
    "pageContent": "ontains the market details for the symbol, represented by a `MarketDetails` instance.\n\n### PointValue\n```csharp\npublic double PointValue\n```\nDescribes the base currency value gained when a single share or contract moves up one point.\n\n**Notes:**\n- Used only in Futures Mode\n- Essential for calculating precise futures trading gains/losses\n\n### QuantityDecimals\n```csharp\npublic int QuantityDecimals\n```\nSpecifies the number of decimal places used when representing position quantities.\n\n**Example:**\n\n\n```csharp\n// Determines precision of share/contract quantities\nint qtyDecimals = symbolInfo.QuantityDecimals;\n// If 0: 100 shares\n// If 2: 100.00 shares\n\n```",
    "metadata": {
      "id": "symbol-info",
      "title": "symbol-info",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/symbol-info.md",
      "chunkIndex": "code-context-6",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public string Symbol\n",
    "metadata": {
      "id": "symbol-info",
      "title": "symbol-info",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/symbol-info.md",
      "chunkIndex": "code-7",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "value gained when a single share or contract moves up one point.\n\n**Notes:**\n- Used only in Futures Mode\n- Essential for calculating precise futures trading gains/losses\n\n### QuantityDecimals\n```csharp\npublic int QuantityDecimals\n```\nSpecifies the number of decimal places used when representing position quantities.\n\n**Example:**\n```csharp\n// Determines precision of share/contract quantities\nint qtyDecimals = symbolInfo.QuantityDecimals;\n// If 0: 100 shares\n// If 2: 100.00 shares\n```\n\n### Symbol\n"
    }
  },
  {
    "pageContent": "value gained when a single share or contract moves up one point.\n\n**Notes:**\n- Used only in Futures Mode\n- Essential for calculating precise futures trading gains/losses\n\n### QuantityDecimals\n```csharp\npublic int QuantityDecimals\n```\nSpecifies the number of decimal places used when representing position quantities.\n\n**Example:**\n```csharp\n// Determines precision of share/contract quantities\nint qtyDecimals = symbolInfo.QuantityDecimals;\n// If 0: 100 shares\n// If 2: 100.00 shares\n```\n\n### Symbol\n\n\n```csharp\npublic string Symbol\n\n```",
    "metadata": {
      "id": "symbol-info",
      "title": "symbol-info",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/symbol-info.md",
      "chunkIndex": "code-context-7",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public double TickSize\n",
    "metadata": {
      "id": "symbol-info",
      "title": "symbol-info",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/symbol-info.md",
      "chunkIndex": "code-8",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "``\nSpecifies the number of decimal places used when representing position quantities.\n\n**Example:**\n```csharp\n// Determines precision of share/contract quantities\nint qtyDecimals = symbolInfo.QuantityDecimals;\n// If 0: 100 shares\n// If 2: 100.00 shares\n```\n\n### Symbol\n```csharp\npublic string Symbol\n```\nThe unique identifier for the trading instrument.\n\n**Examples:**\n- Stocks: \"MSFT\" (Microsoft Corporation)\n- Futures: \"ES\" (E-mini S&P 500 Futures)\n- Forex: \"EURUSD\" (Euro/US Dollar)\n\n### TickSize\n"
    }
  },
  {
    "pageContent": "``\nSpecifies the number of decimal places used when representing position quantities.\n\n**Example:**\n```csharp\n// Determines precision of share/contract quantities\nint qtyDecimals = symbolInfo.QuantityDecimals;\n// If 0: 100 shares\n// If 2: 100.00 shares\n```\n\n### Symbol\n```csharp\npublic string Symbol\n```\nThe unique identifier for the trading instrument.\n\n**Examples:**\n- Stocks: \"MSFT\" (Microsoft Corporation)\n- Futures: \"ES\" (E-mini S&P 500 Futures)\n- Forex: \"EURUSD\" (Euro/US Dollar)\n\n### TickSize\n\n\n```csharp\npublic double TickSize\n\n```",
    "metadata": {
      "id": "symbol-info",
      "title": "symbol-info",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/symbol-info.md",
      "chunkIndex": "code-context-8",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public class SymbolInfoAnalyzer\n{\n    public void DisplaySymbolDetails(SymbolInfo symbolInfo)\n    {\n        Console.WriteLine($\"Symbol: {symbolInfo.Symbol}\");\n        Console.WriteLine($\"Market: {symbolInfo.Market.Name}\");\n        Console.WriteLine($\"Display Decimals: {symbolInfo.DisplayDecimals}\");\n        Console.WriteLine($\"Point Value: {symbolInfo.PointValue}\");\n        \n        if (symbolInfo.Market.IsFuturesMarket)\n        {\n            Console.WriteLine($\"Margin: {symbolInfo.Margin}\");\n            Console.WriteLine($\"Tick Size: {symbolInfo.TickSize}\");\n        }\n    }\n}\n",
    "metadata": {
      "id": "symbol-info",
      "title": "symbol-info",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/symbol-info.md",
      "chunkIndex": "code-9",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "0 shares\n```\n\n### Symbol\n```csharp\npublic string Symbol\n```\nThe unique identifier for the trading instrument.\n\n**Examples:**\n- Stocks: \"MSFT\" (Microsoft Corporation)\n- Futures: \"ES\" (E-mini S&P 500 Futures)\n- Forex: \"EURUSD\" (Euro/US Dollar)\n\n### TickSize\n```csharp\npublic double TickSize\n```\nRepresents the minimum price granularity for the symbol.\n\n**Notes:**\n- Used only in Futures Mode\n- Determines the smallest price increment possible\n\n## Usage Examples\n\n### Basic Symbol Information Retrieval\n"
    }
  },
  {
    "pageContent": "0 shares\n```\n\n### Symbol\n```csharp\npublic string Symbol\n```\nThe unique identifier for the trading instrument.\n\n**Examples:**\n- Stocks: \"MSFT\" (Microsoft Corporation)\n- Futures: \"ES\" (E-mini S&P 500 Futures)\n- Forex: \"EURUSD\" (Euro/US Dollar)\n\n### TickSize\n```csharp\npublic double TickSize\n```\nRepresents the minimum price granularity for the symbol.\n\n**Notes:**\n- Used only in Futures Mode\n- Determines the smallest price increment possible\n\n## Usage Examples\n\n### Basic Symbol Information Retrieval\n\n\n```csharp\npublic class SymbolInfoAnalyzer\n{\n    public void DisplaySymbolDetails(SymbolInfo symbolInfo)\n    {\n        Console.WriteLine($\"Symbol: {symbolInfo.Symbol}\");\n        Console.WriteLine($\"Market: {symbolInfo.Market.Name}\");\n        Console.WriteLine($\"Display Decimals: {symbolInfo.DisplayDecimals}\");\n        Console.WriteLine($\"Point Value: {symbolInfo.PointValue}\");\n        \n        if (symbolInfo.Market.IsFuturesMarket)\n        {\n            Console.WriteLine($\"Margin: {symbolInfo.Margin}\");\n            Console.WriteLine($\"Tick Size: {symbolInfo.TickSize}\");\n        }\n    }\n}\n\n```",
    "metadata": {
      "id": "symbol-info",
      "title": "symbol-info",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/symbol-info.md",
      "chunkIndex": "code-context-9",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public class FuturesTradeSimulator\n{\n    public double CalculateProfitLoss(\n        SymbolInfo symbolInfo, \n        double entryPrice, \n        double exitPrice, \n        int quantity)\n    {\n        // Precise calculation considering point value\n        double pointMove = exitPrice - entryPrice;\n        double profitLoss = pointMove * symbolInfo.PointValue * quantity;\n        \n        return profitLoss;\n    }\n}\n",
    "metadata": {
      "id": "symbol-info",
      "title": "symbol-info",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/symbol-info.md",
      "chunkIndex": "code-10",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "eLine($\"Symbol: {symbolInfo.Symbol}\");\n        Console.WriteLine($\"Market: {symbolInfo.Market.Name}\");\n        Console.WriteLine($\"Display Decimals: {symbolInfo.DisplayDecimals}\");\n        Console.WriteLine($\"Point Value: {symbolInfo.PointValue}\");\n        \n        if (symbolInfo.Market.IsFuturesMarket)\n        {\n            Console.WriteLine($\"Margin: {symbolInfo.Margin}\");\n            Console.WriteLine($\"Tick Size: {symbolInfo.TickSize}\");\n        }\n    }\n}\n```\n\n### Futures Trading Simulation\n"
    }
  },
  {
    "pageContent": "eLine($\"Symbol: {symbolInfo.Symbol}\");\n        Console.WriteLine($\"Market: {symbolInfo.Market.Name}\");\n        Console.WriteLine($\"Display Decimals: {symbolInfo.DisplayDecimals}\");\n        Console.WriteLine($\"Point Value: {symbolInfo.PointValue}\");\n        \n        if (symbolInfo.Market.IsFuturesMarket)\n        {\n            Console.WriteLine($\"Margin: {symbolInfo.Margin}\");\n            Console.WriteLine($\"Tick Size: {symbolInfo.TickSize}\");\n        }\n    }\n}\n```\n\n### Futures Trading Simulation\n\n\n```csharp\npublic class FuturesTradeSimulator\n{\n    public double CalculateProfitLoss(\n        SymbolInfo symbolInfo, \n        double entryPrice, \n        double exitPrice, \n        int quantity)\n    {\n        // Precise calculation considering point value\n        double pointMove = exitPrice - entryPrice;\n        double profitLoss = pointMove * symbolInfo.PointValue * quantity;\n        \n        return profitLoss;\n    }\n}\n\n```",
    "metadata": {
      "id": "symbol-info",
      "title": "symbol-info",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/symbol-info.md",
      "chunkIndex": "code-context-10",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "# TabPage Class\n\n**Namespace:** WealthLab.WPF  \n**Parent:** UserControl\n\nThe `TabPage` class is a specialized user interface component designed for creating custom tab pages within the WealthLab 8 Preferences tool. It provides a flexible framework for extensions to add custom configuration and settings pages.\n\n## Overview\n\n`TabPage` enables WL8 Extension developers to:\n- Create custom preference pages\n- Add dynamic tabs to the Preferences tool\n- Implement custom initialization and cleanup logic\n- Support expert mode toggles\n\n## Methods and Properties\n\n### Cleanup\n",
    "metadata": {
      "id": "tab-page",
      "title": "tab-page",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/tab-page.md",
      "chunkIndex": 0,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nPerforms cleanup operations when the tab page is closed.\n\n**Use Cases:**\n- Release resources\n- Save unsaved settings\n- Perform final configuration tasks\n\n**Example:**\n",
    "metadata": {
      "id": "tab-page",
      "title": "tab-page",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/tab-page.md",
      "chunkIndex": 1,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n### HelpToken\n",
    "metadata": {
      "id": "tab-page",
      "title": "tab-page",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/tab-page.md",
      "chunkIndex": 2,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nSpecifies the help page to be opened when the user requests help from this tab page.\n\n**Default Behavior:** Returns `TabText`\n\n**Example:**\n",
    "metadata": {
      "id": "tab-page",
      "title": "tab-page",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/tab-page.md",
      "chunkIndex": 3,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n### Initialize\n",
    "metadata": {
      "id": "tab-page",
      "title": "tab-page",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/tab-page.md",
      "chunkIndex": 4,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nPerforms initialization tasks when the tab page is first opened.\n\n**Use Cases:**\n- Load initial configurations\n- Set up UI components\n- Prepare data sources\n\n**Example:**\n",
    "metadata": {
      "id": "tab-page",
      "title": "tab-page",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/tab-page.md",
      "chunkIndex": 5,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n### SetExpertMode\n",
    "metadata": {
      "id": "tab-page",
      "title": "tab-page",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/tab-page.md",
      "chunkIndex": 6,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nAdjusts the user interface based on the current Expert Mode setting.\n\n**Use Cases:**\n- Show/hide advanced configuration options\n- Enable/disable complex settings\n- Modify UI complexity\n\n**Example:**\n",
    "metadata": {
      "id": "tab-page",
      "title": "tab-page",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/tab-page.md",
      "chunkIndex": 7,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n### TabText\n",
    "metadata": {
      "id": "tab-page",
      "title": "tab-page",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/tab-page.md",
      "chunkIndex": 8,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nDefines the text displayed on the tab in the Preferences tool.\n\n**Example:**\n",
    "metadata": {
      "id": "tab-page",
      "title": "tab-page",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/tab-page.md",
      "chunkIndex": 9,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n## Usage Example: Creating a Custom Preferences Tab\n\n",
    "metadata": {
      "id": "tab-page",
      "title": "tab-page",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/tab-page.md",
      "chunkIndex": 10,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n## Best Practices\n\n1. **Initialization**\n   - Keep `Initialize()` method lightweight\n   - Load configurations efficiently\n   - Handle potential loading errors gracefully\n\n2. **Expert Mode**\n   - Provide meaningful UI changes\n   - Don't hide critical configuration options\n   - Maintain usability in both standard and expert modes\n\n3. **Cleanup**\n   - Always save important configurations\n   - Release resources properly\n   - Handle potential save failures\n\n4. **Help Integration**\n   - Provide clear, context-specific help tokens\n   - Ensure help documentation is comprehensive\n\n## Performance Considerations\n\n- Minimize heavy processing in `Initialize()` and `Cleanup()`\n- Use asynchronous loading for complex configurations\n- Cache configuration data when possible\n\n## Notes\n\n- Part of WealthLab 8's extensible preferences system\n- Enables rich, customizable extension configuration\n- Supports dynamic UI adaptation\n- Integrates seamlessly with WL8 Preferences tool\n\n## Requirements\n\n- Basic WPF knowledge\n- Understanding of WealthLab 8 extension architecture\n- Familiarity with user interface design principles ",
    "metadata": {
      "id": "tab-page",
      "title": "tab-page",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/tab-page.md",
      "chunkIndex": 11,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "public virtual void Cleanup()\n",
    "metadata": {
      "id": "tab-page",
      "title": "tab-page",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/tab-page.md",
      "chunkIndex": "code-0",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "l\n\nThe `TabPage` class is a specialized user interface component designed for creating custom tab pages within the WealthLab 8 Preferences tool. It provides a flexible framework for extensions to add custom configuration and settings pages.\n\n## Overview\n\n`TabPage` enables WL8 Extension developers to:\n- Create custom preference pages\n- Add dynamic tabs to the Preferences tool\n- Implement custom initialization and cleanup logic\n- Support expert mode toggles\n\n## Methods and Properties\n\n### Cleanup\n"
    }
  },
  {
    "pageContent": "l\n\nThe `TabPage` class is a specialized user interface component designed for creating custom tab pages within the WealthLab 8 Preferences tool. It provides a flexible framework for extensions to add custom configuration and settings pages.\n\n## Overview\n\n`TabPage` enables WL8 Extension developers to:\n- Create custom preference pages\n- Add dynamic tabs to the Preferences tool\n- Implement custom initialization and cleanup logic\n- Support expert mode toggles\n\n## Methods and Properties\n\n### Cleanup\n\n\n```csharp\npublic virtual void Cleanup()\n\n```",
    "metadata": {
      "id": "tab-page",
      "title": "tab-page",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/tab-page.md",
      "chunkIndex": "code-context-0",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public override void Cleanup()\n{\n    // Release any resources\n    _configurationManager?.Dispose();\n    \n    // Save any pending changes\n    SavePendingConfiguration();\n}\n",
    "metadata": {
      "id": "tab-page",
      "title": "tab-page",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/tab-page.md",
      "chunkIndex": "code-1",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "iguration and settings pages.\n\n## Overview\n\n`TabPage` enables WL8 Extension developers to:\n- Create custom preference pages\n- Add dynamic tabs to the Preferences tool\n- Implement custom initialization and cleanup logic\n- Support expert mode toggles\n\n## Methods and Properties\n\n### Cleanup\n```csharp\npublic virtual void Cleanup()\n```\nPerforms cleanup operations when the tab page is closed.\n\n**Use Cases:**\n- Release resources\n- Save unsaved settings\n- Perform final configuration tasks\n\n**Example:**\n"
    }
  },
  {
    "pageContent": "iguration and settings pages.\n\n## Overview\n\n`TabPage` enables WL8 Extension developers to:\n- Create custom preference pages\n- Add dynamic tabs to the Preferences tool\n- Implement custom initialization and cleanup logic\n- Support expert mode toggles\n\n## Methods and Properties\n\n### Cleanup\n```csharp\npublic virtual void Cleanup()\n```\nPerforms cleanup operations when the tab page is closed.\n\n**Use Cases:**\n- Release resources\n- Save unsaved settings\n- Perform final configuration tasks\n\n**Example:**\n\n\n```csharp\npublic override void Cleanup()\n{\n    // Release any resources\n    _configurationManager?.Dispose();\n    \n    // Save any pending changes\n    SavePendingConfiguration();\n}\n\n```",
    "metadata": {
      "id": "tab-page",
      "title": "tab-page",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/tab-page.md",
      "chunkIndex": "code-context-1",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public virtual string HelpToken\n",
    "metadata": {
      "id": "tab-page",
      "title": "tab-page",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/tab-page.md",
      "chunkIndex": "code-2",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": " and cleanup logic\n- Support expert mode toggles\n\n## Methods and Properties\n\n### Cleanup\n```csharp\npublic virtual void Cleanup()\n```\nPerforms cleanup operations when the tab page is closed.\n\n**Use Cases:**\n- Release resources\n- Save unsaved settings\n- Perform final configuration tasks\n\n**Example:**\n```csharp\npublic override void Cleanup()\n{\n    // Release any resources\n    _configurationManager?.Dispose();\n    \n    // Save any pending changes\n    SavePendingConfiguration();\n}\n```\n\n### HelpToken\n"
    }
  },
  {
    "pageContent": " and cleanup logic\n- Support expert mode toggles\n\n## Methods and Properties\n\n### Cleanup\n```csharp\npublic virtual void Cleanup()\n```\nPerforms cleanup operations when the tab page is closed.\n\n**Use Cases:**\n- Release resources\n- Save unsaved settings\n- Perform final configuration tasks\n\n**Example:**\n```csharp\npublic override void Cleanup()\n{\n    // Release any resources\n    _configurationManager?.Dispose();\n    \n    // Save any pending changes\n    SavePendingConfiguration();\n}\n```\n\n### HelpToken\n\n\n```csharp\npublic virtual string HelpToken\n\n```",
    "metadata": {
      "id": "tab-page",
      "title": "tab-page",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/tab-page.md",
      "chunkIndex": "code-context-2",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public override string HelpToken => \"CustomExtensionHelp\";\n",
    "metadata": {
      "id": "tab-page",
      "title": "tab-page",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/tab-page.md",
      "chunkIndex": "code-3",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ed.\n\n**Use Cases:**\n- Release resources\n- Save unsaved settings\n- Perform final configuration tasks\n\n**Example:**\n```csharp\npublic override void Cleanup()\n{\n    // Release any resources\n    _configurationManager?.Dispose();\n    \n    // Save any pending changes\n    SavePendingConfiguration();\n}\n```\n\n### HelpToken\n```csharp\npublic virtual string HelpToken\n```\nSpecifies the help page to be opened when the user requests help from this tab page.\n\n**Default Behavior:** Returns `TabText`\n\n**Example:**\n"
    }
  },
  {
    "pageContent": "ed.\n\n**Use Cases:**\n- Release resources\n- Save unsaved settings\n- Perform final configuration tasks\n\n**Example:**\n```csharp\npublic override void Cleanup()\n{\n    // Release any resources\n    _configurationManager?.Dispose();\n    \n    // Save any pending changes\n    SavePendingConfiguration();\n}\n```\n\n### HelpToken\n```csharp\npublic virtual string HelpToken\n```\nSpecifies the help page to be opened when the user requests help from this tab page.\n\n**Default Behavior:** Returns `TabText`\n\n**Example:**\n\n\n```csharp\npublic override string HelpToken => \"CustomExtensionHelp\";\n\n```",
    "metadata": {
      "id": "tab-page",
      "title": "tab-page",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/tab-page.md",
      "chunkIndex": "code-context-3",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public virtual void Initialize()\n",
    "metadata": {
      "id": "tab-page",
      "title": "tab-page",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/tab-page.md",
      "chunkIndex": "code-4",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "tion tasks\n\n**Example:**\n```csharp\npublic override void Cleanup()\n{\n    // Release any resources\n    _configurationManager?.Dispose();\n    \n    // Save any pending changes\n    SavePendingConfiguration();\n}\n```\n\n### HelpToken\n```csharp\npublic virtual string HelpToken\n```\nSpecifies the help page to be opened when the user requests help from this tab page.\n\n**Default Behavior:** Returns `TabText`\n\n**Example:**\n```csharp\npublic override string HelpToken => \"CustomExtensionHelp\";\n```\n\n### Initialize\n"
    }
  },
  {
    "pageContent": "tion tasks\n\n**Example:**\n```csharp\npublic override void Cleanup()\n{\n    // Release any resources\n    _configurationManager?.Dispose();\n    \n    // Save any pending changes\n    SavePendingConfiguration();\n}\n```\n\n### HelpToken\n```csharp\npublic virtual string HelpToken\n```\nSpecifies the help page to be opened when the user requests help from this tab page.\n\n**Default Behavior:** Returns `TabText`\n\n**Example:**\n```csharp\npublic override string HelpToken => \"CustomExtensionHelp\";\n```\n\n### Initialize\n\n\n```csharp\npublic virtual void Initialize()\n\n```",
    "metadata": {
      "id": "tab-page",
      "title": "tab-page",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/tab-page.md",
      "chunkIndex": "code-context-4",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public override void Initialize()\n{\n    // Load saved configurations\n    LoadSavedSettings();\n    \n    // Initialize UI components\n    SetupUserInterface();\n    \n    // Populate dropdown or list controls\n    PopulateConfigurationOptions();\n}\n",
    "metadata": {
      "id": "tab-page",
      "title": "tab-page",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/tab-page.md",
      "chunkIndex": "code-5",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "pToken\n```csharp\npublic virtual string HelpToken\n```\nSpecifies the help page to be opened when the user requests help from this tab page.\n\n**Default Behavior:** Returns `TabText`\n\n**Example:**\n```csharp\npublic override string HelpToken => \"CustomExtensionHelp\";\n```\n\n### Initialize\n```csharp\npublic virtual void Initialize()\n```\nPerforms initialization tasks when the tab page is first opened.\n\n**Use Cases:**\n- Load initial configurations\n- Set up UI components\n- Prepare data sources\n\n**Example:**\n"
    }
  },
  {
    "pageContent": "pToken\n```csharp\npublic virtual string HelpToken\n```\nSpecifies the help page to be opened when the user requests help from this tab page.\n\n**Default Behavior:** Returns `TabText`\n\n**Example:**\n```csharp\npublic override string HelpToken => \"CustomExtensionHelp\";\n```\n\n### Initialize\n```csharp\npublic virtual void Initialize()\n```\nPerforms initialization tasks when the tab page is first opened.\n\n**Use Cases:**\n- Load initial configurations\n- Set up UI components\n- Prepare data sources\n\n**Example:**\n\n\n```csharp\npublic override void Initialize()\n{\n    // Load saved configurations\n    LoadSavedSettings();\n    \n    // Initialize UI components\n    SetupUserInterface();\n    \n    // Populate dropdown or list controls\n    PopulateConfigurationOptions();\n}\n\n```",
    "metadata": {
      "id": "tab-page",
      "title": "tab-page",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/tab-page.md",
      "chunkIndex": "code-context-5",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public virtual void SetExpertMode(bool expertModeOn)\n",
    "metadata": {
      "id": "tab-page",
      "title": "tab-page",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/tab-page.md",
      "chunkIndex": "code-6",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ialize\n```csharp\npublic virtual void Initialize()\n```\nPerforms initialization tasks when the tab page is first opened.\n\n**Use Cases:**\n- Load initial configurations\n- Set up UI components\n- Prepare data sources\n\n**Example:**\n```csharp\npublic override void Initialize()\n{\n    // Load saved configurations\n    LoadSavedSettings();\n    \n    // Initialize UI components\n    SetupUserInterface();\n    \n    // Populate dropdown or list controls\n    PopulateConfigurationOptions();\n}\n```\n\n### SetExpertMode\n"
    }
  },
  {
    "pageContent": "ialize\n```csharp\npublic virtual void Initialize()\n```\nPerforms initialization tasks when the tab page is first opened.\n\n**Use Cases:**\n- Load initial configurations\n- Set up UI components\n- Prepare data sources\n\n**Example:**\n```csharp\npublic override void Initialize()\n{\n    // Load saved configurations\n    LoadSavedSettings();\n    \n    // Initialize UI components\n    SetupUserInterface();\n    \n    // Populate dropdown or list controls\n    PopulateConfigurationOptions();\n}\n```\n\n### SetExpertMode\n\n\n```csharp\npublic virtual void SetExpertMode(bool expertModeOn)\n\n```",
    "metadata": {
      "id": "tab-page",
      "title": "tab-page",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/tab-page.md",
      "chunkIndex": "code-context-6",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public override void SetExpertMode(bool expertModeOn)\n{\n    // Show advanced settings in expert mode\n    advancedSettingsPanel.Visibility = expertModeOn \n        ? Visibility.Visible \n        : Visibility.Collapsed;\n    \n    // Enable/disable complex configuration options\n    complexConfigurationOption.IsEnabled = expertModeOn;\n}\n",
    "metadata": {
      "id": "tab-page",
      "title": "tab-page",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/tab-page.md",
      "chunkIndex": "code-7",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "()\n{\n    // Load saved configurations\n    LoadSavedSettings();\n    \n    // Initialize UI components\n    SetupUserInterface();\n    \n    // Populate dropdown or list controls\n    PopulateConfigurationOptions();\n}\n```\n\n### SetExpertMode\n```csharp\npublic virtual void SetExpertMode(bool expertModeOn)\n```\nAdjusts the user interface based on the current Expert Mode setting.\n\n**Use Cases:**\n- Show/hide advanced configuration options\n- Enable/disable complex settings\n- Modify UI complexity\n\n**Example:**\n"
    }
  },
  {
    "pageContent": "()\n{\n    // Load saved configurations\n    LoadSavedSettings();\n    \n    // Initialize UI components\n    SetupUserInterface();\n    \n    // Populate dropdown or list controls\n    PopulateConfigurationOptions();\n}\n```\n\n### SetExpertMode\n```csharp\npublic virtual void SetExpertMode(bool expertModeOn)\n```\nAdjusts the user interface based on the current Expert Mode setting.\n\n**Use Cases:**\n- Show/hide advanced configuration options\n- Enable/disable complex settings\n- Modify UI complexity\n\n**Example:**\n\n\n```csharp\npublic override void SetExpertMode(bool expertModeOn)\n{\n    // Show advanced settings in expert mode\n    advancedSettingsPanel.Visibility = expertModeOn \n        ? Visibility.Visible \n        : Visibility.Collapsed;\n    \n    // Enable/disable complex configuration options\n    complexConfigurationOption.IsEnabled = expertModeOn;\n}\n\n```",
    "metadata": {
      "id": "tab-page",
      "title": "tab-page",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/tab-page.md",
      "chunkIndex": "code-context-7",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public virtual string TabText\n",
    "metadata": {
      "id": "tab-page",
      "title": "tab-page",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/tab-page.md",
      "chunkIndex": "code-8",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "e setting.\n\n**Use Cases:**\n- Show/hide advanced configuration options\n- Enable/disable complex settings\n- Modify UI complexity\n\n**Example:**\n```csharp\npublic override void SetExpertMode(bool expertModeOn)\n{\n    // Show advanced settings in expert mode\n    advancedSettingsPanel.Visibility = expertModeOn \n        ? Visibility.Visible \n        : Visibility.Collapsed;\n    \n    // Enable/disable complex configuration options\n    complexConfigurationOption.IsEnabled = expertModeOn;\n}\n```\n\n### TabText\n"
    }
  },
  {
    "pageContent": "e setting.\n\n**Use Cases:**\n- Show/hide advanced configuration options\n- Enable/disable complex settings\n- Modify UI complexity\n\n**Example:**\n```csharp\npublic override void SetExpertMode(bool expertModeOn)\n{\n    // Show advanced settings in expert mode\n    advancedSettingsPanel.Visibility = expertModeOn \n        ? Visibility.Visible \n        : Visibility.Collapsed;\n    \n    // Enable/disable complex configuration options\n    complexConfigurationOption.IsEnabled = expertModeOn;\n}\n```\n\n### TabText\n\n\n```csharp\npublic virtual string TabText\n\n```",
    "metadata": {
      "id": "tab-page",
      "title": "tab-page",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/tab-page.md",
      "chunkIndex": "code-context-8",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public override string TabText => \"My Extension Settings\";\n",
    "metadata": {
      "id": "tab-page",
      "title": "tab-page",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/tab-page.md",
      "chunkIndex": "code-9",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "exity\n\n**Example:**\n```csharp\npublic override void SetExpertMode(bool expertModeOn)\n{\n    // Show advanced settings in expert mode\n    advancedSettingsPanel.Visibility = expertModeOn \n        ? Visibility.Visible \n        : Visibility.Collapsed;\n    \n    // Enable/disable complex configuration options\n    complexConfigurationOption.IsEnabled = expertModeOn;\n}\n```\n\n### TabText\n```csharp\npublic virtual string TabText\n```\nDefines the text displayed on the tab in the Preferences tool.\n\n**Example:**\n"
    }
  },
  {
    "pageContent": "exity\n\n**Example:**\n```csharp\npublic override void SetExpertMode(bool expertModeOn)\n{\n    // Show advanced settings in expert mode\n    advancedSettingsPanel.Visibility = expertModeOn \n        ? Visibility.Visible \n        : Visibility.Collapsed;\n    \n    // Enable/disable complex configuration options\n    complexConfigurationOption.IsEnabled = expertModeOn;\n}\n```\n\n### TabText\n```csharp\npublic virtual string TabText\n```\nDefines the text displayed on the tab in the Preferences tool.\n\n**Example:**\n\n\n```csharp\npublic override string TabText => \"My Extension Settings\";\n\n```",
    "metadata": {
      "id": "tab-page",
      "title": "tab-page",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/tab-page.md",
      "chunkIndex": "code-context-9",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public class MyExtensionPreferencesPage : TabPage\n{\n    private TextBox apiKeyTextBox;\n    private CheckBox enableFeatureCheckBox;\n    \n    public MyExtensionPreferencesPage()\n    {\n        // Initialize UI components\n        InitializeComponent();\n    }\n    \n    public override string TabText => \"My Extension\";\n    public override string HelpToken => \"MyExtensionHelp\";\n    \n    public override void Initialize()\n    {\n        // Load saved configuration\n        apiKeyTextBox.Text = LoadSavedApiKey();\n        enableFeatureCheckBox.IsChecked = LoadSavedFeatureState();\n    }\n    \n    public override void Cleanup()\n    {\n        // Save configuration before closing\n        SaveApiKey(apiKeyTextBox.Text);\n        SaveFeatureState(enableFeatureCheckBox.IsChecked ?? false);\n    }\n    \n    public override void SetExpertMode(bool expertModeOn)\n    {\n        // Show advanced settings in expert mode\n        advancedSettingsPanel.Visibility = expertModeOn \n            ? Visibility.Visible \n            : Visibility.Collapsed;\n    }\n    \n    private void InitializeComponent()\n    {\n        // WPF UI initialization logic\n        apiKeyTextBox = new TextBox();\n        enableFeatureCheckBox = new CheckBox();\n        // ... additional UI setup\n    }\n}\n",
    "metadata": {
      "id": "tab-page",
      "title": "tab-page",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/tab-page.md",
      "chunkIndex": "code-10",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ode\n    advancedSettingsPanel.Visibility = expertModeOn \n        ? Visibility.Visible \n        : Visibility.Collapsed;\n    \n    // Enable/disable complex configuration options\n    complexConfigurationOption.IsEnabled = expertModeOn;\n}\n```\n\n### TabText\n```csharp\npublic virtual string TabText\n```\nDefines the text displayed on the tab in the Preferences tool.\n\n**Example:**\n```csharp\npublic override string TabText => \"My Extension Settings\";\n```\n\n## Usage Example: Creating a Custom Preferences Tab\n\n"
    }
  },
  {
    "pageContent": "ode\n    advancedSettingsPanel.Visibility = expertModeOn \n        ? Visibility.Visible \n        : Visibility.Collapsed;\n    \n    // Enable/disable complex configuration options\n    complexConfigurationOption.IsEnabled = expertModeOn;\n}\n```\n\n### TabText\n```csharp\npublic virtual string TabText\n```\nDefines the text displayed on the tab in the Preferences tool.\n\n**Example:**\n```csharp\npublic override string TabText => \"My Extension Settings\";\n```\n\n## Usage Example: Creating a Custom Preferences Tab\n\n\n\n```csharp\npublic class MyExtensionPreferencesPage : TabPage\n{\n    private TextBox apiKeyTextBox;\n    private CheckBox enableFeatureCheckBox;\n    \n    public MyExtensionPreferencesPage()\n    {\n        // Initialize UI components\n        InitializeComponent();\n    }\n    \n    public override string TabText => \"My Extension\";\n    public override string HelpToken => \"MyExtensionHelp\";\n    \n    public override void Initialize()\n    {\n        // Load saved configuration\n        apiKeyTextBox.Text = LoadSavedApiKey();\n        enableFeatureCheckBox.IsChecked = LoadSavedFeatureState();\n    }\n    \n    public override void Cleanup()\n    {\n        // Save configuration before closing\n        SaveApiKey(apiKeyTextBox.Text);\n        SaveFeatureState(enableFeatureCheckBox.IsChecked ?? false);\n    }\n    \n    public override void SetExpertMode(bool expertModeOn)\n    {\n        // Show advanced settings in expert mode\n        advancedSettingsPanel.Visibility = expertModeOn \n            ? Visibility.Visible \n            : Visibility.Collapsed;\n    }\n    \n    private void InitializeComponent()\n    {\n        // WPF UI initialization logic\n        apiKeyTextBox = new TextBox();\n        enableFeatureCheckBox = new CheckBox();\n        // ... additional UI setup\n    }\n}\n\n```",
    "metadata": {
      "id": "tab-page",
      "title": "tab-page",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/tab-page.md",
      "chunkIndex": "code-context-10",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "# TimeSeriesBase Class\n\n**Namespace:** WealthLab.Core  \n**Parent:** DateSynchedList<double>  \n**Descendants:** BarHistory, TimeSeries\n\nThe `TimeSeriesBase` is an abstract base class that provides fundamental infrastructure for working with time-synchronized data series in WealthLab. It serves as the foundation for key classes like `TimeSeries` and `BarHistory`, enabling synchronized access to time-based data.\n\n## Overview\n\n`TimeSeriesBase` manages a collection of data points keyed to a list of DateTimes, allowing seamless interaction with time series data across different WealthLab components.\n\n## Key Characteristics\n\n- Maintains a synchronized list of DateTimes\n- Provides caching mechanism for performance optimization\n- Supports ad-hoc data storage\n- Enables flexible time-based data access and manipulation\n\n## Properties\n\n### Cache\n",
    "metadata": {
      "id": "time-series-base",
      "title": "time-series-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series-base.md",
      "chunkIndex": 0,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nA thread-safe cache dictionary for storing objects during a backtest run.\n\n**Usage Example:**\n",
    "metadata": {
      "id": "time-series-base",
      "title": "time-series-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series-base.md",
      "chunkIndex": 1,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n### Count\n",
    "metadata": {
      "id": "time-series-base",
      "title": "time-series-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series-base.md",
      "chunkIndex": 2,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the number of items in the time series.\n\n**Usage Example:**\n",
    "metadata": {
      "id": "time-series-base",
      "title": "time-series-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series-base.md",
      "chunkIndex": 3,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n### DateTimes\n",
    "metadata": {
      "id": "time-series-base",
      "title": "time-series-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series-base.md",
      "chunkIndex": 4,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nA list of DateTime objects representing the timestamp for each data point.\n\n**Usage Example:**\n",
    "metadata": {
      "id": "time-series-base",
      "title": "time-series-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series-base.md",
      "chunkIndex": 5,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n### EndDate\n",
    "metadata": {
      "id": "time-series-base",
      "title": "time-series-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series-base.md",
      "chunkIndex": 6,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the last DateTime in the series. Returns `DateTime.MaxValue` if the series is empty.\n\n**Usage Example:**\n",
    "metadata": {
      "id": "time-series-base",
      "title": "time-series-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series-base.md",
      "chunkIndex": 7,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n### StartDate\n",
    "metadata": {
      "id": "time-series-base",
      "title": "time-series-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series-base.md",
      "chunkIndex": 8,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the first DateTime in the series. Returns `DateTime.MinValue` if the series is empty.\n\n**Usage Example:**\n",
    "metadata": {
      "id": "time-series-base",
      "title": "time-series-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series-base.md",
      "chunkIndex": 9,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n### TimeSpan\n",
    "metadata": {
      "id": "time-series-base",
      "title": "time-series-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series-base.md",
      "chunkIndex": 10,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the total time range of the DateTimes. Returns zero TimeSpan if fewer than two DateTimes exist.\n\n**Usage Example:**\n",
    "metadata": {
      "id": "time-series-base",
      "title": "time-series-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series-base.md",
      "chunkIndex": 11,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n### UserData\n",
    "metadata": {
      "id": "time-series-base",
      "title": "time-series-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series-base.md",
      "chunkIndex": 12,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nAllows storing ad-hoc data with the time series instance.\n\n**Usage Example:**\n",
    "metadata": {
      "id": "time-series-base",
      "title": "time-series-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series-base.md",
      "chunkIndex": 13,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n### UserDataAsDouble and UserDataAsInt\n",
    "metadata": {
      "id": "time-series-base",
      "title": "time-series-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series-base.md",
      "chunkIndex": 14,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nConvenient accessors for storing and retrieving numeric user data.\n\n**Usage Example:**\n",
    "metadata": {
      "id": "time-series-base",
      "title": "time-series-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series-base.md",
      "chunkIndex": 15,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n## Methods\n\n### IndexOf\n",
    "metadata": {
      "id": "time-series-base",
      "title": "time-series-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series-base.md",
      "chunkIndex": 16,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nFinds the index of a specific DateTime in the series.\n\n**Usage Example:**\n",
    "metadata": {
      "id": "time-series-base",
      "title": "time-series-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series-base.md",
      "chunkIndex": 17,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n### IsUpToDate\n",
    "metadata": {
      "id": "time-series-base",
      "title": "time-series-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series-base.md",
      "chunkIndex": 18,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nChecks if historical data is current, considering market holidays and trading times.\n\n**Usage Example:**\n",
    "metadata": {
      "id": "time-series-base",
      "title": "time-series-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series-base.md",
      "chunkIndex": 19,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n## Best Practices\n\n1. **Caching**\n   - Use the `Cache` for storing computationally expensive derived data\n   - Implement cache invalidation strategies\n   - Be mindful of memory usage\n\n2. **Time Series Manipulation**\n   - Always check `Count` before accessing data\n   - Use `IndexOf` for precise date lookups\n   - Leverage `StartDate` and `EndDate` for data range validation\n\n3. **Performance Considerations**\n   - Minimize repeated calls to expensive methods\n   - Use `UserData` judiciously\n   - Prefer typed accessors like `UserDataAsDouble`\n\n## Notes\n\n- Fundamental to WealthLab's time-based data handling\n- Supports both equity and futures market data\n- Provides flexible, synchronized data access\n\n## Inheritance and Polymorphism\n\nDerived classes:\n- `TimeSeries`: Manages series of double values\n- `BarHistory`: Represents historical OHLCV data\n\n## Example: Advanced Time Series Usage\n\n",
    "metadata": {
      "id": "time-series-base",
      "title": "time-series-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series-base.md",
      "chunkIndex": 20,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n## Cautions\n\n- Ensure thread safety when using `Cache`\n- Be aware of memory implications of storing large objects\n- Validate data before accessing to prevent null reference exceptions ",
    "metadata": {
      "id": "time-series-base",
      "title": "time-series-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series-base.md",
      "chunkIndex": 21,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "public ConcurrentDictionary<string, object> Cache\n",
    "metadata": {
      "id": "time-series-base",
      "title": "time-series-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series-base.md",
      "chunkIndex": "code-0",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": " and `BarHistory`, enabling synchronized access to time-based data.\n\n## Overview\n\n`TimeSeriesBase` manages a collection of data points keyed to a list of DateTimes, allowing seamless interaction with time series data across different WealthLab components.\n\n## Key Characteristics\n\n- Maintains a synchronized list of DateTimes\n- Provides caching mechanism for performance optimization\n- Supports ad-hoc data storage\n- Enables flexible time-based data access and manipulation\n\n## Properties\n\n### Cache\n"
    }
  },
  {
    "pageContent": " and `BarHistory`, enabling synchronized access to time-based data.\n\n## Overview\n\n`TimeSeriesBase` manages a collection of data points keyed to a list of DateTimes, allowing seamless interaction with time series data across different WealthLab components.\n\n## Key Characteristics\n\n- Maintains a synchronized list of DateTimes\n- Provides caching mechanism for performance optimization\n- Supports ad-hoc data storage\n- Enables flexible time-based data access and manipulation\n\n## Properties\n\n### Cache\n\n\n```csharp\npublic ConcurrentDictionary<string, object> Cache\n\n```",
    "metadata": {
      "id": "time-series-base",
      "title": "time-series-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series-base.md",
      "chunkIndex": "code-context-0",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "// Store and retrieve cached indicators\nif (!timeSeries.Cache.ContainsKey(\"MyIndicator\"))\n{\n    var indicator = ComputeIndicator(timeSeries);\n    timeSeries.Cache[\"MyIndicator\"] = indicator;\n}\nvar cachedIndicator = timeSeries.Cache[\"MyIndicator\"] as MyIndicatorType;\n",
    "metadata": {
      "id": "time-series-base",
      "title": "time-series-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series-base.md",
      "chunkIndex": "code-1",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "Times, allowing seamless interaction with time series data across different WealthLab components.\n\n## Key Characteristics\n\n- Maintains a synchronized list of DateTimes\n- Provides caching mechanism for performance optimization\n- Supports ad-hoc data storage\n- Enables flexible time-based data access and manipulation\n\n## Properties\n\n### Cache\n```csharp\npublic ConcurrentDictionary<string, object> Cache\n```\nA thread-safe cache dictionary for storing objects during a backtest run.\n\n**Usage Example:**\n"
    }
  },
  {
    "pageContent": "Times, allowing seamless interaction with time series data across different WealthLab components.\n\n## Key Characteristics\n\n- Maintains a synchronized list of DateTimes\n- Provides caching mechanism for performance optimization\n- Supports ad-hoc data storage\n- Enables flexible time-based data access and manipulation\n\n## Properties\n\n### Cache\n```csharp\npublic ConcurrentDictionary<string, object> Cache\n```\nA thread-safe cache dictionary for storing objects during a backtest run.\n\n**Usage Example:**\n\n\n```csharp\n// Store and retrieve cached indicators\nif (!timeSeries.Cache.ContainsKey(\"MyIndicator\"))\n{\n    var indicator = ComputeIndicator(timeSeries);\n    timeSeries.Cache[\"MyIndicator\"] = indicator;\n}\nvar cachedIndicator = timeSeries.Cache[\"MyIndicator\"] as MyIndicatorType;\n\n```",
    "metadata": {
      "id": "time-series-base",
      "title": "time-series-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series-base.md",
      "chunkIndex": "code-context-1",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public int Count\n",
    "metadata": {
      "id": "time-series-base",
      "title": "time-series-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series-base.md",
      "chunkIndex": "code-2",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "access and manipulation\n\n## Properties\n\n### Cache\n```csharp\npublic ConcurrentDictionary<string, object> Cache\n```\nA thread-safe cache dictionary for storing objects during a backtest run.\n\n**Usage Example:**\n```csharp\n// Store and retrieve cached indicators\nif (!timeSeries.Cache.ContainsKey(\"MyIndicator\"))\n{\n    var indicator = ComputeIndicator(timeSeries);\n    timeSeries.Cache[\"MyIndicator\"] = indicator;\n}\nvar cachedIndicator = timeSeries.Cache[\"MyIndicator\"] as MyIndicatorType;\n```\n\n### Count\n"
    }
  },
  {
    "pageContent": "access and manipulation\n\n## Properties\n\n### Cache\n```csharp\npublic ConcurrentDictionary<string, object> Cache\n```\nA thread-safe cache dictionary for storing objects during a backtest run.\n\n**Usage Example:**\n```csharp\n// Store and retrieve cached indicators\nif (!timeSeries.Cache.ContainsKey(\"MyIndicator\"))\n{\n    var indicator = ComputeIndicator(timeSeries);\n    timeSeries.Cache[\"MyIndicator\"] = indicator;\n}\nvar cachedIndicator = timeSeries.Cache[\"MyIndicator\"] as MyIndicatorType;\n```\n\n### Count\n\n\n```csharp\npublic int Count\n\n```",
    "metadata": {
      "id": "time-series-base",
      "title": "time-series-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series-base.md",
      "chunkIndex": "code-context-2",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "int dataPointCount = timeSeries.Count;\nConsole.WriteLine($\"Total data points: {dataPointCount}\");\n",
    "metadata": {
      "id": "time-series-base",
      "title": "time-series-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series-base.md",
      "chunkIndex": "code-3",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ect> Cache\n```\nA thread-safe cache dictionary for storing objects during a backtest run.\n\n**Usage Example:**\n```csharp\n// Store and retrieve cached indicators\nif (!timeSeries.Cache.ContainsKey(\"MyIndicator\"))\n{\n    var indicator = ComputeIndicator(timeSeries);\n    timeSeries.Cache[\"MyIndicator\"] = indicator;\n}\nvar cachedIndicator = timeSeries.Cache[\"MyIndicator\"] as MyIndicatorType;\n```\n\n### Count\n```csharp\npublic int Count\n```\nReturns the number of items in the time series.\n\n**Usage Example:**\n"
    }
  },
  {
    "pageContent": "ect> Cache\n```\nA thread-safe cache dictionary for storing objects during a backtest run.\n\n**Usage Example:**\n```csharp\n// Store and retrieve cached indicators\nif (!timeSeries.Cache.ContainsKey(\"MyIndicator\"))\n{\n    var indicator = ComputeIndicator(timeSeries);\n    timeSeries.Cache[\"MyIndicator\"] = indicator;\n}\nvar cachedIndicator = timeSeries.Cache[\"MyIndicator\"] as MyIndicatorType;\n```\n\n### Count\n```csharp\npublic int Count\n```\nReturns the number of items in the time series.\n\n**Usage Example:**\n\n\n```csharp\nint dataPointCount = timeSeries.Count;\nConsole.WriteLine($\"Total data points: {dataPointCount}\");\n\n```",
    "metadata": {
      "id": "time-series-base",
      "title": "time-series-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series-base.md",
      "chunkIndex": "code-context-3",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public virtual List<DateTime> DateTimes\n",
    "metadata": {
      "id": "time-series-base",
      "title": "time-series-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series-base.md",
      "chunkIndex": "code-4",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": " and retrieve cached indicators\nif (!timeSeries.Cache.ContainsKey(\"MyIndicator\"))\n{\n    var indicator = ComputeIndicator(timeSeries);\n    timeSeries.Cache[\"MyIndicator\"] = indicator;\n}\nvar cachedIndicator = timeSeries.Cache[\"MyIndicator\"] as MyIndicatorType;\n```\n\n### Count\n```csharp\npublic int Count\n```\nReturns the number of items in the time series.\n\n**Usage Example:**\n```csharp\nint dataPointCount = timeSeries.Count;\nConsole.WriteLine($\"Total data points: {dataPointCount}\");\n```\n\n### DateTimes\n"
    }
  },
  {
    "pageContent": " and retrieve cached indicators\nif (!timeSeries.Cache.ContainsKey(\"MyIndicator\"))\n{\n    var indicator = ComputeIndicator(timeSeries);\n    timeSeries.Cache[\"MyIndicator\"] = indicator;\n}\nvar cachedIndicator = timeSeries.Cache[\"MyIndicator\"] as MyIndicatorType;\n```\n\n### Count\n```csharp\npublic int Count\n```\nReturns the number of items in the time series.\n\n**Usage Example:**\n```csharp\nint dataPointCount = timeSeries.Count;\nConsole.WriteLine($\"Total data points: {dataPointCount}\");\n```\n\n### DateTimes\n\n\n```csharp\npublic virtual List<DateTime> DateTimes\n\n```",
    "metadata": {
      "id": "time-series-base",
      "title": "time-series-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series-base.md",
      "chunkIndex": "code-context-4",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "// Iterate through timestamps\nforeach (DateTime timestamp in timeSeries.DateTimes)\n{\n    Console.WriteLine($\"Data point timestamp: {timestamp}\");\n}\n",
    "metadata": {
      "id": "time-series-base",
      "title": "time-series-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series-base.md",
      "chunkIndex": "code-5",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "Cache[\"MyIndicator\"] = indicator;\n}\nvar cachedIndicator = timeSeries.Cache[\"MyIndicator\"] as MyIndicatorType;\n```\n\n### Count\n```csharp\npublic int Count\n```\nReturns the number of items in the time series.\n\n**Usage Example:**\n```csharp\nint dataPointCount = timeSeries.Count;\nConsole.WriteLine($\"Total data points: {dataPointCount}\");\n```\n\n### DateTimes\n```csharp\npublic virtual List<DateTime> DateTimes\n```\nA list of DateTime objects representing the timestamp for each data point.\n\n**Usage Example:**\n"
    }
  },
  {
    "pageContent": "Cache[\"MyIndicator\"] = indicator;\n}\nvar cachedIndicator = timeSeries.Cache[\"MyIndicator\"] as MyIndicatorType;\n```\n\n### Count\n```csharp\npublic int Count\n```\nReturns the number of items in the time series.\n\n**Usage Example:**\n```csharp\nint dataPointCount = timeSeries.Count;\nConsole.WriteLine($\"Total data points: {dataPointCount}\");\n```\n\n### DateTimes\n```csharp\npublic virtual List<DateTime> DateTimes\n```\nA list of DateTime objects representing the timestamp for each data point.\n\n**Usage Example:**\n\n\n```csharp\n// Iterate through timestamps\nforeach (DateTime timestamp in timeSeries.DateTimes)\n{\n    Console.WriteLine($\"Data point timestamp: {timestamp}\");\n}\n\n```",
    "metadata": {
      "id": "time-series-base",
      "title": "time-series-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series-base.md",
      "chunkIndex": "code-context-5",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public DateTime EndDate\n",
    "metadata": {
      "id": "time-series-base",
      "title": "time-series-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series-base.md",
      "chunkIndex": "code-6",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "of items in the time series.\n\n**Usage Example:**\n```csharp\nint dataPointCount = timeSeries.Count;\nConsole.WriteLine($\"Total data points: {dataPointCount}\");\n```\n\n### DateTimes\n```csharp\npublic virtual List<DateTime> DateTimes\n```\nA list of DateTime objects representing the timestamp for each data point.\n\n**Usage Example:**\n```csharp\n// Iterate through timestamps\nforeach (DateTime timestamp in timeSeries.DateTimes)\n{\n    Console.WriteLine($\"Data point timestamp: {timestamp}\");\n}\n```\n\n### EndDate\n"
    }
  },
  {
    "pageContent": "of items in the time series.\n\n**Usage Example:**\n```csharp\nint dataPointCount = timeSeries.Count;\nConsole.WriteLine($\"Total data points: {dataPointCount}\");\n```\n\n### DateTimes\n```csharp\npublic virtual List<DateTime> DateTimes\n```\nA list of DateTime objects representing the timestamp for each data point.\n\n**Usage Example:**\n```csharp\n// Iterate through timestamps\nforeach (DateTime timestamp in timeSeries.DateTimes)\n{\n    Console.WriteLine($\"Data point timestamp: {timestamp}\");\n}\n```\n\n### EndDate\n\n\n```csharp\npublic DateTime EndDate\n\n```",
    "metadata": {
      "id": "time-series-base",
      "title": "time-series-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series-base.md",
      "chunkIndex": "code-context-6",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "DateTime lastDataPoint = timeSeries.EndDate;\nConsole.WriteLine($\"Last data point date: {lastDataPoint}\");\n",
    "metadata": {
      "id": "time-series-base",
      "title": "time-series-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series-base.md",
      "chunkIndex": "code-7",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "t}\");\n```\n\n### DateTimes\n```csharp\npublic virtual List<DateTime> DateTimes\n```\nA list of DateTime objects representing the timestamp for each data point.\n\n**Usage Example:**\n```csharp\n// Iterate through timestamps\nforeach (DateTime timestamp in timeSeries.DateTimes)\n{\n    Console.WriteLine($\"Data point timestamp: {timestamp}\");\n}\n```\n\n### EndDate\n```csharp\npublic DateTime EndDate\n```\nReturns the last DateTime in the series. Returns `DateTime.MaxValue` if the series is empty.\n\n**Usage Example:**\n"
    }
  },
  {
    "pageContent": "t}\");\n```\n\n### DateTimes\n```csharp\npublic virtual List<DateTime> DateTimes\n```\nA list of DateTime objects representing the timestamp for each data point.\n\n**Usage Example:**\n```csharp\n// Iterate through timestamps\nforeach (DateTime timestamp in timeSeries.DateTimes)\n{\n    Console.WriteLine($\"Data point timestamp: {timestamp}\");\n}\n```\n\n### EndDate\n```csharp\npublic DateTime EndDate\n```\nReturns the last DateTime in the series. Returns `DateTime.MaxValue` if the series is empty.\n\n**Usage Example:**\n\n\n```csharp\nDateTime lastDataPoint = timeSeries.EndDate;\nConsole.WriteLine($\"Last data point date: {lastDataPoint}\");\n\n```",
    "metadata": {
      "id": "time-series-base",
      "title": "time-series-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series-base.md",
      "chunkIndex": "code-context-7",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public DateTime StartDate\n",
    "metadata": {
      "id": "time-series-base",
      "title": "time-series-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series-base.md",
      "chunkIndex": "code-8",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "r each data point.\n\n**Usage Example:**\n```csharp\n// Iterate through timestamps\nforeach (DateTime timestamp in timeSeries.DateTimes)\n{\n    Console.WriteLine($\"Data point timestamp: {timestamp}\");\n}\n```\n\n### EndDate\n```csharp\npublic DateTime EndDate\n```\nReturns the last DateTime in the series. Returns `DateTime.MaxValue` if the series is empty.\n\n**Usage Example:**\n```csharp\nDateTime lastDataPoint = timeSeries.EndDate;\nConsole.WriteLine($\"Last data point date: {lastDataPoint}\");\n```\n\n### StartDate\n"
    }
  },
  {
    "pageContent": "r each data point.\n\n**Usage Example:**\n```csharp\n// Iterate through timestamps\nforeach (DateTime timestamp in timeSeries.DateTimes)\n{\n    Console.WriteLine($\"Data point timestamp: {timestamp}\");\n}\n```\n\n### EndDate\n```csharp\npublic DateTime EndDate\n```\nReturns the last DateTime in the series. Returns `DateTime.MaxValue` if the series is empty.\n\n**Usage Example:**\n```csharp\nDateTime lastDataPoint = timeSeries.EndDate;\nConsole.WriteLine($\"Last data point date: {lastDataPoint}\");\n```\n\n### StartDate\n\n\n```csharp\npublic DateTime StartDate\n\n```",
    "metadata": {
      "id": "time-series-base",
      "title": "time-series-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series-base.md",
      "chunkIndex": "code-context-8",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "DateTime firstDataPoint = timeSeries.StartDate;\nConsole.WriteLine($\"First data point date: {firstDataPoint}\");\n",
    "metadata": {
      "id": "time-series-base",
      "title": "time-series-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series-base.md",
      "chunkIndex": "code-9",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "e($\"Data point timestamp: {timestamp}\");\n}\n```\n\n### EndDate\n```csharp\npublic DateTime EndDate\n```\nReturns the last DateTime in the series. Returns `DateTime.MaxValue` if the series is empty.\n\n**Usage Example:**\n```csharp\nDateTime lastDataPoint = timeSeries.EndDate;\nConsole.WriteLine($\"Last data point date: {lastDataPoint}\");\n```\n\n### StartDate\n```csharp\npublic DateTime StartDate\n```\nReturns the first DateTime in the series. Returns `DateTime.MinValue` if the series is empty.\n\n**Usage Example:**\n"
    }
  },
  {
    "pageContent": "e($\"Data point timestamp: {timestamp}\");\n}\n```\n\n### EndDate\n```csharp\npublic DateTime EndDate\n```\nReturns the last DateTime in the series. Returns `DateTime.MaxValue` if the series is empty.\n\n**Usage Example:**\n```csharp\nDateTime lastDataPoint = timeSeries.EndDate;\nConsole.WriteLine($\"Last data point date: {lastDataPoint}\");\n```\n\n### StartDate\n```csharp\npublic DateTime StartDate\n```\nReturns the first DateTime in the series. Returns `DateTime.MinValue` if the series is empty.\n\n**Usage Example:**\n\n\n```csharp\nDateTime firstDataPoint = timeSeries.StartDate;\nConsole.WriteLine($\"First data point date: {firstDataPoint}\");\n\n```",
    "metadata": {
      "id": "time-series-base",
      "title": "time-series-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series-base.md",
      "chunkIndex": "code-context-9",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public TimeSpan TimeSpan\n",
    "metadata": {
      "id": "time-series-base",
      "title": "time-series-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series-base.md",
      "chunkIndex": "code-10",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "Returns `DateTime.MaxValue` if the series is empty.\n\n**Usage Example:**\n```csharp\nDateTime lastDataPoint = timeSeries.EndDate;\nConsole.WriteLine($\"Last data point date: {lastDataPoint}\");\n```\n\n### StartDate\n```csharp\npublic DateTime StartDate\n```\nReturns the first DateTime in the series. Returns `DateTime.MinValue` if the series is empty.\n\n**Usage Example:**\n```csharp\nDateTime firstDataPoint = timeSeries.StartDate;\nConsole.WriteLine($\"First data point date: {firstDataPoint}\");\n```\n\n### TimeSpan\n"
    }
  },
  {
    "pageContent": "Returns `DateTime.MaxValue` if the series is empty.\n\n**Usage Example:**\n```csharp\nDateTime lastDataPoint = timeSeries.EndDate;\nConsole.WriteLine($\"Last data point date: {lastDataPoint}\");\n```\n\n### StartDate\n```csharp\npublic DateTime StartDate\n```\nReturns the first DateTime in the series. Returns `DateTime.MinValue` if the series is empty.\n\n**Usage Example:**\n```csharp\nDateTime firstDataPoint = timeSeries.StartDate;\nConsole.WriteLine($\"First data point date: {firstDataPoint}\");\n```\n\n### TimeSpan\n\n\n```csharp\npublic TimeSpan TimeSpan\n\n```",
    "metadata": {
      "id": "time-series-base",
      "title": "time-series-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series-base.md",
      "chunkIndex": "code-context-10",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "TimeSpan dataRange = timeSeries.TimeSpan;\nConsole.WriteLine($\"Data time range: {dataRange.TotalDays} days\");\n",
    "metadata": {
      "id": "time-series-base",
      "title": "time-series-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series-base.md",
      "chunkIndex": "code-11",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "date: {lastDataPoint}\");\n```\n\n### StartDate\n```csharp\npublic DateTime StartDate\n```\nReturns the first DateTime in the series. Returns `DateTime.MinValue` if the series is empty.\n\n**Usage Example:**\n```csharp\nDateTime firstDataPoint = timeSeries.StartDate;\nConsole.WriteLine($\"First data point date: {firstDataPoint}\");\n```\n\n### TimeSpan\n```csharp\npublic TimeSpan TimeSpan\n```\nReturns the total time range of the DateTimes. Returns zero TimeSpan if fewer than two DateTimes exist.\n\n**Usage Example:**\n"
    }
  },
  {
    "pageContent": "date: {lastDataPoint}\");\n```\n\n### StartDate\n```csharp\npublic DateTime StartDate\n```\nReturns the first DateTime in the series. Returns `DateTime.MinValue` if the series is empty.\n\n**Usage Example:**\n```csharp\nDateTime firstDataPoint = timeSeries.StartDate;\nConsole.WriteLine($\"First data point date: {firstDataPoint}\");\n```\n\n### TimeSpan\n```csharp\npublic TimeSpan TimeSpan\n```\nReturns the total time range of the DateTimes. Returns zero TimeSpan if fewer than two DateTimes exist.\n\n**Usage Example:**\n\n\n```csharp\nTimeSpan dataRange = timeSeries.TimeSpan;\nConsole.WriteLine($\"Data time range: {dataRange.TotalDays} days\");\n\n```",
    "metadata": {
      "id": "time-series-base",
      "title": "time-series-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series-base.md",
      "chunkIndex": "code-context-11",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public object UserData\n",
    "metadata": {
      "id": "time-series-base",
      "title": "time-series-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series-base.md",
      "chunkIndex": "code-12",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "teTime.MinValue` if the series is empty.\n\n**Usage Example:**\n```csharp\nDateTime firstDataPoint = timeSeries.StartDate;\nConsole.WriteLine($\"First data point date: {firstDataPoint}\");\n```\n\n### TimeSpan\n```csharp\npublic TimeSpan TimeSpan\n```\nReturns the total time range of the DateTimes. Returns zero TimeSpan if fewer than two DateTimes exist.\n\n**Usage Example:**\n```csharp\nTimeSpan dataRange = timeSeries.TimeSpan;\nConsole.WriteLine($\"Data time range: {dataRange.TotalDays} days\");\n```\n\n### UserData\n"
    }
  },
  {
    "pageContent": "teTime.MinValue` if the series is empty.\n\n**Usage Example:**\n```csharp\nDateTime firstDataPoint = timeSeries.StartDate;\nConsole.WriteLine($\"First data point date: {firstDataPoint}\");\n```\n\n### TimeSpan\n```csharp\npublic TimeSpan TimeSpan\n```\nReturns the total time range of the DateTimes. Returns zero TimeSpan if fewer than two DateTimes exist.\n\n**Usage Example:**\n```csharp\nTimeSpan dataRange = timeSeries.TimeSpan;\nConsole.WriteLine($\"Data time range: {dataRange.TotalDays} days\");\n```\n\n### UserData\n\n\n```csharp\npublic object UserData\n\n```",
    "metadata": {
      "id": "time-series-base",
      "title": "time-series-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series-base.md",
      "chunkIndex": "code-context-12",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "// Store custom metadata\ntimeSeries.UserData = new { \n    Source = \"Market Data Provider\", \n    Version = \"1.0\" \n};\n",
    "metadata": {
      "id": "time-series-base",
      "title": "time-series-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series-base.md",
      "chunkIndex": "code-13",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "te;\nConsole.WriteLine($\"First data point date: {firstDataPoint}\");\n```\n\n### TimeSpan\n```csharp\npublic TimeSpan TimeSpan\n```\nReturns the total time range of the DateTimes. Returns zero TimeSpan if fewer than two DateTimes exist.\n\n**Usage Example:**\n```csharp\nTimeSpan dataRange = timeSeries.TimeSpan;\nConsole.WriteLine($\"Data time range: {dataRange.TotalDays} days\");\n```\n\n### UserData\n```csharp\npublic object UserData\n```\nAllows storing ad-hoc data with the time series instance.\n\n**Usage Example:**\n"
    }
  },
  {
    "pageContent": "te;\nConsole.WriteLine($\"First data point date: {firstDataPoint}\");\n```\n\n### TimeSpan\n```csharp\npublic TimeSpan TimeSpan\n```\nReturns the total time range of the DateTimes. Returns zero TimeSpan if fewer than two DateTimes exist.\n\n**Usage Example:**\n```csharp\nTimeSpan dataRange = timeSeries.TimeSpan;\nConsole.WriteLine($\"Data time range: {dataRange.TotalDays} days\");\n```\n\n### UserData\n```csharp\npublic object UserData\n```\nAllows storing ad-hoc data with the time series instance.\n\n**Usage Example:**\n\n\n```csharp\n// Store custom metadata\ntimeSeries.UserData = new { \n    Source = \"Market Data Provider\", \n    Version = \"1.0\" \n};\n\n```",
    "metadata": {
      "id": "time-series-base",
      "title": "time-series-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series-base.md",
      "chunkIndex": "code-context-13",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public double UserDataAsDouble\npublic int UserDataAsInt\n",
    "metadata": {
      "id": "time-series-base",
      "title": "time-series-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series-base.md",
      "chunkIndex": "code-14",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": " Returns zero TimeSpan if fewer than two DateTimes exist.\n\n**Usage Example:**\n```csharp\nTimeSpan dataRange = timeSeries.TimeSpan;\nConsole.WriteLine($\"Data time range: {dataRange.TotalDays} days\");\n```\n\n### UserData\n```csharp\npublic object UserData\n```\nAllows storing ad-hoc data with the time series instance.\n\n**Usage Example:**\n```csharp\n// Store custom metadata\ntimeSeries.UserData = new { \n    Source = \"Market Data Provider\", \n    Version = \"1.0\" \n};\n```\n\n### UserDataAsDouble and UserDataAsInt\n"
    }
  },
  {
    "pageContent": " Returns zero TimeSpan if fewer than two DateTimes exist.\n\n**Usage Example:**\n```csharp\nTimeSpan dataRange = timeSeries.TimeSpan;\nConsole.WriteLine($\"Data time range: {dataRange.TotalDays} days\");\n```\n\n### UserData\n```csharp\npublic object UserData\n```\nAllows storing ad-hoc data with the time series instance.\n\n**Usage Example:**\n```csharp\n// Store custom metadata\ntimeSeries.UserData = new { \n    Source = \"Market Data Provider\", \n    Version = \"1.0\" \n};\n```\n\n### UserDataAsDouble and UserDataAsInt\n\n\n```csharp\npublic double UserDataAsDouble\npublic int UserDataAsInt\n\n```",
    "metadata": {
      "id": "time-series-base",
      "title": "time-series-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series-base.md",
      "chunkIndex": "code-context-14",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "timeSeries.UserData = 42.5;\ndouble value = timeSeries.UserDataAsDouble; // 42.5\n",
    "metadata": {
      "id": "time-series-base",
      "title": "time-series-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series-base.md",
      "chunkIndex": "code-15",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "me range: {dataRange.TotalDays} days\");\n```\n\n### UserData\n```csharp\npublic object UserData\n```\nAllows storing ad-hoc data with the time series instance.\n\n**Usage Example:**\n```csharp\n// Store custom metadata\ntimeSeries.UserData = new { \n    Source = \"Market Data Provider\", \n    Version = \"1.0\" \n};\n```\n\n### UserDataAsDouble and UserDataAsInt\n```csharp\npublic double UserDataAsDouble\npublic int UserDataAsInt\n```\nConvenient accessors for storing and retrieving numeric user data.\n\n**Usage Example:**\n"
    }
  },
  {
    "pageContent": "me range: {dataRange.TotalDays} days\");\n```\n\n### UserData\n```csharp\npublic object UserData\n```\nAllows storing ad-hoc data with the time series instance.\n\n**Usage Example:**\n```csharp\n// Store custom metadata\ntimeSeries.UserData = new { \n    Source = \"Market Data Provider\", \n    Version = \"1.0\" \n};\n```\n\n### UserDataAsDouble and UserDataAsInt\n```csharp\npublic double UserDataAsDouble\npublic int UserDataAsInt\n```\nConvenient accessors for storing and retrieving numeric user data.\n\n**Usage Example:**\n\n\n```csharp\ntimeSeries.UserData = 42.5;\ndouble value = timeSeries.UserDataAsDouble; // 42.5\n\n```",
    "metadata": {
      "id": "time-series-base",
      "title": "time-series-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series-base.md",
      "chunkIndex": "code-context-15",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public int IndexOf(DateTime dt, bool exactMatchOnly = false)\n",
    "metadata": {
      "id": "time-series-base",
      "title": "time-series-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series-base.md",
      "chunkIndex": "code-16",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ta with the time series instance.\n\n**Usage Example:**\n```csharp\n// Store custom metadata\ntimeSeries.UserData = new { \n    Source = \"Market Data Provider\", \n    Version = \"1.0\" \n};\n```\n\n### UserDataAsDouble and UserDataAsInt\n```csharp\npublic double UserDataAsDouble\npublic int UserDataAsInt\n```\nConvenient accessors for storing and retrieving numeric user data.\n\n**Usage Example:**\n```csharp\ntimeSeries.UserData = 42.5;\ndouble value = timeSeries.UserDataAsDouble; // 42.5\n```\n\n## Methods\n\n### IndexOf\n"
    }
  },
  {
    "pageContent": "ta with the time series instance.\n\n**Usage Example:**\n```csharp\n// Store custom metadata\ntimeSeries.UserData = new { \n    Source = \"Market Data Provider\", \n    Version = \"1.0\" \n};\n```\n\n### UserDataAsDouble and UserDataAsInt\n```csharp\npublic double UserDataAsDouble\npublic int UserDataAsInt\n```\nConvenient accessors for storing and retrieving numeric user data.\n\n**Usage Example:**\n```csharp\ntimeSeries.UserData = 42.5;\ndouble value = timeSeries.UserDataAsDouble; // 42.5\n```\n\n## Methods\n\n### IndexOf\n\n\n```csharp\npublic int IndexOf(DateTime dt, bool exactMatchOnly = false)\n\n```",
    "metadata": {
      "id": "time-series-base",
      "title": "time-series-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series-base.md",
      "chunkIndex": "code-context-16",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "// Find index of a specific date\nDateTime searchDate = DateTime.Now;\nint index = timeSeries.IndexOf(searchDate);\nif (index != -1)\n{\n    Console.WriteLine($\"Found data point at index {index}\");\n}\n",
    "metadata": {
      "id": "time-series-base",
      "title": "time-series-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series-base.md",
      "chunkIndex": "code-17",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "der\", \n    Version = \"1.0\" \n};\n```\n\n### UserDataAsDouble and UserDataAsInt\n```csharp\npublic double UserDataAsDouble\npublic int UserDataAsInt\n```\nConvenient accessors for storing and retrieving numeric user data.\n\n**Usage Example:**\n```csharp\ntimeSeries.UserData = 42.5;\ndouble value = timeSeries.UserDataAsDouble; // 42.5\n```\n\n## Methods\n\n### IndexOf\n```csharp\npublic int IndexOf(DateTime dt, bool exactMatchOnly = false)\n```\nFinds the index of a specific DateTime in the series.\n\n**Usage Example:**\n"
    }
  },
  {
    "pageContent": "der\", \n    Version = \"1.0\" \n};\n```\n\n### UserDataAsDouble and UserDataAsInt\n```csharp\npublic double UserDataAsDouble\npublic int UserDataAsInt\n```\nConvenient accessors for storing and retrieving numeric user data.\n\n**Usage Example:**\n```csharp\ntimeSeries.UserData = 42.5;\ndouble value = timeSeries.UserDataAsDouble; // 42.5\n```\n\n## Methods\n\n### IndexOf\n```csharp\npublic int IndexOf(DateTime dt, bool exactMatchOnly = false)\n```\nFinds the index of a specific DateTime in the series.\n\n**Usage Example:**\n\n\n```csharp\n// Find index of a specific date\nDateTime searchDate = DateTime.Now;\nint index = timeSeries.IndexOf(searchDate);\nif (index != -1)\n{\n    Console.WriteLine($\"Found data point at index {index}\");\n}\n\n```",
    "metadata": {
      "id": "time-series-base",
      "title": "time-series-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series-base.md",
      "chunkIndex": "code-context-17",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public virtual bool IsUpToDate(DateTime endDate)\n",
    "metadata": {
      "id": "time-series-base",
      "title": "time-series-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series-base.md",
      "chunkIndex": "code-18",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ple:**\n```csharp\ntimeSeries.UserData = 42.5;\ndouble value = timeSeries.UserDataAsDouble; // 42.5\n```\n\n## Methods\n\n### IndexOf\n```csharp\npublic int IndexOf(DateTime dt, bool exactMatchOnly = false)\n```\nFinds the index of a specific DateTime in the series.\n\n**Usage Example:**\n```csharp\n// Find index of a specific date\nDateTime searchDate = DateTime.Now;\nint index = timeSeries.IndexOf(searchDate);\nif (index != -1)\n{\n    Console.WriteLine($\"Found data point at index {index}\");\n}\n```\n\n### IsUpToDate\n"
    }
  },
  {
    "pageContent": "ple:**\n```csharp\ntimeSeries.UserData = 42.5;\ndouble value = timeSeries.UserDataAsDouble; // 42.5\n```\n\n## Methods\n\n### IndexOf\n```csharp\npublic int IndexOf(DateTime dt, bool exactMatchOnly = false)\n```\nFinds the index of a specific DateTime in the series.\n\n**Usage Example:**\n```csharp\n// Find index of a specific date\nDateTime searchDate = DateTime.Now;\nint index = timeSeries.IndexOf(searchDate);\nif (index != -1)\n{\n    Console.WriteLine($\"Found data point at index {index}\");\n}\n```\n\n### IsUpToDate\n\n\n```csharp\npublic virtual bool IsUpToDate(DateTime endDate)\n\n```",
    "metadata": {
      "id": "time-series-base",
      "title": "time-series-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series-base.md",
      "chunkIndex": "code-context-18",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "bool isCurrentData = timeSeries.IsUpToDate(DateTime.Now);\nConsole.WriteLine($\"Data is up to date: {isCurrentData}\");\n",
    "metadata": {
      "id": "time-series-base",
      "title": "time-series-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series-base.md",
      "chunkIndex": "code-19",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "bool exactMatchOnly = false)\n```\nFinds the index of a specific DateTime in the series.\n\n**Usage Example:**\n```csharp\n// Find index of a specific date\nDateTime searchDate = DateTime.Now;\nint index = timeSeries.IndexOf(searchDate);\nif (index != -1)\n{\n    Console.WriteLine($\"Found data point at index {index}\");\n}\n```\n\n### IsUpToDate\n```csharp\npublic virtual bool IsUpToDate(DateTime endDate)\n```\nChecks if historical data is current, considering market holidays and trading times.\n\n**Usage Example:**\n"
    }
  },
  {
    "pageContent": "bool exactMatchOnly = false)\n```\nFinds the index of a specific DateTime in the series.\n\n**Usage Example:**\n```csharp\n// Find index of a specific date\nDateTime searchDate = DateTime.Now;\nint index = timeSeries.IndexOf(searchDate);\nif (index != -1)\n{\n    Console.WriteLine($\"Found data point at index {index}\");\n}\n```\n\n### IsUpToDate\n```csharp\npublic virtual bool IsUpToDate(DateTime endDate)\n```\nChecks if historical data is current, considering market holidays and trading times.\n\n**Usage Example:**\n\n\n```csharp\nbool isCurrentData = timeSeries.IsUpToDate(DateTime.Now);\nConsole.WriteLine($\"Data is up to date: {isCurrentData}\");\n\n```",
    "metadata": {
      "id": "time-series-base",
      "title": "time-series-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series-base.md",
      "chunkIndex": "code-context-19",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public class TimeSeriesAnalyzer\n{\n    public void AnalyzeTimeSeries(TimeSeriesBase timeSeries)\n    {\n        // Comprehensive time series analysis\n        Console.WriteLine($\"Data Points: {timeSeries.Count}\");\n        Console.WriteLine($\"Date Range: {timeSeries.StartDate} to {timeSeries.EndDate}\");\n        Console.WriteLine($\"Total Time Span: {timeSeries.TimeSpan.TotalDays} days\");\n        \n        // Custom caching and metadata\n        timeSeries.Cache[\"AnalysisTimestamp\"] = DateTime.Now;\n        timeSeries.UserData = new { \n            AnalysisType = \"Comprehensive\", \n            Confidence = 0.95 \n        };\n    }\n}\n",
    "metadata": {
      "id": "time-series-base",
      "title": "time-series-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series-base.md",
      "chunkIndex": "code-20",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "e Considerations**\n   - Minimize repeated calls to expensive methods\n   - Use `UserData` judiciously\n   - Prefer typed accessors like `UserDataAsDouble`\n\n## Notes\n\n- Fundamental to WealthLab's time-based data handling\n- Supports both equity and futures market data\n- Provides flexible, synchronized data access\n\n## Inheritance and Polymorphism\n\nDerived classes:\n- `TimeSeries`: Manages series of double values\n- `BarHistory`: Represents historical OHLCV data\n\n## Example: Advanced Time Series Usage\n\n"
    }
  },
  {
    "pageContent": "e Considerations**\n   - Minimize repeated calls to expensive methods\n   - Use `UserData` judiciously\n   - Prefer typed accessors like `UserDataAsDouble`\n\n## Notes\n\n- Fundamental to WealthLab's time-based data handling\n- Supports both equity and futures market data\n- Provides flexible, synchronized data access\n\n## Inheritance and Polymorphism\n\nDerived classes:\n- `TimeSeries`: Manages series of double values\n- `BarHistory`: Represents historical OHLCV data\n\n## Example: Advanced Time Series Usage\n\n\n\n```csharp\npublic class TimeSeriesAnalyzer\n{\n    public void AnalyzeTimeSeries(TimeSeriesBase timeSeries)\n    {\n        // Comprehensive time series analysis\n        Console.WriteLine($\"Data Points: {timeSeries.Count}\");\n        Console.WriteLine($\"Date Range: {timeSeries.StartDate} to {timeSeries.EndDate}\");\n        Console.WriteLine($\"Total Time Span: {timeSeries.TimeSpan.TotalDays} days\");\n        \n        // Custom caching and metadata\n        timeSeries.Cache[\"AnalysisTimestamp\"] = DateTime.Now;\n        timeSeries.UserData = new { \n            AnalysisType = \"Comprehensive\", \n            Confidence = 0.95 \n        };\n    }\n}\n\n```",
    "metadata": {
      "id": "time-series-base",
      "title": "time-series-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series-base.md",
      "chunkIndex": "code-context-20",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "# TimeSeriesCompressor Class\n\n**Namespace:** WealthLab.Core  \n**Parent:** Static Utility Class\n\nThe `TimeSeriesCompressor` is a static utility class that provides methods for compressing `TimeSeries` instances from one time scale to a more compressed scale, enabling flexible time series data aggregation.\n\n## Overview\n\n`TimeSeriesCompressor` allows developers to transform high-granularity time series data into lower-frequency representations, such as converting minute-level data to daily or weekly series.\n\n## Key Characteristics\n\n- Static methods for time series compression\n- Supports multiple time scales\n- Preserves timestamp synchronization\n- Handles various market trading scenarios\n\n## Static Methods\n\n### ToDaily\n",
    "metadata": {
      "id": "time-series-compressor",
      "title": "time-series-compressor",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series-compressor.md",
      "chunkIndex": 0,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nCompresses the source TimeSeries to a daily scale.\n\n**Parameters:**\n- `source`: Source TimeSeries to compress\n- `market` (optional): MarketDetails for specific market trading rules\n\n**Remarks:**\n- Useful for converting intraday data to daily scale\n- Final value represents the last bar of the day\n- Globex-type markets trading through midnight can use market parameter\n\n**Usage Example:**\n",
    "metadata": {
      "id": "time-series-compressor",
      "title": "time-series-compressor",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series-compressor.md",
      "chunkIndex": 1,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n### ToMinute\n",
    "metadata": {
      "id": "time-series-compressor",
      "title": "time-series-compressor",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series-compressor.md",
      "chunkIndex": 2,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nCompresses the source TimeSeries to an interval-minute scale.\n\n**Parameters:**\n- `source`: Intraday TimeSeries with higher granularity\n- `interval`: Desired minute interval (e.g., 5, 15, 30)\n- `market`: MarketDetails for synchronizing to market open\n\n**Remarks:**\n- Source must have higher granularity than requested interval\n- Market parameter helps determine correct market open time\n\n**Usage Example:**\n",
    "metadata": {
      "id": "time-series-compressor",
      "title": "time-series-compressor",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series-compressor.md",
      "chunkIndex": 3,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n### ToMonthly\n",
    "metadata": {
      "id": "time-series-compressor",
      "title": "time-series-compressor",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series-compressor.md",
      "chunkIndex": 4,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nCompresses the source TimeSeries to a monthly scale.\n\n**Remarks:**\n- Synchronizes with final bar of each month\n- For intraday sources, consider Pre/Post Market Data Strategy Setting\n- Returns value of last source bar for the month\n\n**Usage Example:**\n",
    "metadata": {
      "id": "time-series-compressor",
      "title": "time-series-compressor",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series-compressor.md",
      "chunkIndex": 5,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n### ToQuarterly\n",
    "metadata": {
      "id": "time-series-compressor",
      "title": "time-series-compressor",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series-compressor.md",
      "chunkIndex": 6,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nCompresses the source TimeSeries to a quarterly scale.\n\n**Remarks:**\n- Synchronizes with final bar of each quarter (March, June, September, December)\n- Considers Pre/Post Market Data Strategy Setting\n- Returns value of last source bar for the quarter\n\n**Usage Example:**\n",
    "metadata": {
      "id": "time-series-compressor",
      "title": "time-series-compressor",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series-compressor.md",
      "chunkIndex": 7,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n### ToWeekly\n",
    "metadata": {
      "id": "time-series-compressor",
      "title": "time-series-compressor",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series-compressor.md",
      "chunkIndex": 8,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nCompresses the source TimeSeries to a weekly scale.\n\n**Remarks:**\n- Synchronizes with final bar of each week\n- Considers Pre/Post Market Data Strategy Setting\n- Returns value of last source bar for the week\n\n**Usage Example:**\n",
    "metadata": {
      "id": "time-series-compressor",
      "title": "time-series-compressor",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series-compressor.md",
      "chunkIndex": 9,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n### ToYearly\n",
    "metadata": {
      "id": "time-series-compressor",
      "title": "time-series-compressor",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series-compressor.md",
      "chunkIndex": 10,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nCompresses the source TimeSeries to a yearly scale.\n\n**Usage Example:**\n",
    "metadata": {
      "id": "time-series-compressor",
      "title": "time-series-compressor",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series-compressor.md",
      "chunkIndex": 11,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n## Comprehensive Example: Multi-Scale Analysis\n\n",
    "metadata": {
      "id": "time-series-compressor",
      "title": "time-series-compressor",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series-compressor.md",
      "chunkIndex": 12,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n## Best Practices\n\n1. **Scale Selection**\n   - Choose appropriate compression scales\n   - Ensure source data has sufficient granularity\n   - Consider market-specific trading characteristics\n\n2. **Data Integrity**\n   - Validate compressed data against source\n   - Be aware of data loss during compression\n   - Use `TimeSeriesSynchronizer` for expanding compressed data\n\n3. **Performance Considerations**\n   - Compression can reduce memory usage\n   - Be mindful of computational overhead\n   - Cache compressed series when possible\n\n## Cautions\n\n⚠️ Important Considerations:\n- Intraday closing prices may not match daily settled closes\n- Different compression methods can yield varying results\n- Always verify compressed data matches expectations\n\n## Related Classes\n\n- `BarHistoryCompressor`: Similar compression for OHLCV data\n- `TimeSeriesSynchronizer`: Expands compressed time series\n\n## Notes\n\n- Essential for multi-scale financial analysis\n- Supports various time series compression scenarios\n- Flexible approach to data aggregation\n\n## Performance Tips\n\n- Reuse compressed time series when possible\n- Consider memory implications of repeated compression\n- Profile compression performance for large datasets ",
    "metadata": {
      "id": "time-series-compressor",
      "title": "time-series-compressor",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series-compressor.md",
      "chunkIndex": 13,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "public static TimeSeries ToDaily(TimeSeries source)\npublic static TimeSeries ToDaily(TimeSeries source, MarketDetails market)\n",
    "metadata": {
      "id": "time-series-compressor",
      "title": "time-series-compressor",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series-compressor.md",
      "chunkIndex": "code-0",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "cale to a more compressed scale, enabling flexible time series data aggregation.\n\n## Overview\n\n`TimeSeriesCompressor` allows developers to transform high-granularity time series data into lower-frequency representations, such as converting minute-level data to daily or weekly series.\n\n## Key Characteristics\n\n- Static methods for time series compression\n- Supports multiple time scales\n- Preserves timestamp synchronization\n- Handles various market trading scenarios\n\n## Static Methods\n\n### ToDaily\n"
    }
  },
  {
    "pageContent": "cale to a more compressed scale, enabling flexible time series data aggregation.\n\n## Overview\n\n`TimeSeriesCompressor` allows developers to transform high-granularity time series data into lower-frequency representations, such as converting minute-level data to daily or weekly series.\n\n## Key Characteristics\n\n- Static methods for time series compression\n- Supports multiple time scales\n- Preserves timestamp synchronization\n- Handles various market trading scenarios\n\n## Static Methods\n\n### ToDaily\n\n\n```csharp\npublic static TimeSeries ToDaily(TimeSeries source)\npublic static TimeSeries ToDaily(TimeSeries source, MarketDetails market)\n\n```",
    "metadata": {
      "id": "time-series-compressor",
      "title": "time-series-compressor",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series-compressor.md",
      "chunkIndex": "code-context-0",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "TimeSeries minuteData = GetMinuteTimeSeries();\nTimeSeries dailyData = TimeSeriesCompressor.ToDaily(minuteData);\n",
    "metadata": {
      "id": "time-series-compressor",
      "title": "time-series-compressor",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series-compressor.md",
      "chunkIndex": "code-1",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "eries ToDaily(TimeSeries source)\npublic static TimeSeries ToDaily(TimeSeries source, MarketDetails market)\n```\nCompresses the source TimeSeries to a daily scale.\n\n**Parameters:**\n- `source`: Source TimeSeries to compress\n- `market` (optional): MarketDetails for specific market trading rules\n\n**Remarks:**\n- Useful for converting intraday data to daily scale\n- Final value represents the last bar of the day\n- Globex-type markets trading through midnight can use market parameter\n\n**Usage Example:**\n"
    }
  },
  {
    "pageContent": "eries ToDaily(TimeSeries source)\npublic static TimeSeries ToDaily(TimeSeries source, MarketDetails market)\n```\nCompresses the source TimeSeries to a daily scale.\n\n**Parameters:**\n- `source`: Source TimeSeries to compress\n- `market` (optional): MarketDetails for specific market trading rules\n\n**Remarks:**\n- Useful for converting intraday data to daily scale\n- Final value represents the last bar of the day\n- Globex-type markets trading through midnight can use market parameter\n\n**Usage Example:**\n\n\n```csharp\nTimeSeries minuteData = GetMinuteTimeSeries();\nTimeSeries dailyData = TimeSeriesCompressor.ToDaily(minuteData);\n\n```",
    "metadata": {
      "id": "time-series-compressor",
      "title": "time-series-compressor",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series-compressor.md",
      "chunkIndex": "code-context-1",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public static TimeSeries ToMinute(TimeSeries source, int interval, MarketDetails market)\n",
    "metadata": {
      "id": "time-series-compressor",
      "title": "time-series-compressor",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series-compressor.md",
      "chunkIndex": "code-2",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ies to a daily scale.\n\n**Parameters:**\n- `source`: Source TimeSeries to compress\n- `market` (optional): MarketDetails for specific market trading rules\n\n**Remarks:**\n- Useful for converting intraday data to daily scale\n- Final value represents the last bar of the day\n- Globex-type markets trading through midnight can use market parameter\n\n**Usage Example:**\n```csharp\nTimeSeries minuteData = GetMinuteTimeSeries();\nTimeSeries dailyData = TimeSeriesCompressor.ToDaily(minuteData);\n```\n\n### ToMinute\n"
    }
  },
  {
    "pageContent": "ies to a daily scale.\n\n**Parameters:**\n- `source`: Source TimeSeries to compress\n- `market` (optional): MarketDetails for specific market trading rules\n\n**Remarks:**\n- Useful for converting intraday data to daily scale\n- Final value represents the last bar of the day\n- Globex-type markets trading through midnight can use market parameter\n\n**Usage Example:**\n```csharp\nTimeSeries minuteData = GetMinuteTimeSeries();\nTimeSeries dailyData = TimeSeriesCompressor.ToDaily(minuteData);\n```\n\n### ToMinute\n\n\n```csharp\npublic static TimeSeries ToMinute(TimeSeries source, int interval, MarketDetails market)\n\n```",
    "metadata": {
      "id": "time-series-compressor",
      "title": "time-series-compressor",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series-compressor.md",
      "chunkIndex": "code-context-2",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "TimeSeries oneMinuteData = GetOneMinuteTimeSeries();\nTimeSeries fiveMinuteData = TimeSeriesCompressor.ToMinute(oneMinuteData, 5, marketDetails);\n",
    "metadata": {
      "id": "time-series-compressor",
      "title": "time-series-compressor",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series-compressor.md",
      "chunkIndex": "code-3",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "\npublic static TimeSeries ToMinute(TimeSeries source, int interval, MarketDetails market)\n```\nCompresses the source TimeSeries to an interval-minute scale.\n\n**Parameters:**\n- `source`: Intraday TimeSeries with higher granularity\n- `interval`: Desired minute interval (e.g., 5, 15, 30)\n- `market`: MarketDetails for synchronizing to market open\n\n**Remarks:**\n- Source must have higher granularity than requested interval\n- Market parameter helps determine correct market open time\n\n**Usage Example:**\n"
    }
  },
  {
    "pageContent": "\npublic static TimeSeries ToMinute(TimeSeries source, int interval, MarketDetails market)\n```\nCompresses the source TimeSeries to an interval-minute scale.\n\n**Parameters:**\n- `source`: Intraday TimeSeries with higher granularity\n- `interval`: Desired minute interval (e.g., 5, 15, 30)\n- `market`: MarketDetails for synchronizing to market open\n\n**Remarks:**\n- Source must have higher granularity than requested interval\n- Market parameter helps determine correct market open time\n\n**Usage Example:**\n\n\n```csharp\nTimeSeries oneMinuteData = GetOneMinuteTimeSeries();\nTimeSeries fiveMinuteData = TimeSeriesCompressor.ToMinute(oneMinuteData, 5, marketDetails);\n\n```",
    "metadata": {
      "id": "time-series-compressor",
      "title": "time-series-compressor",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series-compressor.md",
      "chunkIndex": "code-context-3",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public static TimeSeries ToMonthly(TimeSeries source)\n",
    "metadata": {
      "id": "time-series-compressor",
      "title": "time-series-compressor",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series-compressor.md",
      "chunkIndex": "code-4",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": " `source`: Intraday TimeSeries with higher granularity\n- `interval`: Desired minute interval (e.g., 5, 15, 30)\n- `market`: MarketDetails for synchronizing to market open\n\n**Remarks:**\n- Source must have higher granularity than requested interval\n- Market parameter helps determine correct market open time\n\n**Usage Example:**\n```csharp\nTimeSeries oneMinuteData = GetOneMinuteTimeSeries();\nTimeSeries fiveMinuteData = TimeSeriesCompressor.ToMinute(oneMinuteData, 5, marketDetails);\n```\n\n### ToMonthly\n"
    }
  },
  {
    "pageContent": " `source`: Intraday TimeSeries with higher granularity\n- `interval`: Desired minute interval (e.g., 5, 15, 30)\n- `market`: MarketDetails for synchronizing to market open\n\n**Remarks:**\n- Source must have higher granularity than requested interval\n- Market parameter helps determine correct market open time\n\n**Usage Example:**\n```csharp\nTimeSeries oneMinuteData = GetOneMinuteTimeSeries();\nTimeSeries fiveMinuteData = TimeSeriesCompressor.ToMinute(oneMinuteData, 5, marketDetails);\n```\n\n### ToMonthly\n\n\n```csharp\npublic static TimeSeries ToMonthly(TimeSeries source)\n\n```",
    "metadata": {
      "id": "time-series-compressor",
      "title": "time-series-compressor",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series-compressor.md",
      "chunkIndex": "code-context-4",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "TimeSeries dailyData = GetDailyTimeSeries();\nTimeSeries monthlyData = TimeSeriesCompressor.ToMonthly(dailyData);\n",
    "metadata": {
      "id": "time-series-compressor",
      "title": "time-series-compressor",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series-compressor.md",
      "chunkIndex": "code-5",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ple:**\n```csharp\nTimeSeries oneMinuteData = GetOneMinuteTimeSeries();\nTimeSeries fiveMinuteData = TimeSeriesCompressor.ToMinute(oneMinuteData, 5, marketDetails);\n```\n\n### ToMonthly\n```csharp\npublic static TimeSeries ToMonthly(TimeSeries source)\n```\nCompresses the source TimeSeries to a monthly scale.\n\n**Remarks:**\n- Synchronizes with final bar of each month\n- For intraday sources, consider Pre/Post Market Data Strategy Setting\n- Returns value of last source bar for the month\n\n**Usage Example:**\n"
    }
  },
  {
    "pageContent": "ple:**\n```csharp\nTimeSeries oneMinuteData = GetOneMinuteTimeSeries();\nTimeSeries fiveMinuteData = TimeSeriesCompressor.ToMinute(oneMinuteData, 5, marketDetails);\n```\n\n### ToMonthly\n```csharp\npublic static TimeSeries ToMonthly(TimeSeries source)\n```\nCompresses the source TimeSeries to a monthly scale.\n\n**Remarks:**\n- Synchronizes with final bar of each month\n- For intraday sources, consider Pre/Post Market Data Strategy Setting\n- Returns value of last source bar for the month\n\n**Usage Example:**\n\n\n```csharp\nTimeSeries dailyData = GetDailyTimeSeries();\nTimeSeries monthlyData = TimeSeriesCompressor.ToMonthly(dailyData);\n\n```",
    "metadata": {
      "id": "time-series-compressor",
      "title": "time-series-compressor",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series-compressor.md",
      "chunkIndex": "code-context-5",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public static TimeSeries ToQuarterly(TimeSeries source)\n",
    "metadata": {
      "id": "time-series-compressor",
      "title": "time-series-compressor",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series-compressor.md",
      "chunkIndex": "code-6",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": ", marketDetails);\n```\n\n### ToMonthly\n```csharp\npublic static TimeSeries ToMonthly(TimeSeries source)\n```\nCompresses the source TimeSeries to a monthly scale.\n\n**Remarks:**\n- Synchronizes with final bar of each month\n- For intraday sources, consider Pre/Post Market Data Strategy Setting\n- Returns value of last source bar for the month\n\n**Usage Example:**\n```csharp\nTimeSeries dailyData = GetDailyTimeSeries();\nTimeSeries monthlyData = TimeSeriesCompressor.ToMonthly(dailyData);\n```\n\n### ToQuarterly\n"
    }
  },
  {
    "pageContent": ", marketDetails);\n```\n\n### ToMonthly\n```csharp\npublic static TimeSeries ToMonthly(TimeSeries source)\n```\nCompresses the source TimeSeries to a monthly scale.\n\n**Remarks:**\n- Synchronizes with final bar of each month\n- For intraday sources, consider Pre/Post Market Data Strategy Setting\n- Returns value of last source bar for the month\n\n**Usage Example:**\n```csharp\nTimeSeries dailyData = GetDailyTimeSeries();\nTimeSeries monthlyData = TimeSeriesCompressor.ToMonthly(dailyData);\n```\n\n### ToQuarterly\n\n\n```csharp\npublic static TimeSeries ToQuarterly(TimeSeries source)\n\n```",
    "metadata": {
      "id": "time-series-compressor",
      "title": "time-series-compressor",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series-compressor.md",
      "chunkIndex": "code-context-6",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "TimeSeries monthlyData = GetMonthlyTimeSeries();\nTimeSeries quarterlyData = TimeSeriesCompressor.ToQuarterly(monthlyData);\n",
    "metadata": {
      "id": "time-series-compressor",
      "title": "time-series-compressor",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series-compressor.md",
      "chunkIndex": "code-7",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "age Example:**\n```csharp\nTimeSeries dailyData = GetDailyTimeSeries();\nTimeSeries monthlyData = TimeSeriesCompressor.ToMonthly(dailyData);\n```\n\n### ToQuarterly\n```csharp\npublic static TimeSeries ToQuarterly(TimeSeries source)\n```\nCompresses the source TimeSeries to a quarterly scale.\n\n**Remarks:**\n- Synchronizes with final bar of each quarter (March, June, September, December)\n- Considers Pre/Post Market Data Strategy Setting\n- Returns value of last source bar for the quarter\n\n**Usage Example:**\n"
    }
  },
  {
    "pageContent": "age Example:**\n```csharp\nTimeSeries dailyData = GetDailyTimeSeries();\nTimeSeries monthlyData = TimeSeriesCompressor.ToMonthly(dailyData);\n```\n\n### ToQuarterly\n```csharp\npublic static TimeSeries ToQuarterly(TimeSeries source)\n```\nCompresses the source TimeSeries to a quarterly scale.\n\n**Remarks:**\n- Synchronizes with final bar of each quarter (March, June, September, December)\n- Considers Pre/Post Market Data Strategy Setting\n- Returns value of last source bar for the quarter\n\n**Usage Example:**\n\n\n```csharp\nTimeSeries monthlyData = GetMonthlyTimeSeries();\nTimeSeries quarterlyData = TimeSeriesCompressor.ToQuarterly(monthlyData);\n\n```",
    "metadata": {
      "id": "time-series-compressor",
      "title": "time-series-compressor",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series-compressor.md",
      "chunkIndex": "code-context-7",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public static TimeSeries ToWeekly(TimeSeries source)\n",
    "metadata": {
      "id": "time-series-compressor",
      "title": "time-series-compressor",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series-compressor.md",
      "chunkIndex": "code-8",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "arterly\n```csharp\npublic static TimeSeries ToQuarterly(TimeSeries source)\n```\nCompresses the source TimeSeries to a quarterly scale.\n\n**Remarks:**\n- Synchronizes with final bar of each quarter (March, June, September, December)\n- Considers Pre/Post Market Data Strategy Setting\n- Returns value of last source bar for the quarter\n\n**Usage Example:**\n```csharp\nTimeSeries monthlyData = GetMonthlyTimeSeries();\nTimeSeries quarterlyData = TimeSeriesCompressor.ToQuarterly(monthlyData);\n```\n\n### ToWeekly\n"
    }
  },
  {
    "pageContent": "arterly\n```csharp\npublic static TimeSeries ToQuarterly(TimeSeries source)\n```\nCompresses the source TimeSeries to a quarterly scale.\n\n**Remarks:**\n- Synchronizes with final bar of each quarter (March, June, September, December)\n- Considers Pre/Post Market Data Strategy Setting\n- Returns value of last source bar for the quarter\n\n**Usage Example:**\n```csharp\nTimeSeries monthlyData = GetMonthlyTimeSeries();\nTimeSeries quarterlyData = TimeSeriesCompressor.ToQuarterly(monthlyData);\n```\n\n### ToWeekly\n\n\n```csharp\npublic static TimeSeries ToWeekly(TimeSeries source)\n\n```",
    "metadata": {
      "id": "time-series-compressor",
      "title": "time-series-compressor",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series-compressor.md",
      "chunkIndex": "code-context-8",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "TimeSeries dailyData = GetDailyTimeSeries();\nTimeSeries weeklyData = TimeSeriesCompressor.ToWeekly(dailyData);\n",
    "metadata": {
      "id": "time-series-compressor",
      "title": "time-series-compressor",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series-compressor.md",
      "chunkIndex": "code-9",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "of last source bar for the quarter\n\n**Usage Example:**\n```csharp\nTimeSeries monthlyData = GetMonthlyTimeSeries();\nTimeSeries quarterlyData = TimeSeriesCompressor.ToQuarterly(monthlyData);\n```\n\n### ToWeekly\n```csharp\npublic static TimeSeries ToWeekly(TimeSeries source)\n```\nCompresses the source TimeSeries to a weekly scale.\n\n**Remarks:**\n- Synchronizes with final bar of each week\n- Considers Pre/Post Market Data Strategy Setting\n- Returns value of last source bar for the week\n\n**Usage Example:**\n"
    }
  },
  {
    "pageContent": "of last source bar for the quarter\n\n**Usage Example:**\n```csharp\nTimeSeries monthlyData = GetMonthlyTimeSeries();\nTimeSeries quarterlyData = TimeSeriesCompressor.ToQuarterly(monthlyData);\n```\n\n### ToWeekly\n```csharp\npublic static TimeSeries ToWeekly(TimeSeries source)\n```\nCompresses the source TimeSeries to a weekly scale.\n\n**Remarks:**\n- Synchronizes with final bar of each week\n- Considers Pre/Post Market Data Strategy Setting\n- Returns value of last source bar for the week\n\n**Usage Example:**\n\n\n```csharp\nTimeSeries dailyData = GetDailyTimeSeries();\nTimeSeries weeklyData = TimeSeriesCompressor.ToWeekly(dailyData);\n\n```",
    "metadata": {
      "id": "time-series-compressor",
      "title": "time-series-compressor",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series-compressor.md",
      "chunkIndex": "code-context-9",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public static TimeSeries ToYearly(TimeSeries source)\n",
    "metadata": {
      "id": "time-series-compressor",
      "title": "time-series-compressor",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series-compressor.md",
      "chunkIndex": "code-10",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "= TimeSeriesCompressor.ToQuarterly(monthlyData);\n```\n\n### ToWeekly\n```csharp\npublic static TimeSeries ToWeekly(TimeSeries source)\n```\nCompresses the source TimeSeries to a weekly scale.\n\n**Remarks:**\n- Synchronizes with final bar of each week\n- Considers Pre/Post Market Data Strategy Setting\n- Returns value of last source bar for the week\n\n**Usage Example:**\n```csharp\nTimeSeries dailyData = GetDailyTimeSeries();\nTimeSeries weeklyData = TimeSeriesCompressor.ToWeekly(dailyData);\n```\n\n### ToYearly\n"
    }
  },
  {
    "pageContent": "= TimeSeriesCompressor.ToQuarterly(monthlyData);\n```\n\n### ToWeekly\n```csharp\npublic static TimeSeries ToWeekly(TimeSeries source)\n```\nCompresses the source TimeSeries to a weekly scale.\n\n**Remarks:**\n- Synchronizes with final bar of each week\n- Considers Pre/Post Market Data Strategy Setting\n- Returns value of last source bar for the week\n\n**Usage Example:**\n```csharp\nTimeSeries dailyData = GetDailyTimeSeries();\nTimeSeries weeklyData = TimeSeriesCompressor.ToWeekly(dailyData);\n```\n\n### ToYearly\n\n\n```csharp\npublic static TimeSeries ToYearly(TimeSeries source)\n\n```",
    "metadata": {
      "id": "time-series-compressor",
      "title": "time-series-compressor",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series-compressor.md",
      "chunkIndex": "code-context-10",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "TimeSeries monthlyData = GetMonthlyTimeSeries();\nTimeSeries yearlyData = TimeSeriesCompressor.ToYearly(monthlyData);\n",
    "metadata": {
      "id": "time-series-compressor",
      "title": "time-series-compressor",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series-compressor.md",
      "chunkIndex": "code-11",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "esses the source TimeSeries to a weekly scale.\n\n**Remarks:**\n- Synchronizes with final bar of each week\n- Considers Pre/Post Market Data Strategy Setting\n- Returns value of last source bar for the week\n\n**Usage Example:**\n```csharp\nTimeSeries dailyData = GetDailyTimeSeries();\nTimeSeries weeklyData = TimeSeriesCompressor.ToWeekly(dailyData);\n```\n\n### ToYearly\n```csharp\npublic static TimeSeries ToYearly(TimeSeries source)\n```\nCompresses the source TimeSeries to a yearly scale.\n\n**Usage Example:**\n"
    }
  },
  {
    "pageContent": "esses the source TimeSeries to a weekly scale.\n\n**Remarks:**\n- Synchronizes with final bar of each week\n- Considers Pre/Post Market Data Strategy Setting\n- Returns value of last source bar for the week\n\n**Usage Example:**\n```csharp\nTimeSeries dailyData = GetDailyTimeSeries();\nTimeSeries weeklyData = TimeSeriesCompressor.ToWeekly(dailyData);\n```\n\n### ToYearly\n```csharp\npublic static TimeSeries ToYearly(TimeSeries source)\n```\nCompresses the source TimeSeries to a yearly scale.\n\n**Usage Example:**\n\n\n```csharp\nTimeSeries monthlyData = GetMonthlyTimeSeries();\nTimeSeries yearlyData = TimeSeriesCompressor.ToYearly(monthlyData);\n\n```",
    "metadata": {
      "id": "time-series-compressor",
      "title": "time-series-compressor",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series-compressor.md",
      "chunkIndex": "code-context-11",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public class TimeSeriesScaleAnalyzer\n{\n    public void AnalyzeMultipleScales(TimeSeries sourceData)\n    {\n        // Compress to different scales\n        TimeSeries dailyData = TimeSeriesCompressor.ToDaily(sourceData);\n        TimeSeries weeklyData = TimeSeriesCompressor.ToWeekly(sourceData);\n        TimeSeries monthlyData = TimeSeriesCompressor.ToMonthly(sourceData);\n        \n        // Analyze each scale\n        Console.WriteLine($\"Source Data Points: {sourceData.Count}\");\n        Console.WriteLine($\"Daily Data Points: {dailyData.Count}\");\n        Console.WriteLine($\"Weekly Data Points: {weeklyData.Count}\");\n        Console.WriteLine($\"Monthly Data Points: {monthlyData.Count}\");\n    }\n}\n",
    "metadata": {
      "id": "time-series-compressor",
      "title": "time-series-compressor",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series-compressor.md",
      "chunkIndex": "code-12",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "urce bar for the week\n\n**Usage Example:**\n```csharp\nTimeSeries dailyData = GetDailyTimeSeries();\nTimeSeries weeklyData = TimeSeriesCompressor.ToWeekly(dailyData);\n```\n\n### ToYearly\n```csharp\npublic static TimeSeries ToYearly(TimeSeries source)\n```\nCompresses the source TimeSeries to a yearly scale.\n\n**Usage Example:**\n```csharp\nTimeSeries monthlyData = GetMonthlyTimeSeries();\nTimeSeries yearlyData = TimeSeriesCompressor.ToYearly(monthlyData);\n```\n\n## Comprehensive Example: Multi-Scale Analysis\n\n"
    }
  },
  {
    "pageContent": "urce bar for the week\n\n**Usage Example:**\n```csharp\nTimeSeries dailyData = GetDailyTimeSeries();\nTimeSeries weeklyData = TimeSeriesCompressor.ToWeekly(dailyData);\n```\n\n### ToYearly\n```csharp\npublic static TimeSeries ToYearly(TimeSeries source)\n```\nCompresses the source TimeSeries to a yearly scale.\n\n**Usage Example:**\n```csharp\nTimeSeries monthlyData = GetMonthlyTimeSeries();\nTimeSeries yearlyData = TimeSeriesCompressor.ToYearly(monthlyData);\n```\n\n## Comprehensive Example: Multi-Scale Analysis\n\n\n\n```csharp\npublic class TimeSeriesScaleAnalyzer\n{\n    public void AnalyzeMultipleScales(TimeSeries sourceData)\n    {\n        // Compress to different scales\n        TimeSeries dailyData = TimeSeriesCompressor.ToDaily(sourceData);\n        TimeSeries weeklyData = TimeSeriesCompressor.ToWeekly(sourceData);\n        TimeSeries monthlyData = TimeSeriesCompressor.ToMonthly(sourceData);\n        \n        // Analyze each scale\n        Console.WriteLine($\"Source Data Points: {sourceData.Count}\");\n        Console.WriteLine($\"Daily Data Points: {dailyData.Count}\");\n        Console.WriteLine($\"Weekly Data Points: {weeklyData.Count}\");\n        Console.WriteLine($\"Monthly Data Points: {monthlyData.Count}\");\n    }\n}\n\n```",
    "metadata": {
      "id": "time-series-compressor",
      "title": "time-series-compressor",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series-compressor.md",
      "chunkIndex": "code-context-12",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "# TimeSeriesSynchronizer Class\n\n**Namespace:** WealthLab.Core  \n**Parent:** Static Utility Class\n\nThe `TimeSeriesSynchronizer` is a static utility class that provides methods for synchronizing `TimeSeries` instances across different time scales, enabling precise alignment of time series data for analysis and visualization.\n\n## Overview\n\n`TimeSeriesSynchronizer` allows developers to align time series data with different time scales, such as synchronizing weekly data to a daily chart or intraday data to a broader time frame.\n\n## Key Characteristics\n\n- Static synchronization method\n- Supports various time series and bar history types\n- Handles different time scale alignments\n- Flexible pre-filling of missing data points\n\n## Static Methods\n\n### Synchronize\n",
    "metadata": {
      "id": "time-series-synchronizer",
      "title": "time-series-synchronizer",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series-synchronizer.md",
      "chunkIndex": 0,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nSynchronizes the source TimeSeries with a master time series.\n\n**Parameters:**\n- `source`: Source TimeSeries to synchronize\n- `master`: Master TimeSeriesBase (TimeSeries or BarHistory)\n- `preFillNans` (optional): Value to fill initial periods with NaN\n- `market` (optional): MarketDetails for precise time alignment\n\n**Return Value:**\n- A new `TimeSeries` synchronized with the master time series\n\n**Behavior:**\n- Aligns source data with master time series timestamps\n- Fills initial periods with NaN or specified value\n- Handles different time scale conversions\n\n**Usage Examples:**\n\n### Basic Synchronization\n",
    "metadata": {
      "id": "time-series-synchronizer",
      "title": "time-series-synchronizer",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series-synchronizer.md",
      "chunkIndex": 1,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n### Synchronization with Pre-Fill\n",
    "metadata": {
      "id": "time-series-synchronizer",
      "title": "time-series-synchronizer",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series-synchronizer.md",
      "chunkIndex": 2,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n### Market-Specific Synchronization\n",
    "metadata": {
      "id": "time-series-synchronizer",
      "title": "time-series-synchronizer",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series-synchronizer.md",
      "chunkIndex": 3,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n## Comprehensive Example: Multi-Scale Data Alignment\n\n",
    "metadata": {
      "id": "time-series-synchronizer",
      "title": "time-series-synchronizer",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series-synchronizer.md",
      "chunkIndex": 4,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n## Best Practices\n\n1. **Time Scale Alignment**\n   - Choose appropriate master and source time series\n   - Consider market-specific trading characteristics\n   - Validate synchronization results\n\n2. **Data Handling**\n   - Handle pre-fill values carefully\n   - Be aware of data loss during synchronization\n   - Use market details for precise alignment\n\n3. **Performance Considerations**\n   - Minimize unnecessary synchronization\n   - Cache synchronized time series when possible\n   - Profile performance for large datasets\n\n## Cautions\n\n⚠️ Important Considerations:\n- Synchronization may result in data point reduction\n- Pre-fill values can impact subsequent analysis\n- Different time scales may require careful interpretation\n\n## Related Classes\n\n- `TimeSeriesCompressor`: Compresses time series to different scales\n- `BarHistorySynchronizer`: Similar synchronization for bar history\n\n## Notes\n\n- Critical for multi-scale financial data analysis\n- Enables precise time series alignment\n- Supports complex data visualization scenarios\n\n## Performance Tips\n\n- Reuse synchronized time series when possible\n- Consider memory implications of synchronization\n- Use market details for accurate time alignment\n\n## Potential Pitfalls\n\n1. **Data Loss**\n   - Synchronization may remove data points\n   - Verify data integrity after synchronization\n\n2. **Time Zone Considerations**\n   - Be aware of market-specific time zone nuances\n   - Use `MarketDetails` for precise alignment\n\n3. **Computational Overhead**\n   - Synchronization can be computationally expensive\n   - Profile and optimize for large datasets\n\n## Advanced Use Cases\n\n- Cross-market analysis\n- Multi-timeframe trading strategies\n- Complex financial modeling\n- Advanced charting and visualization\n\n## Extensibility\n\nWhile `TimeSeriesSynchronizer` provides robust synchronization, developers may need to implement custom synchronization logic for unique scenarios. ",
    "metadata": {
      "id": "time-series-synchronizer",
      "title": "time-series-synchronizer",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series-synchronizer.md",
      "chunkIndex": 5,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "public static TimeSeries Synchronize(\n    TimeSeries source, \n    TimeSeriesBase master, \n    double? preFillNans = null, \n    MarketDetails market = null)\n",
    "metadata": {
      "id": "time-series-synchronizer",
      "title": "time-series-synchronizer",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series-synchronizer.md",
      "chunkIndex": "code-0",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "alignment of time series data for analysis and visualization.\n\n## Overview\n\n`TimeSeriesSynchronizer` allows developers to align time series data with different time scales, such as synchronizing weekly data to a daily chart or intraday data to a broader time frame.\n\n## Key Characteristics\n\n- Static synchronization method\n- Supports various time series and bar history types\n- Handles different time scale alignments\n- Flexible pre-filling of missing data points\n\n## Static Methods\n\n### Synchronize\n"
    }
  },
  {
    "pageContent": "alignment of time series data for analysis and visualization.\n\n## Overview\n\n`TimeSeriesSynchronizer` allows developers to align time series data with different time scales, such as synchronizing weekly data to a daily chart or intraday data to a broader time frame.\n\n## Key Characteristics\n\n- Static synchronization method\n- Supports various time series and bar history types\n- Handles different time scale alignments\n- Flexible pre-filling of missing data points\n\n## Static Methods\n\n### Synchronize\n\n\n```csharp\npublic static TimeSeries Synchronize(\n    TimeSeries source, \n    TimeSeriesBase master, \n    double? preFillNans = null, \n    MarketDetails market = null)\n\n```",
    "metadata": {
      "id": "time-series-synchronizer",
      "title": "time-series-synchronizer",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series-synchronizer.md",
      "chunkIndex": "code-context-0",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public class TimeSeriesAligner\n{\n    public TimeSeries AlignTimeSeries(TimeSeries sourceData, TimeSeries masterData)\n    {\n        // Synchronize source to master time series\n        TimeSeries synchronizedSeries = TimeSeriesSynchronizer.Synchronize(\n            sourceData, \n            masterData\n        );\n\n        return synchronizedSeries;\n    }\n}\n",
    "metadata": {
      "id": "time-series-synchronizer",
      "title": "time-series-synchronizer",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series-synchronizer.md",
      "chunkIndex": "code-1",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": " synchronize\n- `master`: Master TimeSeriesBase (TimeSeries or BarHistory)\n- `preFillNans` (optional): Value to fill initial periods with NaN\n- `market` (optional): MarketDetails for precise time alignment\n\n**Return Value:**\n- A new `TimeSeries` synchronized with the master time series\n\n**Behavior:**\n- Aligns source data with master time series timestamps\n- Fills initial periods with NaN or specified value\n- Handles different time scale conversions\n\n**Usage Examples:**\n\n### Basic Synchronization\n"
    }
  },
  {
    "pageContent": " synchronize\n- `master`: Master TimeSeriesBase (TimeSeries or BarHistory)\n- `preFillNans` (optional): Value to fill initial periods with NaN\n- `market` (optional): MarketDetails for precise time alignment\n\n**Return Value:**\n- A new `TimeSeries` synchronized with the master time series\n\n**Behavior:**\n- Aligns source data with master time series timestamps\n- Fills initial periods with NaN or specified value\n- Handles different time scale conversions\n\n**Usage Examples:**\n\n### Basic Synchronization\n\n\n```csharp\npublic class TimeSeriesAligner\n{\n    public TimeSeries AlignTimeSeries(TimeSeries sourceData, TimeSeries masterData)\n    {\n        // Synchronize source to master time series\n        TimeSeries synchronizedSeries = TimeSeriesSynchronizer.Synchronize(\n            sourceData, \n            masterData\n        );\n\n        return synchronizedSeries;\n    }\n}\n\n```",
    "metadata": {
      "id": "time-series-synchronizer",
      "title": "time-series-synchronizer",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series-synchronizer.md",
      "chunkIndex": "code-context-1",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public class AdvancedTimeSeriesSync\n{\n    public TimeSeries SyncWithCustomFill(\n        TimeSeries sourceData, \n        BarHistory masterData)\n    {\n        // Synchronize with a specific pre-fill value\n        TimeSeries synchronizedSeries = TimeSeriesSynchronizer.Synchronize(\n            sourceData, \n            masterData, \n            preFillNans: 0.0  // Fill initial periods with zero\n        );\n\n        return synchronizedSeries;\n    }\n}\n",
    "metadata": {
      "id": "time-series-synchronizer",
      "title": "time-series-synchronizer",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series-synchronizer.md",
      "chunkIndex": "code-2",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "value\n- Handles different time scale conversions\n\n**Usage Examples:**\n\n### Basic Synchronization\n```csharp\npublic class TimeSeriesAligner\n{\n    public TimeSeries AlignTimeSeries(TimeSeries sourceData, TimeSeries masterData)\n    {\n        // Synchronize source to master time series\n        TimeSeries synchronizedSeries = TimeSeriesSynchronizer.Synchronize(\n            sourceData, \n            masterData\n        );\n\n        return synchronizedSeries;\n    }\n}\n```\n\n### Synchronization with Pre-Fill\n"
    }
  },
  {
    "pageContent": "value\n- Handles different time scale conversions\n\n**Usage Examples:**\n\n### Basic Synchronization\n```csharp\npublic class TimeSeriesAligner\n{\n    public TimeSeries AlignTimeSeries(TimeSeries sourceData, TimeSeries masterData)\n    {\n        // Synchronize source to master time series\n        TimeSeries synchronizedSeries = TimeSeriesSynchronizer.Synchronize(\n            sourceData, \n            masterData\n        );\n\n        return synchronizedSeries;\n    }\n}\n```\n\n### Synchronization with Pre-Fill\n\n\n```csharp\npublic class AdvancedTimeSeriesSync\n{\n    public TimeSeries SyncWithCustomFill(\n        TimeSeries sourceData, \n        BarHistory masterData)\n    {\n        // Synchronize with a specific pre-fill value\n        TimeSeries synchronizedSeries = TimeSeriesSynchronizer.Synchronize(\n            sourceData, \n            masterData, \n            preFillNans: 0.0  // Fill initial periods with zero\n        );\n\n        return synchronizedSeries;\n    }\n}\n\n```",
    "metadata": {
      "id": "time-series-synchronizer",
      "title": "time-series-synchronizer",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series-synchronizer.md",
      "chunkIndex": "code-context-2",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public class MarketSpecificSync\n{\n    public TimeSeries SyncWithMarketDetails(\n        TimeSeries intraday, \n        TimeSeries daily, \n        MarketDetails marketDetails)\n    {\n        // Synchronize intraday data with daily chart\n        // Using specific market close time\n        TimeSeries synchronizedSeries = TimeSeriesSynchronizer.Synchronize(\n            intraday, \n            daily, \n            market: marketDetails\n        );\n\n        return synchronizedSeries;\n    }\n}\n",
    "metadata": {
      "id": "time-series-synchronizer",
      "title": "time-series-synchronizer",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series-synchronizer.md",
      "chunkIndex": "code-3",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "\n```csharp\npublic class AdvancedTimeSeriesSync\n{\n    public TimeSeries SyncWithCustomFill(\n        TimeSeries sourceData, \n        BarHistory masterData)\n    {\n        // Synchronize with a specific pre-fill value\n        TimeSeries synchronizedSeries = TimeSeriesSynchronizer.Synchronize(\n            sourceData, \n            masterData, \n            preFillNans: 0.0  // Fill initial periods with zero\n        );\n\n        return synchronizedSeries;\n    }\n}\n```\n\n### Market-Specific Synchronization\n"
    }
  },
  {
    "pageContent": "\n```csharp\npublic class AdvancedTimeSeriesSync\n{\n    public TimeSeries SyncWithCustomFill(\n        TimeSeries sourceData, \n        BarHistory masterData)\n    {\n        // Synchronize with a specific pre-fill value\n        TimeSeries synchronizedSeries = TimeSeriesSynchronizer.Synchronize(\n            sourceData, \n            masterData, \n            preFillNans: 0.0  // Fill initial periods with zero\n        );\n\n        return synchronizedSeries;\n    }\n}\n```\n\n### Market-Specific Synchronization\n\n\n```csharp\npublic class MarketSpecificSync\n{\n    public TimeSeries SyncWithMarketDetails(\n        TimeSeries intraday, \n        TimeSeries daily, \n        MarketDetails marketDetails)\n    {\n        // Synchronize intraday data with daily chart\n        // Using specific market close time\n        TimeSeries synchronizedSeries = TimeSeriesSynchronizer.Synchronize(\n            intraday, \n            daily, \n            market: marketDetails\n        );\n\n        return synchronizedSeries;\n    }\n}\n\n```",
    "metadata": {
      "id": "time-series-synchronizer",
      "title": "time-series-synchronizer",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series-synchronizer.md",
      "chunkIndex": "code-context-3",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public class MultiScaleDataAnalyzer\n{\n    public void AnalyzeMultiScaleData(\n        TimeSeries minuteData, \n        TimeSeries dailyData, \n        MarketDetails marketDetails)\n    {\n        // Synchronize minute data to daily chart\n        TimeSeries synchronizedMinuteData = TimeSeriesSynchronizer.Synchronize(\n            minuteData, \n            dailyData, \n            preFillNans: 0.0,  // Pre-fill with zero\n            market: marketDetails\n        );\n\n        // Perform analysis on synchronized data\n        Console.WriteLine($\"Original Minute Data Points: {minuteData.Count}\");\n        Console.WriteLine($\"Synchronized Minute Data Points: {synchronizedMinuteData.Count}\");\n    }\n}\n",
    "metadata": {
      "id": "time-series-synchronizer",
      "title": "time-series-synchronizer",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series-synchronizer.md",
      "chunkIndex": "code-4",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": " TimeSeries SyncWithMarketDetails(\n        TimeSeries intraday, \n        TimeSeries daily, \n        MarketDetails marketDetails)\n    {\n        // Synchronize intraday data with daily chart\n        // Using specific market close time\n        TimeSeries synchronizedSeries = TimeSeriesSynchronizer.Synchronize(\n            intraday, \n            daily, \n            market: marketDetails\n        );\n\n        return synchronizedSeries;\n    }\n}\n```\n\n## Comprehensive Example: Multi-Scale Data Alignment\n\n"
    }
  },
  {
    "pageContent": " TimeSeries SyncWithMarketDetails(\n        TimeSeries intraday, \n        TimeSeries daily, \n        MarketDetails marketDetails)\n    {\n        // Synchronize intraday data with daily chart\n        // Using specific market close time\n        TimeSeries synchronizedSeries = TimeSeriesSynchronizer.Synchronize(\n            intraday, \n            daily, \n            market: marketDetails\n        );\n\n        return synchronizedSeries;\n    }\n}\n```\n\n## Comprehensive Example: Multi-Scale Data Alignment\n\n\n\n```csharp\npublic class MultiScaleDataAnalyzer\n{\n    public void AnalyzeMultiScaleData(\n        TimeSeries minuteData, \n        TimeSeries dailyData, \n        MarketDetails marketDetails)\n    {\n        // Synchronize minute data to daily chart\n        TimeSeries synchronizedMinuteData = TimeSeriesSynchronizer.Synchronize(\n            minuteData, \n            dailyData, \n            preFillNans: 0.0,  // Pre-fill with zero\n            market: marketDetails\n        );\n\n        // Perform analysis on synchronized data\n        Console.WriteLine($\"Original Minute Data Points: {minuteData.Count}\");\n        Console.WriteLine($\"Synchronized Minute Data Points: {synchronizedMinuteData.Count}\");\n    }\n}\n\n```",
    "metadata": {
      "id": "time-series-synchronizer",
      "title": "time-series-synchronizer",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series-synchronizer.md",
      "chunkIndex": "code-context-4",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "# TimeSeries Class\n\n**Namespace:** WealthLab.Core  \n**Parent:** TimeSeriesBase  \n**Descendants:** IndicatorBase\n\nThe `TimeSeries` class is a fundamental data structure in WealthLab 8, managing a synchronized list of numeric values and their corresponding dates.\n\n## Overview\n\n`TimeSeries` provides:\n- A list of double-precision values\n- A corresponding list of DateTime values\n- Advanced mathematical and statistical operations\n- Flexible data manipulation capabilities\n\n## Constructors\n\n### Parameterless Constructor\n",
    "metadata": {
      "id": "time-series",
      "title": "time-series",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series.md",
      "chunkIndex": 0,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nCreates an empty TimeSeries that manages its own DateTimes.\n\n### DateTime List Constructor\n",
    "metadata": {
      "id": "time-series",
      "title": "time-series",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series.md",
      "chunkIndex": 1,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nCreates a TimeSeries with a predefined list of DateTimes.\n\n**Parameters:**\n- `dateTimes`: List of DateTime values\n- `fillNaN`: If true, populates Values with `Double.NaN`\n\n### Filled Constructor\n",
    "metadata": {
      "id": "time-series",
      "title": "time-series",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series.md",
      "chunkIndex": 2,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nCreates a TimeSeries with a predefined list of DateTimes and a specific fill value.\n\n## Core Properties\n\n### Values\n",
    "metadata": {
      "id": "time-series",
      "title": "time-series",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series.md",
      "chunkIndex": 3,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nContains the numeric values of the time series.\n\n### DateTimes\n",
    "metadata": {
      "id": "time-series",
      "title": "time-series",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series.md",
      "chunkIndex": 4,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nContains the corresponding dates for each value.\n\n### Count\n",
    "metadata": {
      "id": "time-series",
      "title": "time-series",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series.md",
      "chunkIndex": 5,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the number of items in the time series.\n\n### StartDate and EndDate\n",
    "metadata": {
      "id": "time-series",
      "title": "time-series",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series.md",
      "chunkIndex": 6,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the first and last DateTime in the series.\n\n## Key Methods\n\n### Mathematical Operations\n\n#### Abs\n",
    "metadata": {
      "id": "time-series",
      "title": "time-series",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series.md",
      "chunkIndex": 7,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns a new TimeSeries with absolute values.\n\n#### LogReturn\n",
    "metadata": {
      "id": "time-series",
      "title": "time-series",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series.md",
      "chunkIndex": 8,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nCalculates log returns for a specified period.\n\n#### Sum\n",
    "metadata": {
      "id": "time-series",
      "title": "time-series",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series.md",
      "chunkIndex": 9,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns a new TimeSeries summed over the specified period.\n\n### Statistical Methods\n\n#### GetHighest and GetLowest\n",
    "metadata": {
      "id": "time-series",
      "title": "time-series",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series.md",
      "chunkIndex": 10,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nFind highest/lowest values and their bar indices.\n\n#### Kurtosis and Skewness\n",
    "metadata": {
      "id": "time-series",
      "title": "time-series",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series.md",
      "chunkIndex": 11,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nCalculate statistical distribution measures.\n\n### Comparison Methods\n\n#### CrossesOver and CrossesUnder\n",
    "metadata": {
      "id": "time-series",
      "title": "time-series",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series.md",
      "chunkIndex": 12,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nDetect value crossover and crossunder events.\n\n## Operator Overloads\n\n### Arithmetic Operators\n",
    "metadata": {
      "id": "time-series",
      "title": "time-series",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series.md",
      "chunkIndex": 13,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n### Comparison Operators\n",
    "metadata": {
      "id": "time-series",
      "title": "time-series",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series.md",
      "chunkIndex": 14,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n### Shift Operators\n",
    "metadata": {
      "id": "time-series",
      "title": "time-series",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series.md",
      "chunkIndex": 15,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n## Static Methods\n\n### Mathematical Transformations\n",
    "metadata": {
      "id": "time-series",
      "title": "time-series",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series.md",
      "chunkIndex": 16,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n### Aggregation Methods\n",
    "metadata": {
      "id": "time-series",
      "title": "time-series",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series.md",
      "chunkIndex": 17,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n## Usage Examples\n\n### Basic TimeSeries Creation and Manipulation\n",
    "metadata": {
      "id": "time-series",
      "title": "time-series",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series.md",
      "chunkIndex": 18,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n### Advanced Time Series Analysis\n",
    "metadata": {
      "id": "time-series",
      "title": "time-series",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series.md",
      "chunkIndex": 19,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n## Best Practices\n\n1. **Data Synchronization**\n   - Ensure DateTimes and Values lists are always synchronized\n   - Use constructors that maintain list integrity\n\n2. **Performance**\n   - Minimize unnecessary TimeSeries creation\n   - Use built-in methods for efficient calculations\n   - Consider memory usage with large time series\n\n3. **Null and NaN Handling**\n   - Handle `Double.NaN` values appropriately\n   - Use `FirstValidIndex` to skip initial invalid data\n\n## Performance Considerations\n\n- `TimeSeries` instances can be memory-intensive\n- Prefer built-in methods over manual calculations\n- Use lazy evaluation when possible\n- Consider caching results of expensive computations\n\n## Notes\n\n- Fundamental to WealthLab's data processing\n- Supports complex financial time series analysis\n- Provides extensive mathematical and statistical operations\n- Designed for high-performance financial computing\n\n## Requirements\n\n- Understanding of time series data structures\n- Familiarity with financial mathematics\n- Knowledge of statistical analysis techniques ",
    "metadata": {
      "id": "time-series",
      "title": "time-series",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series.md",
      "chunkIndex": 20,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "public TimeSeries()\n",
    "metadata": {
      "id": "time-series",
      "title": "time-series",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series.md",
      "chunkIndex": "code-0",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "\n\n**Namespace:** WealthLab.Core  \n**Parent:** TimeSeriesBase  \n**Descendants:** IndicatorBase\n\nThe `TimeSeries` class is a fundamental data structure in WealthLab 8, managing a synchronized list of numeric values and their corresponding dates.\n\n## Overview\n\n`TimeSeries` provides:\n- A list of double-precision values\n- A corresponding list of DateTime values\n- Advanced mathematical and statistical operations\n- Flexible data manipulation capabilities\n\n## Constructors\n\n### Parameterless Constructor\n"
    }
  },
  {
    "pageContent": "\n\n**Namespace:** WealthLab.Core  \n**Parent:** TimeSeriesBase  \n**Descendants:** IndicatorBase\n\nThe `TimeSeries` class is a fundamental data structure in WealthLab 8, managing a synchronized list of numeric values and their corresponding dates.\n\n## Overview\n\n`TimeSeries` provides:\n- A list of double-precision values\n- A corresponding list of DateTime values\n- Advanced mathematical and statistical operations\n- Flexible data manipulation capabilities\n\n## Constructors\n\n### Parameterless Constructor\n\n\n```csharp\npublic TimeSeries()\n\n```",
    "metadata": {
      "id": "time-series",
      "title": "time-series",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series.md",
      "chunkIndex": "code-context-0",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public TimeSeries(List<DateTime> dateTimes, bool fillNaN = true)\n",
    "metadata": {
      "id": "time-series",
      "title": "time-series",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series.md",
      "chunkIndex": "code-1",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ndamental data structure in WealthLab 8, managing a synchronized list of numeric values and their corresponding dates.\n\n## Overview\n\n`TimeSeries` provides:\n- A list of double-precision values\n- A corresponding list of DateTime values\n- Advanced mathematical and statistical operations\n- Flexible data manipulation capabilities\n\n## Constructors\n\n### Parameterless Constructor\n```csharp\npublic TimeSeries()\n```\nCreates an empty TimeSeries that manages its own DateTimes.\n\n### DateTime List Constructor\n"
    }
  },
  {
    "pageContent": "ndamental data structure in WealthLab 8, managing a synchronized list of numeric values and their corresponding dates.\n\n## Overview\n\n`TimeSeries` provides:\n- A list of double-precision values\n- A corresponding list of DateTime values\n- Advanced mathematical and statistical operations\n- Flexible data manipulation capabilities\n\n## Constructors\n\n### Parameterless Constructor\n```csharp\npublic TimeSeries()\n```\nCreates an empty TimeSeries that manages its own DateTimes.\n\n### DateTime List Constructor\n\n\n```csharp\npublic TimeSeries(List<DateTime> dateTimes, bool fillNaN = true)\n\n```",
    "metadata": {
      "id": "time-series",
      "title": "time-series",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series.md",
      "chunkIndex": "code-context-1",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public TimeSeries(List<DateTime> dateTimes, double fillValue)\n",
    "metadata": {
      "id": "time-series",
      "title": "time-series",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series.md",
      "chunkIndex": "code-2",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "operations\n- Flexible data manipulation capabilities\n\n## Constructors\n\n### Parameterless Constructor\n```csharp\npublic TimeSeries()\n```\nCreates an empty TimeSeries that manages its own DateTimes.\n\n### DateTime List Constructor\n```csharp\npublic TimeSeries(List<DateTime> dateTimes, bool fillNaN = true)\n```\nCreates a TimeSeries with a predefined list of DateTimes.\n\n**Parameters:**\n- `dateTimes`: List of DateTime values\n- `fillNaN`: If true, populates Values with `Double.NaN`\n\n### Filled Constructor\n"
    }
  },
  {
    "pageContent": "operations\n- Flexible data manipulation capabilities\n\n## Constructors\n\n### Parameterless Constructor\n```csharp\npublic TimeSeries()\n```\nCreates an empty TimeSeries that manages its own DateTimes.\n\n### DateTime List Constructor\n```csharp\npublic TimeSeries(List<DateTime> dateTimes, bool fillNaN = true)\n```\nCreates a TimeSeries with a predefined list of DateTimes.\n\n**Parameters:**\n- `dateTimes`: List of DateTime values\n- `fillNaN`: If true, populates Values with `Double.NaN`\n\n### Filled Constructor\n\n\n```csharp\npublic TimeSeries(List<DateTime> dateTimes, double fillValue)\n\n```",
    "metadata": {
      "id": "time-series",
      "title": "time-series",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series.md",
      "chunkIndex": "code-context-2",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public List<double> Values\n",
    "metadata": {
      "id": "time-series",
      "title": "time-series",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series.md",
      "chunkIndex": "code-3",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "s.\n\n### DateTime List Constructor\n```csharp\npublic TimeSeries(List<DateTime> dateTimes, bool fillNaN = true)\n```\nCreates a TimeSeries with a predefined list of DateTimes.\n\n**Parameters:**\n- `dateTimes`: List of DateTime values\n- `fillNaN`: If true, populates Values with `Double.NaN`\n\n### Filled Constructor\n```csharp\npublic TimeSeries(List<DateTime> dateTimes, double fillValue)\n```\nCreates a TimeSeries with a predefined list of DateTimes and a specific fill value.\n\n## Core Properties\n\n### Values\n"
    }
  },
  {
    "pageContent": "s.\n\n### DateTime List Constructor\n```csharp\npublic TimeSeries(List<DateTime> dateTimes, bool fillNaN = true)\n```\nCreates a TimeSeries with a predefined list of DateTimes.\n\n**Parameters:**\n- `dateTimes`: List of DateTime values\n- `fillNaN`: If true, populates Values with `Double.NaN`\n\n### Filled Constructor\n```csharp\npublic TimeSeries(List<DateTime> dateTimes, double fillValue)\n```\nCreates a TimeSeries with a predefined list of DateTimes and a specific fill value.\n\n## Core Properties\n\n### Values\n\n\n```csharp\npublic List<double> Values\n\n```",
    "metadata": {
      "id": "time-series",
      "title": "time-series",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series.md",
      "chunkIndex": "code-context-3",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public virtual List<DateTime> DateTimes\n",
    "metadata": {
      "id": "time-series",
      "title": "time-series",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series.md",
      "chunkIndex": "code-4",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "rue)\n```\nCreates a TimeSeries with a predefined list of DateTimes.\n\n**Parameters:**\n- `dateTimes`: List of DateTime values\n- `fillNaN`: If true, populates Values with `Double.NaN`\n\n### Filled Constructor\n```csharp\npublic TimeSeries(List<DateTime> dateTimes, double fillValue)\n```\nCreates a TimeSeries with a predefined list of DateTimes and a specific fill value.\n\n## Core Properties\n\n### Values\n```csharp\npublic List<double> Values\n```\nContains the numeric values of the time series.\n\n### DateTimes\n"
    }
  },
  {
    "pageContent": "rue)\n```\nCreates a TimeSeries with a predefined list of DateTimes.\n\n**Parameters:**\n- `dateTimes`: List of DateTime values\n- `fillNaN`: If true, populates Values with `Double.NaN`\n\n### Filled Constructor\n```csharp\npublic TimeSeries(List<DateTime> dateTimes, double fillValue)\n```\nCreates a TimeSeries with a predefined list of DateTimes and a specific fill value.\n\n## Core Properties\n\n### Values\n```csharp\npublic List<double> Values\n```\nContains the numeric values of the time series.\n\n### DateTimes\n\n\n```csharp\npublic virtual List<DateTime> DateTimes\n\n```",
    "metadata": {
      "id": "time-series",
      "title": "time-series",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series.md",
      "chunkIndex": "code-context-4",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public int Count\n",
    "metadata": {
      "id": "time-series",
      "title": "time-series",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series.md",
      "chunkIndex": "code-5",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "e values\n- `fillNaN`: If true, populates Values with `Double.NaN`\n\n### Filled Constructor\n```csharp\npublic TimeSeries(List<DateTime> dateTimes, double fillValue)\n```\nCreates a TimeSeries with a predefined list of DateTimes and a specific fill value.\n\n## Core Properties\n\n### Values\n```csharp\npublic List<double> Values\n```\nContains the numeric values of the time series.\n\n### DateTimes\n```csharp\npublic virtual List<DateTime> DateTimes\n```\nContains the corresponding dates for each value.\n\n### Count\n"
    }
  },
  {
    "pageContent": "e values\n- `fillNaN`: If true, populates Values with `Double.NaN`\n\n### Filled Constructor\n```csharp\npublic TimeSeries(List<DateTime> dateTimes, double fillValue)\n```\nCreates a TimeSeries with a predefined list of DateTimes and a specific fill value.\n\n## Core Properties\n\n### Values\n```csharp\npublic List<double> Values\n```\nContains the numeric values of the time series.\n\n### DateTimes\n```csharp\npublic virtual List<DateTime> DateTimes\n```\nContains the corresponding dates for each value.\n\n### Count\n\n\n```csharp\npublic int Count\n\n```",
    "metadata": {
      "id": "time-series",
      "title": "time-series",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series.md",
      "chunkIndex": "code-context-5",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public DateTime StartDate\npublic DateTime EndDate\n",
    "metadata": {
      "id": "time-series",
      "title": "time-series",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series.md",
      "chunkIndex": "code-6",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": " TimeSeries(List<DateTime> dateTimes, double fillValue)\n```\nCreates a TimeSeries with a predefined list of DateTimes and a specific fill value.\n\n## Core Properties\n\n### Values\n```csharp\npublic List<double> Values\n```\nContains the numeric values of the time series.\n\n### DateTimes\n```csharp\npublic virtual List<DateTime> DateTimes\n```\nContains the corresponding dates for each value.\n\n### Count\n```csharp\npublic int Count\n```\nReturns the number of items in the time series.\n\n### StartDate and EndDate\n"
    }
  },
  {
    "pageContent": " TimeSeries(List<DateTime> dateTimes, double fillValue)\n```\nCreates a TimeSeries with a predefined list of DateTimes and a specific fill value.\n\n## Core Properties\n\n### Values\n```csharp\npublic List<double> Values\n```\nContains the numeric values of the time series.\n\n### DateTimes\n```csharp\npublic virtual List<DateTime> DateTimes\n```\nContains the corresponding dates for each value.\n\n### Count\n```csharp\npublic int Count\n```\nReturns the number of items in the time series.\n\n### StartDate and EndDate\n\n\n```csharp\npublic DateTime StartDate\npublic DateTime EndDate\n\n```",
    "metadata": {
      "id": "time-series",
      "title": "time-series",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series.md",
      "chunkIndex": "code-context-6",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public TimeSeries Abs()\n",
    "metadata": {
      "id": "time-series",
      "title": "time-series",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series.md",
      "chunkIndex": "code-7",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "alues\n```csharp\npublic List<double> Values\n```\nContains the numeric values of the time series.\n\n### DateTimes\n```csharp\npublic virtual List<DateTime> DateTimes\n```\nContains the corresponding dates for each value.\n\n### Count\n```csharp\npublic int Count\n```\nReturns the number of items in the time series.\n\n### StartDate and EndDate\n```csharp\npublic DateTime StartDate\npublic DateTime EndDate\n```\nReturns the first and last DateTime in the series.\n\n## Key Methods\n\n### Mathematical Operations\n\n#### Abs\n"
    }
  },
  {
    "pageContent": "alues\n```csharp\npublic List<double> Values\n```\nContains the numeric values of the time series.\n\n### DateTimes\n```csharp\npublic virtual List<DateTime> DateTimes\n```\nContains the corresponding dates for each value.\n\n### Count\n```csharp\npublic int Count\n```\nReturns the number of items in the time series.\n\n### StartDate and EndDate\n```csharp\npublic DateTime StartDate\npublic DateTime EndDate\n```\nReturns the first and last DateTime in the series.\n\n## Key Methods\n\n### Mathematical Operations\n\n#### Abs\n\n\n```csharp\npublic TimeSeries Abs()\n\n```",
    "metadata": {
      "id": "time-series",
      "title": "time-series",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series.md",
      "chunkIndex": "code-context-7",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public TimeSeries LogReturn(int period)\n",
    "metadata": {
      "id": "time-series",
      "title": "time-series",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series.md",
      "chunkIndex": "code-8",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ateTimes\n```csharp\npublic virtual List<DateTime> DateTimes\n```\nContains the corresponding dates for each value.\n\n### Count\n```csharp\npublic int Count\n```\nReturns the number of items in the time series.\n\n### StartDate and EndDate\n```csharp\npublic DateTime StartDate\npublic DateTime EndDate\n```\nReturns the first and last DateTime in the series.\n\n## Key Methods\n\n### Mathematical Operations\n\n#### Abs\n```csharp\npublic TimeSeries Abs()\n```\nReturns a new TimeSeries with absolute values.\n\n#### LogReturn\n"
    }
  },
  {
    "pageContent": "ateTimes\n```csharp\npublic virtual List<DateTime> DateTimes\n```\nContains the corresponding dates for each value.\n\n### Count\n```csharp\npublic int Count\n```\nReturns the number of items in the time series.\n\n### StartDate and EndDate\n```csharp\npublic DateTime StartDate\npublic DateTime EndDate\n```\nReturns the first and last DateTime in the series.\n\n## Key Methods\n\n### Mathematical Operations\n\n#### Abs\n```csharp\npublic TimeSeries Abs()\n```\nReturns a new TimeSeries with absolute values.\n\n#### LogReturn\n\n\n```csharp\npublic TimeSeries LogReturn(int period)\n\n```",
    "metadata": {
      "id": "time-series",
      "title": "time-series",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series.md",
      "chunkIndex": "code-context-8",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public TimeSeries Sum(int period)\n",
    "metadata": {
      "id": "time-series",
      "title": "time-series",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series.md",
      "chunkIndex": "code-9",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "\n\n### Count\n```csharp\npublic int Count\n```\nReturns the number of items in the time series.\n\n### StartDate and EndDate\n```csharp\npublic DateTime StartDate\npublic DateTime EndDate\n```\nReturns the first and last DateTime in the series.\n\n## Key Methods\n\n### Mathematical Operations\n\n#### Abs\n```csharp\npublic TimeSeries Abs()\n```\nReturns a new TimeSeries with absolute values.\n\n#### LogReturn\n```csharp\npublic TimeSeries LogReturn(int period)\n```\nCalculates log returns for a specified period.\n\n#### Sum\n"
    }
  },
  {
    "pageContent": "\n\n### Count\n```csharp\npublic int Count\n```\nReturns the number of items in the time series.\n\n### StartDate and EndDate\n```csharp\npublic DateTime StartDate\npublic DateTime EndDate\n```\nReturns the first and last DateTime in the series.\n\n## Key Methods\n\n### Mathematical Operations\n\n#### Abs\n```csharp\npublic TimeSeries Abs()\n```\nReturns a new TimeSeries with absolute values.\n\n#### LogReturn\n```csharp\npublic TimeSeries LogReturn(int period)\n```\nCalculates log returns for a specified period.\n\n#### Sum\n\n\n```csharp\npublic TimeSeries Sum(int period)\n\n```",
    "metadata": {
      "id": "time-series",
      "title": "time-series",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series.md",
      "chunkIndex": "code-context-9",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public double GetHighest(int bar, int range)\npublic double GetLowest(int bar, int range)\npublic int GetHighestBar(int bar, int range)\npublic int GetLowestBar(int bar, int range)\n",
    "metadata": {
      "id": "time-series",
      "title": "time-series",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series.md",
      "chunkIndex": "code-10",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "teTime EndDate\n```\nReturns the first and last DateTime in the series.\n\n## Key Methods\n\n### Mathematical Operations\n\n#### Abs\n```csharp\npublic TimeSeries Abs()\n```\nReturns a new TimeSeries with absolute values.\n\n#### LogReturn\n```csharp\npublic TimeSeries LogReturn(int period)\n```\nCalculates log returns for a specified period.\n\n#### Sum\n```csharp\npublic TimeSeries Sum(int period)\n```\nReturns a new TimeSeries summed over the specified period.\n\n### Statistical Methods\n\n#### GetHighest and GetLowest\n"
    }
  },
  {
    "pageContent": "teTime EndDate\n```\nReturns the first and last DateTime in the series.\n\n## Key Methods\n\n### Mathematical Operations\n\n#### Abs\n```csharp\npublic TimeSeries Abs()\n```\nReturns a new TimeSeries with absolute values.\n\n#### LogReturn\n```csharp\npublic TimeSeries LogReturn(int period)\n```\nCalculates log returns for a specified period.\n\n#### Sum\n```csharp\npublic TimeSeries Sum(int period)\n```\nReturns a new TimeSeries summed over the specified period.\n\n### Statistical Methods\n\n#### GetHighest and GetLowest\n\n\n```csharp\npublic double GetHighest(int bar, int range)\npublic double GetLowest(int bar, int range)\npublic int GetHighestBar(int bar, int range)\npublic int GetLowestBar(int bar, int range)\n\n```",
    "metadata": {
      "id": "time-series",
      "title": "time-series",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series.md",
      "chunkIndex": "code-context-10",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public TimeSeries Kurtosis(int period)\npublic TimeSeries Skewness(int period)\n",
    "metadata": {
      "id": "time-series",
      "title": "time-series",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series.md",
      "chunkIndex": "code-11",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "riod)\n```\nCalculates log returns for a specified period.\n\n#### Sum\n```csharp\npublic TimeSeries Sum(int period)\n```\nReturns a new TimeSeries summed over the specified period.\n\n### Statistical Methods\n\n#### GetHighest and GetLowest\n```csharp\npublic double GetHighest(int bar, int range)\npublic double GetLowest(int bar, int range)\npublic int GetHighestBar(int bar, int range)\npublic int GetLowestBar(int bar, int range)\n```\nFind highest/lowest values and their bar indices.\n\n#### Kurtosis and Skewness\n"
    }
  },
  {
    "pageContent": "riod)\n```\nCalculates log returns for a specified period.\n\n#### Sum\n```csharp\npublic TimeSeries Sum(int period)\n```\nReturns a new TimeSeries summed over the specified period.\n\n### Statistical Methods\n\n#### GetHighest and GetLowest\n```csharp\npublic double GetHighest(int bar, int range)\npublic double GetLowest(int bar, int range)\npublic int GetHighestBar(int bar, int range)\npublic int GetLowestBar(int bar, int range)\n```\nFind highest/lowest values and their bar indices.\n\n#### Kurtosis and Skewness\n\n\n```csharp\npublic TimeSeries Kurtosis(int period)\npublic TimeSeries Skewness(int period)\n\n```",
    "metadata": {
      "id": "time-series",
      "title": "time-series",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series.md",
      "chunkIndex": "code-context-11",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public bool CrossesOver(double value, int idx)\npublic bool CrossesOver(TimeSeries ts, int idx)\npublic bool CrossesUnder(double value, int idx)\npublic bool CrossesUnder(TimeSeries ts, int idx)\n",
    "metadata": {
      "id": "time-series",
      "title": "time-series",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series.md",
      "chunkIndex": "code-12",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ds\n\n#### GetHighest and GetLowest\n```csharp\npublic double GetHighest(int bar, int range)\npublic double GetLowest(int bar, int range)\npublic int GetHighestBar(int bar, int range)\npublic int GetLowestBar(int bar, int range)\n```\nFind highest/lowest values and their bar indices.\n\n#### Kurtosis and Skewness\n```csharp\npublic TimeSeries Kurtosis(int period)\npublic TimeSeries Skewness(int period)\n```\nCalculate statistical distribution measures.\n\n### Comparison Methods\n\n#### CrossesOver and CrossesUnder\n"
    }
  },
  {
    "pageContent": "ds\n\n#### GetHighest and GetLowest\n```csharp\npublic double GetHighest(int bar, int range)\npublic double GetLowest(int bar, int range)\npublic int GetHighestBar(int bar, int range)\npublic int GetLowestBar(int bar, int range)\n```\nFind highest/lowest values and their bar indices.\n\n#### Kurtosis and Skewness\n```csharp\npublic TimeSeries Kurtosis(int period)\npublic TimeSeries Skewness(int period)\n```\nCalculate statistical distribution measures.\n\n### Comparison Methods\n\n#### CrossesOver and CrossesUnder\n\n\n```csharp\npublic bool CrossesOver(double value, int idx)\npublic bool CrossesOver(TimeSeries ts, int idx)\npublic bool CrossesUnder(double value, int idx)\npublic bool CrossesUnder(TimeSeries ts, int idx)\n\n```",
    "metadata": {
      "id": "time-series",
      "title": "time-series",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series.md",
      "chunkIndex": "code-context-12",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "TimeSeries operator +(TimeSeries, TimeSeries)\nTimeSeries operator -(TimeSeries)\nTimeSeries operator *(TimeSeries, double)\nTimeSeries operator /(TimeSeries, TimeSeries)\n",
    "metadata": {
      "id": "time-series",
      "title": "time-series",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series.md",
      "chunkIndex": "code-13",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ss\n```csharp\npublic TimeSeries Kurtosis(int period)\npublic TimeSeries Skewness(int period)\n```\nCalculate statistical distribution measures.\n\n### Comparison Methods\n\n#### CrossesOver and CrossesUnder\n```csharp\npublic bool CrossesOver(double value, int idx)\npublic bool CrossesOver(TimeSeries ts, int idx)\npublic bool CrossesUnder(double value, int idx)\npublic bool CrossesUnder(TimeSeries ts, int idx)\n```\nDetect value crossover and crossunder events.\n\n## Operator Overloads\n\n### Arithmetic Operators\n"
    }
  },
  {
    "pageContent": "ss\n```csharp\npublic TimeSeries Kurtosis(int period)\npublic TimeSeries Skewness(int period)\n```\nCalculate statistical distribution measures.\n\n### Comparison Methods\n\n#### CrossesOver and CrossesUnder\n```csharp\npublic bool CrossesOver(double value, int idx)\npublic bool CrossesOver(TimeSeries ts, int idx)\npublic bool CrossesUnder(double value, int idx)\npublic bool CrossesUnder(TimeSeries ts, int idx)\n```\nDetect value crossover and crossunder events.\n\n## Operator Overloads\n\n### Arithmetic Operators\n\n\n```csharp\nTimeSeries operator +(TimeSeries, TimeSeries)\nTimeSeries operator -(TimeSeries)\nTimeSeries operator *(TimeSeries, double)\nTimeSeries operator /(TimeSeries, TimeSeries)\n\n```",
    "metadata": {
      "id": "time-series",
      "title": "time-series",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series.md",
      "chunkIndex": "code-context-13",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "TimeSeries operator <(TimeSeries, TimeSeries)\nTimeSeries operator >(TimeSeries, TimeSeries)\nTimeSeries operator <=(TimeSeries, TimeSeries)\nTimeSeries operator >=(TimeSeries, TimeSeries)\n",
    "metadata": {
      "id": "time-series",
      "title": "time-series",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series.md",
      "chunkIndex": "code-14",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "\npublic bool CrossesOver(double value, int idx)\npublic bool CrossesOver(TimeSeries ts, int idx)\npublic bool CrossesUnder(double value, int idx)\npublic bool CrossesUnder(TimeSeries ts, int idx)\n```\nDetect value crossover and crossunder events.\n\n## Operator Overloads\n\n### Arithmetic Operators\n```csharp\nTimeSeries operator +(TimeSeries, TimeSeries)\nTimeSeries operator -(TimeSeries)\nTimeSeries operator *(TimeSeries, double)\nTimeSeries operator /(TimeSeries, TimeSeries)\n```\n\n### Comparison Operators\n"
    }
  },
  {
    "pageContent": "\npublic bool CrossesOver(double value, int idx)\npublic bool CrossesOver(TimeSeries ts, int idx)\npublic bool CrossesUnder(double value, int idx)\npublic bool CrossesUnder(TimeSeries ts, int idx)\n```\nDetect value crossover and crossunder events.\n\n## Operator Overloads\n\n### Arithmetic Operators\n```csharp\nTimeSeries operator +(TimeSeries, TimeSeries)\nTimeSeries operator -(TimeSeries)\nTimeSeries operator *(TimeSeries, double)\nTimeSeries operator /(TimeSeries, TimeSeries)\n```\n\n### Comparison Operators\n\n\n```csharp\nTimeSeries operator <(TimeSeries, TimeSeries)\nTimeSeries operator >(TimeSeries, TimeSeries)\nTimeSeries operator <=(TimeSeries, TimeSeries)\nTimeSeries operator >=(TimeSeries, TimeSeries)\n\n```",
    "metadata": {
      "id": "time-series",
      "title": "time-series",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series.md",
      "chunkIndex": "code-context-14",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "TimeSeries operator <<(TimeSeries, int)  // Backward shift\nTimeSeries operator >>(TimeSeries, int)  // Forward shift\n",
    "metadata": {
      "id": "time-series",
      "title": "time-series",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series.md",
      "chunkIndex": "code-15",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "nd crossunder events.\n\n## Operator Overloads\n\n### Arithmetic Operators\n```csharp\nTimeSeries operator +(TimeSeries, TimeSeries)\nTimeSeries operator -(TimeSeries)\nTimeSeries operator *(TimeSeries, double)\nTimeSeries operator /(TimeSeries, TimeSeries)\n```\n\n### Comparison Operators\n```csharp\nTimeSeries operator <(TimeSeries, TimeSeries)\nTimeSeries operator >(TimeSeries, TimeSeries)\nTimeSeries operator <=(TimeSeries, TimeSeries)\nTimeSeries operator >=(TimeSeries, TimeSeries)\n```\n\n### Shift Operators\n"
    }
  },
  {
    "pageContent": "nd crossunder events.\n\n## Operator Overloads\n\n### Arithmetic Operators\n```csharp\nTimeSeries operator +(TimeSeries, TimeSeries)\nTimeSeries operator -(TimeSeries)\nTimeSeries operator *(TimeSeries, double)\nTimeSeries operator /(TimeSeries, TimeSeries)\n```\n\n### Comparison Operators\n```csharp\nTimeSeries operator <(TimeSeries, TimeSeries)\nTimeSeries operator >(TimeSeries, TimeSeries)\nTimeSeries operator <=(TimeSeries, TimeSeries)\nTimeSeries operator >=(TimeSeries, TimeSeries)\n```\n\n### Shift Operators\n\n\n```csharp\nTimeSeries operator <<(TimeSeries, int)  // Backward shift\nTimeSeries operator >>(TimeSeries, int)  // Forward shift\n\n```",
    "metadata": {
      "id": "time-series",
      "title": "time-series",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series.md",
      "chunkIndex": "code-context-15",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "static TimeSeries Log(TimeSeries)\nstatic TimeSeries Sqrt(TimeSeries)\nstatic TimeSeries Pow(TimeSeries, double)\nstatic TimeSeries Round(TimeSeries)\n",
    "metadata": {
      "id": "time-series",
      "title": "time-series",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series.md",
      "chunkIndex": "code-16",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "imeSeries, double)\nTimeSeries operator /(TimeSeries, TimeSeries)\n```\n\n### Comparison Operators\n```csharp\nTimeSeries operator <(TimeSeries, TimeSeries)\nTimeSeries operator >(TimeSeries, TimeSeries)\nTimeSeries operator <=(TimeSeries, TimeSeries)\nTimeSeries operator >=(TimeSeries, TimeSeries)\n```\n\n### Shift Operators\n```csharp\nTimeSeries operator <<(TimeSeries, int)  // Backward shift\nTimeSeries operator >>(TimeSeries, int)  // Forward shift\n```\n\n## Static Methods\n\n### Mathematical Transformations\n"
    }
  },
  {
    "pageContent": "imeSeries, double)\nTimeSeries operator /(TimeSeries, TimeSeries)\n```\n\n### Comparison Operators\n```csharp\nTimeSeries operator <(TimeSeries, TimeSeries)\nTimeSeries operator >(TimeSeries, TimeSeries)\nTimeSeries operator <=(TimeSeries, TimeSeries)\nTimeSeries operator >=(TimeSeries, TimeSeries)\n```\n\n### Shift Operators\n```csharp\nTimeSeries operator <<(TimeSeries, int)  // Backward shift\nTimeSeries operator >>(TimeSeries, int)  // Forward shift\n```\n\n## Static Methods\n\n### Mathematical Transformations\n\n\n```csharp\nstatic TimeSeries Log(TimeSeries)\nstatic TimeSeries Sqrt(TimeSeries)\nstatic TimeSeries Pow(TimeSeries, double)\nstatic TimeSeries Round(TimeSeries)\n\n```",
    "metadata": {
      "id": "time-series",
      "title": "time-series",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series.md",
      "chunkIndex": "code-context-16",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "static TimeSeries Max(TimeSeries, int period)\nstatic TimeSeries Min(TimeSeries, int period)\nstatic TimeSeries Sum(TimeSeries, int length)\n",
    "metadata": {
      "id": "time-series",
      "title": "time-series",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series.md",
      "chunkIndex": "code-17",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "imeSeries)\nTimeSeries operator <=(TimeSeries, TimeSeries)\nTimeSeries operator >=(TimeSeries, TimeSeries)\n```\n\n### Shift Operators\n```csharp\nTimeSeries operator <<(TimeSeries, int)  // Backward shift\nTimeSeries operator >>(TimeSeries, int)  // Forward shift\n```\n\n## Static Methods\n\n### Mathematical Transformations\n```csharp\nstatic TimeSeries Log(TimeSeries)\nstatic TimeSeries Sqrt(TimeSeries)\nstatic TimeSeries Pow(TimeSeries, double)\nstatic TimeSeries Round(TimeSeries)\n```\n\n### Aggregation Methods\n"
    }
  },
  {
    "pageContent": "imeSeries)\nTimeSeries operator <=(TimeSeries, TimeSeries)\nTimeSeries operator >=(TimeSeries, TimeSeries)\n```\n\n### Shift Operators\n```csharp\nTimeSeries operator <<(TimeSeries, int)  // Backward shift\nTimeSeries operator >>(TimeSeries, int)  // Forward shift\n```\n\n## Static Methods\n\n### Mathematical Transformations\n```csharp\nstatic TimeSeries Log(TimeSeries)\nstatic TimeSeries Sqrt(TimeSeries)\nstatic TimeSeries Pow(TimeSeries, double)\nstatic TimeSeries Round(TimeSeries)\n```\n\n### Aggregation Methods\n\n\n```csharp\nstatic TimeSeries Max(TimeSeries, int period)\nstatic TimeSeries Min(TimeSeries, int period)\nstatic TimeSeries Sum(TimeSeries, int length)\n\n```",
    "metadata": {
      "id": "time-series",
      "title": "time-series",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series.md",
      "chunkIndex": "code-context-17",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public class TimeSeriesDemo\n{\n    public void DemonstrateTimeSeries()\n    {\n        // Create TimeSeries from existing data\n        var dateTimes = new List<DateTime> { \n            DateTime.Now.AddDays(-2), \n            DateTime.Now.AddDays(-1), \n            DateTime.Now \n        };\n        var values = new List<double> { 10.0, 15.5, 12.3 };\n        \n        var timeSeries = new TimeSeries(dateTimes);\n        for (int i = 0; i < values.Count; i++)\n        {\n            timeSeries[i] = values[i];\n        }\n\n        // Perform calculations\n        var absoluteValues = timeSeries.Abs();\n        var logReturns = timeSeries.LogReturn(1);\n        \n        // Find highest/lowest values\n        double highest = timeSeries.GetHighest(timeSeries.Count - 1, timeSeries.Count);\n        double lowest = timeSeries.GetLowest(timeSeries.Count - 1, timeSeries.Count);\n    }\n}\n",
    "metadata": {
      "id": "time-series",
      "title": "time-series",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series.md",
      "chunkIndex": "code-18",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": ">>(TimeSeries, int)  // Forward shift\n```\n\n## Static Methods\n\n### Mathematical Transformations\n```csharp\nstatic TimeSeries Log(TimeSeries)\nstatic TimeSeries Sqrt(TimeSeries)\nstatic TimeSeries Pow(TimeSeries, double)\nstatic TimeSeries Round(TimeSeries)\n```\n\n### Aggregation Methods\n```csharp\nstatic TimeSeries Max(TimeSeries, int period)\nstatic TimeSeries Min(TimeSeries, int period)\nstatic TimeSeries Sum(TimeSeries, int length)\n```\n\n## Usage Examples\n\n### Basic TimeSeries Creation and Manipulation\n"
    }
  },
  {
    "pageContent": ">>(TimeSeries, int)  // Forward shift\n```\n\n## Static Methods\n\n### Mathematical Transformations\n```csharp\nstatic TimeSeries Log(TimeSeries)\nstatic TimeSeries Sqrt(TimeSeries)\nstatic TimeSeries Pow(TimeSeries, double)\nstatic TimeSeries Round(TimeSeries)\n```\n\n### Aggregation Methods\n```csharp\nstatic TimeSeries Max(TimeSeries, int period)\nstatic TimeSeries Min(TimeSeries, int period)\nstatic TimeSeries Sum(TimeSeries, int length)\n```\n\n## Usage Examples\n\n### Basic TimeSeries Creation and Manipulation\n\n\n```csharp\npublic class TimeSeriesDemo\n{\n    public void DemonstrateTimeSeries()\n    {\n        // Create TimeSeries from existing data\n        var dateTimes = new List<DateTime> { \n            DateTime.Now.AddDays(-2), \n            DateTime.Now.AddDays(-1), \n            DateTime.Now \n        };\n        var values = new List<double> { 10.0, 15.5, 12.3 };\n        \n        var timeSeries = new TimeSeries(dateTimes);\n        for (int i = 0; i < values.Count; i++)\n        {\n            timeSeries[i] = values[i];\n        }\n\n        // Perform calculations\n        var absoluteValues = timeSeries.Abs();\n        var logReturns = timeSeries.LogReturn(1);\n        \n        // Find highest/lowest values\n        double highest = timeSeries.GetHighest(timeSeries.Count - 1, timeSeries.Count);\n        double lowest = timeSeries.GetLowest(timeSeries.Count - 1, timeSeries.Count);\n    }\n}\n\n```",
    "metadata": {
      "id": "time-series",
      "title": "time-series",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series.md",
      "chunkIndex": "code-context-18",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public class TimeSeriesAnalyzer\n{\n    public void AnalyzeTimeSeries(TimeSeries prices)\n    {\n        // Calculate statistical measures\n        var kurtosis = prices.Kurtosis(20);\n        var skewness = prices.Skewness(20);\n        \n        // Detect crossover events\n        bool crossedOver = prices.CrossesOver(prices.GetHighest(prices.Count - 1, 20), prices.Count - 1);\n        \n        // Perform mathematical transformations\n        var logPrices = TimeSeries.Log(prices);\n        var squaredPrices = TimeSeries.Pow(prices, 2);\n    }\n}\n",
    "metadata": {
      "id": "time-series",
      "title": "time-series",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series.md",
      "chunkIndex": "code-19",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "    for (int i = 0; i < values.Count; i++)\n        {\n            timeSeries[i] = values[i];\n        }\n\n        // Perform calculations\n        var absoluteValues = timeSeries.Abs();\n        var logReturns = timeSeries.LogReturn(1);\n        \n        // Find highest/lowest values\n        double highest = timeSeries.GetHighest(timeSeries.Count - 1, timeSeries.Count);\n        double lowest = timeSeries.GetLowest(timeSeries.Count - 1, timeSeries.Count);\n    }\n}\n```\n\n### Advanced Time Series Analysis\n"
    }
  },
  {
    "pageContent": "    for (int i = 0; i < values.Count; i++)\n        {\n            timeSeries[i] = values[i];\n        }\n\n        // Perform calculations\n        var absoluteValues = timeSeries.Abs();\n        var logReturns = timeSeries.LogReturn(1);\n        \n        // Find highest/lowest values\n        double highest = timeSeries.GetHighest(timeSeries.Count - 1, timeSeries.Count);\n        double lowest = timeSeries.GetLowest(timeSeries.Count - 1, timeSeries.Count);\n    }\n}\n```\n\n### Advanced Time Series Analysis\n\n\n```csharp\npublic class TimeSeriesAnalyzer\n{\n    public void AnalyzeTimeSeries(TimeSeries prices)\n    {\n        // Calculate statistical measures\n        var kurtosis = prices.Kurtosis(20);\n        var skewness = prices.Skewness(20);\n        \n        // Detect crossover events\n        bool crossedOver = prices.CrossesOver(prices.GetHighest(prices.Count - 1, 20), prices.Count - 1);\n        \n        // Perform mathematical transformations\n        var logPrices = TimeSeries.Log(prices);\n        var squaredPrices = TimeSeries.Pow(prices, 2);\n    }\n}\n\n```",
    "metadata": {
      "id": "time-series",
      "title": "time-series",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/time-series.md",
      "chunkIndex": "code-context-19",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "# Transaction Class\n\n**Namespace:** WealthLab.Backtest  \n**Parent:** Object\n\nThe `Transaction` class represents the result of an order (buy, sell, sell short, or cover short) placed during a simulated backtest or in the WealthLab Order Manager.\n\n## Overview\n\nWhen developing a C# Coded Strategy, you obtain a `Transaction` instance as a result of the `PlaceTrade` method. You can modify certain properties of the `Transaction` to implement customized position sizing and trading logic.\n\n## Properties\n\n### Backtest-Related Properties\n\n#### Commission\n",
    "metadata": {
      "id": "transaction",
      "title": "transaction",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/transaction.md",
      "chunkIndex": 0,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nThe commission applied to the order. Established in the Backtest Settings interface.\n\n#### EntryDate\n",
    "metadata": {
      "id": "transaction",
      "title": "transaction",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/transaction.md",
      "chunkIndex": 1,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nThe signal entry date corresponding to the price bar where the trading signal was issued.\n\n#### ExecutionDate\n",
    "metadata": {
      "id": "transaction",
      "title": "transaction",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/transaction.md",
      "chunkIndex": 2,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nThe date the backtester filled the order during the simulation.\n\n#### ExecutionPrice\n",
    "metadata": {
      "id": "transaction",
      "title": "transaction",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/transaction.md",
      "chunkIndex": 3,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nThe price at which the backtester filled the order during the simulation.\n\n#### MarginOverride\n",
    "metadata": {
      "id": "transaction",
      "title": "transaction",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/transaction.md",
      "chunkIndex": 4,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nWhen set to `true`, causes the backtester to fill the transaction even without sufficient simulated capital.\n\n#### PositionTag\n",
    "metadata": {
      "id": "transaction",
      "title": "transaction",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/transaction.md",
      "chunkIndex": 5,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nAn internal WealthLab integer used to track which Building Block a Transaction belongs to. Avoid using this directly.\n\n#### Weight\n",
    "metadata": {
      "id": "transaction",
      "title": "transaction",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/transaction.md",
      "chunkIndex": 6,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nSpecifies a weight value to determine transaction priority when multiple candidate transactions exist. Higher values result in higher priority during backtest processing.\n\n### Order Management Properties\n\n#### AutoProfitTargetPrice\n",
    "metadata": {
      "id": "transaction",
      "title": "transaction",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/transaction.md",
      "chunkIndex": 7,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nAllows immediate submission of a \"same-bar\" limit order to exit a Position as soon as it is filled.\n\n**Notes:**\n- Works in both backtesting and live trading\n- Best used with market entry orders\n- Provides same-bar exit capabilities\n\n#### AutoStopLossPrice\n",
    "metadata": {
      "id": "transaction",
      "title": "transaction",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/transaction.md",
      "chunkIndex": 8,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nAllows immediate submission of a \"same-bar\" stop order to exit a Position as soon as it is filled.\n\n**Notes:**\n- Works in both backtesting and live trading\n- Best used with market entry orders\n- Provides same-bar exit capabilities\n\n#### Bars\n",
    "metadata": {
      "id": "transaction",
      "title": "transaction",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/transaction.md",
      "chunkIndex": 9,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nThe `BarHistory` instance on which the transaction was placed.\n\n#### GranularWeightBasis\n",
    "metadata": {
      "id": "transaction",
      "title": "transaction",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/transaction.md",
      "chunkIndex": 10,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nContains the DateTime detected in intraday data that determined limit/stop order execution when advanced processing is enabled.\n\n#### IsEntry\n",
    "metadata": {
      "id": "transaction",
      "title": "transaction",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/transaction.md",
      "chunkIndex": 11,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns `true` if the transaction is an entry (Buy or Short) transaction.\n\n#### IsExit\n",
    "metadata": {
      "id": "transaction",
      "title": "transaction",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/transaction.md",
      "chunkIndex": 12,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns `true` if the transaction is an exit (Sell or Cover) transaction.\n\n#### NSF\n",
    "metadata": {
      "id": "transaction",
      "title": "transaction",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/transaction.md",
      "chunkIndex": 13,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns `true` if the Transaction was flagged as Non-Sufficient Funds by the backtester.\n\n#### OrderPrice\n",
    "metadata": {
      "id": "transaction",
      "title": "transaction",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/transaction.md",
      "chunkIndex": 14,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nThe order price of the transaction (does not apply to Market orders).\n\n#### OrderType\n",
    "metadata": {
      "id": "transaction",
      "title": "transaction",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/transaction.md",
      "chunkIndex": 15,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nContains the order type of the transaction. Possible values:\n- `OrderType.Market`\n- `OrderType.Limit`\n- `OrderType.Stop`\n- `OrderType.StopLimit`\n- `OrderType.FixedPrice`\n- `OrderType.LimitMove`\n- `OrderType.MarketClose`\n- `OrderType.LimitClose`\n\n#### PositionType\n",
    "metadata": {
      "id": "transaction",
      "title": "transaction",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/transaction.md",
      "chunkIndex": 16,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the position type:\n- `PositionType.Long` for Buy and Sell orders\n- `PositionType.Short` for Short and Cover orders\n\n#### Quantity\n",
    "metadata": {
      "id": "transaction",
      "title": "transaction",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/transaction.md",
      "chunkIndex": 17,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nContains and assigns the number of shares or contracts in the transaction.\n\n**Important:** \n- Assigning Quantity to an Entry Transaction overrides the Position Sizer\n- Exit Transaction quantity is adjusted according to Portfolio Sync preferences\n\n#### StopLimitLimitPrice\n",
    "metadata": {
      "id": "transaction",
      "title": "transaction",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/transaction.md",
      "chunkIndex": 18,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nEstablishes the limit price for StopLimit orders. If unassigned, uses the OrderPrice.\n\n#### Symbol\n",
    "metadata": {
      "id": "transaction",
      "title": "transaction",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/transaction.md",
      "chunkIndex": 19,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nThe symbol on which the transaction was placed.\n\n#### Tag\n",
    "metadata": {
      "id": "transaction",
      "title": "transaction",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/transaction.md",
      "chunkIndex": 20,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nAllows attaching custom metadata to the Transaction. If set on an entry Transaction, the value is assigned to the resulting Position's Tag.\n\n#### TransactionType\n",
    "metadata": {
      "id": "transaction",
      "title": "transaction",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/transaction.md",
      "chunkIndex": 21,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nContains the transaction type:\n- `TransactionType.Buy`\n- `TransactionType.Sell`\n- `TransactionType.Short`\n- `TransactionType.Cover`\n\n## Methods\n\n### SetPositionMetric\n",
    "metadata": {
      "id": "transaction",
      "title": "transaction",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/transaction.md",
      "chunkIndex": 22,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nSets a Position Metric value that will be passed to the Position created by this Transaction.\n\n**Parameters:**\n- `metric`: Name of the metric\n- `value`: Metric value\n\n## Usage Examples\n\n### Basic Transaction Handling\n",
    "metadata": {
      "id": "transaction",
      "title": "transaction",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/transaction.md",
      "chunkIndex": 23,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n## Best Practices\n\n1. **Position Sizing**\n   - Use `Quantity` carefully to override Position Sizer\n   - Consider risk management when setting quantities\n\n2. **Same-Bar Exits**\n   - Use `AutoProfitTargetPrice` and `AutoStopLossPrice` judiciously\n   - Prefer market entry orders for realistic simulations\n\n3. **Metadata and Tracking**\n   - Utilize `Tag` and `SignalName` for detailed tracking\n   - Set Position Metrics for advanced performance analysis\n\n## Performance Considerations\n\n- Minimize complex calculations in Transaction processing\n- Use Position Metrics sparingly\n- Validate custom quantity and exit price calculations\n\n## Notes\n\n- Critical for implementing advanced trading strategies\n- Provides fine-grained control over trade execution\n- Supports both backtesting and live trading scenarios ",
    "metadata": {
      "id": "transaction",
      "title": "transaction",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/transaction.md",
      "chunkIndex": 24,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "public double Commission\n",
    "metadata": {
      "id": "transaction",
      "title": "transaction",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/transaction.md",
      "chunkIndex": "code-0",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "est  \n**Parent:** Object\n\nThe `Transaction` class represents the result of an order (buy, sell, sell short, or cover short) placed during a simulated backtest or in the WealthLab Order Manager.\n\n## Overview\n\nWhen developing a C# Coded Strategy, you obtain a `Transaction` instance as a result of the `PlaceTrade` method. You can modify certain properties of the `Transaction` to implement customized position sizing and trading logic.\n\n## Properties\n\n### Backtest-Related Properties\n\n#### Commission\n"
    }
  },
  {
    "pageContent": "est  \n**Parent:** Object\n\nThe `Transaction` class represents the result of an order (buy, sell, sell short, or cover short) placed during a simulated backtest or in the WealthLab Order Manager.\n\n## Overview\n\nWhen developing a C# Coded Strategy, you obtain a `Transaction` instance as a result of the `PlaceTrade` method. You can modify certain properties of the `Transaction` to implement customized position sizing and trading logic.\n\n## Properties\n\n### Backtest-Related Properties\n\n#### Commission\n\n\n```csharp\npublic double Commission\n\n```",
    "metadata": {
      "id": "transaction",
      "title": "transaction",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/transaction.md",
      "chunkIndex": "code-context-0",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public DateTime EntryDate\n",
    "metadata": {
      "id": "transaction",
      "title": "transaction",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/transaction.md",
      "chunkIndex": "code-1",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "simulated backtest or in the WealthLab Order Manager.\n\n## Overview\n\nWhen developing a C# Coded Strategy, you obtain a `Transaction` instance as a result of the `PlaceTrade` method. You can modify certain properties of the `Transaction` to implement customized position sizing and trading logic.\n\n## Properties\n\n### Backtest-Related Properties\n\n#### Commission\n```csharp\npublic double Commission\n```\nThe commission applied to the order. Established in the Backtest Settings interface.\n\n#### EntryDate\n"
    }
  },
  {
    "pageContent": "simulated backtest or in the WealthLab Order Manager.\n\n## Overview\n\nWhen developing a C# Coded Strategy, you obtain a `Transaction` instance as a result of the `PlaceTrade` method. You can modify certain properties of the `Transaction` to implement customized position sizing and trading logic.\n\n## Properties\n\n### Backtest-Related Properties\n\n#### Commission\n```csharp\npublic double Commission\n```\nThe commission applied to the order. Established in the Backtest Settings interface.\n\n#### EntryDate\n\n\n```csharp\npublic DateTime EntryDate\n\n```",
    "metadata": {
      "id": "transaction",
      "title": "transaction",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/transaction.md",
      "chunkIndex": "code-context-1",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public DateTime ExecutionDate\n",
    "metadata": {
      "id": "transaction",
      "title": "transaction",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/transaction.md",
      "chunkIndex": "code-2",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "lt of the `PlaceTrade` method. You can modify certain properties of the `Transaction` to implement customized position sizing and trading logic.\n\n## Properties\n\n### Backtest-Related Properties\n\n#### Commission\n```csharp\npublic double Commission\n```\nThe commission applied to the order. Established in the Backtest Settings interface.\n\n#### EntryDate\n```csharp\npublic DateTime EntryDate\n```\nThe signal entry date corresponding to the price bar where the trading signal was issued.\n\n#### ExecutionDate\n"
    }
  },
  {
    "pageContent": "lt of the `PlaceTrade` method. You can modify certain properties of the `Transaction` to implement customized position sizing and trading logic.\n\n## Properties\n\n### Backtest-Related Properties\n\n#### Commission\n```csharp\npublic double Commission\n```\nThe commission applied to the order. Established in the Backtest Settings interface.\n\n#### EntryDate\n```csharp\npublic DateTime EntryDate\n```\nThe signal entry date corresponding to the price bar where the trading signal was issued.\n\n#### ExecutionDate\n\n\n```csharp\npublic DateTime ExecutionDate\n\n```",
    "metadata": {
      "id": "transaction",
      "title": "transaction",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/transaction.md",
      "chunkIndex": "code-context-2",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public double ExecutionPrice\n",
    "metadata": {
      "id": "transaction",
      "title": "transaction",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/transaction.md",
      "chunkIndex": "code-3",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": " trading logic.\n\n## Properties\n\n### Backtest-Related Properties\n\n#### Commission\n```csharp\npublic double Commission\n```\nThe commission applied to the order. Established in the Backtest Settings interface.\n\n#### EntryDate\n```csharp\npublic DateTime EntryDate\n```\nThe signal entry date corresponding to the price bar where the trading signal was issued.\n\n#### ExecutionDate\n```csharp\npublic DateTime ExecutionDate\n```\nThe date the backtester filled the order during the simulation.\n\n#### ExecutionPrice\n"
    }
  },
  {
    "pageContent": " trading logic.\n\n## Properties\n\n### Backtest-Related Properties\n\n#### Commission\n```csharp\npublic double Commission\n```\nThe commission applied to the order. Established in the Backtest Settings interface.\n\n#### EntryDate\n```csharp\npublic DateTime EntryDate\n```\nThe signal entry date corresponding to the price bar where the trading signal was issued.\n\n#### ExecutionDate\n```csharp\npublic DateTime ExecutionDate\n```\nThe date the backtester filled the order during the simulation.\n\n#### ExecutionPrice\n\n\n```csharp\npublic double ExecutionPrice\n\n```",
    "metadata": {
      "id": "transaction",
      "title": "transaction",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/transaction.md",
      "chunkIndex": "code-context-3",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public bool MarginOverride\n",
    "metadata": {
      "id": "transaction",
      "title": "transaction",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/transaction.md",
      "chunkIndex": "code-4",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "lied to the order. Established in the Backtest Settings interface.\n\n#### EntryDate\n```csharp\npublic DateTime EntryDate\n```\nThe signal entry date corresponding to the price bar where the trading signal was issued.\n\n#### ExecutionDate\n```csharp\npublic DateTime ExecutionDate\n```\nThe date the backtester filled the order during the simulation.\n\n#### ExecutionPrice\n```csharp\npublic double ExecutionPrice\n```\nThe price at which the backtester filled the order during the simulation.\n\n#### MarginOverride\n"
    }
  },
  {
    "pageContent": "lied to the order. Established in the Backtest Settings interface.\n\n#### EntryDate\n```csharp\npublic DateTime EntryDate\n```\nThe signal entry date corresponding to the price bar where the trading signal was issued.\n\n#### ExecutionDate\n```csharp\npublic DateTime ExecutionDate\n```\nThe date the backtester filled the order during the simulation.\n\n#### ExecutionPrice\n```csharp\npublic double ExecutionPrice\n```\nThe price at which the backtester filled the order during the simulation.\n\n#### MarginOverride\n\n\n```csharp\npublic bool MarginOverride\n\n```",
    "metadata": {
      "id": "transaction",
      "title": "transaction",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/transaction.md",
      "chunkIndex": "code-context-4",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public int PositionTag\n",
    "metadata": {
      "id": "transaction",
      "title": "transaction",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/transaction.md",
      "chunkIndex": "code-5",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ice bar where the trading signal was issued.\n\n#### ExecutionDate\n```csharp\npublic DateTime ExecutionDate\n```\nThe date the backtester filled the order during the simulation.\n\n#### ExecutionPrice\n```csharp\npublic double ExecutionPrice\n```\nThe price at which the backtester filled the order during the simulation.\n\n#### MarginOverride\n```csharp\npublic bool MarginOverride\n```\nWhen set to `true`, causes the backtester to fill the transaction even without sufficient simulated capital.\n\n#### PositionTag\n"
    }
  },
  {
    "pageContent": "ice bar where the trading signal was issued.\n\n#### ExecutionDate\n```csharp\npublic DateTime ExecutionDate\n```\nThe date the backtester filled the order during the simulation.\n\n#### ExecutionPrice\n```csharp\npublic double ExecutionPrice\n```\nThe price at which the backtester filled the order during the simulation.\n\n#### MarginOverride\n```csharp\npublic bool MarginOverride\n```\nWhen set to `true`, causes the backtester to fill the transaction even without sufficient simulated capital.\n\n#### PositionTag\n\n\n```csharp\npublic int PositionTag\n\n```",
    "metadata": {
      "id": "transaction",
      "title": "transaction",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/transaction.md",
      "chunkIndex": "code-context-5",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public double Weight\n",
    "metadata": {
      "id": "transaction",
      "title": "transaction",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/transaction.md",
      "chunkIndex": "code-6",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ion.\n\n#### ExecutionPrice\n```csharp\npublic double ExecutionPrice\n```\nThe price at which the backtester filled the order during the simulation.\n\n#### MarginOverride\n```csharp\npublic bool MarginOverride\n```\nWhen set to `true`, causes the backtester to fill the transaction even without sufficient simulated capital.\n\n#### PositionTag\n```csharp\npublic int PositionTag\n```\nAn internal WealthLab integer used to track which Building Block a Transaction belongs to. Avoid using this directly.\n\n#### Weight\n"
    }
  },
  {
    "pageContent": "ion.\n\n#### ExecutionPrice\n```csharp\npublic double ExecutionPrice\n```\nThe price at which the backtester filled the order during the simulation.\n\n#### MarginOverride\n```csharp\npublic bool MarginOverride\n```\nWhen set to `true`, causes the backtester to fill the transaction even without sufficient simulated capital.\n\n#### PositionTag\n```csharp\npublic int PositionTag\n```\nAn internal WealthLab integer used to track which Building Block a Transaction belongs to. Avoid using this directly.\n\n#### Weight\n\n\n```csharp\npublic double Weight\n\n```",
    "metadata": {
      "id": "transaction",
      "title": "transaction",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/transaction.md",
      "chunkIndex": "code-context-6",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public double AutoProfitTargetPrice\n",
    "metadata": {
      "id": "transaction",
      "title": "transaction",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/transaction.md",
      "chunkIndex": "code-7",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ion even without sufficient simulated capital.\n\n#### PositionTag\n```csharp\npublic int PositionTag\n```\nAn internal WealthLab integer used to track which Building Block a Transaction belongs to. Avoid using this directly.\n\n#### Weight\n```csharp\npublic double Weight\n```\nSpecifies a weight value to determine transaction priority when multiple candidate transactions exist. Higher values result in higher priority during backtest processing.\n\n### Order Management Properties\n\n#### AutoProfitTargetPrice\n"
    }
  },
  {
    "pageContent": "ion even without sufficient simulated capital.\n\n#### PositionTag\n```csharp\npublic int PositionTag\n```\nAn internal WealthLab integer used to track which Building Block a Transaction belongs to. Avoid using this directly.\n\n#### Weight\n```csharp\npublic double Weight\n```\nSpecifies a weight value to determine transaction priority when multiple candidate transactions exist. Higher values result in higher priority during backtest processing.\n\n### Order Management Properties\n\n#### AutoProfitTargetPrice\n\n\n```csharp\npublic double AutoProfitTargetPrice\n\n```",
    "metadata": {
      "id": "transaction",
      "title": "transaction",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/transaction.md",
      "chunkIndex": "code-context-7",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public double AutoStopLossPrice\n",
    "metadata": {
      "id": "transaction",
      "title": "transaction",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/transaction.md",
      "chunkIndex": "code-8",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "transaction priority when multiple candidate transactions exist. Higher values result in higher priority during backtest processing.\n\n### Order Management Properties\n\n#### AutoProfitTargetPrice\n```csharp\npublic double AutoProfitTargetPrice\n```\nAllows immediate submission of a \"same-bar\" limit order to exit a Position as soon as it is filled.\n\n**Notes:**\n- Works in both backtesting and live trading\n- Best used with market entry orders\n- Provides same-bar exit capabilities\n\n#### AutoStopLossPrice\n"
    }
  },
  {
    "pageContent": "transaction priority when multiple candidate transactions exist. Higher values result in higher priority during backtest processing.\n\n### Order Management Properties\n\n#### AutoProfitTargetPrice\n```csharp\npublic double AutoProfitTargetPrice\n```\nAllows immediate submission of a \"same-bar\" limit order to exit a Position as soon as it is filled.\n\n**Notes:**\n- Works in both backtesting and live trading\n- Best used with market entry orders\n- Provides same-bar exit capabilities\n\n#### AutoStopLossPrice\n\n\n```csharp\npublic double AutoStopLossPrice\n\n```",
    "metadata": {
      "id": "transaction",
      "title": "transaction",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/transaction.md",
      "chunkIndex": "code-context-8",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public BarHistory Bars\n",
    "metadata": {
      "id": "transaction",
      "title": "transaction",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/transaction.md",
      "chunkIndex": "code-9",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "limit order to exit a Position as soon as it is filled.\n\n**Notes:**\n- Works in both backtesting and live trading\n- Best used with market entry orders\n- Provides same-bar exit capabilities\n\n#### AutoStopLossPrice\n```csharp\npublic double AutoStopLossPrice\n```\nAllows immediate submission of a \"same-bar\" stop order to exit a Position as soon as it is filled.\n\n**Notes:**\n- Works in both backtesting and live trading\n- Best used with market entry orders\n- Provides same-bar exit capabilities\n\n#### Bars\n"
    }
  },
  {
    "pageContent": "limit order to exit a Position as soon as it is filled.\n\n**Notes:**\n- Works in both backtesting and live trading\n- Best used with market entry orders\n- Provides same-bar exit capabilities\n\n#### AutoStopLossPrice\n```csharp\npublic double AutoStopLossPrice\n```\nAllows immediate submission of a \"same-bar\" stop order to exit a Position as soon as it is filled.\n\n**Notes:**\n- Works in both backtesting and live trading\n- Best used with market entry orders\n- Provides same-bar exit capabilities\n\n#### Bars\n\n\n```csharp\npublic BarHistory Bars\n\n```",
    "metadata": {
      "id": "transaction",
      "title": "transaction",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/transaction.md",
      "chunkIndex": "code-context-9",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public DateTime GranularWeightBasis\n",
    "metadata": {
      "id": "transaction",
      "title": "transaction",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/transaction.md",
      "chunkIndex": "code-10",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ith market entry orders\n- Provides same-bar exit capabilities\n\n#### AutoStopLossPrice\n```csharp\npublic double AutoStopLossPrice\n```\nAllows immediate submission of a \"same-bar\" stop order to exit a Position as soon as it is filled.\n\n**Notes:**\n- Works in both backtesting and live trading\n- Best used with market entry orders\n- Provides same-bar exit capabilities\n\n#### Bars\n```csharp\npublic BarHistory Bars\n```\nThe `BarHistory` instance on which the transaction was placed.\n\n#### GranularWeightBasis\n"
    }
  },
  {
    "pageContent": "ith market entry orders\n- Provides same-bar exit capabilities\n\n#### AutoStopLossPrice\n```csharp\npublic double AutoStopLossPrice\n```\nAllows immediate submission of a \"same-bar\" stop order to exit a Position as soon as it is filled.\n\n**Notes:**\n- Works in both backtesting and live trading\n- Best used with market entry orders\n- Provides same-bar exit capabilities\n\n#### Bars\n```csharp\npublic BarHistory Bars\n```\nThe `BarHistory` instance on which the transaction was placed.\n\n#### GranularWeightBasis\n\n\n```csharp\npublic DateTime GranularWeightBasis\n\n```",
    "metadata": {
      "id": "transaction",
      "title": "transaction",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/transaction.md",
      "chunkIndex": "code-context-10",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public bool IsEntry\n",
    "metadata": {
      "id": "transaction",
      "title": "transaction",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/transaction.md",
      "chunkIndex": "code-11",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "it a Position as soon as it is filled.\n\n**Notes:**\n- Works in both backtesting and live trading\n- Best used with market entry orders\n- Provides same-bar exit capabilities\n\n#### Bars\n```csharp\npublic BarHistory Bars\n```\nThe `BarHistory` instance on which the transaction was placed.\n\n#### GranularWeightBasis\n```csharp\npublic DateTime GranularWeightBasis\n```\nContains the DateTime detected in intraday data that determined limit/stop order execution when advanced processing is enabled.\n\n#### IsEntry\n"
    }
  },
  {
    "pageContent": "it a Position as soon as it is filled.\n\n**Notes:**\n- Works in both backtesting and live trading\n- Best used with market entry orders\n- Provides same-bar exit capabilities\n\n#### Bars\n```csharp\npublic BarHistory Bars\n```\nThe `BarHistory` instance on which the transaction was placed.\n\n#### GranularWeightBasis\n```csharp\npublic DateTime GranularWeightBasis\n```\nContains the DateTime detected in intraday data that determined limit/stop order execution when advanced processing is enabled.\n\n#### IsEntry\n\n\n```csharp\npublic bool IsEntry\n\n```",
    "metadata": {
      "id": "transaction",
      "title": "transaction",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/transaction.md",
      "chunkIndex": "code-context-11",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public bool IsExit\n",
    "metadata": {
      "id": "transaction",
      "title": "transaction",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/transaction.md",
      "chunkIndex": "code-12",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ntry orders\n- Provides same-bar exit capabilities\n\n#### Bars\n```csharp\npublic BarHistory Bars\n```\nThe `BarHistory` instance on which the transaction was placed.\n\n#### GranularWeightBasis\n```csharp\npublic DateTime GranularWeightBasis\n```\nContains the DateTime detected in intraday data that determined limit/stop order execution when advanced processing is enabled.\n\n#### IsEntry\n```csharp\npublic bool IsEntry\n```\nReturns `true` if the transaction is an entry (Buy or Short) transaction.\n\n#### IsExit\n"
    }
  },
  {
    "pageContent": "ntry orders\n- Provides same-bar exit capabilities\n\n#### Bars\n```csharp\npublic BarHistory Bars\n```\nThe `BarHistory` instance on which the transaction was placed.\n\n#### GranularWeightBasis\n```csharp\npublic DateTime GranularWeightBasis\n```\nContains the DateTime detected in intraday data that determined limit/stop order execution when advanced processing is enabled.\n\n#### IsEntry\n```csharp\npublic bool IsEntry\n```\nReturns `true` if the transaction is an entry (Buy or Short) transaction.\n\n#### IsExit\n\n\n```csharp\npublic bool IsExit\n\n```",
    "metadata": {
      "id": "transaction",
      "title": "transaction",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/transaction.md",
      "chunkIndex": "code-context-12",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public bool NSF\n",
    "metadata": {
      "id": "transaction",
      "title": "transaction",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/transaction.md",
      "chunkIndex": "code-13",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "stance on which the transaction was placed.\n\n#### GranularWeightBasis\n```csharp\npublic DateTime GranularWeightBasis\n```\nContains the DateTime detected in intraday data that determined limit/stop order execution when advanced processing is enabled.\n\n#### IsEntry\n```csharp\npublic bool IsEntry\n```\nReturns `true` if the transaction is an entry (Buy or Short) transaction.\n\n#### IsExit\n```csharp\npublic bool IsExit\n```\nReturns `true` if the transaction is an exit (Sell or Cover) transaction.\n\n#### NSF\n"
    }
  },
  {
    "pageContent": "stance on which the transaction was placed.\n\n#### GranularWeightBasis\n```csharp\npublic DateTime GranularWeightBasis\n```\nContains the DateTime detected in intraday data that determined limit/stop order execution when advanced processing is enabled.\n\n#### IsEntry\n```csharp\npublic bool IsEntry\n```\nReturns `true` if the transaction is an entry (Buy or Short) transaction.\n\n#### IsExit\n```csharp\npublic bool IsExit\n```\nReturns `true` if the transaction is an exit (Sell or Cover) transaction.\n\n#### NSF\n\n\n```csharp\npublic bool NSF\n\n```",
    "metadata": {
      "id": "transaction",
      "title": "transaction",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/transaction.md",
      "chunkIndex": "code-context-13",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public double OrderPrice\n",
    "metadata": {
      "id": "transaction",
      "title": "transaction",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/transaction.md",
      "chunkIndex": "code-14",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "eTime detected in intraday data that determined limit/stop order execution when advanced processing is enabled.\n\n#### IsEntry\n```csharp\npublic bool IsEntry\n```\nReturns `true` if the transaction is an entry (Buy or Short) transaction.\n\n#### IsExit\n```csharp\npublic bool IsExit\n```\nReturns `true` if the transaction is an exit (Sell or Cover) transaction.\n\n#### NSF\n```csharp\npublic bool NSF\n```\nReturns `true` if the Transaction was flagged as Non-Sufficient Funds by the backtester.\n\n#### OrderPrice\n"
    }
  },
  {
    "pageContent": "eTime detected in intraday data that determined limit/stop order execution when advanced processing is enabled.\n\n#### IsEntry\n```csharp\npublic bool IsEntry\n```\nReturns `true` if the transaction is an entry (Buy or Short) transaction.\n\n#### IsExit\n```csharp\npublic bool IsExit\n```\nReturns `true` if the transaction is an exit (Sell or Cover) transaction.\n\n#### NSF\n```csharp\npublic bool NSF\n```\nReturns `true` if the Transaction was flagged as Non-Sufficient Funds by the backtester.\n\n#### OrderPrice\n\n\n```csharp\npublic double OrderPrice\n\n```",
    "metadata": {
      "id": "transaction",
      "title": "transaction",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/transaction.md",
      "chunkIndex": "code-context-14",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public OrderType OrderType\n",
    "metadata": {
      "id": "transaction",
      "title": "transaction",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/transaction.md",
      "chunkIndex": "code-15",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "\n```csharp\npublic bool IsEntry\n```\nReturns `true` if the transaction is an entry (Buy or Short) transaction.\n\n#### IsExit\n```csharp\npublic bool IsExit\n```\nReturns `true` if the transaction is an exit (Sell or Cover) transaction.\n\n#### NSF\n```csharp\npublic bool NSF\n```\nReturns `true` if the Transaction was flagged as Non-Sufficient Funds by the backtester.\n\n#### OrderPrice\n```csharp\npublic double OrderPrice\n```\nThe order price of the transaction (does not apply to Market orders).\n\n#### OrderType\n"
    }
  },
  {
    "pageContent": "\n```csharp\npublic bool IsEntry\n```\nReturns `true` if the transaction is an entry (Buy or Short) transaction.\n\n#### IsExit\n```csharp\npublic bool IsExit\n```\nReturns `true` if the transaction is an exit (Sell or Cover) transaction.\n\n#### NSF\n```csharp\npublic bool NSF\n```\nReturns `true` if the Transaction was flagged as Non-Sufficient Funds by the backtester.\n\n#### OrderPrice\n```csharp\npublic double OrderPrice\n```\nThe order price of the transaction (does not apply to Market orders).\n\n#### OrderType\n\n\n```csharp\npublic OrderType OrderType\n\n```",
    "metadata": {
      "id": "transaction",
      "title": "transaction",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/transaction.md",
      "chunkIndex": "code-context-15",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public PositionType PositionType\n",
    "metadata": {
      "id": "transaction",
      "title": "transaction",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/transaction.md",
      "chunkIndex": "code-16",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "s flagged as Non-Sufficient Funds by the backtester.\n\n#### OrderPrice\n```csharp\npublic double OrderPrice\n```\nThe order price of the transaction (does not apply to Market orders).\n\n#### OrderType\n```csharp\npublic OrderType OrderType\n```\nContains the order type of the transaction. Possible values:\n- `OrderType.Market`\n- `OrderType.Limit`\n- `OrderType.Stop`\n- `OrderType.StopLimit`\n- `OrderType.FixedPrice`\n- `OrderType.LimitMove`\n- `OrderType.MarketClose`\n- `OrderType.LimitClose`\n\n#### PositionType\n"
    }
  },
  {
    "pageContent": "s flagged as Non-Sufficient Funds by the backtester.\n\n#### OrderPrice\n```csharp\npublic double OrderPrice\n```\nThe order price of the transaction (does not apply to Market orders).\n\n#### OrderType\n```csharp\npublic OrderType OrderType\n```\nContains the order type of the transaction. Possible values:\n- `OrderType.Market`\n- `OrderType.Limit`\n- `OrderType.Stop`\n- `OrderType.StopLimit`\n- `OrderType.FixedPrice`\n- `OrderType.LimitMove`\n- `OrderType.MarketClose`\n- `OrderType.LimitClose`\n\n#### PositionType\n\n\n```csharp\npublic PositionType PositionType\n\n```",
    "metadata": {
      "id": "transaction",
      "title": "transaction",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/transaction.md",
      "chunkIndex": "code-context-16",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public double Quantity\n",
    "metadata": {
      "id": "transaction",
      "title": "transaction",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/transaction.md",
      "chunkIndex": "code-17",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "OrderType\n```csharp\npublic OrderType OrderType\n```\nContains the order type of the transaction. Possible values:\n- `OrderType.Market`\n- `OrderType.Limit`\n- `OrderType.Stop`\n- `OrderType.StopLimit`\n- `OrderType.FixedPrice`\n- `OrderType.LimitMove`\n- `OrderType.MarketClose`\n- `OrderType.LimitClose`\n\n#### PositionType\n```csharp\npublic PositionType PositionType\n```\nReturns the position type:\n- `PositionType.Long` for Buy and Sell orders\n- `PositionType.Short` for Short and Cover orders\n\n#### Quantity\n"
    }
  },
  {
    "pageContent": "OrderType\n```csharp\npublic OrderType OrderType\n```\nContains the order type of the transaction. Possible values:\n- `OrderType.Market`\n- `OrderType.Limit`\n- `OrderType.Stop`\n- `OrderType.StopLimit`\n- `OrderType.FixedPrice`\n- `OrderType.LimitMove`\n- `OrderType.MarketClose`\n- `OrderType.LimitClose`\n\n#### PositionType\n```csharp\npublic PositionType PositionType\n```\nReturns the position type:\n- `PositionType.Long` for Buy and Sell orders\n- `PositionType.Short` for Short and Cover orders\n\n#### Quantity\n\n\n```csharp\npublic double Quantity\n\n```",
    "metadata": {
      "id": "transaction",
      "title": "transaction",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/transaction.md",
      "chunkIndex": "code-context-17",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public double StopLimitLimitPrice\n",
    "metadata": {
      "id": "transaction",
      "title": "transaction",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/transaction.md",
      "chunkIndex": "code-18",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "nType\n```csharp\npublic PositionType PositionType\n```\nReturns the position type:\n- `PositionType.Long` for Buy and Sell orders\n- `PositionType.Short` for Short and Cover orders\n\n#### Quantity\n```csharp\npublic double Quantity\n```\nContains and assigns the number of shares or contracts in the transaction.\n\n**Important:** \n- Assigning Quantity to an Entry Transaction overrides the Position Sizer\n- Exit Transaction quantity is adjusted according to Portfolio Sync preferences\n\n#### StopLimitLimitPrice\n"
    }
  },
  {
    "pageContent": "nType\n```csharp\npublic PositionType PositionType\n```\nReturns the position type:\n- `PositionType.Long` for Buy and Sell orders\n- `PositionType.Short` for Short and Cover orders\n\n#### Quantity\n```csharp\npublic double Quantity\n```\nContains and assigns the number of shares or contracts in the transaction.\n\n**Important:** \n- Assigning Quantity to an Entry Transaction overrides the Position Sizer\n- Exit Transaction quantity is adjusted according to Portfolio Sync preferences\n\n#### StopLimitLimitPrice\n\n\n```csharp\npublic double StopLimitLimitPrice\n\n```",
    "metadata": {
      "id": "transaction",
      "title": "transaction",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/transaction.md",
      "chunkIndex": "code-context-18",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public string Symbol\n",
    "metadata": {
      "id": "transaction",
      "title": "transaction",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/transaction.md",
      "chunkIndex": "code-19",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "` for Short and Cover orders\n\n#### Quantity\n```csharp\npublic double Quantity\n```\nContains and assigns the number of shares or contracts in the transaction.\n\n**Important:** \n- Assigning Quantity to an Entry Transaction overrides the Position Sizer\n- Exit Transaction quantity is adjusted according to Portfolio Sync preferences\n\n#### StopLimitLimitPrice\n```csharp\npublic double StopLimitLimitPrice\n```\nEstablishes the limit price for StopLimit orders. If unassigned, uses the OrderPrice.\n\n#### Symbol\n"
    }
  },
  {
    "pageContent": "` for Short and Cover orders\n\n#### Quantity\n```csharp\npublic double Quantity\n```\nContains and assigns the number of shares or contracts in the transaction.\n\n**Important:** \n- Assigning Quantity to an Entry Transaction overrides the Position Sizer\n- Exit Transaction quantity is adjusted according to Portfolio Sync preferences\n\n#### StopLimitLimitPrice\n```csharp\npublic double StopLimitLimitPrice\n```\nEstablishes the limit price for StopLimit orders. If unassigned, uses the OrderPrice.\n\n#### Symbol\n\n\n```csharp\npublic string Symbol\n\n```",
    "metadata": {
      "id": "transaction",
      "title": "transaction",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/transaction.md",
      "chunkIndex": "code-context-19",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public object Tag\n",
    "metadata": {
      "id": "transaction",
      "title": "transaction",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/transaction.md",
      "chunkIndex": "code-20",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": " assigns the number of shares or contracts in the transaction.\n\n**Important:** \n- Assigning Quantity to an Entry Transaction overrides the Position Sizer\n- Exit Transaction quantity is adjusted according to Portfolio Sync preferences\n\n#### StopLimitLimitPrice\n```csharp\npublic double StopLimitLimitPrice\n```\nEstablishes the limit price for StopLimit orders. If unassigned, uses the OrderPrice.\n\n#### Symbol\n```csharp\npublic string Symbol\n```\nThe symbol on which the transaction was placed.\n\n#### Tag\n"
    }
  },
  {
    "pageContent": " assigns the number of shares or contracts in the transaction.\n\n**Important:** \n- Assigning Quantity to an Entry Transaction overrides the Position Sizer\n- Exit Transaction quantity is adjusted according to Portfolio Sync preferences\n\n#### StopLimitLimitPrice\n```csharp\npublic double StopLimitLimitPrice\n```\nEstablishes the limit price for StopLimit orders. If unassigned, uses the OrderPrice.\n\n#### Symbol\n```csharp\npublic string Symbol\n```\nThe symbol on which the transaction was placed.\n\n#### Tag\n\n\n```csharp\npublic object Tag\n\n```",
    "metadata": {
      "id": "transaction",
      "title": "transaction",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/transaction.md",
      "chunkIndex": "code-context-20",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public TransactionType TransactionType\n",
    "metadata": {
      "id": "transaction",
      "title": "transaction",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/transaction.md",
      "chunkIndex": "code-21",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "according to Portfolio Sync preferences\n\n#### StopLimitLimitPrice\n```csharp\npublic double StopLimitLimitPrice\n```\nEstablishes the limit price for StopLimit orders. If unassigned, uses the OrderPrice.\n\n#### Symbol\n```csharp\npublic string Symbol\n```\nThe symbol on which the transaction was placed.\n\n#### Tag\n```csharp\npublic object Tag\n```\nAllows attaching custom metadata to the Transaction. If set on an entry Transaction, the value is assigned to the resulting Position's Tag.\n\n#### TransactionType\n"
    }
  },
  {
    "pageContent": "according to Portfolio Sync preferences\n\n#### StopLimitLimitPrice\n```csharp\npublic double StopLimitLimitPrice\n```\nEstablishes the limit price for StopLimit orders. If unassigned, uses the OrderPrice.\n\n#### Symbol\n```csharp\npublic string Symbol\n```\nThe symbol on which the transaction was placed.\n\n#### Tag\n```csharp\npublic object Tag\n```\nAllows attaching custom metadata to the Transaction. If set on an entry Transaction, the value is assigned to the resulting Position's Tag.\n\n#### TransactionType\n\n\n```csharp\npublic TransactionType TransactionType\n\n```",
    "metadata": {
      "id": "transaction",
      "title": "transaction",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/transaction.md",
      "chunkIndex": "code-context-21",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public void SetPositionMetric(string metric, double value)\n",
    "metadata": {
      "id": "transaction",
      "title": "transaction",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/transaction.md",
      "chunkIndex": "code-22",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "rp\npublic string Symbol\n```\nThe symbol on which the transaction was placed.\n\n#### Tag\n```csharp\npublic object Tag\n```\nAllows attaching custom metadata to the Transaction. If set on an entry Transaction, the value is assigned to the resulting Position's Tag.\n\n#### TransactionType\n```csharp\npublic TransactionType TransactionType\n```\nContains the transaction type:\n- `TransactionType.Buy`\n- `TransactionType.Sell`\n- `TransactionType.Short`\n- `TransactionType.Cover`\n\n## Methods\n\n### SetPositionMetric\n"
    }
  },
  {
    "pageContent": "rp\npublic string Symbol\n```\nThe symbol on which the transaction was placed.\n\n#### Tag\n```csharp\npublic object Tag\n```\nAllows attaching custom metadata to the Transaction. If set on an entry Transaction, the value is assigned to the resulting Position's Tag.\n\n#### TransactionType\n```csharp\npublic TransactionType TransactionType\n```\nContains the transaction type:\n- `TransactionType.Buy`\n- `TransactionType.Sell`\n- `TransactionType.Short`\n- `TransactionType.Cover`\n\n## Methods\n\n### SetPositionMetric\n\n\n```csharp\npublic void SetPositionMetric(string metric, double value)\n\n```",
    "metadata": {
      "id": "transaction",
      "title": "transaction",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/transaction.md",
      "chunkIndex": "code-context-22",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public class TransactionManager\n{\n    public void ProcessTransaction(Transaction transaction)\n    {\n        // Check transaction details\n        if (transaction.IsEntry)\n        {\n            // Customize entry transaction\n            transaction.Quantity = CalculateCustomQuantity();\n            transaction.AutoStopLossPrice = CalculateStopLoss();\n        }\n        \n        // Set custom metrics\n        transaction.SetPositionMetric(\"RiskFactor\", 0.5);\n        transaction.SignalName = \"Custom Entry Signal\";\n    }\n}\n",
    "metadata": {
      "id": "transaction",
      "title": "transaction",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/transaction.md",
      "chunkIndex": "code-23",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "public TransactionType TransactionType\n```\nContains the transaction type:\n- `TransactionType.Buy`\n- `TransactionType.Sell`\n- `TransactionType.Short`\n- `TransactionType.Cover`\n\n## Methods\n\n### SetPositionMetric\n```csharp\npublic void SetPositionMetric(string metric, double value)\n```\nSets a Position Metric value that will be passed to the Position created by this Transaction.\n\n**Parameters:**\n- `metric`: Name of the metric\n- `value`: Metric value\n\n## Usage Examples\n\n### Basic Transaction Handling\n"
    }
  },
  {
    "pageContent": "public TransactionType TransactionType\n```\nContains the transaction type:\n- `TransactionType.Buy`\n- `TransactionType.Sell`\n- `TransactionType.Short`\n- `TransactionType.Cover`\n\n## Methods\n\n### SetPositionMetric\n```csharp\npublic void SetPositionMetric(string metric, double value)\n```\nSets a Position Metric value that will be passed to the Position created by this Transaction.\n\n**Parameters:**\n- `metric`: Name of the metric\n- `value`: Metric value\n\n## Usage Examples\n\n### Basic Transaction Handling\n\n\n```csharp\npublic class TransactionManager\n{\n    public void ProcessTransaction(Transaction transaction)\n    {\n        // Check transaction details\n        if (transaction.IsEntry)\n        {\n            // Customize entry transaction\n            transaction.Quantity = CalculateCustomQuantity();\n            transaction.AutoStopLossPrice = CalculateStopLoss();\n        }\n        \n        // Set custom metrics\n        transaction.SetPositionMetric(\"RiskFactor\", 0.5);\n        transaction.SignalName = \"Custom Entry Signal\";\n    }\n}\n\n```",
    "metadata": {
      "id": "transaction",
      "title": "transaction",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/transaction.md",
      "chunkIndex": "code-context-23",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "# TrendLine Class\n\n**Namespace:** WealthLab.Indicators  \n**Parent:** Object\n\nThe `TrendLine` class represents a trend line within a time series data source, expressing two points via indices and values. It is typically generated by the `PeakTroughCalculator` to analyze price trends and patterns.\n\n## Constructors\n\n### TrendLine(List<PeakTrough>)\n",
    "metadata": {
      "id": "trend-line",
      "title": "trend-line",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/trend-line.md",
      "chunkIndex": 0,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nCreates a `TrendLine` instance based on a list of `PeakTrough` points using linear regression.\n\n**Requirements:**\n- Minimum of 4 `PeakTrough` points required\n- Used by `PeakTroughCalculator` in `GetLowerTrendLine` and `GetUpperTrendLine` methods\n\n**Example:**\n",
    "metadata": {
      "id": "trend-line",
      "title": "trend-line",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/trend-line.md",
      "chunkIndex": 1,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n### TrendLine(Index, Value, Index, Value)\n",
    "metadata": {
      "id": "trend-line",
      "title": "trend-line",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/trend-line.md",
      "chunkIndex": 2,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nCreates a `TrendLine` based on specific start and end indices and values.\n\n**Parameters:**\n- `idx1`: First point's index\n- `val1`: First point's Y-axis value\n- `idx2`: Second point's index\n- `val2`: Second point's Y-axis value\n\n**Example:**\n",
    "metadata": {
      "id": "trend-line",
      "title": "trend-line",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/trend-line.md",
      "chunkIndex": 3,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n## Properties\n\n### Deviation\n",
    "metadata": {
      "id": "trend-line",
      "title": "trend-line",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/trend-line.md",
      "chunkIndex": 4,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nRepresents the average distance (as a percentage) of peak/trough points from the trend line.\n\n**Characteristics:**\n- Calculated using linear regression\n- Lower deviation indicates a closer fit to the points\n- Helps assess trend line reliability\n\n### Index1\n",
    "metadata": {
      "id": "trend-line",
      "title": "trend-line",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/trend-line.md",
      "chunkIndex": 5,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nThe index of the first (left) point of the trend line in the underlying source data.\n\n### Index2\n",
    "metadata": {
      "id": "trend-line",
      "title": "trend-line",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/trend-line.md",
      "chunkIndex": 6,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nThe index of the second (right) point of the trend line in the underlying source data.\n\n### Value1\n",
    "metadata": {
      "id": "trend-line",
      "title": "trend-line",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/trend-line.md",
      "chunkIndex": 7,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nThe Y-axis value of the first (left) point of the trend line.\n\n### Value2\n",
    "metadata": {
      "id": "trend-line",
      "title": "trend-line",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/trend-line.md",
      "chunkIndex": 8,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nThe Y-axis value of the second (right) point of the trend line.\n\n### IsFalling\n",
    "metadata": {
      "id": "trend-line",
      "title": "trend-line",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/trend-line.md",
      "chunkIndex": 9,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns `true` if the trend line's starting point is less than its ending point.\n\n### IsRising\n",
    "metadata": {
      "id": "trend-line",
      "title": "trend-line",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/trend-line.md",
      "chunkIndex": 10,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns `true` if the trend line's starting point is greater than its ending point.\n\n## Methods\n\n### ExtendTo\n",
    "metadata": {
      "id": "trend-line",
      "title": "trend-line",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/trend-line.md",
      "chunkIndex": 11,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nExtends the trend line to an arbitrary point on the X-axis and returns its corresponding Y-axis value.\n\n**Parameters:**\n- `idx`: Target index to extend the trend line\n- `useLog`: Optional parameter to use logarithmic scaling (default is `false`)\n\n**Returns:** Y-axis value at the specified index\n\n**Example:**\n",
    "metadata": {
      "id": "trend-line",
      "title": "trend-line",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/trend-line.md",
      "chunkIndex": 12,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n## Usage Examples\n\n### Trend Line Analysis\n",
    "metadata": {
      "id": "trend-line",
      "title": "trend-line",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/trend-line.md",
      "chunkIndex": 13,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n### Trading Strategy with Trend Lines\n",
    "metadata": {
      "id": "trend-line",
      "title": "trend-line",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/trend-line.md",
      "chunkIndex": 14,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n## Best Practices\n\n1. **Trend Line Interpretation**\n   - Consider `Deviation` when assessing trend line reliability\n   - Use multiple time frames for comprehensive analysis\n   - Combine trend line analysis with other technical indicators\n\n2. **Performance Considerations**\n   - Minimize unnecessary trend line calculations\n   - Cache trend line results when possible\n   - Use efficient peak and trough detection methods\n\n3. **Trading Strategies**\n   - Don't rely solely on trend lines\n   - Implement robust risk management\n   - Validate trend line signals across different market conditions\n\n## Notes\n\n- Powerful tool for technical trend analysis\n- Supports both linear and logarithmic trend line extensions\n- Useful in developing trend-following trading strategies\n- Provides insights into price movement patterns ",
    "metadata": {
      "id": "trend-line",
      "title": "trend-line",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/trend-line.md",
      "chunkIndex": 15,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "public TrendLine(List<PeakTrough> pts)\n",
    "metadata": {
      "id": "trend-line",
      "title": "trend-line",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/trend-line.md",
      "chunkIndex": "code-0",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "# TrendLine Class\n\n**Namespace:** WealthLab.Indicators  \n**Parent:** Object\n\nThe `TrendLine` class represents a trend line within a time series data source, expressing two points via indices and values. It is typically generated by the `PeakTroughCalculator` to analyze price trends and patterns.\n\n## Constructors\n\n### TrendLine(List<PeakTrough>)\n"
    }
  },
  {
    "pageContent": "# TrendLine Class\n\n**Namespace:** WealthLab.Indicators  \n**Parent:** Object\n\nThe `TrendLine` class represents a trend line within a time series data source, expressing two points via indices and values. It is typically generated by the `PeakTroughCalculator` to analyze price trends and patterns.\n\n## Constructors\n\n### TrendLine(List<PeakTrough>)\n\n\n```csharp\npublic TrendLine(List<PeakTrough> pts)\n\n```",
    "metadata": {
      "id": "trend-line",
      "title": "trend-line",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/trend-line.md",
      "chunkIndex": "code-context-0",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "var peakTroughs = PeakTroughCalculator.Calculate(prices);\nvar trendLine = new TrendLine(peakTroughs);\n",
    "metadata": {
      "id": "trend-line",
      "title": "trend-line",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/trend-line.md",
      "chunkIndex": "code-1",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ressing two points via indices and values. It is typically generated by the `PeakTroughCalculator` to analyze price trends and patterns.\n\n## Constructors\n\n### TrendLine(List<PeakTrough>)\n```csharp\npublic TrendLine(List<PeakTrough> pts)\n```\nCreates a `TrendLine` instance based on a list of `PeakTrough` points using linear regression.\n\n**Requirements:**\n- Minimum of 4 `PeakTrough` points required\n- Used by `PeakTroughCalculator` in `GetLowerTrendLine` and `GetUpperTrendLine` methods\n\n**Example:**\n"
    }
  },
  {
    "pageContent": "ressing two points via indices and values. It is typically generated by the `PeakTroughCalculator` to analyze price trends and patterns.\n\n## Constructors\n\n### TrendLine(List<PeakTrough>)\n```csharp\npublic TrendLine(List<PeakTrough> pts)\n```\nCreates a `TrendLine` instance based on a list of `PeakTrough` points using linear regression.\n\n**Requirements:**\n- Minimum of 4 `PeakTrough` points required\n- Used by `PeakTroughCalculator` in `GetLowerTrendLine` and `GetUpperTrendLine` methods\n\n**Example:**\n\n\n```csharp\nvar peakTroughs = PeakTroughCalculator.Calculate(prices);\nvar trendLine = new TrendLine(peakTroughs);\n\n```",
    "metadata": {
      "id": "trend-line",
      "title": "trend-line",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/trend-line.md",
      "chunkIndex": "code-context-1",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public TrendLine(int idx1, double val1, int idx2, double val2)\n",
    "metadata": {
      "id": "trend-line",
      "title": "trend-line",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/trend-line.md",
      "chunkIndex": "code-2",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "TrendLine(List<PeakTrough>)\n```csharp\npublic TrendLine(List<PeakTrough> pts)\n```\nCreates a `TrendLine` instance based on a list of `PeakTrough` points using linear regression.\n\n**Requirements:**\n- Minimum of 4 `PeakTrough` points required\n- Used by `PeakTroughCalculator` in `GetLowerTrendLine` and `GetUpperTrendLine` methods\n\n**Example:**\n```csharp\nvar peakTroughs = PeakTroughCalculator.Calculate(prices);\nvar trendLine = new TrendLine(peakTroughs);\n```\n\n### TrendLine(Index, Value, Index, Value)\n"
    }
  },
  {
    "pageContent": "TrendLine(List<PeakTrough>)\n```csharp\npublic TrendLine(List<PeakTrough> pts)\n```\nCreates a `TrendLine` instance based on a list of `PeakTrough` points using linear regression.\n\n**Requirements:**\n- Minimum of 4 `PeakTrough` points required\n- Used by `PeakTroughCalculator` in `GetLowerTrendLine` and `GetUpperTrendLine` methods\n\n**Example:**\n```csharp\nvar peakTroughs = PeakTroughCalculator.Calculate(prices);\nvar trendLine = new TrendLine(peakTroughs);\n```\n\n### TrendLine(Index, Value, Index, Value)\n\n\n```csharp\npublic TrendLine(int idx1, double val1, int idx2, double val2)\n\n```",
    "metadata": {
      "id": "trend-line",
      "title": "trend-line",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/trend-line.md",
      "chunkIndex": "code-context-2",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "var trendLine = new TrendLine(10, 50.5, 20, 75.3);\n",
    "metadata": {
      "id": "trend-line",
      "title": "trend-line",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/trend-line.md",
      "chunkIndex": "code-3",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": " methods\n\n**Example:**\n```csharp\nvar peakTroughs = PeakTroughCalculator.Calculate(prices);\nvar trendLine = new TrendLine(peakTroughs);\n```\n\n### TrendLine(Index, Value, Index, Value)\n```csharp\npublic TrendLine(int idx1, double val1, int idx2, double val2)\n```\nCreates a `TrendLine` based on specific start and end indices and values.\n\n**Parameters:**\n- `idx1`: First point's index\n- `val1`: First point's Y-axis value\n- `idx2`: Second point's index\n- `val2`: Second point's Y-axis value\n\n**Example:**\n"
    }
  },
  {
    "pageContent": " methods\n\n**Example:**\n```csharp\nvar peakTroughs = PeakTroughCalculator.Calculate(prices);\nvar trendLine = new TrendLine(peakTroughs);\n```\n\n### TrendLine(Index, Value, Index, Value)\n```csharp\npublic TrendLine(int idx1, double val1, int idx2, double val2)\n```\nCreates a `TrendLine` based on specific start and end indices and values.\n\n**Parameters:**\n- `idx1`: First point's index\n- `val1`: First point's Y-axis value\n- `idx2`: Second point's index\n- `val2`: Second point's Y-axis value\n\n**Example:**\n\n\n```csharp\nvar trendLine = new TrendLine(10, 50.5, 20, 75.3);\n\n```",
    "metadata": {
      "id": "trend-line",
      "title": "trend-line",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/trend-line.md",
      "chunkIndex": "code-context-3",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public double Deviation\n",
    "metadata": {
      "id": "trend-line",
      "title": "trend-line",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/trend-line.md",
      "chunkIndex": "code-4",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "trendLine = new TrendLine(peakTroughs);\n```\n\n### TrendLine(Index, Value, Index, Value)\n```csharp\npublic TrendLine(int idx1, double val1, int idx2, double val2)\n```\nCreates a `TrendLine` based on specific start and end indices and values.\n\n**Parameters:**\n- `idx1`: First point's index\n- `val1`: First point's Y-axis value\n- `idx2`: Second point's index\n- `val2`: Second point's Y-axis value\n\n**Example:**\n```csharp\nvar trendLine = new TrendLine(10, 50.5, 20, 75.3);\n```\n\n## Properties\n\n### Deviation\n"
    }
  },
  {
    "pageContent": "trendLine = new TrendLine(peakTroughs);\n```\n\n### TrendLine(Index, Value, Index, Value)\n```csharp\npublic TrendLine(int idx1, double val1, int idx2, double val2)\n```\nCreates a `TrendLine` based on specific start and end indices and values.\n\n**Parameters:**\n- `idx1`: First point's index\n- `val1`: First point's Y-axis value\n- `idx2`: Second point's index\n- `val2`: Second point's Y-axis value\n\n**Example:**\n```csharp\nvar trendLine = new TrendLine(10, 50.5, 20, 75.3);\n```\n\n## Properties\n\n### Deviation\n\n\n```csharp\npublic double Deviation\n\n```",
    "metadata": {
      "id": "trend-line",
      "title": "trend-line",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/trend-line.md",
      "chunkIndex": "code-context-4",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public int Index1\n",
    "metadata": {
      "id": "trend-line",
      "title": "trend-line",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/trend-line.md",
      "chunkIndex": "code-5",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "First point's Y-axis value\n- `idx2`: Second point's index\n- `val2`: Second point's Y-axis value\n\n**Example:**\n```csharp\nvar trendLine = new TrendLine(10, 50.5, 20, 75.3);\n```\n\n## Properties\n\n### Deviation\n```csharp\npublic double Deviation\n```\nRepresents the average distance (as a percentage) of peak/trough points from the trend line.\n\n**Characteristics:**\n- Calculated using linear regression\n- Lower deviation indicates a closer fit to the points\n- Helps assess trend line reliability\n\n### Index1\n"
    }
  },
  {
    "pageContent": "First point's Y-axis value\n- `idx2`: Second point's index\n- `val2`: Second point's Y-axis value\n\n**Example:**\n```csharp\nvar trendLine = new TrendLine(10, 50.5, 20, 75.3);\n```\n\n## Properties\n\n### Deviation\n```csharp\npublic double Deviation\n```\nRepresents the average distance (as a percentage) of peak/trough points from the trend line.\n\n**Characteristics:**\n- Calculated using linear regression\n- Lower deviation indicates a closer fit to the points\n- Helps assess trend line reliability\n\n### Index1\n\n\n```csharp\npublic int Index1\n\n```",
    "metadata": {
      "id": "trend-line",
      "title": "trend-line",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/trend-line.md",
      "chunkIndex": "code-context-5",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public int Index2\n",
    "metadata": {
      "id": "trend-line",
      "title": "trend-line",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/trend-line.md",
      "chunkIndex": "code-6",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "Line = new TrendLine(10, 50.5, 20, 75.3);\n```\n\n## Properties\n\n### Deviation\n```csharp\npublic double Deviation\n```\nRepresents the average distance (as a percentage) of peak/trough points from the trend line.\n\n**Characteristics:**\n- Calculated using linear regression\n- Lower deviation indicates a closer fit to the points\n- Helps assess trend line reliability\n\n### Index1\n```csharp\npublic int Index1\n```\nThe index of the first (left) point of the trend line in the underlying source data.\n\n### Index2\n"
    }
  },
  {
    "pageContent": "Line = new TrendLine(10, 50.5, 20, 75.3);\n```\n\n## Properties\n\n### Deviation\n```csharp\npublic double Deviation\n```\nRepresents the average distance (as a percentage) of peak/trough points from the trend line.\n\n**Characteristics:**\n- Calculated using linear regression\n- Lower deviation indicates a closer fit to the points\n- Helps assess trend line reliability\n\n### Index1\n```csharp\npublic int Index1\n```\nThe index of the first (left) point of the trend line in the underlying source data.\n\n### Index2\n\n\n```csharp\npublic int Index2\n\n```",
    "metadata": {
      "id": "trend-line",
      "title": "trend-line",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/trend-line.md",
      "chunkIndex": "code-context-6",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public double Value1\n",
    "metadata": {
      "id": "trend-line",
      "title": "trend-line",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/trend-line.md",
      "chunkIndex": "code-7",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "erage distance (as a percentage) of peak/trough points from the trend line.\n\n**Characteristics:**\n- Calculated using linear regression\n- Lower deviation indicates a closer fit to the points\n- Helps assess trend line reliability\n\n### Index1\n```csharp\npublic int Index1\n```\nThe index of the first (left) point of the trend line in the underlying source data.\n\n### Index2\n```csharp\npublic int Index2\n```\nThe index of the second (right) point of the trend line in the underlying source data.\n\n### Value1\n"
    }
  },
  {
    "pageContent": "erage distance (as a percentage) of peak/trough points from the trend line.\n\n**Characteristics:**\n- Calculated using linear regression\n- Lower deviation indicates a closer fit to the points\n- Helps assess trend line reliability\n\n### Index1\n```csharp\npublic int Index1\n```\nThe index of the first (left) point of the trend line in the underlying source data.\n\n### Index2\n```csharp\npublic int Index2\n```\nThe index of the second (right) point of the trend line in the underlying source data.\n\n### Value1\n\n\n```csharp\npublic double Value1\n\n```",
    "metadata": {
      "id": "trend-line",
      "title": "trend-line",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/trend-line.md",
      "chunkIndex": "code-context-7",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public double Value2\n",
    "metadata": {
      "id": "trend-line",
      "title": "trend-line",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/trend-line.md",
      "chunkIndex": "code-8",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "d using linear regression\n- Lower deviation indicates a closer fit to the points\n- Helps assess trend line reliability\n\n### Index1\n```csharp\npublic int Index1\n```\nThe index of the first (left) point of the trend line in the underlying source data.\n\n### Index2\n```csharp\npublic int Index2\n```\nThe index of the second (right) point of the trend line in the underlying source data.\n\n### Value1\n```csharp\npublic double Value1\n```\nThe Y-axis value of the first (left) point of the trend line.\n\n### Value2\n"
    }
  },
  {
    "pageContent": "d using linear regression\n- Lower deviation indicates a closer fit to the points\n- Helps assess trend line reliability\n\n### Index1\n```csharp\npublic int Index1\n```\nThe index of the first (left) point of the trend line in the underlying source data.\n\n### Index2\n```csharp\npublic int Index2\n```\nThe index of the second (right) point of the trend line in the underlying source data.\n\n### Value1\n```csharp\npublic double Value1\n```\nThe Y-axis value of the first (left) point of the trend line.\n\n### Value2\n\n\n```csharp\npublic double Value2\n\n```",
    "metadata": {
      "id": "trend-line",
      "title": "trend-line",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/trend-line.md",
      "chunkIndex": "code-context-8",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public bool IsFalling\n",
    "metadata": {
      "id": "trend-line",
      "title": "trend-line",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/trend-line.md",
      "chunkIndex": "code-9",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "lity\n\n### Index1\n```csharp\npublic int Index1\n```\nThe index of the first (left) point of the trend line in the underlying source data.\n\n### Index2\n```csharp\npublic int Index2\n```\nThe index of the second (right) point of the trend line in the underlying source data.\n\n### Value1\n```csharp\npublic double Value1\n```\nThe Y-axis value of the first (left) point of the trend line.\n\n### Value2\n```csharp\npublic double Value2\n```\nThe Y-axis value of the second (right) point of the trend line.\n\n### IsFalling\n"
    }
  },
  {
    "pageContent": "lity\n\n### Index1\n```csharp\npublic int Index1\n```\nThe index of the first (left) point of the trend line in the underlying source data.\n\n### Index2\n```csharp\npublic int Index2\n```\nThe index of the second (right) point of the trend line in the underlying source data.\n\n### Value1\n```csharp\npublic double Value1\n```\nThe Y-axis value of the first (left) point of the trend line.\n\n### Value2\n```csharp\npublic double Value2\n```\nThe Y-axis value of the second (right) point of the trend line.\n\n### IsFalling\n\n\n```csharp\npublic bool IsFalling\n\n```",
    "metadata": {
      "id": "trend-line",
      "title": "trend-line",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/trend-line.md",
      "chunkIndex": "code-context-9",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public bool IsRising\n",
    "metadata": {
      "id": "trend-line",
      "title": "trend-line",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/trend-line.md",
      "chunkIndex": "code-10",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "a.\n\n### Index2\n```csharp\npublic int Index2\n```\nThe index of the second (right) point of the trend line in the underlying source data.\n\n### Value1\n```csharp\npublic double Value1\n```\nThe Y-axis value of the first (left) point of the trend line.\n\n### Value2\n```csharp\npublic double Value2\n```\nThe Y-axis value of the second (right) point of the trend line.\n\n### IsFalling\n```csharp\npublic bool IsFalling\n```\nReturns `true` if the trend line's starting point is less than its ending point.\n\n### IsRising\n"
    }
  },
  {
    "pageContent": "a.\n\n### Index2\n```csharp\npublic int Index2\n```\nThe index of the second (right) point of the trend line in the underlying source data.\n\n### Value1\n```csharp\npublic double Value1\n```\nThe Y-axis value of the first (left) point of the trend line.\n\n### Value2\n```csharp\npublic double Value2\n```\nThe Y-axis value of the second (right) point of the trend line.\n\n### IsFalling\n```csharp\npublic bool IsFalling\n```\nReturns `true` if the trend line's starting point is less than its ending point.\n\n### IsRising\n\n\n```csharp\npublic bool IsRising\n\n```",
    "metadata": {
      "id": "trend-line",
      "title": "trend-line",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/trend-line.md",
      "chunkIndex": "code-context-10",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public double ExtendTo(int idx, bool useLog = false)\n",
    "metadata": {
      "id": "trend-line",
      "title": "trend-line",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/trend-line.md",
      "chunkIndex": "code-11",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "\n```csharp\npublic double Value1\n```\nThe Y-axis value of the first (left) point of the trend line.\n\n### Value2\n```csharp\npublic double Value2\n```\nThe Y-axis value of the second (right) point of the trend line.\n\n### IsFalling\n```csharp\npublic bool IsFalling\n```\nReturns `true` if the trend line's starting point is less than its ending point.\n\n### IsRising\n```csharp\npublic bool IsRising\n```\nReturns `true` if the trend line's starting point is greater than its ending point.\n\n## Methods\n\n### ExtendTo\n"
    }
  },
  {
    "pageContent": "\n```csharp\npublic double Value1\n```\nThe Y-axis value of the first (left) point of the trend line.\n\n### Value2\n```csharp\npublic double Value2\n```\nThe Y-axis value of the second (right) point of the trend line.\n\n### IsFalling\n```csharp\npublic bool IsFalling\n```\nReturns `true` if the trend line's starting point is less than its ending point.\n\n### IsRising\n```csharp\npublic bool IsRising\n```\nReturns `true` if the trend line's starting point is greater than its ending point.\n\n## Methods\n\n### ExtendTo\n\n\n```csharp\npublic double ExtendTo(int idx, bool useLog = false)\n\n```",
    "metadata": {
      "id": "trend-line",
      "title": "trend-line",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/trend-line.md",
      "chunkIndex": "code-context-11",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "// Extend trend line to a specific index\ndouble extendedValue = trendLine.ExtendTo(25);\n\n// Extend with logarithmic scaling\ndouble logExtendedValue = trendLine.ExtendTo(25, true);\n",
    "metadata": {
      "id": "trend-line",
      "title": "trend-line",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/trend-line.md",
      "chunkIndex": "code-12",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "IsRising\n```\nReturns `true` if the trend line's starting point is greater than its ending point.\n\n## Methods\n\n### ExtendTo\n```csharp\npublic double ExtendTo(int idx, bool useLog = false)\n```\nExtends the trend line to an arbitrary point on the X-axis and returns its corresponding Y-axis value.\n\n**Parameters:**\n- `idx`: Target index to extend the trend line\n- `useLog`: Optional parameter to use logarithmic scaling (default is `false`)\n\n**Returns:** Y-axis value at the specified index\n\n**Example:**\n"
    }
  },
  {
    "pageContent": "IsRising\n```\nReturns `true` if the trend line's starting point is greater than its ending point.\n\n## Methods\n\n### ExtendTo\n```csharp\npublic double ExtendTo(int idx, bool useLog = false)\n```\nExtends the trend line to an arbitrary point on the X-axis and returns its corresponding Y-axis value.\n\n**Parameters:**\n- `idx`: Target index to extend the trend line\n- `useLog`: Optional parameter to use logarithmic scaling (default is `false`)\n\n**Returns:** Y-axis value at the specified index\n\n**Example:**\n\n\n```csharp\n// Extend trend line to a specific index\ndouble extendedValue = trendLine.ExtendTo(25);\n\n// Extend with logarithmic scaling\ndouble logExtendedValue = trendLine.ExtendTo(25, true);\n\n```",
    "metadata": {
      "id": "trend-line",
      "title": "trend-line",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/trend-line.md",
      "chunkIndex": "code-context-12",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public class TrendAnalyzer\n{\n    public void AnalyzePriceTrend(TimeSeries prices)\n    {\n        // Calculate peak and trough points\n        var peakTroughs = PeakTroughCalculator.Calculate(prices);\n        \n        // Create trend lines\n        var upperTrendLine = new TrendLine(peakTroughs.Where(pt => pt.Type == PeakTroughType.Peak).ToList());\n        var lowerTrendLine = new TrendLine(peakTroughs.Where(pt => pt.Type == PeakTroughType.Trough).ToList());\n        \n        // Analyze trend characteristics\n        Console.WriteLine($\"Upper Trend Line Deviation: {upperTrendLine.Deviation}%\");\n        Console.WriteLine($\"Is Upper Trend Rising: {upperTrendLine.IsRising}\");\n        \n        Console.WriteLine($\"Lower Trend Line Deviation: {lowerTrendLine.Deviation}%\");\n        Console.WriteLine($\"Is Lower Trend Falling: {lowerTrendLine.IsFalling}\");\n        \n        // Extend trend lines\n        double upperExtendedValue = upperTrendLine.ExtendTo(prices.Count - 1);\n        double lowerExtendedValue = lowerTrendLine.ExtendTo(prices.Count - 1);\n    }\n}\n",
    "metadata": {
      "id": "trend-line",
      "title": "trend-line",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/trend-line.md",
      "chunkIndex": "code-13",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "the X-axis and returns its corresponding Y-axis value.\n\n**Parameters:**\n- `idx`: Target index to extend the trend line\n- `useLog`: Optional parameter to use logarithmic scaling (default is `false`)\n\n**Returns:** Y-axis value at the specified index\n\n**Example:**\n```csharp\n// Extend trend line to a specific index\ndouble extendedValue = trendLine.ExtendTo(25);\n\n// Extend with logarithmic scaling\ndouble logExtendedValue = trendLine.ExtendTo(25, true);\n```\n\n## Usage Examples\n\n### Trend Line Analysis\n"
    }
  },
  {
    "pageContent": "the X-axis and returns its corresponding Y-axis value.\n\n**Parameters:**\n- `idx`: Target index to extend the trend line\n- `useLog`: Optional parameter to use logarithmic scaling (default is `false`)\n\n**Returns:** Y-axis value at the specified index\n\n**Example:**\n```csharp\n// Extend trend line to a specific index\ndouble extendedValue = trendLine.ExtendTo(25);\n\n// Extend with logarithmic scaling\ndouble logExtendedValue = trendLine.ExtendTo(25, true);\n```\n\n## Usage Examples\n\n### Trend Line Analysis\n\n\n```csharp\npublic class TrendAnalyzer\n{\n    public void AnalyzePriceTrend(TimeSeries prices)\n    {\n        // Calculate peak and trough points\n        var peakTroughs = PeakTroughCalculator.Calculate(prices);\n        \n        // Create trend lines\n        var upperTrendLine = new TrendLine(peakTroughs.Where(pt => pt.Type == PeakTroughType.Peak).ToList());\n        var lowerTrendLine = new TrendLine(peakTroughs.Where(pt => pt.Type == PeakTroughType.Trough).ToList());\n        \n        // Analyze trend characteristics\n        Console.WriteLine($\"Upper Trend Line Deviation: {upperTrendLine.Deviation}%\");\n        Console.WriteLine($\"Is Upper Trend Rising: {upperTrendLine.IsRising}\");\n        \n        Console.WriteLine($\"Lower Trend Line Deviation: {lowerTrendLine.Deviation}%\");\n        Console.WriteLine($\"Is Lower Trend Falling: {lowerTrendLine.IsFalling}\");\n        \n        // Extend trend lines\n        double upperExtendedValue = upperTrendLine.ExtendTo(prices.Count - 1);\n        double lowerExtendedValue = lowerTrendLine.ExtendTo(prices.Count - 1);\n    }\n}\n\n```",
    "metadata": {
      "id": "trend-line",
      "title": "trend-line",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/trend-line.md",
      "chunkIndex": "code-context-13",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public class TrendLineTradingStrategy : UserStrategyBase\n{\n    public override void Execute(BarHistory bars, int idx)\n    {\n        // Calculate peak and trough points\n        var peakTroughs = PeakTroughCalculator.Calculate(bars.Close);\n        \n        // Create upper and lower trend lines\n        var upperTrendLine = new TrendLine(\n            peakTroughs.Where(pt => pt.Type == PeakTroughType.Peak).ToList()\n        );\n        var lowerTrendLine = new TrendLine(\n            peakTroughs.Where(pt => pt.Type == PeakTroughType.Trough).ToList()\n        );\n        \n        // Trading logic based on trend line characteristics\n        if (upperTrendLine.Deviation < 5 && upperTrendLine.IsFalling)\n        {\n            // Potential bearish trend\n            Sell();\n        }\n        \n        if (lowerTrendLine.Deviation < 5 && lowerTrendLine.IsRising)\n        {\n            // Potential bullish trend\n            Buy();\n        }\n    }\n}\n",
    "metadata": {
      "id": "trend-line",
      "title": "trend-line",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/trend-line.md",
      "chunkIndex": "code-14",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "  Console.WriteLine($\"Is Upper Trend Rising: {upperTrendLine.IsRising}\");\n        \n        Console.WriteLine($\"Lower Trend Line Deviation: {lowerTrendLine.Deviation}%\");\n        Console.WriteLine($\"Is Lower Trend Falling: {lowerTrendLine.IsFalling}\");\n        \n        // Extend trend lines\n        double upperExtendedValue = upperTrendLine.ExtendTo(prices.Count - 1);\n        double lowerExtendedValue = lowerTrendLine.ExtendTo(prices.Count - 1);\n    }\n}\n```\n\n### Trading Strategy with Trend Lines\n"
    }
  },
  {
    "pageContent": "  Console.WriteLine($\"Is Upper Trend Rising: {upperTrendLine.IsRising}\");\n        \n        Console.WriteLine($\"Lower Trend Line Deviation: {lowerTrendLine.Deviation}%\");\n        Console.WriteLine($\"Is Lower Trend Falling: {lowerTrendLine.IsFalling}\");\n        \n        // Extend trend lines\n        double upperExtendedValue = upperTrendLine.ExtendTo(prices.Count - 1);\n        double lowerExtendedValue = lowerTrendLine.ExtendTo(prices.Count - 1);\n    }\n}\n```\n\n### Trading Strategy with Trend Lines\n\n\n```csharp\npublic class TrendLineTradingStrategy : UserStrategyBase\n{\n    public override void Execute(BarHistory bars, int idx)\n    {\n        // Calculate peak and trough points\n        var peakTroughs = PeakTroughCalculator.Calculate(bars.Close);\n        \n        // Create upper and lower trend lines\n        var upperTrendLine = new TrendLine(\n            peakTroughs.Where(pt => pt.Type == PeakTroughType.Peak).ToList()\n        );\n        var lowerTrendLine = new TrendLine(\n            peakTroughs.Where(pt => pt.Type == PeakTroughType.Trough).ToList()\n        );\n        \n        // Trading logic based on trend line characteristics\n        if (upperTrendLine.Deviation < 5 && upperTrendLine.IsFalling)\n        {\n            // Potential bearish trend\n            Sell();\n        }\n        \n        if (lowerTrendLine.Deviation < 5 && lowerTrendLine.IsRising)\n        {\n            // Potential bullish trend\n            Buy();\n        }\n    }\n}\n\n```",
    "metadata": {
      "id": "trend-line",
      "title": "trend-line",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/trend-line.md",
      "chunkIndex": "code-context-14",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "# UserStrategyBase Class\n\n**Namespace:** WealthLab.Backtest  \n**Parent:** StrategyBase\n\nThe `UserStrategyBase` class is the foundational class for creating custom trading strategies in WealthLab 8. It provides a comprehensive framework for implementing trading logic, managing positions, and controlling backtesting behavior.\n\n## Overview\n\nWhen developing a trading strategy in WealthLab, you create a custom class that inherits from `UserStrategyBase`. This class allows you to define:\n- Strategy initialization logic\n- Trade entry and exit conditions\n- Position management\n- Chart annotations and visualizations\n\n## Key Methods\n\n### Initialization and Execution\n\n#### Initialize\n",
    "metadata": {
      "id": "user-strategy-base",
      "title": "user-strategy-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/user-strategy-base.md",
      "chunkIndex": 0,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nCalled once before the backtesting process begins for each symbol. Use this method to:\n- Create indicators\n- Set up strategy-specific objects\n- Perform one-time setup tasks\n\n**Example:**\n",
    "metadata": {
      "id": "user-strategy-base",
      "title": "user-strategy-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/user-strategy-base.md",
      "chunkIndex": 1,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n#### Execute\n",
    "metadata": {
      "id": "user-strategy-base",
      "title": "user-strategy-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/user-strategy-base.md",
      "chunkIndex": 2,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nCalled for each bar during the backtesting process. This is where you implement your trading logic, including:\n- Entry conditions\n- Exit conditions\n- Position management\n\n**Example:**\n",
    "metadata": {
      "id": "user-strategy-base",
      "title": "user-strategy-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/user-strategy-base.md",
      "chunkIndex": 3,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n### Trading Methods\n\n#### PlaceTrade\n",
    "metadata": {
      "id": "user-strategy-base",
      "title": "user-strategy-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/user-strategy-base.md",
      "chunkIndex": 4,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nSimulates placing a trade with specified parameters:\n- `bars`: Current bar history\n- `transType`: Buy, Sell, Short, or Cover\n- `orderType`: Market, Limit, or Stop\n- `price`: Optional order price for limit/stop orders\n\n#### ClosePosition\n",
    "metadata": {
      "id": "user-strategy-base",
      "title": "user-strategy-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/user-strategy-base.md",
      "chunkIndex": 5,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nCloses a specific open position with given order type and optional price.\n\n### Chart Annotation Methods\n\n#### DrawBarAnnotation\n",
    "metadata": {
      "id": "user-strategy-base",
      "title": "user-strategy-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/user-strategy-base.md",
      "chunkIndex": 6,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nAdds text annotations to specific bars on the chart.\n\n#### DrawDot\n",
    "metadata": {
      "id": "user-strategy-base",
      "title": "user-strategy-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/user-strategy-base.md",
      "chunkIndex": 7,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nDraws a colored dot at a specific location on the chart.\n\n## Position Management\n\n### Open Position Methods\n- `HasOpenPosition(BarHistory bars, PositionType pt)`: Check for open positions\n- `GetOpenPositions()`: Retrieve list of open positions\n- `LastOpenPosition`: Access the most recently opened position\n\n### Position Sizing\n- Controlled through Strategy Settings\n- Can be customized using `PlaceTrade` with custom quantity\n\n## Backtesting Lifecycle Methods\n\n### BacktestBegin\n",
    "metadata": {
      "id": "user-strategy-base",
      "title": "user-strategy-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/user-strategy-base.md",
      "chunkIndex": 8,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nCalled before backtesting starts, useful for global initialization.\n\n### BacktestComplete\n",
    "metadata": {
      "id": "user-strategy-base",
      "title": "user-strategy-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/user-strategy-base.md",
      "chunkIndex": 9,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nCalled after backtesting completes, useful for final analysis or reporting.\n\n## Best Practices\n\n1. **Performance**: Minimize computational complexity in `Execute()`\n2. **Indicators**: Create indicators in `Initialize()`\n3. **Position Management**: Use built-in methods for trade execution\n4. **Error Handling**: Implement robust entry/exit conditions\n5. **Visualization**: Use chart annotation methods for strategy insights\n\n## Example Strategy\n\n",
    "metadata": {
      "id": "user-strategy-base",
      "title": "user-strategy-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/user-strategy-base.md",
      "chunkIndex": 10,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n## Notes\n\n- Inherit from `UserStrategyBase` to create custom strategies\n- Override `Initialize()` and `Execute()` methods\n- Use built-in methods for trade management\n- Leverage chart annotation methods for strategy visualization\n\n## Performance Considerations\n\n- Optimize indicator calculations\n- Minimize complex logic in `Execute()`\n- Use built-in WealthLab methods for efficiency ",
    "metadata": {
      "id": "user-strategy-base",
      "title": "user-strategy-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/user-strategy-base.md",
      "chunkIndex": 11,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "public virtual void Initialize(BarHistory bars)\n",
    "metadata": {
      "id": "user-strategy-base",
      "title": "user-strategy-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/user-strategy-base.md",
      "chunkIndex": "code-0",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": " in WealthLab 8. It provides a comprehensive framework for implementing trading logic, managing positions, and controlling backtesting behavior.\n\n## Overview\n\nWhen developing a trading strategy in WealthLab, you create a custom class that inherits from `UserStrategyBase`. This class allows you to define:\n- Strategy initialization logic\n- Trade entry and exit conditions\n- Position management\n- Chart annotations and visualizations\n\n## Key Methods\n\n### Initialization and Execution\n\n#### Initialize\n"
    }
  },
  {
    "pageContent": " in WealthLab 8. It provides a comprehensive framework for implementing trading logic, managing positions, and controlling backtesting behavior.\n\n## Overview\n\nWhen developing a trading strategy in WealthLab, you create a custom class that inherits from `UserStrategyBase`. This class allows you to define:\n- Strategy initialization logic\n- Trade entry and exit conditions\n- Position management\n- Chart annotations and visualizations\n\n## Key Methods\n\n### Initialization and Execution\n\n#### Initialize\n\n\n```csharp\npublic virtual void Initialize(BarHistory bars)\n\n```",
    "metadata": {
      "id": "user-strategy-base",
      "title": "user-strategy-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/user-strategy-base.md",
      "chunkIndex": "code-context-0",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public override void Initialize(BarHistory bars)\n{\n    // Create indicators\n    RSI rsi = RSI.Series(bars.Close, 14);\n    EMA ema = EMA.Series(bars.Close, 50);\n    \n    // Plot indicators\n    PlotIndicator(rsi);\n    PlotIndicator(ema);\n}\n",
    "metadata": {
      "id": "user-strategy-base",
      "title": "user-strategy-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/user-strategy-base.md",
      "chunkIndex": "code-1",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "rom `UserStrategyBase`. This class allows you to define:\n- Strategy initialization logic\n- Trade entry and exit conditions\n- Position management\n- Chart annotations and visualizations\n\n## Key Methods\n\n### Initialization and Execution\n\n#### Initialize\n```csharp\npublic virtual void Initialize(BarHistory bars)\n```\nCalled once before the backtesting process begins for each symbol. Use this method to:\n- Create indicators\n- Set up strategy-specific objects\n- Perform one-time setup tasks\n\n**Example:**\n"
    }
  },
  {
    "pageContent": "rom `UserStrategyBase`. This class allows you to define:\n- Strategy initialization logic\n- Trade entry and exit conditions\n- Position management\n- Chart annotations and visualizations\n\n## Key Methods\n\n### Initialization and Execution\n\n#### Initialize\n```csharp\npublic virtual void Initialize(BarHistory bars)\n```\nCalled once before the backtesting process begins for each symbol. Use this method to:\n- Create indicators\n- Set up strategy-specific objects\n- Perform one-time setup tasks\n\n**Example:**\n\n\n```csharp\npublic override void Initialize(BarHistory bars)\n{\n    // Create indicators\n    RSI rsi = RSI.Series(bars.Close, 14);\n    EMA ema = EMA.Series(bars.Close, 50);\n    \n    // Plot indicators\n    PlotIndicator(rsi);\n    PlotIndicator(ema);\n}\n\n```",
    "metadata": {
      "id": "user-strategy-base",
      "title": "user-strategy-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/user-strategy-base.md",
      "chunkIndex": "code-context-1",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public abstract void Execute(BarHistory bars, int idx)\n",
    "metadata": {
      "id": "user-strategy-base",
      "title": "user-strategy-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/user-strategy-base.md",
      "chunkIndex": "code-2",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "c virtual void Initialize(BarHistory bars)\n```\nCalled once before the backtesting process begins for each symbol. Use this method to:\n- Create indicators\n- Set up strategy-specific objects\n- Perform one-time setup tasks\n\n**Example:**\n```csharp\npublic override void Initialize(BarHistory bars)\n{\n    // Create indicators\n    RSI rsi = RSI.Series(bars.Close, 14);\n    EMA ema = EMA.Series(bars.Close, 50);\n    \n    // Plot indicators\n    PlotIndicator(rsi);\n    PlotIndicator(ema);\n}\n```\n\n#### Execute\n"
    }
  },
  {
    "pageContent": "c virtual void Initialize(BarHistory bars)\n```\nCalled once before the backtesting process begins for each symbol. Use this method to:\n- Create indicators\n- Set up strategy-specific objects\n- Perform one-time setup tasks\n\n**Example:**\n```csharp\npublic override void Initialize(BarHistory bars)\n{\n    // Create indicators\n    RSI rsi = RSI.Series(bars.Close, 14);\n    EMA ema = EMA.Series(bars.Close, 50);\n    \n    // Plot indicators\n    PlotIndicator(rsi);\n    PlotIndicator(ema);\n}\n```\n\n#### Execute\n\n\n```csharp\npublic abstract void Execute(BarHistory bars, int idx)\n\n```",
    "metadata": {
      "id": "user-strategy-base",
      "title": "user-strategy-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/user-strategy-base.md",
      "chunkIndex": "code-context-2",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public override void Execute(BarHistory bars, int idx)\n{\n    // Trading logic\n    if (rsi[idx] < 30 && !HasOpenPosition(bars, PositionType.Long))\n    {\n        Buy();\n    }\n    \n    if (rsi[idx] > 70 && HasOpenPosition(bars, PositionType.Long))\n    {\n        SellAll();\n    }\n}\n",
    "metadata": {
      "id": "user-strategy-base",
      "title": "user-strategy-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/user-strategy-base.md",
      "chunkIndex": "code-3",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "erride void Initialize(BarHistory bars)\n{\n    // Create indicators\n    RSI rsi = RSI.Series(bars.Close, 14);\n    EMA ema = EMA.Series(bars.Close, 50);\n    \n    // Plot indicators\n    PlotIndicator(rsi);\n    PlotIndicator(ema);\n}\n```\n\n#### Execute\n```csharp\npublic abstract void Execute(BarHistory bars, int idx)\n```\nCalled for each bar during the backtesting process. This is where you implement your trading logic, including:\n- Entry conditions\n- Exit conditions\n- Position management\n\n**Example:**\n"
    }
  },
  {
    "pageContent": "erride void Initialize(BarHistory bars)\n{\n    // Create indicators\n    RSI rsi = RSI.Series(bars.Close, 14);\n    EMA ema = EMA.Series(bars.Close, 50);\n    \n    // Plot indicators\n    PlotIndicator(rsi);\n    PlotIndicator(ema);\n}\n```\n\n#### Execute\n```csharp\npublic abstract void Execute(BarHistory bars, int idx)\n```\nCalled for each bar during the backtesting process. This is where you implement your trading logic, including:\n- Entry conditions\n- Exit conditions\n- Position management\n\n**Example:**\n\n\n```csharp\npublic override void Execute(BarHistory bars, int idx)\n{\n    // Trading logic\n    if (rsi[idx] < 30 && !HasOpenPosition(bars, PositionType.Long))\n    {\n        Buy();\n    }\n    \n    if (rsi[idx] > 70 && HasOpenPosition(bars, PositionType.Long))\n    {\n        SellAll();\n    }\n}\n\n```",
    "metadata": {
      "id": "user-strategy-base",
      "title": "user-strategy-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/user-strategy-base.md",
      "chunkIndex": "code-context-3",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public Transaction PlaceTrade(BarHistory bars, TransactionType transType, OrderType orderType, double price = 0)\n",
    "metadata": {
      "id": "user-strategy-base",
      "title": "user-strategy-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/user-strategy-base.md",
      "chunkIndex": "code-4",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "h bar during the backtesting process. This is where you implement your trading logic, including:\n- Entry conditions\n- Exit conditions\n- Position management\n\n**Example:**\n```csharp\npublic override void Execute(BarHistory bars, int idx)\n{\n    // Trading logic\n    if (rsi[idx] < 30 && !HasOpenPosition(bars, PositionType.Long))\n    {\n        Buy();\n    }\n    \n    if (rsi[idx] > 70 && HasOpenPosition(bars, PositionType.Long))\n    {\n        SellAll();\n    }\n}\n```\n\n### Trading Methods\n\n#### PlaceTrade\n"
    }
  },
  {
    "pageContent": "h bar during the backtesting process. This is where you implement your trading logic, including:\n- Entry conditions\n- Exit conditions\n- Position management\n\n**Example:**\n```csharp\npublic override void Execute(BarHistory bars, int idx)\n{\n    // Trading logic\n    if (rsi[idx] < 30 && !HasOpenPosition(bars, PositionType.Long))\n    {\n        Buy();\n    }\n    \n    if (rsi[idx] > 70 && HasOpenPosition(bars, PositionType.Long))\n    {\n        SellAll();\n    }\n}\n```\n\n### Trading Methods\n\n#### PlaceTrade\n\n\n```csharp\npublic Transaction PlaceTrade(BarHistory bars, TransactionType transType, OrderType orderType, double price = 0)\n\n```",
    "metadata": {
      "id": "user-strategy-base",
      "title": "user-strategy-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/user-strategy-base.md",
      "chunkIndex": "code-context-4",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public void ClosePosition(Position pos, OrderType orderType, double price = 0)\n",
    "metadata": {
      "id": "user-strategy-base",
      "title": "user-strategy-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/user-strategy-base.md",
      "chunkIndex": "code-5",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": " (rsi[idx] > 70 && HasOpenPosition(bars, PositionType.Long))\n    {\n        SellAll();\n    }\n}\n```\n\n### Trading Methods\n\n#### PlaceTrade\n```csharp\npublic Transaction PlaceTrade(BarHistory bars, TransactionType transType, OrderType orderType, double price = 0)\n```\nSimulates placing a trade with specified parameters:\n- `bars`: Current bar history\n- `transType`: Buy, Sell, Short, or Cover\n- `orderType`: Market, Limit, or Stop\n- `price`: Optional order price for limit/stop orders\n\n#### ClosePosition\n"
    }
  },
  {
    "pageContent": " (rsi[idx] > 70 && HasOpenPosition(bars, PositionType.Long))\n    {\n        SellAll();\n    }\n}\n```\n\n### Trading Methods\n\n#### PlaceTrade\n```csharp\npublic Transaction PlaceTrade(BarHistory bars, TransactionType transType, OrderType orderType, double price = 0)\n```\nSimulates placing a trade with specified parameters:\n- `bars`: Current bar history\n- `transType`: Buy, Sell, Short, or Cover\n- `orderType`: Market, Limit, or Stop\n- `price`: Optional order price for limit/stop orders\n\n#### ClosePosition\n\n\n```csharp\npublic void ClosePosition(Position pos, OrderType orderType, double price = 0)\n\n```",
    "metadata": {
      "id": "user-strategy-base",
      "title": "user-strategy-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/user-strategy-base.md",
      "chunkIndex": "code-context-5",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public void DrawBarAnnotation(string text, int bar, bool aboveBar, WLColor color)\n",
    "metadata": {
      "id": "user-strategy-base",
      "title": "user-strategy-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/user-strategy-base.md",
      "chunkIndex": "code-6",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "rderType orderType, double price = 0)\n```\nSimulates placing a trade with specified parameters:\n- `bars`: Current bar history\n- `transType`: Buy, Sell, Short, or Cover\n- `orderType`: Market, Limit, or Stop\n- `price`: Optional order price for limit/stop orders\n\n#### ClosePosition\n```csharp\npublic void ClosePosition(Position pos, OrderType orderType, double price = 0)\n```\nCloses a specific open position with given order type and optional price.\n\n### Chart Annotation Methods\n\n#### DrawBarAnnotation\n"
    }
  },
  {
    "pageContent": "rderType orderType, double price = 0)\n```\nSimulates placing a trade with specified parameters:\n- `bars`: Current bar history\n- `transType`: Buy, Sell, Short, or Cover\n- `orderType`: Market, Limit, or Stop\n- `price`: Optional order price for limit/stop orders\n\n#### ClosePosition\n```csharp\npublic void ClosePosition(Position pos, OrderType orderType, double price = 0)\n```\nCloses a specific open position with given order type and optional price.\n\n### Chart Annotation Methods\n\n#### DrawBarAnnotation\n\n\n```csharp\npublic void DrawBarAnnotation(string text, int bar, bool aboveBar, WLColor color)\n\n```",
    "metadata": {
      "id": "user-strategy-base",
      "title": "user-strategy-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/user-strategy-base.md",
      "chunkIndex": "code-context-6",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public void DrawDot(int bar, double value, WLColor color, int radius)\n",
    "metadata": {
      "id": "user-strategy-base",
      "title": "user-strategy-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/user-strategy-base.md",
      "chunkIndex": "code-7",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ver\n- `orderType`: Market, Limit, or Stop\n- `price`: Optional order price for limit/stop orders\n\n#### ClosePosition\n```csharp\npublic void ClosePosition(Position pos, OrderType orderType, double price = 0)\n```\nCloses a specific open position with given order type and optional price.\n\n### Chart Annotation Methods\n\n#### DrawBarAnnotation\n```csharp\npublic void DrawBarAnnotation(string text, int bar, bool aboveBar, WLColor color)\n```\nAdds text annotations to specific bars on the chart.\n\n#### DrawDot\n"
    }
  },
  {
    "pageContent": "ver\n- `orderType`: Market, Limit, or Stop\n- `price`: Optional order price for limit/stop orders\n\n#### ClosePosition\n```csharp\npublic void ClosePosition(Position pos, OrderType orderType, double price = 0)\n```\nCloses a specific open position with given order type and optional price.\n\n### Chart Annotation Methods\n\n#### DrawBarAnnotation\n```csharp\npublic void DrawBarAnnotation(string text, int bar, bool aboveBar, WLColor color)\n```\nAdds text annotations to specific bars on the chart.\n\n#### DrawDot\n\n\n```csharp\npublic void DrawDot(int bar, double value, WLColor color, int radius)\n\n```",
    "metadata": {
      "id": "user-strategy-base",
      "title": "user-strategy-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/user-strategy-base.md",
      "chunkIndex": "code-context-7",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public virtual void BacktestBegin()\n",
    "metadata": {
      "id": "user-strategy-base",
      "title": "user-strategy-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/user-strategy-base.md",
      "chunkIndex": "code-8",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "or, int radius)\n```\nDraws a colored dot at a specific location on the chart.\n\n## Position Management\n\n### Open Position Methods\n- `HasOpenPosition(BarHistory bars, PositionType pt)`: Check for open positions\n- `GetOpenPositions()`: Retrieve list of open positions\n- `LastOpenPosition`: Access the most recently opened position\n\n### Position Sizing\n- Controlled through Strategy Settings\n- Can be customized using `PlaceTrade` with custom quantity\n\n## Backtesting Lifecycle Methods\n\n### BacktestBegin\n"
    }
  },
  {
    "pageContent": "or, int radius)\n```\nDraws a colored dot at a specific location on the chart.\n\n## Position Management\n\n### Open Position Methods\n- `HasOpenPosition(BarHistory bars, PositionType pt)`: Check for open positions\n- `GetOpenPositions()`: Retrieve list of open positions\n- `LastOpenPosition`: Access the most recently opened position\n\n### Position Sizing\n- Controlled through Strategy Settings\n- Can be customized using `PlaceTrade` with custom quantity\n\n## Backtesting Lifecycle Methods\n\n### BacktestBegin\n\n\n```csharp\npublic virtual void BacktestBegin()\n\n```",
    "metadata": {
      "id": "user-strategy-base",
      "title": "user-strategy-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/user-strategy-base.md",
      "chunkIndex": "code-context-8",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public virtual void BacktestComplete()\n",
    "metadata": {
      "id": "user-strategy-base",
      "title": "user-strategy-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/user-strategy-base.md",
      "chunkIndex": "code-9",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "sition(BarHistory bars, PositionType pt)`: Check for open positions\n- `GetOpenPositions()`: Retrieve list of open positions\n- `LastOpenPosition`: Access the most recently opened position\n\n### Position Sizing\n- Controlled through Strategy Settings\n- Can be customized using `PlaceTrade` with custom quantity\n\n## Backtesting Lifecycle Methods\n\n### BacktestBegin\n```csharp\npublic virtual void BacktestBegin()\n```\nCalled before backtesting starts, useful for global initialization.\n\n### BacktestComplete\n"
    }
  },
  {
    "pageContent": "sition(BarHistory bars, PositionType pt)`: Check for open positions\n- `GetOpenPositions()`: Retrieve list of open positions\n- `LastOpenPosition`: Access the most recently opened position\n\n### Position Sizing\n- Controlled through Strategy Settings\n- Can be customized using `PlaceTrade` with custom quantity\n\n## Backtesting Lifecycle Methods\n\n### BacktestBegin\n```csharp\npublic virtual void BacktestBegin()\n```\nCalled before backtesting starts, useful for global initialization.\n\n### BacktestComplete\n\n\n```csharp\npublic virtual void BacktestComplete()\n\n```",
    "metadata": {
      "id": "user-strategy-base",
      "title": "user-strategy-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/user-strategy-base.md",
      "chunkIndex": "code-context-9",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public class RSIMomentumStrategy : UserStrategyBase\n{\n    private RSI rsi;\n    private EMA ema;\n\n    public override void Initialize(BarHistory bars)\n    {\n        rsi = RSI.Series(bars.Close, 14);\n        ema = EMA.Series(bars.Close, 50);\n\n        PlotIndicator(rsi);\n        PlotIndicator(ema);\n    }\n\n    public override void Execute(BarHistory bars, int idx)\n    {\n        if (idx < rsi.Count - 1) return;\n\n        // Long entry\n        if (rsi[idx] < 30 && bars.Close[idx] > ema[idx] && !HasOpenPosition(bars, PositionType.Long))\n        {\n            Buy();\n            DrawDot(idx, bars.Low[idx], WLColor.Green, 5);\n        }\n\n        // Exit conditions\n        if ((rsi[idx] > 70 || bars.Close[idx] < ema[idx]) && HasOpenPosition(bars, PositionType.Long))\n        {\n            SellAll();\n            DrawDot(idx, bars.High[idx], WLColor.Red, 5);\n        }\n    }\n}\n",
    "metadata": {
      "id": "user-strategy-base",
      "title": "user-strategy-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/user-strategy-base.md",
      "chunkIndex": "code-10",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "\n```csharp\npublic virtual void BacktestComplete()\n```\nCalled after backtesting completes, useful for final analysis or reporting.\n\n## Best Practices\n\n1. **Performance**: Minimize computational complexity in `Execute()`\n2. **Indicators**: Create indicators in `Initialize()`\n3. **Position Management**: Use built-in methods for trade execution\n4. **Error Handling**: Implement robust entry/exit conditions\n5. **Visualization**: Use chart annotation methods for strategy insights\n\n## Example Strategy\n\n"
    }
  },
  {
    "pageContent": "\n```csharp\npublic virtual void BacktestComplete()\n```\nCalled after backtesting completes, useful for final analysis or reporting.\n\n## Best Practices\n\n1. **Performance**: Minimize computational complexity in `Execute()`\n2. **Indicators**: Create indicators in `Initialize()`\n3. **Position Management**: Use built-in methods for trade execution\n4. **Error Handling**: Implement robust entry/exit conditions\n5. **Visualization**: Use chart annotation methods for strategy insights\n\n## Example Strategy\n\n\n\n```csharp\npublic class RSIMomentumStrategy : UserStrategyBase\n{\n    private RSI rsi;\n    private EMA ema;\n\n    public override void Initialize(BarHistory bars)\n    {\n        rsi = RSI.Series(bars.Close, 14);\n        ema = EMA.Series(bars.Close, 50);\n\n        PlotIndicator(rsi);\n        PlotIndicator(ema);\n    }\n\n    public override void Execute(BarHistory bars, int idx)\n    {\n        if (idx < rsi.Count - 1) return;\n\n        // Long entry\n        if (rsi[idx] < 30 && bars.Close[idx] > ema[idx] && !HasOpenPosition(bars, PositionType.Long))\n        {\n            Buy();\n            DrawDot(idx, bars.Low[idx], WLColor.Green, 5);\n        }\n\n        // Exit conditions\n        if ((rsi[idx] > 70 || bars.Close[idx] < ema[idx]) && HasOpenPosition(bars, PositionType.Long))\n        {\n            SellAll();\n            DrawDot(idx, bars.High[idx], WLColor.Red, 5);\n        }\n    }\n}\n\n```",
    "metadata": {
      "id": "user-strategy-base",
      "title": "user-strategy-base",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/user-strategy-base.md",
      "chunkIndex": "code-context-10",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "# VolumeProfileItem Class\n\n**Namespace:** WealthLab.Core  \n**Parent:** Object\n\nThe `VolumeProfileItem` class represents a single horizontal line in a Volume Profile, providing detailed information about volume distribution at a specific price range.\n\n## Properties\n\n### DownVolume\n",
    "metadata": {
      "id": "volume-profile-item",
      "title": "volume-profile-item",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/volume-profile-item.md",
      "chunkIndex": 0,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nContains the volume traded when the closing price is less than the closing price of the previous bar.\n\n### InValueArea\n",
    "metadata": {
      "id": "volume-profile-item",
      "title": "volume-profile-item",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/volume-profile-item.md",
      "chunkIndex": 1,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nIndicates whether this Volume Profile bar is within the \"Value Area\" of the Volume Profile.\n\n**Notes:**\n- `true` if the bar is among those making up the specified percentage of total volume\n- Percentage determined by the Volume Profile's `ValueRangePct` (default: 70%)\n\n### IsPOC\n",
    "metadata": {
      "id": "volume-profile-item",
      "title": "volume-profile-item",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/volume-profile-item.md",
      "chunkIndex": 2,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nIndicates whether this Volume Profile bar is the \"Point of Control\".\n\n**Notes:**\n- `true` if this bar has the largest total volume in the Volume Profile\n\n### RangeMax\n",
    "metadata": {
      "id": "volume-profile-item",
      "title": "volume-profile-item",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/volume-profile-item.md",
      "chunkIndex": 3,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nThe inclusive upper range of values represented by this Volume Profile bar.\n\n### RangeMin\n",
    "metadata": {
      "id": "volume-profile-item",
      "title": "volume-profile-item",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/volume-profile-item.md",
      "chunkIndex": 4,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nThe exclusive lower range of values represented by this Volume Profile bar.\n\n### TotalVolume\n",
    "metadata": {
      "id": "volume-profile-item",
      "title": "volume-profile-item",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/volume-profile-item.md",
      "chunkIndex": 5,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nThe total volume of this Volume Profile bar (UpVolume + DownVolume).\n\n### UpVolume\n",
    "metadata": {
      "id": "volume-profile-item",
      "title": "volume-profile-item",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/volume-profile-item.md",
      "chunkIndex": 6,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nContains the volume traded when the closing price is greater than or equal to the closing price of the previous bar.\n\n### WidthPct\n",
    "metadata": {
      "id": "volume-profile-item",
      "title": "volume-profile-item",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/volume-profile-item.md",
      "chunkIndex": 7,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nThe percentage width of this Volume Profile bar compared to the Point of Control bar.\n\n**Notes:**\n- Returns a value between 0.0 and 1.0\n- Compares to the bar with the largest total volume\n\n### WidthPctDown\n",
    "metadata": {
      "id": "volume-profile-item",
      "title": "volume-profile-item",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/volume-profile-item.md",
      "chunkIndex": 8,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nThe percentage width of this bar's down volume compared to the Point of Control bar's total volume.\n\n**Notes:**\n- Returns a value between 0.0 and 1.0\n\n### WidthPctUp\n",
    "metadata": {
      "id": "volume-profile-item",
      "title": "volume-profile-item",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/volume-profile-item.md",
      "chunkIndex": 9,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nThe percentage width of this bar's up volume compared to the Point of Control bar's total volume.\n\n**Notes:**\n- Returns a value between 0.0 and 1.0\n\n## Methods\n\n### IsValueInRange\n",
    "metadata": {
      "id": "volume-profile-item",
      "title": "volume-profile-item",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/volume-profile-item.md",
      "chunkIndex": 10,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nDetermines whether a single value or a value range is within the Volume Profile bar's range.\n\n**Overloads:**\n1. Check if a single value is within the bar's range\n2. Check if a high-low range intersects with the bar's range\n\n## Usage Examples\n\n### Volume Profile Item Analysis\n",
    "metadata": {
      "id": "volume-profile-item",
      "title": "volume-profile-item",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/volume-profile-item.md",
      "chunkIndex": 11,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n### Trading Strategy with Volume Profile Items\n",
    "metadata": {
      "id": "volume-profile-item",
      "title": "volume-profile-item",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/volume-profile-item.md",
      "chunkIndex": 12,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n## Best Practices\n\n1. **Volume Analysis**\n   - Understand the significance of Up and Down volume\n   - Use Point of Control as a key reference point\n   - Consider Value Area for trading decisions\n\n2. **Range Interpretation**\n   - Use `IsValueInRange` for precise price level analysis\n   - Compare volume distribution across different bars\n   - Look for volume concentration and divergences\n\n3. **Performance Considerations**\n   - Avoid excessive iterations through Volume Profile items\n   - Cache Volume Profile results when possible\n   - Use LINQ efficiently\n\n## Notes\n\n- Provides granular insights into volume distribution\n- Useful for identifying support, resistance, and trading zones\n- Helps understand market sentiment and price action\n- Part of advanced technical analysis toolkit ",
    "metadata": {
      "id": "volume-profile-item",
      "title": "volume-profile-item",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/volume-profile-item.md",
      "chunkIndex": 13,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "public double DownVolume\n",
    "metadata": {
      "id": "volume-profile-item",
      "title": "volume-profile-item",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/volume-profile-item.md",
      "chunkIndex": "code-0",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "# VolumeProfileItem Class\n\n**Namespace:** WealthLab.Core  \n**Parent:** Object\n\nThe `VolumeProfileItem` class represents a single horizontal line in a Volume Profile, providing detailed information about volume distribution at a specific price range.\n\n## Properties\n\n### DownVolume\n"
    }
  },
  {
    "pageContent": "# VolumeProfileItem Class\n\n**Namespace:** WealthLab.Core  \n**Parent:** Object\n\nThe `VolumeProfileItem` class represents a single horizontal line in a Volume Profile, providing detailed information about volume distribution at a specific price range.\n\n## Properties\n\n### DownVolume\n\n\n```csharp\npublic double DownVolume\n\n```",
    "metadata": {
      "id": "volume-profile-item",
      "title": "volume-profile-item",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/volume-profile-item.md",
      "chunkIndex": "code-context-0",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public bool InValueArea\n",
    "metadata": {
      "id": "volume-profile-item",
      "title": "volume-profile-item",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/volume-profile-item.md",
      "chunkIndex": "code-1",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "# VolumeProfileItem Class\n\n**Namespace:** WealthLab.Core  \n**Parent:** Object\n\nThe `VolumeProfileItem` class represents a single horizontal line in a Volume Profile, providing detailed information about volume distribution at a specific price range.\n\n## Properties\n\n### DownVolume\n```csharp\npublic double DownVolume\n```\nContains the volume traded when the closing price is less than the closing price of the previous bar.\n\n### InValueArea\n"
    }
  },
  {
    "pageContent": "# VolumeProfileItem Class\n\n**Namespace:** WealthLab.Core  \n**Parent:** Object\n\nThe `VolumeProfileItem` class represents a single horizontal line in a Volume Profile, providing detailed information about volume distribution at a specific price range.\n\n## Properties\n\n### DownVolume\n```csharp\npublic double DownVolume\n```\nContains the volume traded when the closing price is less than the closing price of the previous bar.\n\n### InValueArea\n\n\n```csharp\npublic bool InValueArea\n\n```",
    "metadata": {
      "id": "volume-profile-item",
      "title": "volume-profile-item",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/volume-profile-item.md",
      "chunkIndex": "code-context-1",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public bool IsPOC\n",
    "metadata": {
      "id": "volume-profile-item",
      "title": "volume-profile-item",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/volume-profile-item.md",
      "chunkIndex": "code-2",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "perties\n\n### DownVolume\n```csharp\npublic double DownVolume\n```\nContains the volume traded when the closing price is less than the closing price of the previous bar.\n\n### InValueArea\n```csharp\npublic bool InValueArea\n```\nIndicates whether this Volume Profile bar is within the \"Value Area\" of the Volume Profile.\n\n**Notes:**\n- `true` if the bar is among those making up the specified percentage of total volume\n- Percentage determined by the Volume Profile's `ValueRangePct` (default: 70%)\n\n### IsPOC\n"
    }
  },
  {
    "pageContent": "perties\n\n### DownVolume\n```csharp\npublic double DownVolume\n```\nContains the volume traded when the closing price is less than the closing price of the previous bar.\n\n### InValueArea\n```csharp\npublic bool InValueArea\n```\nIndicates whether this Volume Profile bar is within the \"Value Area\" of the Volume Profile.\n\n**Notes:**\n- `true` if the bar is among those making up the specified percentage of total volume\n- Percentage determined by the Volume Profile's `ValueRangePct` (default: 70%)\n\n### IsPOC\n\n\n```csharp\npublic bool IsPOC\n\n```",
    "metadata": {
      "id": "volume-profile-item",
      "title": "volume-profile-item",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/volume-profile-item.md",
      "chunkIndex": "code-context-2",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public double RangeMax\n",
    "metadata": {
      "id": "volume-profile-item",
      "title": "volume-profile-item",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/volume-profile-item.md",
      "chunkIndex": "code-3",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "bool InValueArea\n```\nIndicates whether this Volume Profile bar is within the \"Value Area\" of the Volume Profile.\n\n**Notes:**\n- `true` if the bar is among those making up the specified percentage of total volume\n- Percentage determined by the Volume Profile's `ValueRangePct` (default: 70%)\n\n### IsPOC\n```csharp\npublic bool IsPOC\n```\nIndicates whether this Volume Profile bar is the \"Point of Control\".\n\n**Notes:**\n- `true` if this bar has the largest total volume in the Volume Profile\n\n### RangeMax\n"
    }
  },
  {
    "pageContent": "bool InValueArea\n```\nIndicates whether this Volume Profile bar is within the \"Value Area\" of the Volume Profile.\n\n**Notes:**\n- `true` if the bar is among those making up the specified percentage of total volume\n- Percentage determined by the Volume Profile's `ValueRangePct` (default: 70%)\n\n### IsPOC\n```csharp\npublic bool IsPOC\n```\nIndicates whether this Volume Profile bar is the \"Point of Control\".\n\n**Notes:**\n- `true` if this bar has the largest total volume in the Volume Profile\n\n### RangeMax\n\n\n```csharp\npublic double RangeMax\n\n```",
    "metadata": {
      "id": "volume-profile-item",
      "title": "volume-profile-item",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/volume-profile-item.md",
      "chunkIndex": "code-context-3",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public double RangeMin\n",
    "metadata": {
      "id": "volume-profile-item",
      "title": "volume-profile-item",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/volume-profile-item.md",
      "chunkIndex": "code-4",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "`true` if the bar is among those making up the specified percentage of total volume\n- Percentage determined by the Volume Profile's `ValueRangePct` (default: 70%)\n\n### IsPOC\n```csharp\npublic bool IsPOC\n```\nIndicates whether this Volume Profile bar is the \"Point of Control\".\n\n**Notes:**\n- `true` if this bar has the largest total volume in the Volume Profile\n\n### RangeMax\n```csharp\npublic double RangeMax\n```\nThe inclusive upper range of values represented by this Volume Profile bar.\n\n### RangeMin\n"
    }
  },
  {
    "pageContent": "`true` if the bar is among those making up the specified percentage of total volume\n- Percentage determined by the Volume Profile's `ValueRangePct` (default: 70%)\n\n### IsPOC\n```csharp\npublic bool IsPOC\n```\nIndicates whether this Volume Profile bar is the \"Point of Control\".\n\n**Notes:**\n- `true` if this bar has the largest total volume in the Volume Profile\n\n### RangeMax\n```csharp\npublic double RangeMax\n```\nThe inclusive upper range of values represented by this Volume Profile bar.\n\n### RangeMin\n\n\n```csharp\npublic double RangeMin\n\n```",
    "metadata": {
      "id": "volume-profile-item",
      "title": "volume-profile-item",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/volume-profile-item.md",
      "chunkIndex": "code-context-4",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public double TotalVolume\n",
    "metadata": {
      "id": "volume-profile-item",
      "title": "volume-profile-item",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/volume-profile-item.md",
      "chunkIndex": "code-5",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "s `ValueRangePct` (default: 70%)\n\n### IsPOC\n```csharp\npublic bool IsPOC\n```\nIndicates whether this Volume Profile bar is the \"Point of Control\".\n\n**Notes:**\n- `true` if this bar has the largest total volume in the Volume Profile\n\n### RangeMax\n```csharp\npublic double RangeMax\n```\nThe inclusive upper range of values represented by this Volume Profile bar.\n\n### RangeMin\n```csharp\npublic double RangeMin\n```\nThe exclusive lower range of values represented by this Volume Profile bar.\n\n### TotalVolume\n"
    }
  },
  {
    "pageContent": "s `ValueRangePct` (default: 70%)\n\n### IsPOC\n```csharp\npublic bool IsPOC\n```\nIndicates whether this Volume Profile bar is the \"Point of Control\".\n\n**Notes:**\n- `true` if this bar has the largest total volume in the Volume Profile\n\n### RangeMax\n```csharp\npublic double RangeMax\n```\nThe inclusive upper range of values represented by this Volume Profile bar.\n\n### RangeMin\n```csharp\npublic double RangeMin\n```\nThe exclusive lower range of values represented by this Volume Profile bar.\n\n### TotalVolume\n\n\n```csharp\npublic double TotalVolume\n\n```",
    "metadata": {
      "id": "volume-profile-item",
      "title": "volume-profile-item",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/volume-profile-item.md",
      "chunkIndex": "code-context-5",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public double UpVolume\n",
    "metadata": {
      "id": "volume-profile-item",
      "title": "volume-profile-item",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/volume-profile-item.md",
      "chunkIndex": "code-6",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "e \"Point of Control\".\n\n**Notes:**\n- `true` if this bar has the largest total volume in the Volume Profile\n\n### RangeMax\n```csharp\npublic double RangeMax\n```\nThe inclusive upper range of values represented by this Volume Profile bar.\n\n### RangeMin\n```csharp\npublic double RangeMin\n```\nThe exclusive lower range of values represented by this Volume Profile bar.\n\n### TotalVolume\n```csharp\npublic double TotalVolume\n```\nThe total volume of this Volume Profile bar (UpVolume + DownVolume).\n\n### UpVolume\n"
    }
  },
  {
    "pageContent": "e \"Point of Control\".\n\n**Notes:**\n- `true` if this bar has the largest total volume in the Volume Profile\n\n### RangeMax\n```csharp\npublic double RangeMax\n```\nThe inclusive upper range of values represented by this Volume Profile bar.\n\n### RangeMin\n```csharp\npublic double RangeMin\n```\nThe exclusive lower range of values represented by this Volume Profile bar.\n\n### TotalVolume\n```csharp\npublic double TotalVolume\n```\nThe total volume of this Volume Profile bar (UpVolume + DownVolume).\n\n### UpVolume\n\n\n```csharp\npublic double UpVolume\n\n```",
    "metadata": {
      "id": "volume-profile-item",
      "title": "volume-profile-item",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/volume-profile-item.md",
      "chunkIndex": "code-context-6",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public double WidthPct\n",
    "metadata": {
      "id": "volume-profile-item",
      "title": "volume-profile-item",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/volume-profile-item.md",
      "chunkIndex": "code-7",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ve upper range of values represented by this Volume Profile bar.\n\n### RangeMin\n```csharp\npublic double RangeMin\n```\nThe exclusive lower range of values represented by this Volume Profile bar.\n\n### TotalVolume\n```csharp\npublic double TotalVolume\n```\nThe total volume of this Volume Profile bar (UpVolume + DownVolume).\n\n### UpVolume\n```csharp\npublic double UpVolume\n```\nContains the volume traded when the closing price is greater than or equal to the closing price of the previous bar.\n\n### WidthPct\n"
    }
  },
  {
    "pageContent": "ve upper range of values represented by this Volume Profile bar.\n\n### RangeMin\n```csharp\npublic double RangeMin\n```\nThe exclusive lower range of values represented by this Volume Profile bar.\n\n### TotalVolume\n```csharp\npublic double TotalVolume\n```\nThe total volume of this Volume Profile bar (UpVolume + DownVolume).\n\n### UpVolume\n```csharp\npublic double UpVolume\n```\nContains the volume traded when the closing price is greater than or equal to the closing price of the previous bar.\n\n### WidthPct\n\n\n```csharp\npublic double WidthPct\n\n```",
    "metadata": {
      "id": "volume-profile-item",
      "title": "volume-profile-item",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/volume-profile-item.md",
      "chunkIndex": "code-context-7",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public double WidthPctDown\n",
    "metadata": {
      "id": "volume-profile-item",
      "title": "volume-profile-item",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/volume-profile-item.md",
      "chunkIndex": "code-8",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "e\n```\nThe total volume of this Volume Profile bar (UpVolume + DownVolume).\n\n### UpVolume\n```csharp\npublic double UpVolume\n```\nContains the volume traded when the closing price is greater than or equal to the closing price of the previous bar.\n\n### WidthPct\n```csharp\npublic double WidthPct\n```\nThe percentage width of this Volume Profile bar compared to the Point of Control bar.\n\n**Notes:**\n- Returns a value between 0.0 and 1.0\n- Compares to the bar with the largest total volume\n\n### WidthPctDown\n"
    }
  },
  {
    "pageContent": "e\n```\nThe total volume of this Volume Profile bar (UpVolume + DownVolume).\n\n### UpVolume\n```csharp\npublic double UpVolume\n```\nContains the volume traded when the closing price is greater than or equal to the closing price of the previous bar.\n\n### WidthPct\n```csharp\npublic double WidthPct\n```\nThe percentage width of this Volume Profile bar compared to the Point of Control bar.\n\n**Notes:**\n- Returns a value between 0.0 and 1.0\n- Compares to the bar with the largest total volume\n\n### WidthPctDown\n\n\n```csharp\npublic double WidthPctDown\n\n```",
    "metadata": {
      "id": "volume-profile-item",
      "title": "volume-profile-item",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/volume-profile-item.md",
      "chunkIndex": "code-context-8",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public double WidthPctUp\n",
    "metadata": {
      "id": "volume-profile-item",
      "title": "volume-profile-item",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/volume-profile-item.md",
      "chunkIndex": "code-9",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": " closing price of the previous bar.\n\n### WidthPct\n```csharp\npublic double WidthPct\n```\nThe percentage width of this Volume Profile bar compared to the Point of Control bar.\n\n**Notes:**\n- Returns a value between 0.0 and 1.0\n- Compares to the bar with the largest total volume\n\n### WidthPctDown\n```csharp\npublic double WidthPctDown\n```\nThe percentage width of this bar's down volume compared to the Point of Control bar's total volume.\n\n**Notes:**\n- Returns a value between 0.0 and 1.0\n\n### WidthPctUp\n"
    }
  },
  {
    "pageContent": " closing price of the previous bar.\n\n### WidthPct\n```csharp\npublic double WidthPct\n```\nThe percentage width of this Volume Profile bar compared to the Point of Control bar.\n\n**Notes:**\n- Returns a value between 0.0 and 1.0\n- Compares to the bar with the largest total volume\n\n### WidthPctDown\n```csharp\npublic double WidthPctDown\n```\nThe percentage width of this bar's down volume compared to the Point of Control bar's total volume.\n\n**Notes:**\n- Returns a value between 0.0 and 1.0\n\n### WidthPctUp\n\n\n```csharp\npublic double WidthPctUp\n\n```",
    "metadata": {
      "id": "volume-profile-item",
      "title": "volume-profile-item",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/volume-profile-item.md",
      "chunkIndex": "code-context-9",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public bool IsValueInRange(double value)\npublic bool IsValueInRange(double high, double low)\n",
    "metadata": {
      "id": "volume-profile-item",
      "title": "volume-profile-item",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/volume-profile-item.md",
      "chunkIndex": "code-10",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "1.0\n- Compares to the bar with the largest total volume\n\n### WidthPctDown\n```csharp\npublic double WidthPctDown\n```\nThe percentage width of this bar's down volume compared to the Point of Control bar's total volume.\n\n**Notes:**\n- Returns a value between 0.0 and 1.0\n\n### WidthPctUp\n```csharp\npublic double WidthPctUp\n```\nThe percentage width of this bar's up volume compared to the Point of Control bar's total volume.\n\n**Notes:**\n- Returns a value between 0.0 and 1.0\n\n## Methods\n\n### IsValueInRange\n"
    }
  },
  {
    "pageContent": "1.0\n- Compares to the bar with the largest total volume\n\n### WidthPctDown\n```csharp\npublic double WidthPctDown\n```\nThe percentage width of this bar's down volume compared to the Point of Control bar's total volume.\n\n**Notes:**\n- Returns a value between 0.0 and 1.0\n\n### WidthPctUp\n```csharp\npublic double WidthPctUp\n```\nThe percentage width of this bar's up volume compared to the Point of Control bar's total volume.\n\n**Notes:**\n- Returns a value between 0.0 and 1.0\n\n## Methods\n\n### IsValueInRange\n\n\n```csharp\npublic bool IsValueInRange(double value)\npublic bool IsValueInRange(double high, double low)\n\n```",
    "metadata": {
      "id": "volume-profile-item",
      "title": "volume-profile-item",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/volume-profile-item.md",
      "chunkIndex": "code-context-10",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public class VolumeProfileItemAnalyzer\n{\n    public void AnalyzeVolumeProfileItems(BarHistory bars)\n    {\n        // Create Volume Profile\n        var volumeProfile = new VolumeProfile(bars, lookback: 100, barCount: 30);\n        \n        foreach (var item in volumeProfile.Items)\n        {\n            Console.WriteLine(\"Volume Profile Item Details:\");\n            Console.WriteLine($\"Range: {item.RangeMin} - {item.RangeMax}\");\n            Console.WriteLine($\"Total Volume: {item.TotalVolume}\");\n            Console.WriteLine($\"Up Volume: {item.UpVolume}\");\n            Console.WriteLine($\"Down Volume: {item.DownVolume}\");\n            Console.WriteLine($\"Is Point of Control: {item.IsPOC}\");\n            Console.WriteLine($\"In Value Area: {item.InValueArea}\");\n            Console.WriteLine($\"Width Percentage: {item.WidthPct:P2}\");\n            \n            // Check if a specific price is in range\n            double checkPrice = bars.Close[bars.Count - 1];\n            bool inRange = item.IsValueInRange(checkPrice);\n            Console.WriteLine($\"Current price {checkPrice} in range: {inRange}\");\n        }\n    }\n}\n",
    "metadata": {
      "id": "volume-profile-item",
      "title": "volume-profile-item",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/volume-profile-item.md",
      "chunkIndex": "code-11",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "int of Control bar's total volume.\n\n**Notes:**\n- Returns a value between 0.0 and 1.0\n\n## Methods\n\n### IsValueInRange\n```csharp\npublic bool IsValueInRange(double value)\npublic bool IsValueInRange(double high, double low)\n```\nDetermines whether a single value or a value range is within the Volume Profile bar's range.\n\n**Overloads:**\n1. Check if a single value is within the bar's range\n2. Check if a high-low range intersects with the bar's range\n\n## Usage Examples\n\n### Volume Profile Item Analysis\n"
    }
  },
  {
    "pageContent": "int of Control bar's total volume.\n\n**Notes:**\n- Returns a value between 0.0 and 1.0\n\n## Methods\n\n### IsValueInRange\n```csharp\npublic bool IsValueInRange(double value)\npublic bool IsValueInRange(double high, double low)\n```\nDetermines whether a single value or a value range is within the Volume Profile bar's range.\n\n**Overloads:**\n1. Check if a single value is within the bar's range\n2. Check if a high-low range intersects with the bar's range\n\n## Usage Examples\n\n### Volume Profile Item Analysis\n\n\n```csharp\npublic class VolumeProfileItemAnalyzer\n{\n    public void AnalyzeVolumeProfileItems(BarHistory bars)\n    {\n        // Create Volume Profile\n        var volumeProfile = new VolumeProfile(bars, lookback: 100, barCount: 30);\n        \n        foreach (var item in volumeProfile.Items)\n        {\n            Console.WriteLine(\"Volume Profile Item Details:\");\n            Console.WriteLine($\"Range: {item.RangeMin} - {item.RangeMax}\");\n            Console.WriteLine($\"Total Volume: {item.TotalVolume}\");\n            Console.WriteLine($\"Up Volume: {item.UpVolume}\");\n            Console.WriteLine($\"Down Volume: {item.DownVolume}\");\n            Console.WriteLine($\"Is Point of Control: {item.IsPOC}\");\n            Console.WriteLine($\"In Value Area: {item.InValueArea}\");\n            Console.WriteLine($\"Width Percentage: {item.WidthPct:P2}\");\n            \n            // Check if a specific price is in range\n            double checkPrice = bars.Close[bars.Count - 1];\n            bool inRange = item.IsValueInRange(checkPrice);\n            Console.WriteLine($\"Current price {checkPrice} in range: {inRange}\");\n        }\n    }\n}\n\n```",
    "metadata": {
      "id": "volume-profile-item",
      "title": "volume-profile-item",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/volume-profile-item.md",
      "chunkIndex": "code-context-11",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public class VolumeProfileItemStrategy : UserStrategyBase\n{\n    public override void Execute(BarHistory bars, int idx)\n    {\n        var volumeProfile = new VolumeProfile(bars, lookback: 100, barCount: 30, idx: idx);\n        \n        // Find Point of Control item\n        var pocItem = volumeProfile.Items.FirstOrDefault(item => item.IsPOC);\n        \n        if (pocItem != null)\n        {\n            // Entry near Point of Control with volume confirmation\n            if (bars.Close[idx] < pocItem.RangeMax && \n                bars.Close[idx] > pocItem.RangeMin && \n                pocItem.TotalVolume > GetAverageVolume(volumeProfile))\n            {\n                Buy();\n            }\n            \n            // Exit if price moves outside Value Area\n            var valueAreaItems = volumeProfile.Items.Where(item => item.InValueArea);\n            bool outsideValueArea = !valueAreaItems.Any(item => \n                item.IsValueInRange(bars.Close[idx]));\n            \n            if (outsideValueArea)\n            {\n                SellAll();\n            }\n        }\n    }\n    \n    private double GetAverageVolume(VolumeProfile volumeProfile)\n    {\n        return volumeProfile.Items.Average(item => item.TotalVolume);\n    }\n}\n",
    "metadata": {
      "id": "volume-profile-item",
      "title": "volume-profile-item",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/volume-profile-item.md",
      "chunkIndex": "code-12",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "rol: {item.IsPOC}\");\n            Console.WriteLine($\"In Value Area: {item.InValueArea}\");\n            Console.WriteLine($\"Width Percentage: {item.WidthPct:P2}\");\n            \n            // Check if a specific price is in range\n            double checkPrice = bars.Close[bars.Count - 1];\n            bool inRange = item.IsValueInRange(checkPrice);\n            Console.WriteLine($\"Current price {checkPrice} in range: {inRange}\");\n        }\n    }\n}\n```\n\n### Trading Strategy with Volume Profile Items\n"
    }
  },
  {
    "pageContent": "rol: {item.IsPOC}\");\n            Console.WriteLine($\"In Value Area: {item.InValueArea}\");\n            Console.WriteLine($\"Width Percentage: {item.WidthPct:P2}\");\n            \n            // Check if a specific price is in range\n            double checkPrice = bars.Close[bars.Count - 1];\n            bool inRange = item.IsValueInRange(checkPrice);\n            Console.WriteLine($\"Current price {checkPrice} in range: {inRange}\");\n        }\n    }\n}\n```\n\n### Trading Strategy with Volume Profile Items\n\n\n```csharp\npublic class VolumeProfileItemStrategy : UserStrategyBase\n{\n    public override void Execute(BarHistory bars, int idx)\n    {\n        var volumeProfile = new VolumeProfile(bars, lookback: 100, barCount: 30, idx: idx);\n        \n        // Find Point of Control item\n        var pocItem = volumeProfile.Items.FirstOrDefault(item => item.IsPOC);\n        \n        if (pocItem != null)\n        {\n            // Entry near Point of Control with volume confirmation\n            if (bars.Close[idx] < pocItem.RangeMax && \n                bars.Close[idx] > pocItem.RangeMin && \n                pocItem.TotalVolume > GetAverageVolume(volumeProfile))\n            {\n                Buy();\n            }\n            \n            // Exit if price moves outside Value Area\n            var valueAreaItems = volumeProfile.Items.Where(item => item.InValueArea);\n            bool outsideValueArea = !valueAreaItems.Any(item => \n                item.IsValueInRange(bars.Close[idx]));\n            \n            if (outsideValueArea)\n            {\n                SellAll();\n            }\n        }\n    }\n    \n    private double GetAverageVolume(VolumeProfile volumeProfile)\n    {\n        return volumeProfile.Items.Average(item => item.TotalVolume);\n    }\n}\n\n```",
    "metadata": {
      "id": "volume-profile-item",
      "title": "volume-profile-item",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/volume-profile-item.md",
      "chunkIndex": "code-context-12",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "# VolumeProfile Class\n\n**Namespace:** WealthLab.Core  \n**Parent:** Object\n\nThe `VolumeProfile` class generates a Volume Profile, which is a distribution of horizontal lines representing the volume traded at different price levels over a specified lookback period.\n\n## Constructors\n\n### VolumeProfile\n",
    "metadata": {
      "id": "volume-profile",
      "title": "volume-profile",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/volume-profile.md",
      "chunkIndex": 0,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nCreates a Volume Profile for the specified `BarHistory` instance.\n\n**Parameters:**\n- `bars`: The source `BarHistory` to analyze\n- `lookback`: The number of bars to use in generating the Volume Profile\n- `barCount`: Desired number of Volume Profile horizontal lines\n- `valueRange`: Percentage of volume considered the \"High Value Range\" (default: 70.0)\n- `idx`: Optional specific index to generate the Volume Profile (defaults to last bar)\n\n**Notes:**\n- The actual number of Volume Profile lines may vary slightly from `barCount`\n- Volume Profile bars outside the High Value Range are plotted in a dimmer color\n\n## Properties\n\n### Bars\n",
    "metadata": {
      "id": "volume-profile",
      "title": "volume-profile",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/volume-profile.md",
      "chunkIndex": 1,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the `BarHistory` instance used to generate the Volume Profile.\n\n### Items\n",
    "metadata": {
      "id": "volume-profile",
      "title": "volume-profile",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/volume-profile.md",
      "chunkIndex": 2,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns a list of `VolumeProfileItem` instances representing the Volume Profile horizontal bars.\n\n### Lookback\n",
    "metadata": {
      "id": "volume-profile",
      "title": "volume-profile",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/volume-profile.md",
      "chunkIndex": 3,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the lookback period used to generate the Volume Profile.\n\n### LowVolNodeLower\n",
    "metadata": {
      "id": "volume-profile",
      "title": "volume-profile",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/volume-profile.md",
      "chunkIndex": 4,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the value of the Volume Profile bar with the lowest volume below the Point of Control, but within the High Value Area.\n\n### LowVolNodeUpper\n",
    "metadata": {
      "id": "volume-profile",
      "title": "volume-profile",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/volume-profile.md",
      "chunkIndex": 5,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the value of the Volume Profile bar with the lowest volume above the Point of Control, but within the High Value Area.\n\n### PointOfControl\n",
    "metadata": {
      "id": "volume-profile",
      "title": "volume-profile",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/volume-profile.md",
      "chunkIndex": 6,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the price level corresponding to the Volume Profile's \"Point of Control\" - the bar with the most total volume.\n\n### PointOfControlItem\n",
    "metadata": {
      "id": "volume-profile",
      "title": "volume-profile",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/volume-profile.md",
      "chunkIndex": 7,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the `VolumeProfileItem` with the largest total volume.\n\n### ProfileBarsDesired\n",
    "metadata": {
      "id": "volume-profile",
      "title": "volume-profile",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/volume-profile.md",
      "chunkIndex": 8,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nContains the desired number of Volume Profile bars to generate.\n\n### ValueRangePct\n",
    "metadata": {
      "id": "volume-profile",
      "title": "volume-profile",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/volume-profile.md",
      "chunkIndex": 9,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nPercentage of total volume considered the \"High Value Range\".\n\n## Methods\n\n### GenerateVolumeProfile\n",
    "metadata": {
      "id": "volume-profile",
      "title": "volume-profile",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/volume-profile.md",
      "chunkIndex": 10,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nGenerates the Volume Profile as of a specific index in the source `BarHistory`.\n\n## Usage Examples\n\n### Basic Volume Profile Creation\n",
    "metadata": {
      "id": "volume-profile",
      "title": "volume-profile",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/volume-profile.md",
      "chunkIndex": 11,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n### Trading Strategy with Volume Profile\n",
    "metadata": {
      "id": "volume-profile",
      "title": "volume-profile",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/volume-profile.md",
      "chunkIndex": 12,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n## Best Practices\n\n1. **Volume Profile Analysis**\n   - Use appropriate lookback periods\n   - Consider market context and timeframe\n   - Combine with other technical indicators\n\n2. **Performance Considerations**\n   - Volume Profiles can be computationally intensive\n   - Use reasonable lookback and bar count values\n   - Cache results when possible\n\n3. **Interpretation**\n   - Point of Control represents the most significant price level\n   - High Value Range shows key trading areas\n   - Low Volume Nodes can indicate potential support/resistance\n\n## Notes\n\n- Powerful tool for understanding volume distribution\n- Helps identify key price levels and trading zones\n- Useful in both technical analysis and trading strategy development ",
    "metadata": {
      "id": "volume-profile",
      "title": "volume-profile",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/volume-profile.md",
      "chunkIndex": 13,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "public VolumeProfile(\n    BarHistory bars, \n    int lookback, \n    int barCount, \n    double valueRange = 70.0, \n    int? idx = null\n)\n",
    "metadata": {
      "id": "volume-profile",
      "title": "volume-profile",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/volume-profile.md",
      "chunkIndex": "code-0",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "# VolumeProfile Class\n\n**Namespace:** WealthLab.Core  \n**Parent:** Object\n\nThe `VolumeProfile` class generates a Volume Profile, which is a distribution of horizontal lines representing the volume traded at different price levels over a specified lookback period.\n\n## Constructors\n\n### VolumeProfile\n"
    }
  },
  {
    "pageContent": "# VolumeProfile Class\n\n**Namespace:** WealthLab.Core  \n**Parent:** Object\n\nThe `VolumeProfile` class generates a Volume Profile, which is a distribution of horizontal lines representing the volume traded at different price levels over a specified lookback period.\n\n## Constructors\n\n### VolumeProfile\n\n\n```csharp\npublic VolumeProfile(\n    BarHistory bars, \n    int lookback, \n    int barCount, \n    double valueRange = 70.0, \n    int? idx = null\n)\n\n```",
    "metadata": {
      "id": "volume-profile",
      "title": "volume-profile",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/volume-profile.md",
      "chunkIndex": "code-context-0",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public BarHistory Bars\n",
    "metadata": {
      "id": "volume-profile",
      "title": "volume-profile",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/volume-profile.md",
      "chunkIndex": "code-1",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "back`: The number of bars to use in generating the Volume Profile\n- `barCount`: Desired number of Volume Profile horizontal lines\n- `valueRange`: Percentage of volume considered the \"High Value Range\" (default: 70.0)\n- `idx`: Optional specific index to generate the Volume Profile (defaults to last bar)\n\n**Notes:**\n- The actual number of Volume Profile lines may vary slightly from `barCount`\n- Volume Profile bars outside the High Value Range are plotted in a dimmer color\n\n## Properties\n\n### Bars\n"
    }
  },
  {
    "pageContent": "back`: The number of bars to use in generating the Volume Profile\n- `barCount`: Desired number of Volume Profile horizontal lines\n- `valueRange`: Percentage of volume considered the \"High Value Range\" (default: 70.0)\n- `idx`: Optional specific index to generate the Volume Profile (defaults to last bar)\n\n**Notes:**\n- The actual number of Volume Profile lines may vary slightly from `barCount`\n- Volume Profile bars outside the High Value Range are plotted in a dimmer color\n\n## Properties\n\n### Bars\n\n\n```csharp\npublic BarHistory Bars\n\n```",
    "metadata": {
      "id": "volume-profile",
      "title": "volume-profile",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/volume-profile.md",
      "chunkIndex": "code-context-1",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public List<VolumeProfileItem> Items\n",
    "metadata": {
      "id": "volume-profile",
      "title": "volume-profile",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/volume-profile.md",
      "chunkIndex": "code-2",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ntal lines\n- `valueRange`: Percentage of volume considered the \"High Value Range\" (default: 70.0)\n- `idx`: Optional specific index to generate the Volume Profile (defaults to last bar)\n\n**Notes:**\n- The actual number of Volume Profile lines may vary slightly from `barCount`\n- Volume Profile bars outside the High Value Range are plotted in a dimmer color\n\n## Properties\n\n### Bars\n```csharp\npublic BarHistory Bars\n```\nReturns the `BarHistory` instance used to generate the Volume Profile.\n\n### Items\n"
    }
  },
  {
    "pageContent": "ntal lines\n- `valueRange`: Percentage of volume considered the \"High Value Range\" (default: 70.0)\n- `idx`: Optional specific index to generate the Volume Profile (defaults to last bar)\n\n**Notes:**\n- The actual number of Volume Profile lines may vary slightly from `barCount`\n- Volume Profile bars outside the High Value Range are plotted in a dimmer color\n\n## Properties\n\n### Bars\n```csharp\npublic BarHistory Bars\n```\nReturns the `BarHistory` instance used to generate the Volume Profile.\n\n### Items\n\n\n```csharp\npublic List<VolumeProfileItem> Items\n\n```",
    "metadata": {
      "id": "volume-profile",
      "title": "volume-profile",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/volume-profile.md",
      "chunkIndex": "code-context-2",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public int Lookback\n",
    "metadata": {
      "id": "volume-profile",
      "title": "volume-profile",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/volume-profile.md",
      "chunkIndex": "code-3",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "(defaults to last bar)\n\n**Notes:**\n- The actual number of Volume Profile lines may vary slightly from `barCount`\n- Volume Profile bars outside the High Value Range are plotted in a dimmer color\n\n## Properties\n\n### Bars\n```csharp\npublic BarHistory Bars\n```\nReturns the `BarHistory` instance used to generate the Volume Profile.\n\n### Items\n```csharp\npublic List<VolumeProfileItem> Items\n```\nReturns a list of `VolumeProfileItem` instances representing the Volume Profile horizontal bars.\n\n### Lookback\n"
    }
  },
  {
    "pageContent": "(defaults to last bar)\n\n**Notes:**\n- The actual number of Volume Profile lines may vary slightly from `barCount`\n- Volume Profile bars outside the High Value Range are plotted in a dimmer color\n\n## Properties\n\n### Bars\n```csharp\npublic BarHistory Bars\n```\nReturns the `BarHistory` instance used to generate the Volume Profile.\n\n### Items\n```csharp\npublic List<VolumeProfileItem> Items\n```\nReturns a list of `VolumeProfileItem` instances representing the Volume Profile horizontal bars.\n\n### Lookback\n\n\n```csharp\npublic int Lookback\n\n```",
    "metadata": {
      "id": "volume-profile",
      "title": "volume-profile",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/volume-profile.md",
      "chunkIndex": "code-context-3",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public double LowVolNodeLower\n",
    "metadata": {
      "id": "volume-profile",
      "title": "volume-profile",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/volume-profile.md",
      "chunkIndex": "code-4",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "e Profile bars outside the High Value Range are plotted in a dimmer color\n\n## Properties\n\n### Bars\n```csharp\npublic BarHistory Bars\n```\nReturns the `BarHistory` instance used to generate the Volume Profile.\n\n### Items\n```csharp\npublic List<VolumeProfileItem> Items\n```\nReturns a list of `VolumeProfileItem` instances representing the Volume Profile horizontal bars.\n\n### Lookback\n```csharp\npublic int Lookback\n```\nReturns the lookback period used to generate the Volume Profile.\n\n### LowVolNodeLower\n"
    }
  },
  {
    "pageContent": "e Profile bars outside the High Value Range are plotted in a dimmer color\n\n## Properties\n\n### Bars\n```csharp\npublic BarHistory Bars\n```\nReturns the `BarHistory` instance used to generate the Volume Profile.\n\n### Items\n```csharp\npublic List<VolumeProfileItem> Items\n```\nReturns a list of `VolumeProfileItem` instances representing the Volume Profile horizontal bars.\n\n### Lookback\n```csharp\npublic int Lookback\n```\nReturns the lookback period used to generate the Volume Profile.\n\n### LowVolNodeLower\n\n\n```csharp\npublic double LowVolNodeLower\n\n```",
    "metadata": {
      "id": "volume-profile",
      "title": "volume-profile",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/volume-profile.md",
      "chunkIndex": "code-context-4",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public double LowVolNodeUpper\n",
    "metadata": {
      "id": "volume-profile",
      "title": "volume-profile",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/volume-profile.md",
      "chunkIndex": "code-5",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "olume Profile.\n\n### Items\n```csharp\npublic List<VolumeProfileItem> Items\n```\nReturns a list of `VolumeProfileItem` instances representing the Volume Profile horizontal bars.\n\n### Lookback\n```csharp\npublic int Lookback\n```\nReturns the lookback period used to generate the Volume Profile.\n\n### LowVolNodeLower\n```csharp\npublic double LowVolNodeLower\n```\nReturns the value of the Volume Profile bar with the lowest volume below the Point of Control, but within the High Value Area.\n\n### LowVolNodeUpper\n"
    }
  },
  {
    "pageContent": "olume Profile.\n\n### Items\n```csharp\npublic List<VolumeProfileItem> Items\n```\nReturns a list of `VolumeProfileItem` instances representing the Volume Profile horizontal bars.\n\n### Lookback\n```csharp\npublic int Lookback\n```\nReturns the lookback period used to generate the Volume Profile.\n\n### LowVolNodeLower\n```csharp\npublic double LowVolNodeLower\n```\nReturns the value of the Volume Profile bar with the lowest volume below the Point of Control, but within the High Value Area.\n\n### LowVolNodeUpper\n\n\n```csharp\npublic double LowVolNodeUpper\n\n```",
    "metadata": {
      "id": "volume-profile",
      "title": "volume-profile",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/volume-profile.md",
      "chunkIndex": "code-context-5",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public double PointOfControl\n",
    "metadata": {
      "id": "volume-profile",
      "title": "volume-profile",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/volume-profile.md",
      "chunkIndex": "code-6",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "csharp\npublic int Lookback\n```\nReturns the lookback period used to generate the Volume Profile.\n\n### LowVolNodeLower\n```csharp\npublic double LowVolNodeLower\n```\nReturns the value of the Volume Profile bar with the lowest volume below the Point of Control, but within the High Value Area.\n\n### LowVolNodeUpper\n```csharp\npublic double LowVolNodeUpper\n```\nReturns the value of the Volume Profile bar with the lowest volume above the Point of Control, but within the High Value Area.\n\n### PointOfControl\n"
    }
  },
  {
    "pageContent": "csharp\npublic int Lookback\n```\nReturns the lookback period used to generate the Volume Profile.\n\n### LowVolNodeLower\n```csharp\npublic double LowVolNodeLower\n```\nReturns the value of the Volume Profile bar with the lowest volume below the Point of Control, but within the High Value Area.\n\n### LowVolNodeUpper\n```csharp\npublic double LowVolNodeUpper\n```\nReturns the value of the Volume Profile bar with the lowest volume above the Point of Control, but within the High Value Area.\n\n### PointOfControl\n\n\n```csharp\npublic double PointOfControl\n\n```",
    "metadata": {
      "id": "volume-profile",
      "title": "volume-profile",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/volume-profile.md",
      "chunkIndex": "code-context-6",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public VolumeProfileItem PointOfControlItem\n",
    "metadata": {
      "id": "volume-profile",
      "title": "volume-profile",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/volume-profile.md",
      "chunkIndex": "code-7",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "Volume Profile bar with the lowest volume below the Point of Control, but within the High Value Area.\n\n### LowVolNodeUpper\n```csharp\npublic double LowVolNodeUpper\n```\nReturns the value of the Volume Profile bar with the lowest volume above the Point of Control, but within the High Value Area.\n\n### PointOfControl\n```csharp\npublic double PointOfControl\n```\nReturns the price level corresponding to the Volume Profile's \"Point of Control\" - the bar with the most total volume.\n\n### PointOfControlItem\n"
    }
  },
  {
    "pageContent": "Volume Profile bar with the lowest volume below the Point of Control, but within the High Value Area.\n\n### LowVolNodeUpper\n```csharp\npublic double LowVolNodeUpper\n```\nReturns the value of the Volume Profile bar with the lowest volume above the Point of Control, but within the High Value Area.\n\n### PointOfControl\n```csharp\npublic double PointOfControl\n```\nReturns the price level corresponding to the Volume Profile's \"Point of Control\" - the bar with the most total volume.\n\n### PointOfControlItem\n\n\n```csharp\npublic VolumeProfileItem PointOfControlItem\n\n```",
    "metadata": {
      "id": "volume-profile",
      "title": "volume-profile",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/volume-profile.md",
      "chunkIndex": "code-context-7",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public int ProfileBarsDesired\n",
    "metadata": {
      "id": "volume-profile",
      "title": "volume-profile",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/volume-profile.md",
      "chunkIndex": "code-8",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "e LowVolNodeUpper\n```\nReturns the value of the Volume Profile bar with the lowest volume above the Point of Control, but within the High Value Area.\n\n### PointOfControl\n```csharp\npublic double PointOfControl\n```\nReturns the price level corresponding to the Volume Profile's \"Point of Control\" - the bar with the most total volume.\n\n### PointOfControlItem\n```csharp\npublic VolumeProfileItem PointOfControlItem\n```\nReturns the `VolumeProfileItem` with the largest total volume.\n\n### ProfileBarsDesired\n"
    }
  },
  {
    "pageContent": "e LowVolNodeUpper\n```\nReturns the value of the Volume Profile bar with the lowest volume above the Point of Control, but within the High Value Area.\n\n### PointOfControl\n```csharp\npublic double PointOfControl\n```\nReturns the price level corresponding to the Volume Profile's \"Point of Control\" - the bar with the most total volume.\n\n### PointOfControlItem\n```csharp\npublic VolumeProfileItem PointOfControlItem\n```\nReturns the `VolumeProfileItem` with the largest total volume.\n\n### ProfileBarsDesired\n\n\n```csharp\npublic int ProfileBarsDesired\n\n```",
    "metadata": {
      "id": "volume-profile",
      "title": "volume-profile",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/volume-profile.md",
      "chunkIndex": "code-context-8",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public double ValueRangePct\n",
    "metadata": {
      "id": "volume-profile",
      "title": "volume-profile",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/volume-profile.md",
      "chunkIndex": "code-9",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": " the High Value Area.\n\n### PointOfControl\n```csharp\npublic double PointOfControl\n```\nReturns the price level corresponding to the Volume Profile's \"Point of Control\" - the bar with the most total volume.\n\n### PointOfControlItem\n```csharp\npublic VolumeProfileItem PointOfControlItem\n```\nReturns the `VolumeProfileItem` with the largest total volume.\n\n### ProfileBarsDesired\n```csharp\npublic int ProfileBarsDesired\n```\nContains the desired number of Volume Profile bars to generate.\n\n### ValueRangePct\n"
    }
  },
  {
    "pageContent": " the High Value Area.\n\n### PointOfControl\n```csharp\npublic double PointOfControl\n```\nReturns the price level corresponding to the Volume Profile's \"Point of Control\" - the bar with the most total volume.\n\n### PointOfControlItem\n```csharp\npublic VolumeProfileItem PointOfControlItem\n```\nReturns the `VolumeProfileItem` with the largest total volume.\n\n### ProfileBarsDesired\n```csharp\npublic int ProfileBarsDesired\n```\nContains the desired number of Volume Profile bars to generate.\n\n### ValueRangePct\n\n\n```csharp\npublic double ValueRangePct\n\n```",
    "metadata": {
      "id": "volume-profile",
      "title": "volume-profile",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/volume-profile.md",
      "chunkIndex": "code-context-9",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public void GenerateVolumeProfile(int idx)\n",
    "metadata": {
      "id": "volume-profile",
      "title": "volume-profile",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/volume-profile.md",
      "chunkIndex": "code-10",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "e's \"Point of Control\" - the bar with the most total volume.\n\n### PointOfControlItem\n```csharp\npublic VolumeProfileItem PointOfControlItem\n```\nReturns the `VolumeProfileItem` with the largest total volume.\n\n### ProfileBarsDesired\n```csharp\npublic int ProfileBarsDesired\n```\nContains the desired number of Volume Profile bars to generate.\n\n### ValueRangePct\n```csharp\npublic double ValueRangePct\n```\nPercentage of total volume considered the \"High Value Range\".\n\n## Methods\n\n### GenerateVolumeProfile\n"
    }
  },
  {
    "pageContent": "e's \"Point of Control\" - the bar with the most total volume.\n\n### PointOfControlItem\n```csharp\npublic VolumeProfileItem PointOfControlItem\n```\nReturns the `VolumeProfileItem` with the largest total volume.\n\n### ProfileBarsDesired\n```csharp\npublic int ProfileBarsDesired\n```\nContains the desired number of Volume Profile bars to generate.\n\n### ValueRangePct\n```csharp\npublic double ValueRangePct\n```\nPercentage of total volume considered the \"High Value Range\".\n\n## Methods\n\n### GenerateVolumeProfile\n\n\n```csharp\npublic void GenerateVolumeProfile(int idx)\n\n```",
    "metadata": {
      "id": "volume-profile",
      "title": "volume-profile",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/volume-profile.md",
      "chunkIndex": "code-context-10",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public class VolumeProfileAnalyzer\n{\n    public void AnalyzeVolumeProfile(BarHistory bars)\n    {\n        // Create Volume Profile with 50-bar lookback, 20 desired bars\n        var volumeProfile = new VolumeProfile(bars, lookback: 50, barCount: 20);\n        \n        // Access key volume profile metrics\n        Console.WriteLine($\"Point of Control: {volumeProfile.PointOfControl}\");\n        Console.WriteLine($\"Low Volume Node Lower: {volumeProfile.LowVolNodeLower}\");\n        Console.WriteLine($\"Low Volume Node Upper: {volumeProfile.LowVolNodeUpper}\");\n        \n        // Iterate through Volume Profile items\n        foreach (var item in volumeProfile.Items)\n        {\n            Console.WriteLine(\n                $\"Range: {item.RangeMin}-{item.RangeMax}, \" +\n                $\"Volume: {item.TotalVolume}, \" +\n                $\"In Value Range: {item.InValueRange}\"\n            );\n        }\n    }\n}\n",
    "metadata": {
      "id": "volume-profile",
      "title": "volume-profile",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/volume-profile.md",
      "chunkIndex": "code-11",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": " total volume.\n\n### ProfileBarsDesired\n```csharp\npublic int ProfileBarsDesired\n```\nContains the desired number of Volume Profile bars to generate.\n\n### ValueRangePct\n```csharp\npublic double ValueRangePct\n```\nPercentage of total volume considered the \"High Value Range\".\n\n## Methods\n\n### GenerateVolumeProfile\n```csharp\npublic void GenerateVolumeProfile(int idx)\n```\nGenerates the Volume Profile as of a specific index in the source `BarHistory`.\n\n## Usage Examples\n\n### Basic Volume Profile Creation\n"
    }
  },
  {
    "pageContent": " total volume.\n\n### ProfileBarsDesired\n```csharp\npublic int ProfileBarsDesired\n```\nContains the desired number of Volume Profile bars to generate.\n\n### ValueRangePct\n```csharp\npublic double ValueRangePct\n```\nPercentage of total volume considered the \"High Value Range\".\n\n## Methods\n\n### GenerateVolumeProfile\n```csharp\npublic void GenerateVolumeProfile(int idx)\n```\nGenerates the Volume Profile as of a specific index in the source `BarHistory`.\n\n## Usage Examples\n\n### Basic Volume Profile Creation\n\n\n```csharp\npublic class VolumeProfileAnalyzer\n{\n    public void AnalyzeVolumeProfile(BarHistory bars)\n    {\n        // Create Volume Profile with 50-bar lookback, 20 desired bars\n        var volumeProfile = new VolumeProfile(bars, lookback: 50, barCount: 20);\n        \n        // Access key volume profile metrics\n        Console.WriteLine($\"Point of Control: {volumeProfile.PointOfControl}\");\n        Console.WriteLine($\"Low Volume Node Lower: {volumeProfile.LowVolNodeLower}\");\n        Console.WriteLine($\"Low Volume Node Upper: {volumeProfile.LowVolNodeUpper}\");\n        \n        // Iterate through Volume Profile items\n        foreach (var item in volumeProfile.Items)\n        {\n            Console.WriteLine(\n                $\"Range: {item.RangeMin}-{item.RangeMax}, \" +\n                $\"Volume: {item.TotalVolume}, \" +\n                $\"In Value Range: {item.InValueRange}\"\n            );\n        }\n    }\n}\n\n```",
    "metadata": {
      "id": "volume-profile",
      "title": "volume-profile",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/volume-profile.md",
      "chunkIndex": "code-context-11",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public class VolumeProfileStrategy : UserStrategyBase\n{\n    public override void Execute(BarHistory bars, int idx)\n    {\n        // Create Volume Profile at current index\n        var volumeProfile = new VolumeProfile(bars, lookback: 100, barCount: 30, idx: idx);\n        \n        // Use Point of Control as potential support/resistance\n        double poc = volumeProfile.PointOfControl;\n        \n        // Example entry logic near Point of Control\n        if (bars.Close[idx] < poc && bars.Close[idx] > poc * 0.99)\n        {\n            Buy();\n        }\n        \n        // Example exit logic\n        if (bars.Close[idx] > poc * 1.01)\n        {\n            SellAll();\n        }\n    }\n}\n",
    "metadata": {
      "id": "volume-profile",
      "title": "volume-profile",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/volume-profile.md",
      "chunkIndex": "code-12",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "LowVolNodeLower}\");\n        Console.WriteLine($\"Low Volume Node Upper: {volumeProfile.LowVolNodeUpper}\");\n        \n        // Iterate through Volume Profile items\n        foreach (var item in volumeProfile.Items)\n        {\n            Console.WriteLine(\n                $\"Range: {item.RangeMin}-{item.RangeMax}, \" +\n                $\"Volume: {item.TotalVolume}, \" +\n                $\"In Value Range: {item.InValueRange}\"\n            );\n        }\n    }\n}\n```\n\n### Trading Strategy with Volume Profile\n"
    }
  },
  {
    "pageContent": "LowVolNodeLower}\");\n        Console.WriteLine($\"Low Volume Node Upper: {volumeProfile.LowVolNodeUpper}\");\n        \n        // Iterate through Volume Profile items\n        foreach (var item in volumeProfile.Items)\n        {\n            Console.WriteLine(\n                $\"Range: {item.RangeMin}-{item.RangeMax}, \" +\n                $\"Volume: {item.TotalVolume}, \" +\n                $\"In Value Range: {item.InValueRange}\"\n            );\n        }\n    }\n}\n```\n\n### Trading Strategy with Volume Profile\n\n\n```csharp\npublic class VolumeProfileStrategy : UserStrategyBase\n{\n    public override void Execute(BarHistory bars, int idx)\n    {\n        // Create Volume Profile at current index\n        var volumeProfile = new VolumeProfile(bars, lookback: 100, barCount: 30, idx: idx);\n        \n        // Use Point of Control as potential support/resistance\n        double poc = volumeProfile.PointOfControl;\n        \n        // Example entry logic near Point of Control\n        if (bars.Close[idx] < poc && bars.Close[idx] > poc * 0.99)\n        {\n            Buy();\n        }\n        \n        // Example exit logic\n        if (bars.Close[idx] > poc * 1.01)\n        {\n            SellAll();\n        }\n    }\n}\n\n```",
    "metadata": {
      "id": "volume-profile",
      "title": "volume-profile",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/volume-profile.md",
      "chunkIndex": "code-context-12",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "# WFOOptimizer Class\n\n**Namespace:** WealthLab.Backtest  \n**Parent:** OptimizationRunnerBase\n\nThe `WFOOptimizer` class executes Walk-Forward Optimization (WFO), a powerful technique for validating and selecting trading strategies across different time periods.\n\n## Overview\n\nWalk-Forward Optimization helps traders:\n- Test strategy robustness across multiple market conditions\n- Reduce overfitting risks\n- Validate strategy performance out-of-sample\n\n## Base Class Properties\n\n### BacktestSettings\n",
    "metadata": {
      "id": "wfo-optimizer",
      "title": "wfo-optimizer",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wfo-optimizer.md",
      "chunkIndex": 0,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the backtest settings used for the optimization.\n\n### CompiledStrategy\n",
    "metadata": {
      "id": "wfo-optimizer",
      "title": "wfo-optimizer",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wfo-optimizer.md",
      "chunkIndex": 1,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the compiled strategy being optimized.\n\n### OptimizationMethod\n",
    "metadata": {
      "id": "wfo-optimizer",
      "title": "wfo-optimizer",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wfo-optimizer.md",
      "chunkIndex": 2,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the optimizer used for the optimization.\n\n### PositionSize\n",
    "metadata": {
      "id": "wfo-optimizer",
      "title": "wfo-optimizer",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wfo-optimizer.md",
      "chunkIndex": 3,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the position sizing configuration used in the optimization.\n\n### ScoreCard\n",
    "metadata": {
      "id": "wfo-optimizer",
      "title": "wfo-optimizer",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wfo-optimizer.md",
      "chunkIndex": 4,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the ScoreCard used to evaluate strategy performance.\n\n### SymbolData\n",
    "metadata": {
      "id": "wfo-optimizer",
      "title": "wfo-optimizer",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wfo-optimizer.md",
      "chunkIndex": 5,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nContains the historical data being optimized.\n\n## WFO-Specific Properties\n\n### DataSet\n",
    "metadata": {
      "id": "wfo-optimizer",
      "title": "wfo-optimizer",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wfo-optimizer.md",
      "chunkIndex": 6,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the DataSet selected for walk-forward optimization.\n\n### InSamplePercent\n",
    "metadata": {
      "id": "wfo-optimizer",
      "title": "wfo-optimizer",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wfo-optimizer.md",
      "chunkIndex": 7,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nPercentage of data used for in-sample optimization.\n\n### OutOfSamplePercent\n",
    "metadata": {
      "id": "wfo-optimizer",
      "title": "wfo-optimizer",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wfo-optimizer.md",
      "chunkIndex": 8,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nPercentage of data used for out-of-sample validation.\n\n### Intervals\n",
    "metadata": {
      "id": "wfo-optimizer",
      "title": "wfo-optimizer",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wfo-optimizer.md",
      "chunkIndex": 9,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nNumber of intervals used in the walk-forward optimization.\n\n### WindowType\n",
    "metadata": {
      "id": "wfo-optimizer",
      "title": "wfo-optimizer",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wfo-optimizer.md",
      "chunkIndex": 10,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nDetermines the windowing approach for optimization.\n\n**Possible Values:**\n- `Expanding`: Each interval includes all previous data\n- `Sliding`: Fixed-size window moves across data\n\n### Mode\n",
    "metadata": {
      "id": "wfo-optimizer",
      "title": "wfo-optimizer",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wfo-optimizer.md",
      "chunkIndex": 11,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nDefines how the best optimization result is selected.\n\n### Selector\n",
    "metadata": {
      "id": "wfo-optimizer",
      "title": "wfo-optimizer",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wfo-optimizer.md",
      "chunkIndex": 12,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nDetermines the criteria for selecting the best optimization run.\n\n### WFOResults\n",
    "metadata": {
      "id": "wfo-optimizer",
      "title": "wfo-optimizer",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wfo-optimizer.md",
      "chunkIndex": 13,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nContains the best results for each optimization interval.\n\n## Methods\n\n### ReportEstimatedCompletion\n",
    "metadata": {
      "id": "wfo-optimizer",
      "title": "wfo-optimizer",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wfo-optimizer.md",
      "chunkIndex": 14,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nAllows optimizers to report back their estimated completion percentage.\n\n**Parameters:**\n- `value`: Completion percentage (0-100)\n\n## Usage Examples\n\n### Basic Walk-Forward Optimization\n",
    "metadata": {
      "id": "wfo-optimizer",
      "title": "wfo-optimizer",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wfo-optimizer.md",
      "chunkIndex": 15,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n### Advanced WFO Strategy Selection\n",
    "metadata": {
      "id": "wfo-optimizer",
      "title": "wfo-optimizer",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wfo-optimizer.md",
      "chunkIndex": 16,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n## Best Practices\n\n1. **Optimization Techniques**\n   - Use appropriate in-sample/out-of-sample percentages\n   - Consider different window types\n   - Validate across multiple market conditions\n\n2. **Performance Evaluation**\n   - Compare in-sample and out-of-sample results\n   - Look for consistent performance\n   - Avoid strategies with significant performance discrepancies\n\n3. **Risk Management**\n   - Use multiple performance metrics\n   - Consider drawdown and risk-adjusted returns\n   - Validate strategy robustness\n\n## Performance Considerations\n\n- Walk-Forward Optimization can be computationally intensive\n- Use efficient data structures\n- Consider parallel processing for large datasets\n\n## Potential Pitfalls\n\n🚨 **Caution:**\n- Beware of overfitting\n- Not all optimized strategies perform well in live trading\n- Continuous monitoring and adaptation are crucial\n\n## Notes\n\n- Essential tool for strategy validation\n- Helps reduce curve-fitting risks\n- Provides more realistic performance estimates\n- Part of advanced algorithmic trading toolkit ",
    "metadata": {
      "id": "wfo-optimizer",
      "title": "wfo-optimizer",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wfo-optimizer.md",
      "chunkIndex": 17,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "public BacktestSettings BacktestSettings\n",
    "metadata": {
      "id": "wfo-optimizer",
      "title": "wfo-optimizer",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wfo-optimizer.md",
      "chunkIndex": "code-0",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "# WFOOptimizer Class\n\n**Namespace:** WealthLab.Backtest  \n**Parent:** OptimizationRunnerBase\n\nThe `WFOOptimizer` class executes Walk-Forward Optimization (WFO), a powerful technique for validating and selecting trading strategies across different time periods.\n\n## Overview\n\nWalk-Forward Optimization helps traders:\n- Test strategy robustness across multiple market conditions\n- Reduce overfitting risks\n- Validate strategy performance out-of-sample\n\n## Base Class Properties\n\n### BacktestSettings\n"
    }
  },
  {
    "pageContent": "# WFOOptimizer Class\n\n**Namespace:** WealthLab.Backtest  \n**Parent:** OptimizationRunnerBase\n\nThe `WFOOptimizer` class executes Walk-Forward Optimization (WFO), a powerful technique for validating and selecting trading strategies across different time periods.\n\n## Overview\n\nWalk-Forward Optimization helps traders:\n- Test strategy robustness across multiple market conditions\n- Reduce overfitting risks\n- Validate strategy performance out-of-sample\n\n## Base Class Properties\n\n### BacktestSettings\n\n\n```csharp\npublic BacktestSettings BacktestSettings\n\n```",
    "metadata": {
      "id": "wfo-optimizer",
      "title": "wfo-optimizer",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wfo-optimizer.md",
      "chunkIndex": "code-context-0",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public StrategyBase CompiledStrategy\n",
    "metadata": {
      "id": "wfo-optimizer",
      "title": "wfo-optimizer",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wfo-optimizer.md",
      "chunkIndex": "code-1",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "-Forward Optimization (WFO), a powerful technique for validating and selecting trading strategies across different time periods.\n\n## Overview\n\nWalk-Forward Optimization helps traders:\n- Test strategy robustness across multiple market conditions\n- Reduce overfitting risks\n- Validate strategy performance out-of-sample\n\n## Base Class Properties\n\n### BacktestSettings\n```csharp\npublic BacktestSettings BacktestSettings\n```\nReturns the backtest settings used for the optimization.\n\n### CompiledStrategy\n"
    }
  },
  {
    "pageContent": "-Forward Optimization (WFO), a powerful technique for validating and selecting trading strategies across different time periods.\n\n## Overview\n\nWalk-Forward Optimization helps traders:\n- Test strategy robustness across multiple market conditions\n- Reduce overfitting risks\n- Validate strategy performance out-of-sample\n\n## Base Class Properties\n\n### BacktestSettings\n```csharp\npublic BacktestSettings BacktestSettings\n```\nReturns the backtest settings used for the optimization.\n\n### CompiledStrategy\n\n\n```csharp\npublic StrategyBase CompiledStrategy\n\n```",
    "metadata": {
      "id": "wfo-optimizer",
      "title": "wfo-optimizer",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wfo-optimizer.md",
      "chunkIndex": "code-context-1",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public OptimizerBase OptimizationMethod\n",
    "metadata": {
      "id": "wfo-optimizer",
      "title": "wfo-optimizer",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wfo-optimizer.md",
      "chunkIndex": "code-2",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "riods.\n\n## Overview\n\nWalk-Forward Optimization helps traders:\n- Test strategy robustness across multiple market conditions\n- Reduce overfitting risks\n- Validate strategy performance out-of-sample\n\n## Base Class Properties\n\n### BacktestSettings\n```csharp\npublic BacktestSettings BacktestSettings\n```\nReturns the backtest settings used for the optimization.\n\n### CompiledStrategy\n```csharp\npublic StrategyBase CompiledStrategy\n```\nReturns the compiled strategy being optimized.\n\n### OptimizationMethod\n"
    }
  },
  {
    "pageContent": "riods.\n\n## Overview\n\nWalk-Forward Optimization helps traders:\n- Test strategy robustness across multiple market conditions\n- Reduce overfitting risks\n- Validate strategy performance out-of-sample\n\n## Base Class Properties\n\n### BacktestSettings\n```csharp\npublic BacktestSettings BacktestSettings\n```\nReturns the backtest settings used for the optimization.\n\n### CompiledStrategy\n```csharp\npublic StrategyBase CompiledStrategy\n```\nReturns the compiled strategy being optimized.\n\n### OptimizationMethod\n\n\n```csharp\npublic OptimizerBase OptimizationMethod\n\n```",
    "metadata": {
      "id": "wfo-optimizer",
      "title": "wfo-optimizer",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wfo-optimizer.md",
      "chunkIndex": "code-context-2",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public PositionSize PositionSize\n",
    "metadata": {
      "id": "wfo-optimizer",
      "title": "wfo-optimizer",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wfo-optimizer.md",
      "chunkIndex": "code-3",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "s\n- Reduce overfitting risks\n- Validate strategy performance out-of-sample\n\n## Base Class Properties\n\n### BacktestSettings\n```csharp\npublic BacktestSettings BacktestSettings\n```\nReturns the backtest settings used for the optimization.\n\n### CompiledStrategy\n```csharp\npublic StrategyBase CompiledStrategy\n```\nReturns the compiled strategy being optimized.\n\n### OptimizationMethod\n```csharp\npublic OptimizerBase OptimizationMethod\n```\nReturns the optimizer used for the optimization.\n\n### PositionSize\n"
    }
  },
  {
    "pageContent": "s\n- Reduce overfitting risks\n- Validate strategy performance out-of-sample\n\n## Base Class Properties\n\n### BacktestSettings\n```csharp\npublic BacktestSettings BacktestSettings\n```\nReturns the backtest settings used for the optimization.\n\n### CompiledStrategy\n```csharp\npublic StrategyBase CompiledStrategy\n```\nReturns the compiled strategy being optimized.\n\n### OptimizationMethod\n```csharp\npublic OptimizerBase OptimizationMethod\n```\nReturns the optimizer used for the optimization.\n\n### PositionSize\n\n\n```csharp\npublic PositionSize PositionSize\n\n```",
    "metadata": {
      "id": "wfo-optimizer",
      "title": "wfo-optimizer",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wfo-optimizer.md",
      "chunkIndex": "code-context-3",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public ScoreCardBase ScoreCard\n",
    "metadata": {
      "id": "wfo-optimizer",
      "title": "wfo-optimizer",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wfo-optimizer.md",
      "chunkIndex": "code-4",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "rp\npublic BacktestSettings BacktestSettings\n```\nReturns the backtest settings used for the optimization.\n\n### CompiledStrategy\n```csharp\npublic StrategyBase CompiledStrategy\n```\nReturns the compiled strategy being optimized.\n\n### OptimizationMethod\n```csharp\npublic OptimizerBase OptimizationMethod\n```\nReturns the optimizer used for the optimization.\n\n### PositionSize\n```csharp\npublic PositionSize PositionSize\n```\nReturns the position sizing configuration used in the optimization.\n\n### ScoreCard\n"
    }
  },
  {
    "pageContent": "rp\npublic BacktestSettings BacktestSettings\n```\nReturns the backtest settings used for the optimization.\n\n### CompiledStrategy\n```csharp\npublic StrategyBase CompiledStrategy\n```\nReturns the compiled strategy being optimized.\n\n### OptimizationMethod\n```csharp\npublic OptimizerBase OptimizationMethod\n```\nReturns the optimizer used for the optimization.\n\n### PositionSize\n```csharp\npublic PositionSize PositionSize\n```\nReturns the position sizing configuration used in the optimization.\n\n### ScoreCard\n\n\n```csharp\npublic ScoreCardBase ScoreCard\n\n```",
    "metadata": {
      "id": "wfo-optimizer",
      "title": "wfo-optimizer",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wfo-optimizer.md",
      "chunkIndex": "code-context-4",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public List<BarHistory> SymbolData\n",
    "metadata": {
      "id": "wfo-optimizer",
      "title": "wfo-optimizer",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wfo-optimizer.md",
      "chunkIndex": "code-5",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "tegy\n```csharp\npublic StrategyBase CompiledStrategy\n```\nReturns the compiled strategy being optimized.\n\n### OptimizationMethod\n```csharp\npublic OptimizerBase OptimizationMethod\n```\nReturns the optimizer used for the optimization.\n\n### PositionSize\n```csharp\npublic PositionSize PositionSize\n```\nReturns the position sizing configuration used in the optimization.\n\n### ScoreCard\n```csharp\npublic ScoreCardBase ScoreCard\n```\nReturns the ScoreCard used to evaluate strategy performance.\n\n### SymbolData\n"
    }
  },
  {
    "pageContent": "tegy\n```csharp\npublic StrategyBase CompiledStrategy\n```\nReturns the compiled strategy being optimized.\n\n### OptimizationMethod\n```csharp\npublic OptimizerBase OptimizationMethod\n```\nReturns the optimizer used for the optimization.\n\n### PositionSize\n```csharp\npublic PositionSize PositionSize\n```\nReturns the position sizing configuration used in the optimization.\n\n### ScoreCard\n```csharp\npublic ScoreCardBase ScoreCard\n```\nReturns the ScoreCard used to evaluate strategy performance.\n\n### SymbolData\n\n\n```csharp\npublic List<BarHistory> SymbolData\n\n```",
    "metadata": {
      "id": "wfo-optimizer",
      "title": "wfo-optimizer",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wfo-optimizer.md",
      "chunkIndex": "code-context-5",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public DataSet DataSet\n",
    "metadata": {
      "id": "wfo-optimizer",
      "title": "wfo-optimizer",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wfo-optimizer.md",
      "chunkIndex": "code-6",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "\npublic OptimizerBase OptimizationMethod\n```\nReturns the optimizer used for the optimization.\n\n### PositionSize\n```csharp\npublic PositionSize PositionSize\n```\nReturns the position sizing configuration used in the optimization.\n\n### ScoreCard\n```csharp\npublic ScoreCardBase ScoreCard\n```\nReturns the ScoreCard used to evaluate strategy performance.\n\n### SymbolData\n```csharp\npublic List<BarHistory> SymbolData\n```\nContains the historical data being optimized.\n\n## WFO-Specific Properties\n\n### DataSet\n"
    }
  },
  {
    "pageContent": "\npublic OptimizerBase OptimizationMethod\n```\nReturns the optimizer used for the optimization.\n\n### PositionSize\n```csharp\npublic PositionSize PositionSize\n```\nReturns the position sizing configuration used in the optimization.\n\n### ScoreCard\n```csharp\npublic ScoreCardBase ScoreCard\n```\nReturns the ScoreCard used to evaluate strategy performance.\n\n### SymbolData\n```csharp\npublic List<BarHistory> SymbolData\n```\nContains the historical data being optimized.\n\n## WFO-Specific Properties\n\n### DataSet\n\n\n```csharp\npublic DataSet DataSet\n\n```",
    "metadata": {
      "id": "wfo-optimizer",
      "title": "wfo-optimizer",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wfo-optimizer.md",
      "chunkIndex": "code-context-6",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public double InSamplePercent\n",
    "metadata": {
      "id": "wfo-optimizer",
      "title": "wfo-optimizer",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wfo-optimizer.md",
      "chunkIndex": "code-7",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "arp\npublic PositionSize PositionSize\n```\nReturns the position sizing configuration used in the optimization.\n\n### ScoreCard\n```csharp\npublic ScoreCardBase ScoreCard\n```\nReturns the ScoreCard used to evaluate strategy performance.\n\n### SymbolData\n```csharp\npublic List<BarHistory> SymbolData\n```\nContains the historical data being optimized.\n\n## WFO-Specific Properties\n\n### DataSet\n```csharp\npublic DataSet DataSet\n```\nReturns the DataSet selected for walk-forward optimization.\n\n### InSamplePercent\n"
    }
  },
  {
    "pageContent": "arp\npublic PositionSize PositionSize\n```\nReturns the position sizing configuration used in the optimization.\n\n### ScoreCard\n```csharp\npublic ScoreCardBase ScoreCard\n```\nReturns the ScoreCard used to evaluate strategy performance.\n\n### SymbolData\n```csharp\npublic List<BarHistory> SymbolData\n```\nContains the historical data being optimized.\n\n## WFO-Specific Properties\n\n### DataSet\n```csharp\npublic DataSet DataSet\n```\nReturns the DataSet selected for walk-forward optimization.\n\n### InSamplePercent\n\n\n```csharp\npublic double InSamplePercent\n\n```",
    "metadata": {
      "id": "wfo-optimizer",
      "title": "wfo-optimizer",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wfo-optimizer.md",
      "chunkIndex": "code-context-7",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public double OutOfSamplePercent\n",
    "metadata": {
      "id": "wfo-optimizer",
      "title": "wfo-optimizer",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wfo-optimizer.md",
      "chunkIndex": "code-8",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ard\n```csharp\npublic ScoreCardBase ScoreCard\n```\nReturns the ScoreCard used to evaluate strategy performance.\n\n### SymbolData\n```csharp\npublic List<BarHistory> SymbolData\n```\nContains the historical data being optimized.\n\n## WFO-Specific Properties\n\n### DataSet\n```csharp\npublic DataSet DataSet\n```\nReturns the DataSet selected for walk-forward optimization.\n\n### InSamplePercent\n```csharp\npublic double InSamplePercent\n```\nPercentage of data used for in-sample optimization.\n\n### OutOfSamplePercent\n"
    }
  },
  {
    "pageContent": "ard\n```csharp\npublic ScoreCardBase ScoreCard\n```\nReturns the ScoreCard used to evaluate strategy performance.\n\n### SymbolData\n```csharp\npublic List<BarHistory> SymbolData\n```\nContains the historical data being optimized.\n\n## WFO-Specific Properties\n\n### DataSet\n```csharp\npublic DataSet DataSet\n```\nReturns the DataSet selected for walk-forward optimization.\n\n### InSamplePercent\n```csharp\npublic double InSamplePercent\n```\nPercentage of data used for in-sample optimization.\n\n### OutOfSamplePercent\n\n\n```csharp\npublic double OutOfSamplePercent\n\n```",
    "metadata": {
      "id": "wfo-optimizer",
      "title": "wfo-optimizer",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wfo-optimizer.md",
      "chunkIndex": "code-context-8",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public int Intervals\n",
    "metadata": {
      "id": "wfo-optimizer",
      "title": "wfo-optimizer",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wfo-optimizer.md",
      "chunkIndex": "code-9",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ymbolData\n```csharp\npublic List<BarHistory> SymbolData\n```\nContains the historical data being optimized.\n\n## WFO-Specific Properties\n\n### DataSet\n```csharp\npublic DataSet DataSet\n```\nReturns the DataSet selected for walk-forward optimization.\n\n### InSamplePercent\n```csharp\npublic double InSamplePercent\n```\nPercentage of data used for in-sample optimization.\n\n### OutOfSamplePercent\n```csharp\npublic double OutOfSamplePercent\n```\nPercentage of data used for out-of-sample validation.\n\n### Intervals\n"
    }
  },
  {
    "pageContent": "ymbolData\n```csharp\npublic List<BarHistory> SymbolData\n```\nContains the historical data being optimized.\n\n## WFO-Specific Properties\n\n### DataSet\n```csharp\npublic DataSet DataSet\n```\nReturns the DataSet selected for walk-forward optimization.\n\n### InSamplePercent\n```csharp\npublic double InSamplePercent\n```\nPercentage of data used for in-sample optimization.\n\n### OutOfSamplePercent\n```csharp\npublic double OutOfSamplePercent\n```\nPercentage of data used for out-of-sample validation.\n\n### Intervals\n\n\n```csharp\npublic int Intervals\n\n```",
    "metadata": {
      "id": "wfo-optimizer",
      "title": "wfo-optimizer",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wfo-optimizer.md",
      "chunkIndex": "code-context-9",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public WFOWindowTypes WindowType\n",
    "metadata": {
      "id": "wfo-optimizer",
      "title": "wfo-optimizer",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wfo-optimizer.md",
      "chunkIndex": "code-10",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "FO-Specific Properties\n\n### DataSet\n```csharp\npublic DataSet DataSet\n```\nReturns the DataSet selected for walk-forward optimization.\n\n### InSamplePercent\n```csharp\npublic double InSamplePercent\n```\nPercentage of data used for in-sample optimization.\n\n### OutOfSamplePercent\n```csharp\npublic double OutOfSamplePercent\n```\nPercentage of data used for out-of-sample validation.\n\n### Intervals\n```csharp\npublic int Intervals\n```\nNumber of intervals used in the walk-forward optimization.\n\n### WindowType\n"
    }
  },
  {
    "pageContent": "FO-Specific Properties\n\n### DataSet\n```csharp\npublic DataSet DataSet\n```\nReturns the DataSet selected for walk-forward optimization.\n\n### InSamplePercent\n```csharp\npublic double InSamplePercent\n```\nPercentage of data used for in-sample optimization.\n\n### OutOfSamplePercent\n```csharp\npublic double OutOfSamplePercent\n```\nPercentage of data used for out-of-sample validation.\n\n### Intervals\n```csharp\npublic int Intervals\n```\nNumber of intervals used in the walk-forward optimization.\n\n### WindowType\n\n\n```csharp\npublic WFOWindowTypes WindowType\n\n```",
    "metadata": {
      "id": "wfo-optimizer",
      "title": "wfo-optimizer",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wfo-optimizer.md",
      "chunkIndex": "code-context-10",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public string Mode\n",
    "metadata": {
      "id": "wfo-optimizer",
      "title": "wfo-optimizer",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wfo-optimizer.md",
      "chunkIndex": "code-11",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "optimization.\n\n### OutOfSamplePercent\n```csharp\npublic double OutOfSamplePercent\n```\nPercentage of data used for out-of-sample validation.\n\n### Intervals\n```csharp\npublic int Intervals\n```\nNumber of intervals used in the walk-forward optimization.\n\n### WindowType\n```csharp\npublic WFOWindowTypes WindowType\n```\nDetermines the windowing approach for optimization.\n\n**Possible Values:**\n- `Expanding`: Each interval includes all previous data\n- `Sliding`: Fixed-size window moves across data\n\n### Mode\n"
    }
  },
  {
    "pageContent": "optimization.\n\n### OutOfSamplePercent\n```csharp\npublic double OutOfSamplePercent\n```\nPercentage of data used for out-of-sample validation.\n\n### Intervals\n```csharp\npublic int Intervals\n```\nNumber of intervals used in the walk-forward optimization.\n\n### WindowType\n```csharp\npublic WFOWindowTypes WindowType\n```\nDetermines the windowing approach for optimization.\n\n**Possible Values:**\n- `Expanding`: Each interval includes all previous data\n- `Sliding`: Fixed-size window moves across data\n\n### Mode\n\n\n```csharp\npublic string Mode\n\n```",
    "metadata": {
      "id": "wfo-optimizer",
      "title": "wfo-optimizer",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wfo-optimizer.md",
      "chunkIndex": "code-context-11",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public WFOResultSelectorBase Selector\n",
    "metadata": {
      "id": "wfo-optimizer",
      "title": "wfo-optimizer",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wfo-optimizer.md",
      "chunkIndex": "code-12",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ta used for out-of-sample validation.\n\n### Intervals\n```csharp\npublic int Intervals\n```\nNumber of intervals used in the walk-forward optimization.\n\n### WindowType\n```csharp\npublic WFOWindowTypes WindowType\n```\nDetermines the windowing approach for optimization.\n\n**Possible Values:**\n- `Expanding`: Each interval includes all previous data\n- `Sliding`: Fixed-size window moves across data\n\n### Mode\n```csharp\npublic string Mode\n```\nDefines how the best optimization result is selected.\n\n### Selector\n"
    }
  },
  {
    "pageContent": "ta used for out-of-sample validation.\n\n### Intervals\n```csharp\npublic int Intervals\n```\nNumber of intervals used in the walk-forward optimization.\n\n### WindowType\n```csharp\npublic WFOWindowTypes WindowType\n```\nDetermines the windowing approach for optimization.\n\n**Possible Values:**\n- `Expanding`: Each interval includes all previous data\n- `Sliding`: Fixed-size window moves across data\n\n### Mode\n```csharp\npublic string Mode\n```\nDefines how the best optimization result is selected.\n\n### Selector\n\n\n```csharp\npublic WFOResultSelectorBase Selector\n\n```",
    "metadata": {
      "id": "wfo-optimizer",
      "title": "wfo-optimizer",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wfo-optimizer.md",
      "chunkIndex": "code-context-12",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public List<WFOResult> WFOResults\n",
    "metadata": {
      "id": "wfo-optimizer",
      "title": "wfo-optimizer",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wfo-optimizer.md",
      "chunkIndex": "code-13",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "optimization.\n\n### WindowType\n```csharp\npublic WFOWindowTypes WindowType\n```\nDetermines the windowing approach for optimization.\n\n**Possible Values:**\n- `Expanding`: Each interval includes all previous data\n- `Sliding`: Fixed-size window moves across data\n\n### Mode\n```csharp\npublic string Mode\n```\nDefines how the best optimization result is selected.\n\n### Selector\n```csharp\npublic WFOResultSelectorBase Selector\n```\nDetermines the criteria for selecting the best optimization run.\n\n### WFOResults\n"
    }
  },
  {
    "pageContent": "optimization.\n\n### WindowType\n```csharp\npublic WFOWindowTypes WindowType\n```\nDetermines the windowing approach for optimization.\n\n**Possible Values:**\n- `Expanding`: Each interval includes all previous data\n- `Sliding`: Fixed-size window moves across data\n\n### Mode\n```csharp\npublic string Mode\n```\nDefines how the best optimization result is selected.\n\n### Selector\n```csharp\npublic WFOResultSelectorBase Selector\n```\nDetermines the criteria for selecting the best optimization run.\n\n### WFOResults\n\n\n```csharp\npublic List<WFOResult> WFOResults\n\n```",
    "metadata": {
      "id": "wfo-optimizer",
      "title": "wfo-optimizer",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wfo-optimizer.md",
      "chunkIndex": "code-context-13",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public void ReportEstimatedCompletion(double value)\n",
    "metadata": {
      "id": "wfo-optimizer",
      "title": "wfo-optimizer",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wfo-optimizer.md",
      "chunkIndex": "code-14",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "*\n- `Expanding`: Each interval includes all previous data\n- `Sliding`: Fixed-size window moves across data\n\n### Mode\n```csharp\npublic string Mode\n```\nDefines how the best optimization result is selected.\n\n### Selector\n```csharp\npublic WFOResultSelectorBase Selector\n```\nDetermines the criteria for selecting the best optimization run.\n\n### WFOResults\n```csharp\npublic List<WFOResult> WFOResults\n```\nContains the best results for each optimization interval.\n\n## Methods\n\n### ReportEstimatedCompletion\n"
    }
  },
  {
    "pageContent": "*\n- `Expanding`: Each interval includes all previous data\n- `Sliding`: Fixed-size window moves across data\n\n### Mode\n```csharp\npublic string Mode\n```\nDefines how the best optimization result is selected.\n\n### Selector\n```csharp\npublic WFOResultSelectorBase Selector\n```\nDetermines the criteria for selecting the best optimization run.\n\n### WFOResults\n```csharp\npublic List<WFOResult> WFOResults\n```\nContains the best results for each optimization interval.\n\n## Methods\n\n### ReportEstimatedCompletion\n\n\n```csharp\npublic void ReportEstimatedCompletion(double value)\n\n```",
    "metadata": {
      "id": "wfo-optimizer",
      "title": "wfo-optimizer",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wfo-optimizer.md",
      "chunkIndex": "code-context-14",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public class WFOOptimizationExample\n{\n    public void PerformWalkForwardOptimization(Strategy strategy, DataSet dataSet)\n    {\n        // Configure WFO parameters\n        var wfoOptimizer = new WFOOptimizer\n        {\n            DataSet = dataSet,\n            InSamplePercent = 70,\n            OutOfSamplePercent = 30,\n            Intervals = 10,\n            WindowType = WFOWindowTypes.Sliding\n        };\n\n        // Perform optimization\n        wfoOptimizer.Run(strategy);\n\n        // Analyze results\n        foreach (var result in wfoOptimizer.WFOResults)\n        {\n            Console.WriteLine($\"Interval {result.Interval}:\");\n            Console.WriteLine($\"  In-Sample Performance: {result.InSamplePerformance}\");\n            Console.WriteLine($\"  Out-of-Sample Performance: {result.OutOfSamplePerformance}\");\n        }\n    }\n}\n",
    "metadata": {
      "id": "wfo-optimizer",
      "title": "wfo-optimizer",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wfo-optimizer.md",
      "chunkIndex": "code-15",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "Base Selector\n```\nDetermines the criteria for selecting the best optimization run.\n\n### WFOResults\n```csharp\npublic List<WFOResult> WFOResults\n```\nContains the best results for each optimization interval.\n\n## Methods\n\n### ReportEstimatedCompletion\n```csharp\npublic void ReportEstimatedCompletion(double value)\n```\nAllows optimizers to report back their estimated completion percentage.\n\n**Parameters:**\n- `value`: Completion percentage (0-100)\n\n## Usage Examples\n\n### Basic Walk-Forward Optimization\n"
    }
  },
  {
    "pageContent": "Base Selector\n```\nDetermines the criteria for selecting the best optimization run.\n\n### WFOResults\n```csharp\npublic List<WFOResult> WFOResults\n```\nContains the best results for each optimization interval.\n\n## Methods\n\n### ReportEstimatedCompletion\n```csharp\npublic void ReportEstimatedCompletion(double value)\n```\nAllows optimizers to report back their estimated completion percentage.\n\n**Parameters:**\n- `value`: Completion percentage (0-100)\n\n## Usage Examples\n\n### Basic Walk-Forward Optimization\n\n\n```csharp\npublic class WFOOptimizationExample\n{\n    public void PerformWalkForwardOptimization(Strategy strategy, DataSet dataSet)\n    {\n        // Configure WFO parameters\n        var wfoOptimizer = new WFOOptimizer\n        {\n            DataSet = dataSet,\n            InSamplePercent = 70,\n            OutOfSamplePercent = 30,\n            Intervals = 10,\n            WindowType = WFOWindowTypes.Sliding\n        };\n\n        // Perform optimization\n        wfoOptimizer.Run(strategy);\n\n        // Analyze results\n        foreach (var result in wfoOptimizer.WFOResults)\n        {\n            Console.WriteLine($\"Interval {result.Interval}:\");\n            Console.WriteLine($\"  In-Sample Performance: {result.InSamplePerformance}\");\n            Console.WriteLine($\"  Out-of-Sample Performance: {result.OutOfSamplePerformance}\");\n        }\n    }\n}\n\n```",
    "metadata": {
      "id": "wfo-optimizer",
      "title": "wfo-optimizer",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wfo-optimizer.md",
      "chunkIndex": "code-context-15",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public class AdvancedWFOAnalysis\n{\n    public void SelectBestStrategy(WFOOptimizer wfoOptimizer)\n    {\n        // Custom result selector\n        var bestResult = wfoOptimizer.WFOResults\n            .OrderByDescending(r => r.OutOfSamplePerformance)\n            .ThenByDescending(r => r.InSamplePerformance)\n            .FirstOrDefault();\n\n        if (bestResult != null)\n        {\n            Console.WriteLine(\"Best WFO Strategy:\");\n            Console.WriteLine($\"  Interval: {bestResult.Interval}\");\n            Console.WriteLine($\"  In-Sample Performance: {bestResult.InSamplePerformance}\");\n            Console.WriteLine($\"  Out-of-Sample Performance: {bestResult.OutOfSamplePerformance}\");\n        }\n    }\n}\n",
    "metadata": {
      "id": "wfo-optimizer",
      "title": "wfo-optimizer",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wfo-optimizer.md",
      "chunkIndex": "code-16",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "indowTypes.Sliding\n        };\n\n        // Perform optimization\n        wfoOptimizer.Run(strategy);\n\n        // Analyze results\n        foreach (var result in wfoOptimizer.WFOResults)\n        {\n            Console.WriteLine($\"Interval {result.Interval}:\");\n            Console.WriteLine($\"  In-Sample Performance: {result.InSamplePerformance}\");\n            Console.WriteLine($\"  Out-of-Sample Performance: {result.OutOfSamplePerformance}\");\n        }\n    }\n}\n```\n\n### Advanced WFO Strategy Selection\n"
    }
  },
  {
    "pageContent": "indowTypes.Sliding\n        };\n\n        // Perform optimization\n        wfoOptimizer.Run(strategy);\n\n        // Analyze results\n        foreach (var result in wfoOptimizer.WFOResults)\n        {\n            Console.WriteLine($\"Interval {result.Interval}:\");\n            Console.WriteLine($\"  In-Sample Performance: {result.InSamplePerformance}\");\n            Console.WriteLine($\"  Out-of-Sample Performance: {result.OutOfSamplePerformance}\");\n        }\n    }\n}\n```\n\n### Advanced WFO Strategy Selection\n\n\n```csharp\npublic class AdvancedWFOAnalysis\n{\n    public void SelectBestStrategy(WFOOptimizer wfoOptimizer)\n    {\n        // Custom result selector\n        var bestResult = wfoOptimizer.WFOResults\n            .OrderByDescending(r => r.OutOfSamplePerformance)\n            .ThenByDescending(r => r.InSamplePerformance)\n            .FirstOrDefault();\n\n        if (bestResult != null)\n        {\n            Console.WriteLine(\"Best WFO Strategy:\");\n            Console.WriteLine($\"  Interval: {bestResult.Interval}\");\n            Console.WriteLine($\"  In-Sample Performance: {bestResult.InSamplePerformance}\");\n            Console.WriteLine($\"  Out-of-Sample Performance: {bestResult.OutOfSamplePerformance}\");\n        }\n    }\n}\n\n```",
    "metadata": {
      "id": "wfo-optimizer",
      "title": "wfo-optimizer",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wfo-optimizer.md",
      "chunkIndex": "code-context-16",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "# WFOResult Class\n\n**Namespace:** WealthLab.Backtest  \n**Parent:** OptimizationResult\n\nThe `WFOResult` class encapsulates the performance results and detailed information for a single Walk-Forward Optimization (WFO) run.\n\n## Overview\n\n`WFOResult` provides comprehensive insights into:\n- In-sample and out-of-sample performance\n- Optimization interval details\n- Parameter values\n- Performance metrics\n\n## Properties\n\n### Performance Metrics\n\n#### AnnualizedReturn\n",
    "metadata": {
      "id": "wfo-result",
      "title": "wfo-result",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wfo-result.md",
      "chunkIndex": 0,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the annualized return (APR) for the optimization run.\n\n#### PerformanceMetrics\n",
    "metadata": {
      "id": "wfo-result",
      "title": "wfo-result",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wfo-result.md",
      "chunkIndex": 1,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nContains performance metrics determined by the ScoreCard used during optimization.\n\n#### MetricNames\n",
    "metadata": {
      "id": "wfo-result",
      "title": "wfo-result",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wfo-result.md",
      "chunkIndex": 2,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the list of performance metric names from the ScoreCard.\n\n#### WFOEfficiency\n",
    "metadata": {
      "id": "wfo-result",
      "title": "wfo-result",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wfo-result.md",
      "chunkIndex": 3,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nCalculates the Walk-Forward Optimization Efficiency.\n\n**Calculation:**\n- Percentage gain of out-of-sample annualized return over in-sample return\n\n## Optimization Interval Properties\n\n### IntervalNumber\n",
    "metadata": {
      "id": "wfo-result",
      "title": "wfo-result",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wfo-result.md",
      "chunkIndex": 4,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nThe interval number of the walk-forward optimization run.\n\n**Range:** 0 to (WFO Intervals - 1)\n\n### StartDate\n",
    "metadata": {
      "id": "wfo-result",
      "title": "wfo-result",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wfo-result.md",
      "chunkIndex": 5,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nStart date for the entire walk-forward optimization run.\n\n### EndDate\n",
    "metadata": {
      "id": "wfo-result",
      "title": "wfo-result",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wfo-result.md",
      "chunkIndex": 6,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nEnd date for the entire walk-forward optimization run.\n\n### TimeSpan\n",
    "metadata": {
      "id": "wfo-result",
      "title": "wfo-result",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wfo-result.md",
      "chunkIndex": 7,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nComplete time span of the walk-forward optimization run.\n\n## Sample-Specific Properties\n\n### IsInSample\n",
    "metadata": {
      "id": "wfo-result",
      "title": "wfo-result",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wfo-result.md",
      "chunkIndex": 8,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nIndicates whether the result represents in-sample or out-of-sample performance.\n\n### InSampleStartDate\n",
    "metadata": {
      "id": "wfo-result",
      "title": "wfo-result",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wfo-result.md",
      "chunkIndex": 9,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nStart date of the in-sample optimization period.\n\n### InSampleEndDate\n",
    "metadata": {
      "id": "wfo-result",
      "title": "wfo-result",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wfo-result.md",
      "chunkIndex": 10,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nEnd date of the in-sample optimization period.\n\n### OutOfSampleStartDate\n",
    "metadata": {
      "id": "wfo-result",
      "title": "wfo-result",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wfo-result.md",
      "chunkIndex": 11,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nStart date of the out-of-sample validation period.\n\n### OutOfSampleEndDate\n",
    "metadata": {
      "id": "wfo-result",
      "title": "wfo-result",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wfo-result.md",
      "chunkIndex": 12,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nEnd date of the out-of-sample validation period.\n\n## Optimization Details\n\n### BaseOptimization\n",
    "metadata": {
      "id": "wfo-result",
      "title": "wfo-result",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wfo-result.md",
      "chunkIndex": 13,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nContains the complete results of the in-sample optimization (only when `IsInSample` is true).\n\n### ParameterValues\n",
    "metadata": {
      "id": "wfo-result",
      "title": "wfo-result",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wfo-result.md",
      "chunkIndex": 14,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the parameter values used in this optimization run.\n\n### RunNumber\n",
    "metadata": {
      "id": "wfo-result",
      "title": "wfo-result",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wfo-result.md",
      "chunkIndex": 15,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nThe chronological run number of these results.\n\n### ErrorMessage\n",
    "metadata": {
      "id": "wfo-result",
      "title": "wfo-result",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wfo-result.md",
      "chunkIndex": 16,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nContains any error message if an exception occurred during optimization.\n\n## Usage Examples\n\n### Basic WFO Result Analysis\n",
    "metadata": {
      "id": "wfo-result",
      "title": "wfo-result",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wfo-result.md",
      "chunkIndex": 17,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n### Advanced WFO Result Filtering\n",
    "metadata": {
      "id": "wfo-result",
      "title": "wfo-result",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wfo-result.md",
      "chunkIndex": 18,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n## Best Practices\n\n1. **Performance Analysis**\n   - Compare in-sample and out-of-sample metrics\n   - Look for consistent performance across intervals\n   - Use multiple performance metrics\n\n2. **Efficiency Evaluation**\n   - Analyze WFO Efficiency carefully\n   - Be cautious of results with negative efficiency\n   - Consider the stability of annualized returns\n\n3. **Error Handling**\n   - Always check `ErrorMessage` for potential issues\n   - Validate optimization results thoroughly\n\n## Performance Considerations\n\n- Avoid excessive iterations through WFO results\n- Use efficient LINQ queries\n- Cache results when possible\n\n## Potential Pitfalls\n\n🚨 **Caution:**\n- High in-sample performance doesn't guarantee future success\n- Out-of-sample performance can differ significantly\n- Continuous monitoring is crucial\n\n## Notes\n\n- Provides detailed walk-forward optimization insights\n- Essential for strategy validation and selection\n- Helps reduce overfitting risks\n- Part of advanced algorithmic trading toolkit ",
    "metadata": {
      "id": "wfo-result",
      "title": "wfo-result",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wfo-result.md",
      "chunkIndex": 19,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "public double AnnualizedReturn\n",
    "metadata": {
      "id": "wfo-result",
      "title": "wfo-result",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wfo-result.md",
      "chunkIndex": "code-0",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "# WFOResult Class\n\n**Namespace:** WealthLab.Backtest  \n**Parent:** OptimizationResult\n\nThe `WFOResult` class encapsulates the performance results and detailed information for a single Walk-Forward Optimization (WFO) run.\n\n## Overview\n\n`WFOResult` provides comprehensive insights into:\n- In-sample and out-of-sample performance\n- Optimization interval details\n- Parameter values\n- Performance metrics\n\n## Properties\n\n### Performance Metrics\n\n#### AnnualizedReturn\n"
    }
  },
  {
    "pageContent": "# WFOResult Class\n\n**Namespace:** WealthLab.Backtest  \n**Parent:** OptimizationResult\n\nThe `WFOResult` class encapsulates the performance results and detailed information for a single Walk-Forward Optimization (WFO) run.\n\n## Overview\n\n`WFOResult` provides comprehensive insights into:\n- In-sample and out-of-sample performance\n- Optimization interval details\n- Parameter values\n- Performance metrics\n\n## Properties\n\n### Performance Metrics\n\n#### AnnualizedReturn\n\n\n```csharp\npublic double AnnualizedReturn\n\n```",
    "metadata": {
      "id": "wfo-result",
      "title": "wfo-result",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wfo-result.md",
      "chunkIndex": "code-context-0",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public Dictionary<string, double> PerformanceMetrics\n",
    "metadata": {
      "id": "wfo-result",
      "title": "wfo-result",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wfo-result.md",
      "chunkIndex": "code-1",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "Result` class encapsulates the performance results and detailed information for a single Walk-Forward Optimization (WFO) run.\n\n## Overview\n\n`WFOResult` provides comprehensive insights into:\n- In-sample and out-of-sample performance\n- Optimization interval details\n- Parameter values\n- Performance metrics\n\n## Properties\n\n### Performance Metrics\n\n#### AnnualizedReturn\n```csharp\npublic double AnnualizedReturn\n```\nReturns the annualized return (APR) for the optimization run.\n\n#### PerformanceMetrics\n"
    }
  },
  {
    "pageContent": "Result` class encapsulates the performance results and detailed information for a single Walk-Forward Optimization (WFO) run.\n\n## Overview\n\n`WFOResult` provides comprehensive insights into:\n- In-sample and out-of-sample performance\n- Optimization interval details\n- Parameter values\n- Performance metrics\n\n## Properties\n\n### Performance Metrics\n\n#### AnnualizedReturn\n```csharp\npublic double AnnualizedReturn\n```\nReturns the annualized return (APR) for the optimization run.\n\n#### PerformanceMetrics\n\n\n```csharp\npublic Dictionary<string, double> PerformanceMetrics\n\n```",
    "metadata": {
      "id": "wfo-result",
      "title": "wfo-result",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wfo-result.md",
      "chunkIndex": "code-context-1",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public List<string> MetricNames\n",
    "metadata": {
      "id": "wfo-result",
      "title": "wfo-result",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wfo-result.md",
      "chunkIndex": "code-2",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ensive insights into:\n- In-sample and out-of-sample performance\n- Optimization interval details\n- Parameter values\n- Performance metrics\n\n## Properties\n\n### Performance Metrics\n\n#### AnnualizedReturn\n```csharp\npublic double AnnualizedReturn\n```\nReturns the annualized return (APR) for the optimization run.\n\n#### PerformanceMetrics\n```csharp\npublic Dictionary<string, double> PerformanceMetrics\n```\nContains performance metrics determined by the ScoreCard used during optimization.\n\n#### MetricNames\n"
    }
  },
  {
    "pageContent": "ensive insights into:\n- In-sample and out-of-sample performance\n- Optimization interval details\n- Parameter values\n- Performance metrics\n\n## Properties\n\n### Performance Metrics\n\n#### AnnualizedReturn\n```csharp\npublic double AnnualizedReturn\n```\nReturns the annualized return (APR) for the optimization run.\n\n#### PerformanceMetrics\n```csharp\npublic Dictionary<string, double> PerformanceMetrics\n```\nContains performance metrics determined by the ScoreCard used during optimization.\n\n#### MetricNames\n\n\n```csharp\npublic List<string> MetricNames\n\n```",
    "metadata": {
      "id": "wfo-result",
      "title": "wfo-result",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wfo-result.md",
      "chunkIndex": "code-context-2",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public double WFOEfficiency\n",
    "metadata": {
      "id": "wfo-result",
      "title": "wfo-result",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wfo-result.md",
      "chunkIndex": "code-3",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "trics\n\n## Properties\n\n### Performance Metrics\n\n#### AnnualizedReturn\n```csharp\npublic double AnnualizedReturn\n```\nReturns the annualized return (APR) for the optimization run.\n\n#### PerformanceMetrics\n```csharp\npublic Dictionary<string, double> PerformanceMetrics\n```\nContains performance metrics determined by the ScoreCard used during optimization.\n\n#### MetricNames\n```csharp\npublic List<string> MetricNames\n```\nReturns the list of performance metric names from the ScoreCard.\n\n#### WFOEfficiency\n"
    }
  },
  {
    "pageContent": "trics\n\n## Properties\n\n### Performance Metrics\n\n#### AnnualizedReturn\n```csharp\npublic double AnnualizedReturn\n```\nReturns the annualized return (APR) for the optimization run.\n\n#### PerformanceMetrics\n```csharp\npublic Dictionary<string, double> PerformanceMetrics\n```\nContains performance metrics determined by the ScoreCard used during optimization.\n\n#### MetricNames\n```csharp\npublic List<string> MetricNames\n```\nReturns the list of performance metric names from the ScoreCard.\n\n#### WFOEfficiency\n\n\n```csharp\npublic double WFOEfficiency\n\n```",
    "metadata": {
      "id": "wfo-result",
      "title": "wfo-result",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wfo-result.md",
      "chunkIndex": "code-context-3",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public int IntervalNumber\n",
    "metadata": {
      "id": "wfo-result",
      "title": "wfo-result",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wfo-result.md",
      "chunkIndex": "code-4",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "PerformanceMetrics\n```\nContains performance metrics determined by the ScoreCard used during optimization.\n\n#### MetricNames\n```csharp\npublic List<string> MetricNames\n```\nReturns the list of performance metric names from the ScoreCard.\n\n#### WFOEfficiency\n```csharp\npublic double WFOEfficiency\n```\nCalculates the Walk-Forward Optimization Efficiency.\n\n**Calculation:**\n- Percentage gain of out-of-sample annualized return over in-sample return\n\n## Optimization Interval Properties\n\n### IntervalNumber\n"
    }
  },
  {
    "pageContent": "PerformanceMetrics\n```\nContains performance metrics determined by the ScoreCard used during optimization.\n\n#### MetricNames\n```csharp\npublic List<string> MetricNames\n```\nReturns the list of performance metric names from the ScoreCard.\n\n#### WFOEfficiency\n```csharp\npublic double WFOEfficiency\n```\nCalculates the Walk-Forward Optimization Efficiency.\n\n**Calculation:**\n- Percentage gain of out-of-sample annualized return over in-sample return\n\n## Optimization Interval Properties\n\n### IntervalNumber\n\n\n```csharp\npublic int IntervalNumber\n\n```",
    "metadata": {
      "id": "wfo-result",
      "title": "wfo-result",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wfo-result.md",
      "chunkIndex": "code-context-4",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public DateTime StartDate\n",
    "metadata": {
      "id": "wfo-result",
      "title": "wfo-result",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wfo-result.md",
      "chunkIndex": "code-5",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ng> MetricNames\n```\nReturns the list of performance metric names from the ScoreCard.\n\n#### WFOEfficiency\n```csharp\npublic double WFOEfficiency\n```\nCalculates the Walk-Forward Optimization Efficiency.\n\n**Calculation:**\n- Percentage gain of out-of-sample annualized return over in-sample return\n\n## Optimization Interval Properties\n\n### IntervalNumber\n```csharp\npublic int IntervalNumber\n```\nThe interval number of the walk-forward optimization run.\n\n**Range:** 0 to (WFO Intervals - 1)\n\n### StartDate\n"
    }
  },
  {
    "pageContent": "ng> MetricNames\n```\nReturns the list of performance metric names from the ScoreCard.\n\n#### WFOEfficiency\n```csharp\npublic double WFOEfficiency\n```\nCalculates the Walk-Forward Optimization Efficiency.\n\n**Calculation:**\n- Percentage gain of out-of-sample annualized return over in-sample return\n\n## Optimization Interval Properties\n\n### IntervalNumber\n```csharp\npublic int IntervalNumber\n```\nThe interval number of the walk-forward optimization run.\n\n**Range:** 0 to (WFO Intervals - 1)\n\n### StartDate\n\n\n```csharp\npublic DateTime StartDate\n\n```",
    "metadata": {
      "id": "wfo-result",
      "title": "wfo-result",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wfo-result.md",
      "chunkIndex": "code-context-5",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public DateTime EndDate\n",
    "metadata": {
      "id": "wfo-result",
      "title": "wfo-result",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wfo-result.md",
      "chunkIndex": "code-6",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "harp\npublic double WFOEfficiency\n```\nCalculates the Walk-Forward Optimization Efficiency.\n\n**Calculation:**\n- Percentage gain of out-of-sample annualized return over in-sample return\n\n## Optimization Interval Properties\n\n### IntervalNumber\n```csharp\npublic int IntervalNumber\n```\nThe interval number of the walk-forward optimization run.\n\n**Range:** 0 to (WFO Intervals - 1)\n\n### StartDate\n```csharp\npublic DateTime StartDate\n```\nStart date for the entire walk-forward optimization run.\n\n### EndDate\n"
    }
  },
  {
    "pageContent": "harp\npublic double WFOEfficiency\n```\nCalculates the Walk-Forward Optimization Efficiency.\n\n**Calculation:**\n- Percentage gain of out-of-sample annualized return over in-sample return\n\n## Optimization Interval Properties\n\n### IntervalNumber\n```csharp\npublic int IntervalNumber\n```\nThe interval number of the walk-forward optimization run.\n\n**Range:** 0 to (WFO Intervals - 1)\n\n### StartDate\n```csharp\npublic DateTime StartDate\n```\nStart date for the entire walk-forward optimization run.\n\n### EndDate\n\n\n```csharp\npublic DateTime EndDate\n\n```",
    "metadata": {
      "id": "wfo-result",
      "title": "wfo-result",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wfo-result.md",
      "chunkIndex": "code-context-6",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public TimeSpan TimeSpan\n",
    "metadata": {
      "id": "wfo-result",
      "title": "wfo-result",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wfo-result.md",
      "chunkIndex": "code-7",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "\n- Percentage gain of out-of-sample annualized return over in-sample return\n\n## Optimization Interval Properties\n\n### IntervalNumber\n```csharp\npublic int IntervalNumber\n```\nThe interval number of the walk-forward optimization run.\n\n**Range:** 0 to (WFO Intervals - 1)\n\n### StartDate\n```csharp\npublic DateTime StartDate\n```\nStart date for the entire walk-forward optimization run.\n\n### EndDate\n```csharp\npublic DateTime EndDate\n```\nEnd date for the entire walk-forward optimization run.\n\n### TimeSpan\n"
    }
  },
  {
    "pageContent": "\n- Percentage gain of out-of-sample annualized return over in-sample return\n\n## Optimization Interval Properties\n\n### IntervalNumber\n```csharp\npublic int IntervalNumber\n```\nThe interval number of the walk-forward optimization run.\n\n**Range:** 0 to (WFO Intervals - 1)\n\n### StartDate\n```csharp\npublic DateTime StartDate\n```\nStart date for the entire walk-forward optimization run.\n\n### EndDate\n```csharp\npublic DateTime EndDate\n```\nEnd date for the entire walk-forward optimization run.\n\n### TimeSpan\n\n\n```csharp\npublic TimeSpan TimeSpan\n\n```",
    "metadata": {
      "id": "wfo-result",
      "title": "wfo-result",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wfo-result.md",
      "chunkIndex": "code-context-7",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public bool IsInSample\n",
    "metadata": {
      "id": "wfo-result",
      "title": "wfo-result",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wfo-result.md",
      "chunkIndex": "code-8",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "public int IntervalNumber\n```\nThe interval number of the walk-forward optimization run.\n\n**Range:** 0 to (WFO Intervals - 1)\n\n### StartDate\n```csharp\npublic DateTime StartDate\n```\nStart date for the entire walk-forward optimization run.\n\n### EndDate\n```csharp\npublic DateTime EndDate\n```\nEnd date for the entire walk-forward optimization run.\n\n### TimeSpan\n```csharp\npublic TimeSpan TimeSpan\n```\nComplete time span of the walk-forward optimization run.\n\n## Sample-Specific Properties\n\n### IsInSample\n"
    }
  },
  {
    "pageContent": "public int IntervalNumber\n```\nThe interval number of the walk-forward optimization run.\n\n**Range:** 0 to (WFO Intervals - 1)\n\n### StartDate\n```csharp\npublic DateTime StartDate\n```\nStart date for the entire walk-forward optimization run.\n\n### EndDate\n```csharp\npublic DateTime EndDate\n```\nEnd date for the entire walk-forward optimization run.\n\n### TimeSpan\n```csharp\npublic TimeSpan TimeSpan\n```\nComplete time span of the walk-forward optimization run.\n\n## Sample-Specific Properties\n\n### IsInSample\n\n\n```csharp\npublic bool IsInSample\n\n```",
    "metadata": {
      "id": "wfo-result",
      "title": "wfo-result",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wfo-result.md",
      "chunkIndex": "code-context-8",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public DateTime InSampleStartDate\n",
    "metadata": {
      "id": "wfo-result",
      "title": "wfo-result",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wfo-result.md",
      "chunkIndex": "code-9",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "```csharp\npublic DateTime StartDate\n```\nStart date for the entire walk-forward optimization run.\n\n### EndDate\n```csharp\npublic DateTime EndDate\n```\nEnd date for the entire walk-forward optimization run.\n\n### TimeSpan\n```csharp\npublic TimeSpan TimeSpan\n```\nComplete time span of the walk-forward optimization run.\n\n## Sample-Specific Properties\n\n### IsInSample\n```csharp\npublic bool IsInSample\n```\nIndicates whether the result represents in-sample or out-of-sample performance.\n\n### InSampleStartDate\n"
    }
  },
  {
    "pageContent": "```csharp\npublic DateTime StartDate\n```\nStart date for the entire walk-forward optimization run.\n\n### EndDate\n```csharp\npublic DateTime EndDate\n```\nEnd date for the entire walk-forward optimization run.\n\n### TimeSpan\n```csharp\npublic TimeSpan TimeSpan\n```\nComplete time span of the walk-forward optimization run.\n\n## Sample-Specific Properties\n\n### IsInSample\n```csharp\npublic bool IsInSample\n```\nIndicates whether the result represents in-sample or out-of-sample performance.\n\n### InSampleStartDate\n\n\n```csharp\npublic DateTime InSampleStartDate\n\n```",
    "metadata": {
      "id": "wfo-result",
      "title": "wfo-result",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wfo-result.md",
      "chunkIndex": "code-context-9",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public DateTime InSampleEndDate\n",
    "metadata": {
      "id": "wfo-result",
      "title": "wfo-result",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wfo-result.md",
      "chunkIndex": "code-10",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "p\npublic DateTime EndDate\n```\nEnd date for the entire walk-forward optimization run.\n\n### TimeSpan\n```csharp\npublic TimeSpan TimeSpan\n```\nComplete time span of the walk-forward optimization run.\n\n## Sample-Specific Properties\n\n### IsInSample\n```csharp\npublic bool IsInSample\n```\nIndicates whether the result represents in-sample or out-of-sample performance.\n\n### InSampleStartDate\n```csharp\npublic DateTime InSampleStartDate\n```\nStart date of the in-sample optimization period.\n\n### InSampleEndDate\n"
    }
  },
  {
    "pageContent": "p\npublic DateTime EndDate\n```\nEnd date for the entire walk-forward optimization run.\n\n### TimeSpan\n```csharp\npublic TimeSpan TimeSpan\n```\nComplete time span of the walk-forward optimization run.\n\n## Sample-Specific Properties\n\n### IsInSample\n```csharp\npublic bool IsInSample\n```\nIndicates whether the result represents in-sample or out-of-sample performance.\n\n### InSampleStartDate\n```csharp\npublic DateTime InSampleStartDate\n```\nStart date of the in-sample optimization period.\n\n### InSampleEndDate\n\n\n```csharp\npublic DateTime InSampleEndDate\n\n```",
    "metadata": {
      "id": "wfo-result",
      "title": "wfo-result",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wfo-result.md",
      "chunkIndex": "code-context-10",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public DateTime OutOfSampleStartDate\n",
    "metadata": {
      "id": "wfo-result",
      "title": "wfo-result",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wfo-result.md",
      "chunkIndex": "code-11",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "eSpan TimeSpan\n```\nComplete time span of the walk-forward optimization run.\n\n## Sample-Specific Properties\n\n### IsInSample\n```csharp\npublic bool IsInSample\n```\nIndicates whether the result represents in-sample or out-of-sample performance.\n\n### InSampleStartDate\n```csharp\npublic DateTime InSampleStartDate\n```\nStart date of the in-sample optimization period.\n\n### InSampleEndDate\n```csharp\npublic DateTime InSampleEndDate\n```\nEnd date of the in-sample optimization period.\n\n### OutOfSampleStartDate\n"
    }
  },
  {
    "pageContent": "eSpan TimeSpan\n```\nComplete time span of the walk-forward optimization run.\n\n## Sample-Specific Properties\n\n### IsInSample\n```csharp\npublic bool IsInSample\n```\nIndicates whether the result represents in-sample or out-of-sample performance.\n\n### InSampleStartDate\n```csharp\npublic DateTime InSampleStartDate\n```\nStart date of the in-sample optimization period.\n\n### InSampleEndDate\n```csharp\npublic DateTime InSampleEndDate\n```\nEnd date of the in-sample optimization period.\n\n### OutOfSampleStartDate\n\n\n```csharp\npublic DateTime OutOfSampleStartDate\n\n```",
    "metadata": {
      "id": "wfo-result",
      "title": "wfo-result",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wfo-result.md",
      "chunkIndex": "code-context-11",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public DateTime OutOfSampleEndDate\n",
    "metadata": {
      "id": "wfo-result",
      "title": "wfo-result",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wfo-result.md",
      "chunkIndex": "code-12",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "csharp\npublic bool IsInSample\n```\nIndicates whether the result represents in-sample or out-of-sample performance.\n\n### InSampleStartDate\n```csharp\npublic DateTime InSampleStartDate\n```\nStart date of the in-sample optimization period.\n\n### InSampleEndDate\n```csharp\npublic DateTime InSampleEndDate\n```\nEnd date of the in-sample optimization period.\n\n### OutOfSampleStartDate\n```csharp\npublic DateTime OutOfSampleStartDate\n```\nStart date of the out-of-sample validation period.\n\n### OutOfSampleEndDate\n"
    }
  },
  {
    "pageContent": "csharp\npublic bool IsInSample\n```\nIndicates whether the result represents in-sample or out-of-sample performance.\n\n### InSampleStartDate\n```csharp\npublic DateTime InSampleStartDate\n```\nStart date of the in-sample optimization period.\n\n### InSampleEndDate\n```csharp\npublic DateTime InSampleEndDate\n```\nEnd date of the in-sample optimization period.\n\n### OutOfSampleStartDate\n```csharp\npublic DateTime OutOfSampleStartDate\n```\nStart date of the out-of-sample validation period.\n\n### OutOfSampleEndDate\n\n\n```csharp\npublic DateTime OutOfSampleEndDate\n\n```",
    "metadata": {
      "id": "wfo-result",
      "title": "wfo-result",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wfo-result.md",
      "chunkIndex": "code-context-12",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public StrategyOptimizer BaseOptimization\n",
    "metadata": {
      "id": "wfo-result",
      "title": "wfo-result",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wfo-result.md",
      "chunkIndex": "code-13",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "p\npublic DateTime InSampleStartDate\n```\nStart date of the in-sample optimization period.\n\n### InSampleEndDate\n```csharp\npublic DateTime InSampleEndDate\n```\nEnd date of the in-sample optimization period.\n\n### OutOfSampleStartDate\n```csharp\npublic DateTime OutOfSampleStartDate\n```\nStart date of the out-of-sample validation period.\n\n### OutOfSampleEndDate\n```csharp\npublic DateTime OutOfSampleEndDate\n```\nEnd date of the out-of-sample validation period.\n\n## Optimization Details\n\n### BaseOptimization\n"
    }
  },
  {
    "pageContent": "p\npublic DateTime InSampleStartDate\n```\nStart date of the in-sample optimization period.\n\n### InSampleEndDate\n```csharp\npublic DateTime InSampleEndDate\n```\nEnd date of the in-sample optimization period.\n\n### OutOfSampleStartDate\n```csharp\npublic DateTime OutOfSampleStartDate\n```\nStart date of the out-of-sample validation period.\n\n### OutOfSampleEndDate\n```csharp\npublic DateTime OutOfSampleEndDate\n```\nEnd date of the out-of-sample validation period.\n\n## Optimization Details\n\n### BaseOptimization\n\n\n```csharp\npublic StrategyOptimizer BaseOptimization\n\n```",
    "metadata": {
      "id": "wfo-result",
      "title": "wfo-result",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wfo-result.md",
      "chunkIndex": "code-context-13",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public List<double> ParameterValues\n",
    "metadata": {
      "id": "wfo-result",
      "title": "wfo-result",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wfo-result.md",
      "chunkIndex": "code-14",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": " in-sample optimization period.\n\n### OutOfSampleStartDate\n```csharp\npublic DateTime OutOfSampleStartDate\n```\nStart date of the out-of-sample validation period.\n\n### OutOfSampleEndDate\n```csharp\npublic DateTime OutOfSampleEndDate\n```\nEnd date of the out-of-sample validation period.\n\n## Optimization Details\n\n### BaseOptimization\n```csharp\npublic StrategyOptimizer BaseOptimization\n```\nContains the complete results of the in-sample optimization (only when `IsInSample` is true).\n\n### ParameterValues\n"
    }
  },
  {
    "pageContent": " in-sample optimization period.\n\n### OutOfSampleStartDate\n```csharp\npublic DateTime OutOfSampleStartDate\n```\nStart date of the out-of-sample validation period.\n\n### OutOfSampleEndDate\n```csharp\npublic DateTime OutOfSampleEndDate\n```\nEnd date of the out-of-sample validation period.\n\n## Optimization Details\n\n### BaseOptimization\n```csharp\npublic StrategyOptimizer BaseOptimization\n```\nContains the complete results of the in-sample optimization (only when `IsInSample` is true).\n\n### ParameterValues\n\n\n```csharp\npublic List<double> ParameterValues\n\n```",
    "metadata": {
      "id": "wfo-result",
      "title": "wfo-result",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wfo-result.md",
      "chunkIndex": "code-context-14",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public int RunNumber\n",
    "metadata": {
      "id": "wfo-result",
      "title": "wfo-result",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wfo-result.md",
      "chunkIndex": "code-15",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "e out-of-sample validation period.\n\n### OutOfSampleEndDate\n```csharp\npublic DateTime OutOfSampleEndDate\n```\nEnd date of the out-of-sample validation period.\n\n## Optimization Details\n\n### BaseOptimization\n```csharp\npublic StrategyOptimizer BaseOptimization\n```\nContains the complete results of the in-sample optimization (only when `IsInSample` is true).\n\n### ParameterValues\n```csharp\npublic List<double> ParameterValues\n```\nReturns the parameter values used in this optimization run.\n\n### RunNumber\n"
    }
  },
  {
    "pageContent": "e out-of-sample validation period.\n\n### OutOfSampleEndDate\n```csharp\npublic DateTime OutOfSampleEndDate\n```\nEnd date of the out-of-sample validation period.\n\n## Optimization Details\n\n### BaseOptimization\n```csharp\npublic StrategyOptimizer BaseOptimization\n```\nContains the complete results of the in-sample optimization (only when `IsInSample` is true).\n\n### ParameterValues\n```csharp\npublic List<double> ParameterValues\n```\nReturns the parameter values used in this optimization run.\n\n### RunNumber\n\n\n```csharp\npublic int RunNumber\n\n```",
    "metadata": {
      "id": "wfo-result",
      "title": "wfo-result",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wfo-result.md",
      "chunkIndex": "code-context-15",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public string ErrorMessage\n",
    "metadata": {
      "id": "wfo-result",
      "title": "wfo-result",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wfo-result.md",
      "chunkIndex": "code-16",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ate\n```\nEnd date of the out-of-sample validation period.\n\n## Optimization Details\n\n### BaseOptimization\n```csharp\npublic StrategyOptimizer BaseOptimization\n```\nContains the complete results of the in-sample optimization (only when `IsInSample` is true).\n\n### ParameterValues\n```csharp\npublic List<double> ParameterValues\n```\nReturns the parameter values used in this optimization run.\n\n### RunNumber\n```csharp\npublic int RunNumber\n```\nThe chronological run number of these results.\n\n### ErrorMessage\n"
    }
  },
  {
    "pageContent": "ate\n```\nEnd date of the out-of-sample validation period.\n\n## Optimization Details\n\n### BaseOptimization\n```csharp\npublic StrategyOptimizer BaseOptimization\n```\nContains the complete results of the in-sample optimization (only when `IsInSample` is true).\n\n### ParameterValues\n```csharp\npublic List<double> ParameterValues\n```\nReturns the parameter values used in this optimization run.\n\n### RunNumber\n```csharp\npublic int RunNumber\n```\nThe chronological run number of these results.\n\n### ErrorMessage\n\n\n```csharp\npublic string ErrorMessage\n\n```",
    "metadata": {
      "id": "wfo-result",
      "title": "wfo-result",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wfo-result.md",
      "chunkIndex": "code-context-16",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public class WFOResultAnalyzer\n{\n    public void AnalyzeWFOResults(WFOOptimizer wfoOptimizer)\n    {\n        foreach (var result in wfoOptimizer.WFOResults)\n        {\n            Console.WriteLine($\"Interval {result.IntervalNumber}:\");\n            \n            // Performance metrics\n            Console.WriteLine(\"Performance Metrics:\");\n            foreach (var metric in result.MetricNames)\n            {\n                Console.WriteLine(\n                    $\"  {metric}: {result.PerformanceMetrics[metric]}\"\n                );\n            }\n            \n            // Date ranges\n            Console.WriteLine($\"In-Sample Period: \" +\n                $\"{result.InSampleStartDate} - {result.InSampleEndDate}\");\n            Console.WriteLine($\"Out-of-Sample Period: \" +\n                $\"{result.OutOfSampleStartDate} - {result.OutOfSampleEndDate}\");\n            \n            // Efficiency and return\n            Console.WriteLine($\"Annualized Return: {result.AnnualizedReturn:P2}\");\n            Console.WriteLine($\"WFO Efficiency: {result.WFOEfficiency:P2}\");\n        }\n    }\n}\n",
    "metadata": {
      "id": "wfo-result",
      "title": "wfo-result",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wfo-result.md",
      "chunkIndex": "code-17",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ains the complete results of the in-sample optimization (only when `IsInSample` is true).\n\n### ParameterValues\n```csharp\npublic List<double> ParameterValues\n```\nReturns the parameter values used in this optimization run.\n\n### RunNumber\n```csharp\npublic int RunNumber\n```\nThe chronological run number of these results.\n\n### ErrorMessage\n```csharp\npublic string ErrorMessage\n```\nContains any error message if an exception occurred during optimization.\n\n## Usage Examples\n\n### Basic WFO Result Analysis\n"
    }
  },
  {
    "pageContent": "ains the complete results of the in-sample optimization (only when `IsInSample` is true).\n\n### ParameterValues\n```csharp\npublic List<double> ParameterValues\n```\nReturns the parameter values used in this optimization run.\n\n### RunNumber\n```csharp\npublic int RunNumber\n```\nThe chronological run number of these results.\n\n### ErrorMessage\n```csharp\npublic string ErrorMessage\n```\nContains any error message if an exception occurred during optimization.\n\n## Usage Examples\n\n### Basic WFO Result Analysis\n\n\n```csharp\npublic class WFOResultAnalyzer\n{\n    public void AnalyzeWFOResults(WFOOptimizer wfoOptimizer)\n    {\n        foreach (var result in wfoOptimizer.WFOResults)\n        {\n            Console.WriteLine($\"Interval {result.IntervalNumber}:\");\n            \n            // Performance metrics\n            Console.WriteLine(\"Performance Metrics:\");\n            foreach (var metric in result.MetricNames)\n            {\n                Console.WriteLine(\n                    $\"  {metric}: {result.PerformanceMetrics[metric]}\"\n                );\n            }\n            \n            // Date ranges\n            Console.WriteLine($\"In-Sample Period: \" +\n                $\"{result.InSampleStartDate} - {result.InSampleEndDate}\");\n            Console.WriteLine($\"Out-of-Sample Period: \" +\n                $\"{result.OutOfSampleStartDate} - {result.OutOfSampleEndDate}\");\n            \n            // Efficiency and return\n            Console.WriteLine($\"Annualized Return: {result.AnnualizedReturn:P2}\");\n            Console.WriteLine($\"WFO Efficiency: {result.WFOEfficiency:P2}\");\n        }\n    }\n}\n\n```",
    "metadata": {
      "id": "wfo-result",
      "title": "wfo-result",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wfo-result.md",
      "chunkIndex": "code-context-17",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public class WFOResultFilter\n{\n    public List<WFOResult> FilterHighPerformanceResults(\n        List<WFOResult> wfoResults, \n        string performanceMetric, \n        double threshold)\n    {\n        return wfoResults\n            .Where(result => \n                result.PerformanceMetrics[performanceMetric] > threshold &&\n                result.WFOEfficiency > 0)\n            .OrderByDescending(result => \n                result.PerformanceMetrics[performanceMetric])\n            .ToList();\n    }\n}\n",
    "metadata": {
      "id": "wfo-result",
      "title": "wfo-result",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wfo-result.md",
      "chunkIndex": "code-18",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "Sample Period: \" +\n                $\"{result.InSampleStartDate} - {result.InSampleEndDate}\");\n            Console.WriteLine($\"Out-of-Sample Period: \" +\n                $\"{result.OutOfSampleStartDate} - {result.OutOfSampleEndDate}\");\n            \n            // Efficiency and return\n            Console.WriteLine($\"Annualized Return: {result.AnnualizedReturn:P2}\");\n            Console.WriteLine($\"WFO Efficiency: {result.WFOEfficiency:P2}\");\n        }\n    }\n}\n```\n\n### Advanced WFO Result Filtering\n"
    }
  },
  {
    "pageContent": "Sample Period: \" +\n                $\"{result.InSampleStartDate} - {result.InSampleEndDate}\");\n            Console.WriteLine($\"Out-of-Sample Period: \" +\n                $\"{result.OutOfSampleStartDate} - {result.OutOfSampleEndDate}\");\n            \n            // Efficiency and return\n            Console.WriteLine($\"Annualized Return: {result.AnnualizedReturn:P2}\");\n            Console.WriteLine($\"WFO Efficiency: {result.WFOEfficiency:P2}\");\n        }\n    }\n}\n```\n\n### Advanced WFO Result Filtering\n\n\n```csharp\npublic class WFOResultFilter\n{\n    public List<WFOResult> FilterHighPerformanceResults(\n        List<WFOResult> wfoResults, \n        string performanceMetric, \n        double threshold)\n    {\n        return wfoResults\n            .Where(result => \n                result.PerformanceMetrics[performanceMetric] > threshold &&\n                result.WFOEfficiency > 0)\n            .OrderByDescending(result => \n                result.PerformanceMetrics[performanceMetric])\n            .ToList();\n    }\n}\n\n```",
    "metadata": {
      "id": "wfo-result",
      "title": "wfo-result",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wfo-result.md",
      "chunkIndex": "code-context-18",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "# WLColor Class\n\n**Namespace:** WealthLab.Core  \n**Parent:** Object\n\nThe `WLColor` class represents a platform-independent color with support for alpha, red, green, and blue color components. It provides methods for color manipulation and brightness adjustment.\n\n## Constructors\n\n### Parameterless Constructor\n",
    "metadata": {
      "id": "wl-color",
      "title": "wl-color",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wl-color.md",
      "chunkIndex": 0,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nCreates a default color instance.\n\n### RGB Constructor\n",
    "metadata": {
      "id": "wl-color",
      "title": "wl-color",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wl-color.md",
      "chunkIndex": 1,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nCreates a color with specified red, green, and blue components. Alpha is set to 255 (fully opaque).\n\n**Parameters:**\n- `r`: Red component (0-255)\n- `g`: Green component (0-255)\n- `b`: Blue component (0-255)\n\n### ARGB Constructor\n",
    "metadata": {
      "id": "wl-color",
      "title": "wl-color",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wl-color.md",
      "chunkIndex": 2,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nCreates a color with specified alpha, red, green, and blue components.\n\n**Parameters:**\n- `a`: Alpha component (0-255)\n- `r`: Red component (0-255)\n- `g`: Green component (0-255)\n- `b`: Blue component (0-255)\n\n### Copy Constructor\n",
    "metadata": {
      "id": "wl-color",
      "title": "wl-color",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wl-color.md",
      "chunkIndex": 3,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nCreates a new `WLColor` instance based on an existing `WLColor`.\n\n**Parameters:**\n- `c`: Source `WLColor` to copy\n\n## Properties\n\n### A (Alpha)\n",
    "metadata": {
      "id": "wl-color",
      "title": "wl-color",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wl-color.md",
      "chunkIndex": 4,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nThe alpha component of the color. \n- 0: Fully transparent\n- 255: Fully opaque\n\n### R (Red)\n",
    "metadata": {
      "id": "wl-color",
      "title": "wl-color",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wl-color.md",
      "chunkIndex": 5,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nThe red color component (0-255).\n\n### G (Green)\n",
    "metadata": {
      "id": "wl-color",
      "title": "wl-color",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wl-color.md",
      "chunkIndex": 6,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nThe green color component (0-255).\n\n### B (Blue)\n",
    "metadata": {
      "id": "wl-color",
      "title": "wl-color",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wl-color.md",
      "chunkIndex": 7,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nThe blue color component (0-255).\n\n### Brightness\n",
    "metadata": {
      "id": "wl-color",
      "title": "wl-color",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wl-color.md",
      "chunkIndex": 8,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the brightness of the color, ranging from 0 to 1.\n\n## Color Manipulation Methods\n\n### Brighten\n",
    "metadata": {
      "id": "wl-color",
      "title": "wl-color",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wl-color.md",
      "chunkIndex": 9,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns a brightened version of the color.\n\n**Parameters:**\n- `min`: Optional minimum brightness value\n\n### Darken\n",
    "metadata": {
      "id": "wl-color",
      "title": "wl-color",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wl-color.md",
      "chunkIndex": 10,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns a darkened version of the color.\n\n**Parameters:**\n- `max`: Optional maximum brightness value\n\n### SetAlpha\n",
    "metadata": {
      "id": "wl-color",
      "title": "wl-color",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wl-color.md",
      "chunkIndex": 11,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns a new color with the specified alpha value.\n\n**Parameters:**\n- `a`: New alpha value (0-255)\n\n## Static Methods\n\n### FromArgb\n",
    "metadata": {
      "id": "wl-color",
      "title": "wl-color",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wl-color.md",
      "chunkIndex": 12,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nCreates a `WLColor` instance with specified color components.\n\n### FromRgb\n",
    "metadata": {
      "id": "wl-color",
      "title": "wl-color",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wl-color.md",
      "chunkIndex": 13,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nCreates a `WLColor` instance with specified RGB components and full opacity.\n\n### Parse\n",
    "metadata": {
      "id": "wl-color",
      "title": "wl-color",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wl-color.md",
      "chunkIndex": 14,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nParses a color from a string representation.\n\n## Usage Examples\n\n",
    "metadata": {
      "id": "wl-color",
      "title": "wl-color",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wl-color.md",
      "chunkIndex": 15,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n## Best Practices\n\n1. **Color Creation**\n   - Use appropriate constructors based on your color needs\n   - Consider alpha transparency for advanced rendering\n\n2. **Color Manipulation**\n   - Use `Brighten()` and `Darken()` for dynamic color adjustments\n   - Leverage `SetAlpha()` for transparency effects\n\n3. **Performance**\n   - Color instances are lightweight\n   - Reuse color instances when possible\n\n## Notes\n\n- Platform-independent color representation\n- Supports full alpha channel manipulation\n- Provides utility methods for color adjustment\n- Compatible with WealthLab 8's charting and visualization systems ",
    "metadata": {
      "id": "wl-color",
      "title": "wl-color",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wl-color.md",
      "chunkIndex": 16,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "public WLColor()\n",
    "metadata": {
      "id": "wl-color",
      "title": "wl-color",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wl-color.md",
      "chunkIndex": "code-0",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "# WLColor Class\n\n**Namespace:** WealthLab.Core  \n**Parent:** Object\n\nThe `WLColor` class represents a platform-independent color with support for alpha, red, green, and blue color components. It provides methods for color manipulation and brightness adjustment.\n\n## Constructors\n\n### Parameterless Constructor\n"
    }
  },
  {
    "pageContent": "# WLColor Class\n\n**Namespace:** WealthLab.Core  \n**Parent:** Object\n\nThe `WLColor` class represents a platform-independent color with support for alpha, red, green, and blue color components. It provides methods for color manipulation and brightness adjustment.\n\n## Constructors\n\n### Parameterless Constructor\n\n\n```csharp\npublic WLColor()\n\n```",
    "metadata": {
      "id": "wl-color",
      "title": "wl-color",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wl-color.md",
      "chunkIndex": "code-context-0",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public WLColor(byte r, byte g, byte b)\n",
    "metadata": {
      "id": "wl-color",
      "title": "wl-color",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wl-color.md",
      "chunkIndex": "code-1",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "# WLColor Class\n\n**Namespace:** WealthLab.Core  \n**Parent:** Object\n\nThe `WLColor` class represents a platform-independent color with support for alpha, red, green, and blue color components. It provides methods for color manipulation and brightness adjustment.\n\n## Constructors\n\n### Parameterless Constructor\n```csharp\npublic WLColor()\n```\nCreates a default color instance.\n\n### RGB Constructor\n"
    }
  },
  {
    "pageContent": "# WLColor Class\n\n**Namespace:** WealthLab.Core  \n**Parent:** Object\n\nThe `WLColor` class represents a platform-independent color with support for alpha, red, green, and blue color components. It provides methods for color manipulation and brightness adjustment.\n\n## Constructors\n\n### Parameterless Constructor\n```csharp\npublic WLColor()\n```\nCreates a default color instance.\n\n### RGB Constructor\n\n\n```csharp\npublic WLColor(byte r, byte g, byte b)\n\n```",
    "metadata": {
      "id": "wl-color",
      "title": "wl-color",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wl-color.md",
      "chunkIndex": "code-context-1",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public WLColor(byte a, byte r, byte g, byte b)\n",
    "metadata": {
      "id": "wl-color",
      "title": "wl-color",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wl-color.md",
      "chunkIndex": "code-2",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "r components. It provides methods for color manipulation and brightness adjustment.\n\n## Constructors\n\n### Parameterless Constructor\n```csharp\npublic WLColor()\n```\nCreates a default color instance.\n\n### RGB Constructor\n```csharp\npublic WLColor(byte r, byte g, byte b)\n```\nCreates a color with specified red, green, and blue components. Alpha is set to 255 (fully opaque).\n\n**Parameters:**\n- `r`: Red component (0-255)\n- `g`: Green component (0-255)\n- `b`: Blue component (0-255)\n\n### ARGB Constructor\n"
    }
  },
  {
    "pageContent": "r components. It provides methods for color manipulation and brightness adjustment.\n\n## Constructors\n\n### Parameterless Constructor\n```csharp\npublic WLColor()\n```\nCreates a default color instance.\n\n### RGB Constructor\n```csharp\npublic WLColor(byte r, byte g, byte b)\n```\nCreates a color with specified red, green, and blue components. Alpha is set to 255 (fully opaque).\n\n**Parameters:**\n- `r`: Red component (0-255)\n- `g`: Green component (0-255)\n- `b`: Blue component (0-255)\n\n### ARGB Constructor\n\n\n```csharp\npublic WLColor(byte a, byte r, byte g, byte b)\n\n```",
    "metadata": {
      "id": "wl-color",
      "title": "wl-color",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wl-color.md",
      "chunkIndex": "code-context-2",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public WLColor(WLColor c)\n",
    "metadata": {
      "id": "wl-color",
      "title": "wl-color",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wl-color.md",
      "chunkIndex": "code-3",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "specified red, green, and blue components. Alpha is set to 255 (fully opaque).\n\n**Parameters:**\n- `r`: Red component (0-255)\n- `g`: Green component (0-255)\n- `b`: Blue component (0-255)\n\n### ARGB Constructor\n```csharp\npublic WLColor(byte a, byte r, byte g, byte b)\n```\nCreates a color with specified alpha, red, green, and blue components.\n\n**Parameters:**\n- `a`: Alpha component (0-255)\n- `r`: Red component (0-255)\n- `g`: Green component (0-255)\n- `b`: Blue component (0-255)\n\n### Copy Constructor\n"
    }
  },
  {
    "pageContent": "specified red, green, and blue components. Alpha is set to 255 (fully opaque).\n\n**Parameters:**\n- `r`: Red component (0-255)\n- `g`: Green component (0-255)\n- `b`: Blue component (0-255)\n\n### ARGB Constructor\n```csharp\npublic WLColor(byte a, byte r, byte g, byte b)\n```\nCreates a color with specified alpha, red, green, and blue components.\n\n**Parameters:**\n- `a`: Alpha component (0-255)\n- `r`: Red component (0-255)\n- `g`: Green component (0-255)\n- `b`: Blue component (0-255)\n\n### Copy Constructor\n\n\n```csharp\npublic WLColor(WLColor c)\n\n```",
    "metadata": {
      "id": "wl-color",
      "title": "wl-color",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wl-color.md",
      "chunkIndex": "code-context-3",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public byte A\n",
    "metadata": {
      "id": "wl-color",
      "title": "wl-color",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wl-color.md",
      "chunkIndex": "code-4",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": ")\n\n### ARGB Constructor\n```csharp\npublic WLColor(byte a, byte r, byte g, byte b)\n```\nCreates a color with specified alpha, red, green, and blue components.\n\n**Parameters:**\n- `a`: Alpha component (0-255)\n- `r`: Red component (0-255)\n- `g`: Green component (0-255)\n- `b`: Blue component (0-255)\n\n### Copy Constructor\n```csharp\npublic WLColor(WLColor c)\n```\nCreates a new `WLColor` instance based on an existing `WLColor`.\n\n**Parameters:**\n- `c`: Source `WLColor` to copy\n\n## Properties\n\n### A (Alpha)\n"
    }
  },
  {
    "pageContent": ")\n\n### ARGB Constructor\n```csharp\npublic WLColor(byte a, byte r, byte g, byte b)\n```\nCreates a color with specified alpha, red, green, and blue components.\n\n**Parameters:**\n- `a`: Alpha component (0-255)\n- `r`: Red component (0-255)\n- `g`: Green component (0-255)\n- `b`: Blue component (0-255)\n\n### Copy Constructor\n```csharp\npublic WLColor(WLColor c)\n```\nCreates a new `WLColor` instance based on an existing `WLColor`.\n\n**Parameters:**\n- `c`: Source `WLColor` to copy\n\n## Properties\n\n### A (Alpha)\n\n\n```csharp\npublic byte A\n\n```",
    "metadata": {
      "id": "wl-color",
      "title": "wl-color",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wl-color.md",
      "chunkIndex": "code-context-4",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public byte R\n",
    "metadata": {
      "id": "wl-color",
      "title": "wl-color",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wl-color.md",
      "chunkIndex": "code-5",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ha, red, green, and blue components.\n\n**Parameters:**\n- `a`: Alpha component (0-255)\n- `r`: Red component (0-255)\n- `g`: Green component (0-255)\n- `b`: Blue component (0-255)\n\n### Copy Constructor\n```csharp\npublic WLColor(WLColor c)\n```\nCreates a new `WLColor` instance based on an existing `WLColor`.\n\n**Parameters:**\n- `c`: Source `WLColor` to copy\n\n## Properties\n\n### A (Alpha)\n```csharp\npublic byte A\n```\nThe alpha component of the color. \n- 0: Fully transparent\n- 255: Fully opaque\n\n### R (Red)\n"
    }
  },
  {
    "pageContent": "ha, red, green, and blue components.\n\n**Parameters:**\n- `a`: Alpha component (0-255)\n- `r`: Red component (0-255)\n- `g`: Green component (0-255)\n- `b`: Blue component (0-255)\n\n### Copy Constructor\n```csharp\npublic WLColor(WLColor c)\n```\nCreates a new `WLColor` instance based on an existing `WLColor`.\n\n**Parameters:**\n- `c`: Source `WLColor` to copy\n\n## Properties\n\n### A (Alpha)\n```csharp\npublic byte A\n```\nThe alpha component of the color. \n- 0: Fully transparent\n- 255: Fully opaque\n\n### R (Red)\n\n\n```csharp\npublic byte R\n\n```",
    "metadata": {
      "id": "wl-color",
      "title": "wl-color",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wl-color.md",
      "chunkIndex": "code-context-5",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public byte G\n",
    "metadata": {
      "id": "wl-color",
      "title": "wl-color",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wl-color.md",
      "chunkIndex": "code-6",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": " (0-255)\n- `r`: Red component (0-255)\n- `g`: Green component (0-255)\n- `b`: Blue component (0-255)\n\n### Copy Constructor\n```csharp\npublic WLColor(WLColor c)\n```\nCreates a new `WLColor` instance based on an existing `WLColor`.\n\n**Parameters:**\n- `c`: Source `WLColor` to copy\n\n## Properties\n\n### A (Alpha)\n```csharp\npublic byte A\n```\nThe alpha component of the color. \n- 0: Fully transparent\n- 255: Fully opaque\n\n### R (Red)\n```csharp\npublic byte R\n```\nThe red color component (0-255).\n\n### G (Green)\n"
    }
  },
  {
    "pageContent": " (0-255)\n- `r`: Red component (0-255)\n- `g`: Green component (0-255)\n- `b`: Blue component (0-255)\n\n### Copy Constructor\n```csharp\npublic WLColor(WLColor c)\n```\nCreates a new `WLColor` instance based on an existing `WLColor`.\n\n**Parameters:**\n- `c`: Source `WLColor` to copy\n\n## Properties\n\n### A (Alpha)\n```csharp\npublic byte A\n```\nThe alpha component of the color. \n- 0: Fully transparent\n- 255: Fully opaque\n\n### R (Red)\n```csharp\npublic byte R\n```\nThe red color component (0-255).\n\n### G (Green)\n\n\n```csharp\npublic byte G\n\n```",
    "metadata": {
      "id": "wl-color",
      "title": "wl-color",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wl-color.md",
      "chunkIndex": "code-context-6",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public byte B\n",
    "metadata": {
      "id": "wl-color",
      "title": "wl-color",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wl-color.md",
      "chunkIndex": "code-7",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "lue component (0-255)\n\n### Copy Constructor\n```csharp\npublic WLColor(WLColor c)\n```\nCreates a new `WLColor` instance based on an existing `WLColor`.\n\n**Parameters:**\n- `c`: Source `WLColor` to copy\n\n## Properties\n\n### A (Alpha)\n```csharp\npublic byte A\n```\nThe alpha component of the color. \n- 0: Fully transparent\n- 255: Fully opaque\n\n### R (Red)\n```csharp\npublic byte R\n```\nThe red color component (0-255).\n\n### G (Green)\n```csharp\npublic byte G\n```\nThe green color component (0-255).\n\n### B (Blue)\n"
    }
  },
  {
    "pageContent": "lue component (0-255)\n\n### Copy Constructor\n```csharp\npublic WLColor(WLColor c)\n```\nCreates a new `WLColor` instance based on an existing `WLColor`.\n\n**Parameters:**\n- `c`: Source `WLColor` to copy\n\n## Properties\n\n### A (Alpha)\n```csharp\npublic byte A\n```\nThe alpha component of the color. \n- 0: Fully transparent\n- 255: Fully opaque\n\n### R (Red)\n```csharp\npublic byte R\n```\nThe red color component (0-255).\n\n### G (Green)\n```csharp\npublic byte G\n```\nThe green color component (0-255).\n\n### B (Blue)\n\n\n```csharp\npublic byte B\n\n```",
    "metadata": {
      "id": "wl-color",
      "title": "wl-color",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wl-color.md",
      "chunkIndex": "code-context-7",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public double Brightness\n",
    "metadata": {
      "id": "wl-color",
      "title": "wl-color",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wl-color.md",
      "chunkIndex": "code-8",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": ")\n```\nCreates a new `WLColor` instance based on an existing `WLColor`.\n\n**Parameters:**\n- `c`: Source `WLColor` to copy\n\n## Properties\n\n### A (Alpha)\n```csharp\npublic byte A\n```\nThe alpha component of the color. \n- 0: Fully transparent\n- 255: Fully opaque\n\n### R (Red)\n```csharp\npublic byte R\n```\nThe red color component (0-255).\n\n### G (Green)\n```csharp\npublic byte G\n```\nThe green color component (0-255).\n\n### B (Blue)\n```csharp\npublic byte B\n```\nThe blue color component (0-255).\n\n### Brightness\n"
    }
  },
  {
    "pageContent": ")\n```\nCreates a new `WLColor` instance based on an existing `WLColor`.\n\n**Parameters:**\n- `c`: Source `WLColor` to copy\n\n## Properties\n\n### A (Alpha)\n```csharp\npublic byte A\n```\nThe alpha component of the color. \n- 0: Fully transparent\n- 255: Fully opaque\n\n### R (Red)\n```csharp\npublic byte R\n```\nThe red color component (0-255).\n\n### G (Green)\n```csharp\npublic byte G\n```\nThe green color component (0-255).\n\n### B (Blue)\n```csharp\npublic byte B\n```\nThe blue color component (0-255).\n\n### Brightness\n\n\n```csharp\npublic double Brightness\n\n```",
    "metadata": {
      "id": "wl-color",
      "title": "wl-color",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wl-color.md",
      "chunkIndex": "code-context-8",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public WLColor Brighten(double? min = null)\n",
    "metadata": {
      "id": "wl-color",
      "title": "wl-color",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wl-color.md",
      "chunkIndex": "code-9",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "(Alpha)\n```csharp\npublic byte A\n```\nThe alpha component of the color. \n- 0: Fully transparent\n- 255: Fully opaque\n\n### R (Red)\n```csharp\npublic byte R\n```\nThe red color component (0-255).\n\n### G (Green)\n```csharp\npublic byte G\n```\nThe green color component (0-255).\n\n### B (Blue)\n```csharp\npublic byte B\n```\nThe blue color component (0-255).\n\n### Brightness\n```csharp\npublic double Brightness\n```\nReturns the brightness of the color, ranging from 0 to 1.\n\n## Color Manipulation Methods\n\n### Brighten\n"
    }
  },
  {
    "pageContent": "(Alpha)\n```csharp\npublic byte A\n```\nThe alpha component of the color. \n- 0: Fully transparent\n- 255: Fully opaque\n\n### R (Red)\n```csharp\npublic byte R\n```\nThe red color component (0-255).\n\n### G (Green)\n```csharp\npublic byte G\n```\nThe green color component (0-255).\n\n### B (Blue)\n```csharp\npublic byte B\n```\nThe blue color component (0-255).\n\n### Brightness\n```csharp\npublic double Brightness\n```\nReturns the brightness of the color, ranging from 0 to 1.\n\n## Color Manipulation Methods\n\n### Brighten\n\n\n```csharp\npublic WLColor Brighten(double? min = null)\n\n```",
    "metadata": {
      "id": "wl-color",
      "title": "wl-color",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wl-color.md",
      "chunkIndex": "code-context-9",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public WLColor Darken(double? max = null)\n",
    "metadata": {
      "id": "wl-color",
      "title": "wl-color",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wl-color.md",
      "chunkIndex": "code-10",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "onent (0-255).\n\n### G (Green)\n```csharp\npublic byte G\n```\nThe green color component (0-255).\n\n### B (Blue)\n```csharp\npublic byte B\n```\nThe blue color component (0-255).\n\n### Brightness\n```csharp\npublic double Brightness\n```\nReturns the brightness of the color, ranging from 0 to 1.\n\n## Color Manipulation Methods\n\n### Brighten\n```csharp\npublic WLColor Brighten(double? min = null)\n```\nReturns a brightened version of the color.\n\n**Parameters:**\n- `min`: Optional minimum brightness value\n\n### Darken\n"
    }
  },
  {
    "pageContent": "onent (0-255).\n\n### G (Green)\n```csharp\npublic byte G\n```\nThe green color component (0-255).\n\n### B (Blue)\n```csharp\npublic byte B\n```\nThe blue color component (0-255).\n\n### Brightness\n```csharp\npublic double Brightness\n```\nReturns the brightness of the color, ranging from 0 to 1.\n\n## Color Manipulation Methods\n\n### Brighten\n```csharp\npublic WLColor Brighten(double? min = null)\n```\nReturns a brightened version of the color.\n\n**Parameters:**\n- `min`: Optional minimum brightness value\n\n### Darken\n\n\n```csharp\npublic WLColor Darken(double? max = null)\n\n```",
    "metadata": {
      "id": "wl-color",
      "title": "wl-color",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wl-color.md",
      "chunkIndex": "code-context-10",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public WLColor SetAlpha(byte a)\n",
    "metadata": {
      "id": "wl-color",
      "title": "wl-color",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wl-color.md",
      "chunkIndex": "code-11",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "## Brightness\n```csharp\npublic double Brightness\n```\nReturns the brightness of the color, ranging from 0 to 1.\n\n## Color Manipulation Methods\n\n### Brighten\n```csharp\npublic WLColor Brighten(double? min = null)\n```\nReturns a brightened version of the color.\n\n**Parameters:**\n- `min`: Optional minimum brightness value\n\n### Darken\n```csharp\npublic WLColor Darken(double? max = null)\n```\nReturns a darkened version of the color.\n\n**Parameters:**\n- `max`: Optional maximum brightness value\n\n### SetAlpha\n"
    }
  },
  {
    "pageContent": "## Brightness\n```csharp\npublic double Brightness\n```\nReturns the brightness of the color, ranging from 0 to 1.\n\n## Color Manipulation Methods\n\n### Brighten\n```csharp\npublic WLColor Brighten(double? min = null)\n```\nReturns a brightened version of the color.\n\n**Parameters:**\n- `min`: Optional minimum brightness value\n\n### Darken\n```csharp\npublic WLColor Darken(double? max = null)\n```\nReturns a darkened version of the color.\n\n**Parameters:**\n- `max`: Optional maximum brightness value\n\n### SetAlpha\n\n\n```csharp\npublic WLColor SetAlpha(byte a)\n\n```",
    "metadata": {
      "id": "wl-color",
      "title": "wl-color",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wl-color.md",
      "chunkIndex": "code-context-11",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public static WLColor FromArgb(byte a, byte r, byte g, byte b)\npublic static WLColor FromArgb(byte a, WLColor baseColor)\n",
    "metadata": {
      "id": "wl-color",
      "title": "wl-color",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wl-color.md",
      "chunkIndex": "code-12",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "r Brighten(double? min = null)\n```\nReturns a brightened version of the color.\n\n**Parameters:**\n- `min`: Optional minimum brightness value\n\n### Darken\n```csharp\npublic WLColor Darken(double? max = null)\n```\nReturns a darkened version of the color.\n\n**Parameters:**\n- `max`: Optional maximum brightness value\n\n### SetAlpha\n```csharp\npublic WLColor SetAlpha(byte a)\n```\nReturns a new color with the specified alpha value.\n\n**Parameters:**\n- `a`: New alpha value (0-255)\n\n## Static Methods\n\n### FromArgb\n"
    }
  },
  {
    "pageContent": "r Brighten(double? min = null)\n```\nReturns a brightened version of the color.\n\n**Parameters:**\n- `min`: Optional minimum brightness value\n\n### Darken\n```csharp\npublic WLColor Darken(double? max = null)\n```\nReturns a darkened version of the color.\n\n**Parameters:**\n- `max`: Optional maximum brightness value\n\n### SetAlpha\n```csharp\npublic WLColor SetAlpha(byte a)\n```\nReturns a new color with the specified alpha value.\n\n**Parameters:**\n- `a`: New alpha value (0-255)\n\n## Static Methods\n\n### FromArgb\n\n\n```csharp\npublic static WLColor FromArgb(byte a, byte r, byte g, byte b)\npublic static WLColor FromArgb(byte a, WLColor baseColor)\n\n```",
    "metadata": {
      "id": "wl-color",
      "title": "wl-color",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wl-color.md",
      "chunkIndex": "code-context-12",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public static WLColor FromRgb(byte r, byte g, byte b)\n",
    "metadata": {
      "id": "wl-color",
      "title": "wl-color",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wl-color.md",
      "chunkIndex": "code-13",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "rns a darkened version of the color.\n\n**Parameters:**\n- `max`: Optional maximum brightness value\n\n### SetAlpha\n```csharp\npublic WLColor SetAlpha(byte a)\n```\nReturns a new color with the specified alpha value.\n\n**Parameters:**\n- `a`: New alpha value (0-255)\n\n## Static Methods\n\n### FromArgb\n```csharp\npublic static WLColor FromArgb(byte a, byte r, byte g, byte b)\npublic static WLColor FromArgb(byte a, WLColor baseColor)\n```\nCreates a `WLColor` instance with specified color components.\n\n### FromRgb\n"
    }
  },
  {
    "pageContent": "rns a darkened version of the color.\n\n**Parameters:**\n- `max`: Optional maximum brightness value\n\n### SetAlpha\n```csharp\npublic WLColor SetAlpha(byte a)\n```\nReturns a new color with the specified alpha value.\n\n**Parameters:**\n- `a`: New alpha value (0-255)\n\n## Static Methods\n\n### FromArgb\n```csharp\npublic static WLColor FromArgb(byte a, byte r, byte g, byte b)\npublic static WLColor FromArgb(byte a, WLColor baseColor)\n```\nCreates a `WLColor` instance with specified color components.\n\n### FromRgb\n\n\n```csharp\npublic static WLColor FromRgb(byte r, byte g, byte b)\n\n```",
    "metadata": {
      "id": "wl-color",
      "title": "wl-color",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wl-color.md",
      "chunkIndex": "code-context-13",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public static WLColor Parse(string s)\n",
    "metadata": {
      "id": "wl-color",
      "title": "wl-color",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wl-color.md",
      "chunkIndex": "code-14",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "\nReturns a new color with the specified alpha value.\n\n**Parameters:**\n- `a`: New alpha value (0-255)\n\n## Static Methods\n\n### FromArgb\n```csharp\npublic static WLColor FromArgb(byte a, byte r, byte g, byte b)\npublic static WLColor FromArgb(byte a, WLColor baseColor)\n```\nCreates a `WLColor` instance with specified color components.\n\n### FromRgb\n```csharp\npublic static WLColor FromRgb(byte r, byte g, byte b)\n```\nCreates a `WLColor` instance with specified RGB components and full opacity.\n\n### Parse\n"
    }
  },
  {
    "pageContent": "\nReturns a new color with the specified alpha value.\n\n**Parameters:**\n- `a`: New alpha value (0-255)\n\n## Static Methods\n\n### FromArgb\n```csharp\npublic static WLColor FromArgb(byte a, byte r, byte g, byte b)\npublic static WLColor FromArgb(byte a, WLColor baseColor)\n```\nCreates a `WLColor` instance with specified color components.\n\n### FromRgb\n```csharp\npublic static WLColor FromRgb(byte r, byte g, byte b)\n```\nCreates a `WLColor` instance with specified RGB components and full opacity.\n\n### Parse\n\n\n```csharp\npublic static WLColor Parse(string s)\n\n```",
    "metadata": {
      "id": "wl-color",
      "title": "wl-color",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wl-color.md",
      "chunkIndex": "code-context-14",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public class ColorUtilities\n{\n    public void DemonstrateColorUsage()\n    {\n        // Create colors using different constructors\n        WLColor red = new WLColor(255, 0, 0);\n        WLColor transparentBlue = new WLColor(128, 0, 0, 255);\n        \n        // Manipulate colors\n        WLColor brighterRed = red.Brighten();\n        WLColor darkerRed = red.Darken();\n        \n        // Set alpha\n        WLColor semiTransparent = red.SetAlpha(128);\n        \n        // Use static methods\n        WLColor fromRgb = WLColor.FromRgb(0, 255, 0);\n        WLColor fromArgb = WLColor.FromArgb(255, 0, 0, 255);\n        \n        // Check brightness\n        double brightness = red.Brightness;\n    }\n}\n",
    "metadata": {
      "id": "wl-color",
      "title": "wl-color",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wl-color.md",
      "chunkIndex": "code-15",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ds\n\n### FromArgb\n```csharp\npublic static WLColor FromArgb(byte a, byte r, byte g, byte b)\npublic static WLColor FromArgb(byte a, WLColor baseColor)\n```\nCreates a `WLColor` instance with specified color components.\n\n### FromRgb\n```csharp\npublic static WLColor FromRgb(byte r, byte g, byte b)\n```\nCreates a `WLColor` instance with specified RGB components and full opacity.\n\n### Parse\n```csharp\npublic static WLColor Parse(string s)\n```\nParses a color from a string representation.\n\n## Usage Examples\n\n"
    }
  },
  {
    "pageContent": "ds\n\n### FromArgb\n```csharp\npublic static WLColor FromArgb(byte a, byte r, byte g, byte b)\npublic static WLColor FromArgb(byte a, WLColor baseColor)\n```\nCreates a `WLColor` instance with specified color components.\n\n### FromRgb\n```csharp\npublic static WLColor FromRgb(byte r, byte g, byte b)\n```\nCreates a `WLColor` instance with specified RGB components and full opacity.\n\n### Parse\n```csharp\npublic static WLColor Parse(string s)\n```\nParses a color from a string representation.\n\n## Usage Examples\n\n\n\n```csharp\npublic class ColorUtilities\n{\n    public void DemonstrateColorUsage()\n    {\n        // Create colors using different constructors\n        WLColor red = new WLColor(255, 0, 0);\n        WLColor transparentBlue = new WLColor(128, 0, 0, 255);\n        \n        // Manipulate colors\n        WLColor brighterRed = red.Brighten();\n        WLColor darkerRed = red.Darken();\n        \n        // Set alpha\n        WLColor semiTransparent = red.SetAlpha(128);\n        \n        // Use static methods\n        WLColor fromRgb = WLColor.FromRgb(0, 255, 0);\n        WLColor fromArgb = WLColor.FromArgb(255, 0, 0, 255);\n        \n        // Check brightness\n        double brightness = red.Brightness;\n    }\n}\n\n```",
    "metadata": {
      "id": "wl-color",
      "title": "wl-color",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wl-color.md",
      "chunkIndex": "code-context-15",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "# WLFont Class\n\n**Namespace:** WealthLab.Core  \n**Parent:** Object\n\nThe `WLFont` class represents a platform-independent font with support for customizing font family, size, bold, and italic properties. It provides a flexible way to define and manipulate fonts across different rendering contexts.\n\n## Constructors\n\n### Parameterless Constructor\n",
    "metadata": {
      "id": "wl-font",
      "title": "wl-font",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wl-font.md",
      "chunkIndex": 0,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nCreates a default font instance with standard settings.\n\n### Customizable Font Constructor\n",
    "metadata": {
      "id": "wl-font",
      "title": "wl-font",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wl-font.md",
      "chunkIndex": 1,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nCreates a font with specified properties.\n\n**Parameters:**\n- `fontName`: Font family name (e.g., \"Arial\", \"Tahoma\")\n- `fontSize`: Font size in points (default: 8)\n- `isBold`: Whether the font should be bold (default: false)\n- `isItalic`: Whether the font should be italic (default: false)\n\n## Properties\n\n### FontName\n",
    "metadata": {
      "id": "wl-font",
      "title": "wl-font",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wl-font.md",
      "chunkIndex": 2,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nSpecifies the font's family name.\n\n**Examples:**\n- \"Arial\"\n- \"Tahoma\"\n- \"Consolas\"\n- \"Helvetica\"\n\n### FontSize\n",
    "metadata": {
      "id": "wl-font",
      "title": "wl-font",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wl-font.md",
      "chunkIndex": 3,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nSpecifies the size of the font in points.\n\n**Range:** Typically 6-72, but can vary based on platform\n\n### IsBold\n",
    "metadata": {
      "id": "wl-font",
      "title": "wl-font",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wl-font.md",
      "chunkIndex": 4,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nIndicates whether the font should be rendered in bold text.\n\n**Values:**\n- `true`: Render bold text\n- `false`: Standard weight text\n\n### IsItalic\n",
    "metadata": {
      "id": "wl-font",
      "title": "wl-font",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wl-font.md",
      "chunkIndex": 5,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nSpecifies whether the font should be rendered in italic text.\n\n**Values:**\n- `true`: Render italic text\n- `false`: Standard upright text\n\n## Static Methods\n\n### Parse\n",
    "metadata": {
      "id": "wl-font",
      "title": "wl-font",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wl-font.md",
      "chunkIndex": 6,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns a `WLFont` instance by parsing a string representation of the font.\n\n**Notes:**\n- Uses the same format as the font's `ToString()` method\n- Allows recreation of a font from its string representation\n\n## Usage Examples\n\n",
    "metadata": {
      "id": "wl-font",
      "title": "wl-font",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wl-font.md",
      "chunkIndex": 7,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n## Best Practices\n\n1. **Font Selection**\n   - Choose fonts that are widely available across platforms\n   - Consider readability and context\n   - Use system-standard fonts for maximum compatibility\n\n2. **Font Styling**\n   - Use bold and italic sparingly\n   - Ensure text remains legible\n   - Consider color contrast and background\n\n3. **Performance**\n   - Font instances are lightweight\n   - Reuse font instances when possible\n   - Avoid creating excessive font variations\n\n## Compatibility Notes\n\n- Platform-independent font representation\n- Works across different rendering contexts in WealthLab 8\n- Supports basic font customization\n- Designed for chart annotations, UI elements, and data visualization\n\n## Potential Limitations\n\n- Does not support advanced typography features\n- Limited to basic font properties\n- Actual rendering may vary slightly between platforms\n\n## Recommended Fonts\n\n- Sans-serif fonts for charts and UI: Arial, Tahoma, Helvetica\n- Monospaced fonts for code or precise data: Consolas, Courier\n- Serif fonts for detailed reports: Times New Roman, Georgia\n\n## Notes\n\n- Essential for consistent font rendering in WealthLab 8\n- Provides a simple, cross-platform font representation\n- Useful for customizing chart annotations and UI elements ",
    "metadata": {
      "id": "wl-font",
      "title": "wl-font",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wl-font.md",
      "chunkIndex": 8,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "public WLFont()\n",
    "metadata": {
      "id": "wl-font",
      "title": "wl-font",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wl-font.md",
      "chunkIndex": "code-0",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "# WLFont Class\n\n**Namespace:** WealthLab.Core  \n**Parent:** Object\n\nThe `WLFont` class represents a platform-independent font with support for customizing font family, size, bold, and italic properties. It provides a flexible way to define and manipulate fonts across different rendering contexts.\n\n## Constructors\n\n### Parameterless Constructor\n"
    }
  },
  {
    "pageContent": "# WLFont Class\n\n**Namespace:** WealthLab.Core  \n**Parent:** Object\n\nThe `WLFont` class represents a platform-independent font with support for customizing font family, size, bold, and italic properties. It provides a flexible way to define and manipulate fonts across different rendering contexts.\n\n## Constructors\n\n### Parameterless Constructor\n\n\n```csharp\npublic WLFont()\n\n```",
    "metadata": {
      "id": "wl-font",
      "title": "wl-font",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wl-font.md",
      "chunkIndex": "code-context-0",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public WLFont(\n    string fontName, \n    int fontSize = 8, \n    bool isBold = false, \n    bool isItalic = false\n)\n",
    "metadata": {
      "id": "wl-font",
      "title": "wl-font",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wl-font.md",
      "chunkIndex": "code-1",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "# WLFont Class\n\n**Namespace:** WealthLab.Core  \n**Parent:** Object\n\nThe `WLFont` class represents a platform-independent font with support for customizing font family, size, bold, and italic properties. It provides a flexible way to define and manipulate fonts across different rendering contexts.\n\n## Constructors\n\n### Parameterless Constructor\n```csharp\npublic WLFont()\n```\nCreates a default font instance with standard settings.\n\n### Customizable Font Constructor\n"
    }
  },
  {
    "pageContent": "# WLFont Class\n\n**Namespace:** WealthLab.Core  \n**Parent:** Object\n\nThe `WLFont` class represents a platform-independent font with support for customizing font family, size, bold, and italic properties. It provides a flexible way to define and manipulate fonts across different rendering contexts.\n\n## Constructors\n\n### Parameterless Constructor\n```csharp\npublic WLFont()\n```\nCreates a default font instance with standard settings.\n\n### Customizable Font Constructor\n\n\n```csharp\npublic WLFont(\n    string fontName, \n    int fontSize = 8, \n    bool isBold = false, \n    bool isItalic = false\n)\n\n```",
    "metadata": {
      "id": "wl-font",
      "title": "wl-font",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wl-font.md",
      "chunkIndex": "code-context-1",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public string FontName\n",
    "metadata": {
      "id": "wl-font",
      "title": "wl-font",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wl-font.md",
      "chunkIndex": "code-2",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "standard settings.\n\n### Customizable Font Constructor\n```csharp\npublic WLFont(\n    string fontName, \n    int fontSize = 8, \n    bool isBold = false, \n    bool isItalic = false\n)\n```\nCreates a font with specified properties.\n\n**Parameters:**\n- `fontName`: Font family name (e.g., \"Arial\", \"Tahoma\")\n- `fontSize`: Font size in points (default: 8)\n- `isBold`: Whether the font should be bold (default: false)\n- `isItalic`: Whether the font should be italic (default: false)\n\n## Properties\n\n### FontName\n"
    }
  },
  {
    "pageContent": "standard settings.\n\n### Customizable Font Constructor\n```csharp\npublic WLFont(\n    string fontName, \n    int fontSize = 8, \n    bool isBold = false, \n    bool isItalic = false\n)\n```\nCreates a font with specified properties.\n\n**Parameters:**\n- `fontName`: Font family name (e.g., \"Arial\", \"Tahoma\")\n- `fontSize`: Font size in points (default: 8)\n- `isBold`: Whether the font should be bold (default: false)\n- `isItalic`: Whether the font should be italic (default: false)\n\n## Properties\n\n### FontName\n\n\n```csharp\npublic string FontName\n\n```",
    "metadata": {
      "id": "wl-font",
      "title": "wl-font",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wl-font.md",
      "chunkIndex": "code-context-2",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public int FontSize\n",
    "metadata": {
      "id": "wl-font",
      "title": "wl-font",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wl-font.md",
      "chunkIndex": "code-3",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": " \n    bool isItalic = false\n)\n```\nCreates a font with specified properties.\n\n**Parameters:**\n- `fontName`: Font family name (e.g., \"Arial\", \"Tahoma\")\n- `fontSize`: Font size in points (default: 8)\n- `isBold`: Whether the font should be bold (default: false)\n- `isItalic`: Whether the font should be italic (default: false)\n\n## Properties\n\n### FontName\n```csharp\npublic string FontName\n```\nSpecifies the font's family name.\n\n**Examples:**\n- \"Arial\"\n- \"Tahoma\"\n- \"Consolas\"\n- \"Helvetica\"\n\n### FontSize\n"
    }
  },
  {
    "pageContent": " \n    bool isItalic = false\n)\n```\nCreates a font with specified properties.\n\n**Parameters:**\n- `fontName`: Font family name (e.g., \"Arial\", \"Tahoma\")\n- `fontSize`: Font size in points (default: 8)\n- `isBold`: Whether the font should be bold (default: false)\n- `isItalic`: Whether the font should be italic (default: false)\n\n## Properties\n\n### FontName\n```csharp\npublic string FontName\n```\nSpecifies the font's family name.\n\n**Examples:**\n- \"Arial\"\n- \"Tahoma\"\n- \"Consolas\"\n- \"Helvetica\"\n\n### FontSize\n\n\n```csharp\npublic int FontSize\n\n```",
    "metadata": {
      "id": "wl-font",
      "title": "wl-font",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wl-font.md",
      "chunkIndex": "code-context-3",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public bool IsBold\n",
    "metadata": {
      "id": "wl-font",
      "title": "wl-font",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wl-font.md",
      "chunkIndex": "code-4",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "\")\n- `fontSize`: Font size in points (default: 8)\n- `isBold`: Whether the font should be bold (default: false)\n- `isItalic`: Whether the font should be italic (default: false)\n\n## Properties\n\n### FontName\n```csharp\npublic string FontName\n```\nSpecifies the font's family name.\n\n**Examples:**\n- \"Arial\"\n- \"Tahoma\"\n- \"Consolas\"\n- \"Helvetica\"\n\n### FontSize\n```csharp\npublic int FontSize\n```\nSpecifies the size of the font in points.\n\n**Range:** Typically 6-72, but can vary based on platform\n\n### IsBold\n"
    }
  },
  {
    "pageContent": "\")\n- `fontSize`: Font size in points (default: 8)\n- `isBold`: Whether the font should be bold (default: false)\n- `isItalic`: Whether the font should be italic (default: false)\n\n## Properties\n\n### FontName\n```csharp\npublic string FontName\n```\nSpecifies the font's family name.\n\n**Examples:**\n- \"Arial\"\n- \"Tahoma\"\n- \"Consolas\"\n- \"Helvetica\"\n\n### FontSize\n```csharp\npublic int FontSize\n```\nSpecifies the size of the font in points.\n\n**Range:** Typically 6-72, but can vary based on platform\n\n### IsBold\n\n\n```csharp\npublic bool IsBold\n\n```",
    "metadata": {
      "id": "wl-font",
      "title": "wl-font",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wl-font.md",
      "chunkIndex": "code-context-4",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public bool IsItalic\n",
    "metadata": {
      "id": "wl-font",
      "title": "wl-font",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wl-font.md",
      "chunkIndex": "code-5",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": " Properties\n\n### FontName\n```csharp\npublic string FontName\n```\nSpecifies the font's family name.\n\n**Examples:**\n- \"Arial\"\n- \"Tahoma\"\n- \"Consolas\"\n- \"Helvetica\"\n\n### FontSize\n```csharp\npublic int FontSize\n```\nSpecifies the size of the font in points.\n\n**Range:** Typically 6-72, but can vary based on platform\n\n### IsBold\n```csharp\npublic bool IsBold\n```\nIndicates whether the font should be rendered in bold text.\n\n**Values:**\n- `true`: Render bold text\n- `false`: Standard weight text\n\n### IsItalic\n"
    }
  },
  {
    "pageContent": " Properties\n\n### FontName\n```csharp\npublic string FontName\n```\nSpecifies the font's family name.\n\n**Examples:**\n- \"Arial\"\n- \"Tahoma\"\n- \"Consolas\"\n- \"Helvetica\"\n\n### FontSize\n```csharp\npublic int FontSize\n```\nSpecifies the size of the font in points.\n\n**Range:** Typically 6-72, but can vary based on platform\n\n### IsBold\n```csharp\npublic bool IsBold\n```\nIndicates whether the font should be rendered in bold text.\n\n**Values:**\n- `true`: Render bold text\n- `false`: Standard weight text\n\n### IsItalic\n\n\n```csharp\npublic bool IsItalic\n\n```",
    "metadata": {
      "id": "wl-font",
      "title": "wl-font",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wl-font.md",
      "chunkIndex": "code-context-5",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public static WLFont Parse(string s)\n",
    "metadata": {
      "id": "wl-font",
      "title": "wl-font",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wl-font.md",
      "chunkIndex": "code-6",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "e\n```\nSpecifies the size of the font in points.\n\n**Range:** Typically 6-72, but can vary based on platform\n\n### IsBold\n```csharp\npublic bool IsBold\n```\nIndicates whether the font should be rendered in bold text.\n\n**Values:**\n- `true`: Render bold text\n- `false`: Standard weight text\n\n### IsItalic\n```csharp\npublic bool IsItalic\n```\nSpecifies whether the font should be rendered in italic text.\n\n**Values:**\n- `true`: Render italic text\n- `false`: Standard upright text\n\n## Static Methods\n\n### Parse\n"
    }
  },
  {
    "pageContent": "e\n```\nSpecifies the size of the font in points.\n\n**Range:** Typically 6-72, but can vary based on platform\n\n### IsBold\n```csharp\npublic bool IsBold\n```\nIndicates whether the font should be rendered in bold text.\n\n**Values:**\n- `true`: Render bold text\n- `false`: Standard weight text\n\n### IsItalic\n```csharp\npublic bool IsItalic\n```\nSpecifies whether the font should be rendered in italic text.\n\n**Values:**\n- `true`: Render italic text\n- `false`: Standard upright text\n\n## Static Methods\n\n### Parse\n\n\n```csharp\npublic static WLFont Parse(string s)\n\n```",
    "metadata": {
      "id": "wl-font",
      "title": "wl-font",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wl-font.md",
      "chunkIndex": "code-context-6",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public class FontUtilities\n{\n    public void DemonstrateFontUsage()\n    {\n        // Create fonts using different constructors\n        WLFont defaultFont = new WLFont();\n        \n        // Custom font with specific properties\n        WLFont customFont = new WLFont(\n            fontName: \"Arial\", \n            fontSize: 12, \n            isBold: true, \n            isItalic: false\n        );\n        \n        // Chart annotation font\n        WLFont annotationFont = new WLFont(\"Tahoma\", 10);\n        \n        // Bold and italic font\n        WLFont emphasizedFont = new WLFont(\"Consolas\", 9, true, true);\n        \n        // Parse font from string\n        string fontString = customFont.ToString();\n        WLFont parsedFont = WLFont.Parse(fontString);\n    }\n}\n",
    "metadata": {
      "id": "wl-font",
      "title": "wl-font",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wl-font.md",
      "chunkIndex": "code-7",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "t text\n\n### IsItalic\n```csharp\npublic bool IsItalic\n```\nSpecifies whether the font should be rendered in italic text.\n\n**Values:**\n- `true`: Render italic text\n- `false`: Standard upright text\n\n## Static Methods\n\n### Parse\n```csharp\npublic static WLFont Parse(string s)\n```\nReturns a `WLFont` instance by parsing a string representation of the font.\n\n**Notes:**\n- Uses the same format as the font's `ToString()` method\n- Allows recreation of a font from its string representation\n\n## Usage Examples\n\n"
    }
  },
  {
    "pageContent": "t text\n\n### IsItalic\n```csharp\npublic bool IsItalic\n```\nSpecifies whether the font should be rendered in italic text.\n\n**Values:**\n- `true`: Render italic text\n- `false`: Standard upright text\n\n## Static Methods\n\n### Parse\n```csharp\npublic static WLFont Parse(string s)\n```\nReturns a `WLFont` instance by parsing a string representation of the font.\n\n**Notes:**\n- Uses the same format as the font's `ToString()` method\n- Allows recreation of a font from its string representation\n\n## Usage Examples\n\n\n\n```csharp\npublic class FontUtilities\n{\n    public void DemonstrateFontUsage()\n    {\n        // Create fonts using different constructors\n        WLFont defaultFont = new WLFont();\n        \n        // Custom font with specific properties\n        WLFont customFont = new WLFont(\n            fontName: \"Arial\", \n            fontSize: 12, \n            isBold: true, \n            isItalic: false\n        );\n        \n        // Chart annotation font\n        WLFont annotationFont = new WLFont(\"Tahoma\", 10);\n        \n        // Bold and italic font\n        WLFont emphasizedFont = new WLFont(\"Consolas\", 9, true, true);\n        \n        // Parse font from string\n        string fontString = customFont.ToString();\n        WLFont parsedFont = WLFont.Parse(fontString);\n    }\n}\n\n```",
    "metadata": {
      "id": "wl-font",
      "title": "wl-font",
      "description": "",
      "category": "api-reference",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/api-reference/wl-font.md",
      "chunkIndex": "code-context-7",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "# Advanced Position Sizer API\n\nThis document details the API for building Advanced Position Sizers for Wealth-Lab 8. A Position Sizer calculates the number of shares/contracts for a Transaction during the backtest process. It has access to the current and historical equity/cash levels of the simulation, as well as other information to make position sizing decisions.\n\n## Build Environment\n\nYou can create an Advanced Position Sizer in a .NET development tool such as Visual Studio 2022. Create a class library project that targets .NET8, then reference the WealthLab.Core library DLL that you'll find in the WL8 installation folder.\n\n> **Note:** If you are using Visual Studio 2022, it will need to be updated to at least version 17.8.6 to use .NET8.\n\nYour Advanced Position Sizer will be a class in this library that descends from `PositionSizerBase`, which is defined in the WealthLab.Core library, in the `WealthLab.Backtest` namespace. After you implement and build your library, simply copy the resulting assembly DLL into the WL8 installation folder. The next time WL8 starts up, it will discover your Advanced Position Sizer, making it available in appropriate locations of the WL8 user interface.\n\n## Accessing the Host (WL8) Environment\n\nThe `IHost` interface allows your extension to access information about the user's WealthLab environment. For example, the location of the user data folder, or obtaining a list of DataSets defined by the user. At any point in your extension's code base, you can access an instance of the `IHost` interface using the singleton class `WLHost` and its `Instance` property. Example:\n\n",
    "metadata": {
      "id": "advanced-position-sizer",
      "title": "advanced-position-sizer",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/advanced-position-sizer.md",
      "chunkIndex": 0,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n## Descriptive Properties\n\nOverride the following properties that provide descriptive details about your Position Sizer and describes how it functions.\n\n### public abstract string Name\nReturn a descriptive name for your Position Sizer that will be used throughout WL8.\n\n### public virtual string Description\nReturn a brief description of how your Position Sizer works. This is displayed when the user selects or configures your Position Sizer from the drop down in WL8's Strategy window.\n\n### public virtual bool UsesBasisPrice\nReturn true if your Position Sizer should allow the user to specify the basis price option (current bar market close or next bar market open) in the position sizing user interface.\n\n### public virtual bool UsesMaxRiskPct\nReturn true if your Position Sizer calls the Max Risk Percent Sizer so that WealthLab can automatically issue a Stop Loss order at the RiskStopLevel when that Trading Preference is enabled.\n\n### protected virtual void GenerateParameters\nIf your Position Sizer has Parameters, override this method and create the Parameter instances here, adding them to the Parameters property.\n\n> **Note:** `PositionSizerBase` descends from the `Configurable` base class. See the Configurable class reference for more information about parameters.\n\n## Sizing Positions\n\n### public virtual void Initialize()\nWL8 calls this prior to sizing any positions. Override this method to perform any required one-time initialization.\n\n### public abstract double SizePosition(Transaction t, BarHistory bars, int idx, double basisPrice, double equity, double cash)\nWL8 calls this method each time it needs to size a position. Parameters:\n- `t`: Transaction object representing the trade/signal being processed\n- `bars`: BarHistory instance being processed\n- `idx`: Current index into the BarHistory instance\n- `basisPrice`: Transaction's basis price:\n  - For Market orders: Based on user selection (current bar close or next bar open)\n  - For Limit/Stop orders: The order price\n- `equity`: Current simulated account equity\n- `cash`: Available cash value\n\nYour Position Sizer should use these parameters and required properties to calculate and return a position size.\n\n## Simulation Related Properties\n\n### public TimeSeries EquityCurve\nA TimeSeries instance representing the simulated equity curve. This property and other TimeSeries properties are updated only to the point in time that the trade signal was made in the simulation.\n\n### public TimeSeries CashCurve\nA TimeSeries instance representing the available cash in the simulation.\n\n### public TimeSeries DrawdownCurve\nA TimeSeries instance representing the drawdown of the simulation (largest peak to trough decline in the simulation's equity curve, calculated on a closing price basis).\n\n### public TimeSeries DrawdownPctCurve\nA TimeSeries instance representing the percentage drawdown of the simulation.\n\n### public List<Transaction> Orders\nA List of Transaction instances containing orders already sized and processed on this bar, including both entries and exits.\n\n### public List<Position> OpenPositions\nA List of Position objects containing currently open positions in the simulation.\n\n### public List<Position> ClosedPositions\nA List of Position objects containing closed positions in the simulation.\n\n### public List<Position> Positions\nA List of Position objects containing all positions (open and closed) in the simulation.\n\n### public List<Transaction> Candidates\nA List of Transaction instances containing all entry signals being processed (sized) on this bar of the simulation.\n\n## Helper Methods\n\n### public double CalculatePositionSize(PositionSizeTypes pst, double value, BarHistory bars, double basisPrice, double equity, int? idx)\nCalculates position size based on standard types:\n- `Dollar`: Fixed dollar (or base currency) amount specified in the value parameter\n- `Quantity`: Fixed number of shares/contracts specified in the value parameter\n- `PctOfEquity`: Percentage of current simulated equity specified in the value parameter\n\nYou'll typically call this helper method from within the implementation of the SizePosition method, passing the idx parameter value from SizePosition.\n\n### public bool UseFuturesMode(BarHistory bars)\nReturns true if Futures Mode should be used for the specified BarHistory instance. When true, your Position Sizer can use:\n- `PointValue`\n- `Margin`\n- `TickSize` properties from `bars.SymbolInfo`\n\nExample futures mode calculation:\n",
    "metadata": {
      "id": "advanced-position-sizer",
      "title": "advanced-position-sizer",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/advanced-position-sizer.md",
      "chunkIndex": 1,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n## BasicPositionSizer\n\nFor standard position sizing approaches, derive from `BasicPositionSizer` instead of `PositionSizerBase`. It provides:\n\n1. Two pre-configured parameters:\n   - Position Size Type (StringChoice with 3 options)\n   - Amount (Double)\n\n2. Implemented methods:\n   - Initialize: Reads user-configured parameter values\n   - SizePosition: Uses standard calculation logic\n\nExample implementation:\n",
    "metadata": {
      "id": "advanced-position-sizer",
      "title": "advanced-position-sizer",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/advanced-position-sizer.md",
      "chunkIndex": 2,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n## Example Implementation\n\nBelow is a complete implementation of the Max Entries per Bar Position Sizer:\n\n",
    "metadata": {
      "id": "advanced-position-sizer",
      "title": "advanced-position-sizer",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/advanced-position-sizer.md",
      "chunkIndex": 3,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "//get user data folder\nstring folder = WLHost.Instance.DataFolder;\n",
    "metadata": {
      "id": "advanced-position-sizer",
      "title": "advanced-position-sizer",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/advanced-position-sizer.md",
      "chunkIndex": "code-0",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "izer, making it available in appropriate locations of the WL8 user interface.\n\n## Accessing the Host (WL8) Environment\n\nThe `IHost` interface allows your extension to access information about the user's WealthLab environment. For example, the location of the user data folder, or obtaining a list of DataSets defined by the user. At any point in your extension's code base, you can access an instance of the `IHost` interface using the singleton class `WLHost` and its `Instance` property. Example:\n\n"
    }
  },
  {
    "pageContent": "izer, making it available in appropriate locations of the WL8 user interface.\n\n## Accessing the Host (WL8) Environment\n\nThe `IHost` interface allows your extension to access information about the user's WealthLab environment. For example, the location of the user data folder, or obtaining a list of DataSets defined by the user. At any point in your extension's code base, you can access an instance of the `IHost` interface using the singleton class `WLHost` and its `Instance` property. Example:\n\n\n\n```csharp\n//get user data folder\nstring folder = WLHost.Instance.DataFolder;\n\n```",
    "metadata": {
      "id": "advanced-position-sizer",
      "title": "advanced-position-sizer",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/advanced-position-sizer.md",
      "chunkIndex": "code-context-0",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "if (FuturesMode)\n   return 10000 / bars.SymbolInfo.Margin;\nelse\n   return 10000 / basisPrice;\n",
    "metadata": {
      "id": "advanced-position-sizer",
      "title": "advanced-position-sizer",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/advanced-position-sizer.md",
      "chunkIndex": "code-1",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "entage of current simulated equity specified in the value parameter\n\nYou'll typically call this helper method from within the implementation of the SizePosition method, passing the idx parameter value from SizePosition.\n\n### public bool UseFuturesMode(BarHistory bars)\nReturns true if Futures Mode should be used for the specified BarHistory instance. When true, your Position Sizer can use:\n- `PointValue`\n- `Margin`\n- `TickSize` properties from `bars.SymbolInfo`\n\nExample futures mode calculation:\n"
    }
  },
  {
    "pageContent": "entage of current simulated equity specified in the value parameter\n\nYou'll typically call this helper method from within the implementation of the SizePosition method, passing the idx parameter value from SizePosition.\n\n### public bool UseFuturesMode(BarHistory bars)\nReturns true if Futures Mode should be used for the specified BarHistory instance. When true, your Position Sizer can use:\n- `PointValue`\n- `Margin`\n- `TickSize` properties from `bars.SymbolInfo`\n\nExample futures mode calculation:\n\n\n```csharp\nif (FuturesMode)\n   return 10000 / bars.SymbolInfo.Margin;\nelse\n   return 10000 / basisPrice;\n\n```",
    "metadata": {
      "id": "advanced-position-sizer",
      "title": "advanced-position-sizer",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/advanced-position-sizer.md",
      "chunkIndex": "code-context-1",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public override double SizePosition(Transaction t, BarHistory bars, int idx, double basisPrice, double equity, double cash)\n{\n    return CalculatePositionSize(_posSizeType, _amount, bars, basisPrice, equity);\n}\n",
    "metadata": {
      "id": "advanced-position-sizer",
      "title": "advanced-position-sizer",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/advanced-position-sizer.md",
      "chunkIndex": "code-2",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "resMode)\n   return 10000 / bars.SymbolInfo.Margin;\nelse\n   return 10000 / basisPrice;\n```\n\n## BasicPositionSizer\n\nFor standard position sizing approaches, derive from `BasicPositionSizer` instead of `PositionSizerBase`. It provides:\n\n1. Two pre-configured parameters:\n   - Position Size Type (StringChoice with 3 options)\n   - Amount (Double)\n\n2. Implemented methods:\n   - Initialize: Reads user-configured parameter values\n   - SizePosition: Uses standard calculation logic\n\nExample implementation:\n"
    }
  },
  {
    "pageContent": "resMode)\n   return 10000 / bars.SymbolInfo.Margin;\nelse\n   return 10000 / basisPrice;\n```\n\n## BasicPositionSizer\n\nFor standard position sizing approaches, derive from `BasicPositionSizer` instead of `PositionSizerBase`. It provides:\n\n1. Two pre-configured parameters:\n   - Position Size Type (StringChoice with 3 options)\n   - Amount (Double)\n\n2. Implemented methods:\n   - Initialize: Reads user-configured parameter values\n   - SizePosition: Uses standard calculation logic\n\nExample implementation:\n\n\n```csharp\npublic override double SizePosition(Transaction t, BarHistory bars, int idx, double basisPrice, double equity, double cash)\n{\n    return CalculatePositionSize(_posSizeType, _amount, bars, basisPrice, equity);\n}\n\n```",
    "metadata": {
      "id": "advanced-position-sizer",
      "title": "advanced-position-sizer",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/advanced-position-sizer.md",
      "chunkIndex": "code-context-2",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "using System.Linq;\nusing WealthLab.Core;\n\nnamespace WealthLab.Backtest\n{\n    //A PosSizer that allows only a maximum number of entries per bar of data\n    public class MaxEntriesPerBar : BasicPositionSizer\n    {\n        //add parameter to control how many entries per day\n        public override void GenerateParameters()\n        {\n            base.GenerateParameters();\n            Parameters.Add(new Parameter(\"Max Entries\", ParameterType.Int32, 2, 1.0, 999999999.0));\n            Parameters.Add(new Parameter(\"For intraday trades, sum up positions opened during the day\", \n                ParameterType.Boolean, false));\n        }\n\n        //Name\n        public override string Name => \"Max Entries per Bar\";\n\n        //description\n        public override string Description => \n            \"Provides the basic Position Sizing options, with the additional ability to limit \" +\n            \"the number of entries taken on each bar (or day) of data.\";\n\n        //initialize\n        public override void Initialize()\n        {\n            base.Initialize();\n            _maxEntries = Parameters[2].AsInt;\n            _considerIntraday = Parameters[3].AsBoolean;\n        }\n\n        //Size the position, if max entries exceeded, set size to zero\n        public override double SizePosition(Transaction t, BarHistory bars, int idx, \n            double basisPrice, double equity, double cash)\n        {\n            int count = 0;\n\n            if (!_considerIntraday)\n            {\n                foreach (Transaction o in Orders)\n                    if (o.TransactionType.IsEntry())\n                        count++;\n            }\n            else\n            {\n                if (t.Bars.Scale.IsIntraday)\n                {\n                    var positionsInSymbolOpenedToday = Positions.AsParallel().AsOrdered().Reverse()\n                        .TakeWhile(p => p.EntryDate.DayOfYear == t.EntryDate.DayOfYear && \n                                      p.Symbol == t.Symbol);\n                    count += positionsInSymbolOpenedToday.Count();\n                }\n            }\n            \n            if (count >= _maxEntries)\n                return 0.0;\n            else\n                return base.SizePosition(t, bars, idx, basisPrice, equity, cash);\n        }\n\n        //private members\n        private int _maxEntries;\n        private bool _considerIntraday;\n    }\n}\n",
    "metadata": {
      "id": "advanced-position-sizer",
      "title": "advanced-position-sizer",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/advanced-position-sizer.md",
      "chunkIndex": "code-3",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "t (Double)\n\n2. Implemented methods:\n   - Initialize: Reads user-configured parameter values\n   - SizePosition: Uses standard calculation logic\n\nExample implementation:\n```csharp\npublic override double SizePosition(Transaction t, BarHistory bars, int idx, double basisPrice, double equity, double cash)\n{\n    return CalculatePositionSize(_posSizeType, _amount, bars, basisPrice, equity);\n}\n```\n\n## Example Implementation\n\nBelow is a complete implementation of the Max Entries per Bar Position Sizer:\n\n"
    }
  },
  {
    "pageContent": "t (Double)\n\n2. Implemented methods:\n   - Initialize: Reads user-configured parameter values\n   - SizePosition: Uses standard calculation logic\n\nExample implementation:\n```csharp\npublic override double SizePosition(Transaction t, BarHistory bars, int idx, double basisPrice, double equity, double cash)\n{\n    return CalculatePositionSize(_posSizeType, _amount, bars, basisPrice, equity);\n}\n```\n\n## Example Implementation\n\nBelow is a complete implementation of the Max Entries per Bar Position Sizer:\n\n\n\n```csharp\nusing System.Linq;\nusing WealthLab.Core;\n\nnamespace WealthLab.Backtest\n{\n    //A PosSizer that allows only a maximum number of entries per bar of data\n    public class MaxEntriesPerBar : BasicPositionSizer\n    {\n        //add parameter to control how many entries per day\n        public override void GenerateParameters()\n        {\n            base.GenerateParameters();\n            Parameters.Add(new Parameter(\"Max Entries\", ParameterType.Int32, 2, 1.0, 999999999.0));\n            Parameters.Add(new Parameter(\"For intraday trades, sum up positions opened during the day\", \n                ParameterType.Boolean, false));\n        }\n\n        //Name\n        public override string Name => \"Max Entries per Bar\";\n\n        //description\n        public override string Description => \n            \"Provides the basic Position Sizing options, with the additional ability to limit \" +\n            \"the number of entries taken on each bar (or day) of data.\";\n\n        //initialize\n        public override void Initialize()\n        {\n            base.Initialize();\n            _maxEntries = Parameters[2].AsInt;\n            _considerIntraday = Parameters[3].AsBoolean;\n        }\n\n        //Size the position, if max entries exceeded, set size to zero\n        public override double SizePosition(Transaction t, BarHistory bars, int idx, \n            double basisPrice, double equity, double cash)\n        {\n            int count = 0;\n\n            if (!_considerIntraday)\n            {\n                foreach (Transaction o in Orders)\n                    if (o.TransactionType.IsEntry())\n                        count++;\n            }\n            else\n            {\n                if (t.Bars.Scale.IsIntraday)\n                {\n                    var positionsInSymbolOpenedToday = Positions.AsParallel().AsOrdered().Reverse()\n                        .TakeWhile(p => p.EntryDate.DayOfYear == t.EntryDate.DayOfYear && \n                                      p.Symbol == t.Symbol);\n                    count += positionsInSymbolOpenedToday.Count();\n                }\n            }\n            \n            if (count >= _maxEntries)\n                return 0.0;\n            else\n                return base.SizePosition(t, bars, idx, basisPrice, equity, cash);\n        }\n\n        //private members\n        private int _maxEntries;\n        private bool _considerIntraday;\n    }\n}\n\n```",
    "metadata": {
      "id": "advanced-position-sizer",
      "title": "advanced-position-sizer",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/advanced-position-sizer.md",
      "chunkIndex": "code-context-3",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "# Backtester Class\n\n**Namespace:** WealthLab.Backtest  \n**Parent:** Object\n\nThe Backtester class is responsible for performing backtest runs in WL8, and returning information about those runs. This documentation focuses on the Backtester properties that provide performance information about backtest runs, typically for use in the development of ScoreCard or Performance Visualizer extensions.\n\n## Backtest Result Properties\n\n### BenchmarkBacktestResults\n",
    "metadata": {
      "id": "backtester",
      "title": "backtester",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/backtester.md",
      "chunkIndex": 0,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the Backtester instance for the benchmark comparison backtest run. This property might contain null, in which case it is most likely the benchmark backtest itself that is running.\n\n### CashCurve\n",
    "metadata": {
      "id": "backtester",
      "title": "backtester",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/backtester.md",
      "chunkIndex": 1,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns a TimeSeries instance that represents how much simulated cash was available during the backtest.\n\n### CashInterestEarned\n",
    "metadata": {
      "id": "backtester",
      "title": "backtester",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/backtester.md",
      "chunkIndex": 2,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the total simulated cash interest earned during the backtest.\n\n### CommissionsPaid\n",
    "metadata": {
      "id": "backtester",
      "title": "backtester",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/backtester.md",
      "chunkIndex": 3,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the total amount of simulated commission paid in the backtest.\n\n### CurrentCash\n",
    "metadata": {
      "id": "backtester",
      "title": "backtester",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/backtester.md",
      "chunkIndex": 4,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the simulated cash available at the end of the backtest.\n\n### CurrentEquity\n",
    "metadata": {
      "id": "backtester",
      "title": "backtester",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/backtester.md",
      "chunkIndex": 5,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the total equity (capital) at the end of the backtest.\n\n### DailyReturns\n",
    "metadata": {
      "id": "backtester",
      "title": "backtester",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/backtester.md",
      "chunkIndex": 6,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns a TimeSeries containing the daily percentage returns of backtest equity curve.\n\n### DividendsPaid\n",
    "metadata": {
      "id": "backtester",
      "title": "backtester",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/backtester.md",
      "chunkIndex": 7,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the amount of simulated dividends collected in the backtest. Dividends are captured from EventDataPoint instances in the BarHistory EventDataPoints property with \"dividend\" in the instance's Name property.\n\n### DrawdownCurve\n",
    "metadata": {
      "id": "backtester",
      "title": "backtester",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/backtester.md",
      "chunkIndex": 8,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns a TimeSeries instance of the backtest drawdown, which is the largest peak to trough decline of the equity over time.\n\n### DrawdownPctCurve\n",
    "metadata": {
      "id": "backtester",
      "title": "backtester",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/backtester.md",
      "chunkIndex": 9,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns a TimeSeries instance of the backtest drawdown percentage.\n\n### EquityCurve\n",
    "metadata": {
      "id": "backtester",
      "title": "backtester",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/backtester.md",
      "chunkIndex": 10,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns a TimeSeries instance that represents the equity curve of the backtest.\n\n### LiveAccount\n",
    "metadata": {
      "id": "backtester",
      "title": "backtester",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/backtester.md",
      "chunkIndex": 11,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns a read-only Live BrokerAccount instance in the Strategy Monitor or Streaming Strategy Window.\n\n**Remarks:**\n- LiveAccount is null if the Backtester is not operating with the Live Positions preference\n- The Dummy Broker is also considered a live broker account\n\n### LosingPositions\n",
    "metadata": {
      "id": "backtester",
      "title": "backtester",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/backtester.md",
      "chunkIndex": 12,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns a PositionList instance containing Position instances for positions with net profit less than zero.\n\n### MarginInterestPaid\n",
    "metadata": {
      "id": "backtester",
      "title": "backtester",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/backtester.md",
      "chunkIndex": 13,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the amount of simulated interest paid for going on margin in the backtest.\n\n### MonthlyNegativeReturns\n",
    "metadata": {
      "id": "backtester",
      "title": "backtester",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/backtester.md",
      "chunkIndex": 14,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns a TimeSeries containing negative monthly percentage returns used for Sortino Ratio calculation.\n\n### MonthlyReturns\n",
    "metadata": {
      "id": "backtester",
      "title": "backtester",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/backtester.md",
      "chunkIndex": 15,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns a TimeSeries containing monthly percentage returns of backtest equity curve.\n\n### NetProfit\n",
    "metadata": {
      "id": "backtester",
      "title": "backtester",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/backtester.md",
      "chunkIndex": 16,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the net profit of the backtest.\n\n### NetProfitPct\n",
    "metadata": {
      "id": "backtester",
      "title": "backtester",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/backtester.md",
      "chunkIndex": 17,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the percentage net profit of the backtest.\n\n### NSFPositions\n",
    "metadata": {
      "id": "backtester",
      "title": "backtester",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/backtester.md",
      "chunkIndex": 18,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns a PositionList instance for positions flagged as NSF (non-sufficient funds).\n\n### OpenPositionCount\n",
    "metadata": {
      "id": "backtester",
      "title": "backtester",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/backtester.md",
      "chunkIndex": 19,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the number of currently open positions, excluding NSF positions.\n\n### OpenPositionCountHistory\n",
    "metadata": {
      "id": "backtester",
      "title": "backtester",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/backtester.md",
      "chunkIndex": 20,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns a TimeSeries instance containing number of open positions over time.\n\n### OpenPositions\n",
    "metadata": {
      "id": "backtester",
      "title": "backtester",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/backtester.md",
      "chunkIndex": 21,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns a PositionList instance containing open positions including NSF positions.\n\n### Orders\n",
    "metadata": {
      "id": "backtester",
      "title": "backtester",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/backtester.md",
      "chunkIndex": 22,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns a List of Transaction instances representing pending orders.\n\n### PositionMetricNames\n",
    "metadata": {
      "id": "backtester",
      "title": "backtester",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/backtester.md",
      "chunkIndex": 23,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns a list of all available Position Metrics for this backtest run.\n\n### Positions\n",
    "metadata": {
      "id": "backtester",
      "title": "backtester",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/backtester.md",
      "chunkIndex": 24,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns a PositionList instance containing all positions taken during the backtest.\n\n### RiskFreeRateOfReturn\n",
    "metadata": {
      "id": "backtester",
      "title": "backtester",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/backtester.md",
      "chunkIndex": 25,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the average percentage return of 1-year US Treasury yield for the backtest timespan.\n\n### TradeCountHistory\n",
    "metadata": {
      "id": "backtester",
      "title": "backtester",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/backtester.md",
      "chunkIndex": 26,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns a TimeSeries instance containing number of trades over time.\n\n### TransactionLog\n",
    "metadata": {
      "id": "backtester",
      "title": "backtester",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/backtester.md",
      "chunkIndex": 27,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns a list of all Transaction instances representing executed trades.\n\n### WinningPositions\n",
    "metadata": {
      "id": "backtester",
      "title": "backtester",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/backtester.md",
      "chunkIndex": 28,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns a PositionList instance containing positions with net profit >= 0.\n\n### YearlyReturns\n",
    "metadata": {
      "id": "backtester",
      "title": "backtester",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/backtester.md",
      "chunkIndex": 29,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns a TimeSeries containing yearly percentage returns.\n\n## Informational Properties\n\n### BacktestSettings\n",
    "metadata": {
      "id": "backtester",
      "title": "backtester",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/backtester.md",
      "chunkIndex": 30,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the backtest settings used in the backtest.\n\n### ExecutionMode\n",
    "metadata": {
      "id": "backtester",
      "title": "backtester",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/backtester.md",
      "chunkIndex": 31,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the context in which the Strategy is being executed:\n- Strategy\n- Optimization\n- StreamingChart\n- StrategyMonitor\n- Rankings\n- Evolver\n\n### PositionSize\n",
    "metadata": {
      "id": "backtester",
      "title": "backtester",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/backtester.md",
      "chunkIndex": 32,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the position sizing method used in the backtest.\n\n### StartingCapital\n",
    "metadata": {
      "id": "backtester",
      "title": "backtester",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/backtester.md",
      "chunkIndex": 33,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the starting capital used for the backtest.\n\n### Strategy\n",
    "metadata": {
      "id": "backtester",
      "title": "backtester",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/backtester.md",
      "chunkIndex": 34,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the instance of the Strategy class.\n\n### Symbols\n",
    "metadata": {
      "id": "backtester",
      "title": "backtester",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/backtester.md",
      "chunkIndex": 35,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns a List containing BarHistory instances for backtested symbols.\n\n## Metrics\n\n### Metrics\n",
    "metadata": {
      "id": "backtester",
      "title": "backtester",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/backtester.md",
      "chunkIndex": 36,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns a dynamic class instance containing various performance metrics from available ScoreCards.\n\n## Trading Control\n\n### CancelationCode\n",
    "metadata": {
      "id": "backtester",
      "title": "backtester",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/backtester.md",
      "chunkIndex": 37,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nUsed to group exit orders into one logical unit. When one order fills, other open orders with the same code are canceled.\n\n**Note:** CancelationCode is unique by symbol - you can use the same code for different symbols. ",
    "metadata": {
      "id": "backtester",
      "title": "backtester",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/backtester.md",
      "chunkIndex": 38,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "public Backtester BenchmarkBacktestResults\n",
    "metadata": {
      "id": "backtester",
      "title": "backtester",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/backtester.md",
      "chunkIndex": "code-0",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "# Backtester Class\n\n**Namespace:** WealthLab.Backtest  \n**Parent:** Object\n\nThe Backtester class is responsible for performing backtest runs in WL8, and returning information about those runs. This documentation focuses on the Backtester properties that provide performance information about backtest runs, typically for use in the development of ScoreCard or Performance Visualizer extensions.\n\n## Backtest Result Properties\n\n### BenchmarkBacktestResults\n"
    }
  },
  {
    "pageContent": "# Backtester Class\n\n**Namespace:** WealthLab.Backtest  \n**Parent:** Object\n\nThe Backtester class is responsible for performing backtest runs in WL8, and returning information about those runs. This documentation focuses on the Backtester properties that provide performance information about backtest runs, typically for use in the development of ScoreCard or Performance Visualizer extensions.\n\n## Backtest Result Properties\n\n### BenchmarkBacktestResults\n\n\n```csharp\npublic Backtester BenchmarkBacktestResults\n\n```",
    "metadata": {
      "id": "backtester",
      "title": "backtester",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/backtester.md",
      "chunkIndex": "code-context-0",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public TimeSeries CashCurve\n",
    "metadata": {
      "id": "backtester",
      "title": "backtester",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/backtester.md",
      "chunkIndex": "code-1",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ses on the Backtester properties that provide performance information about backtest runs, typically for use in the development of ScoreCard or Performance Visualizer extensions.\n\n## Backtest Result Properties\n\n### BenchmarkBacktestResults\n```csharp\npublic Backtester BenchmarkBacktestResults\n```\nReturns the Backtester instance for the benchmark comparison backtest run. This property might contain null, in which case it is most likely the benchmark backtest itself that is running.\n\n### CashCurve\n"
    }
  },
  {
    "pageContent": "ses on the Backtester properties that provide performance information about backtest runs, typically for use in the development of ScoreCard or Performance Visualizer extensions.\n\n## Backtest Result Properties\n\n### BenchmarkBacktestResults\n```csharp\npublic Backtester BenchmarkBacktestResults\n```\nReturns the Backtester instance for the benchmark comparison backtest run. This property might contain null, in which case it is most likely the benchmark backtest itself that is running.\n\n### CashCurve\n\n\n```csharp\npublic TimeSeries CashCurve\n\n```",
    "metadata": {
      "id": "backtester",
      "title": "backtester",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/backtester.md",
      "chunkIndex": "code-context-1",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public double CashInterestEarned\n",
    "metadata": {
      "id": "backtester",
      "title": "backtester",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/backtester.md",
      "chunkIndex": "code-2",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "nsions.\n\n## Backtest Result Properties\n\n### BenchmarkBacktestResults\n```csharp\npublic Backtester BenchmarkBacktestResults\n```\nReturns the Backtester instance for the benchmark comparison backtest run. This property might contain null, in which case it is most likely the benchmark backtest itself that is running.\n\n### CashCurve\n```csharp\npublic TimeSeries CashCurve\n```\nReturns a TimeSeries instance that represents how much simulated cash was available during the backtest.\n\n### CashInterestEarned\n"
    }
  },
  {
    "pageContent": "nsions.\n\n## Backtest Result Properties\n\n### BenchmarkBacktestResults\n```csharp\npublic Backtester BenchmarkBacktestResults\n```\nReturns the Backtester instance for the benchmark comparison backtest run. This property might contain null, in which case it is most likely the benchmark backtest itself that is running.\n\n### CashCurve\n```csharp\npublic TimeSeries CashCurve\n```\nReturns a TimeSeries instance that represents how much simulated cash was available during the backtest.\n\n### CashInterestEarned\n\n\n```csharp\npublic double CashInterestEarned\n\n```",
    "metadata": {
      "id": "backtester",
      "title": "backtester",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/backtester.md",
      "chunkIndex": "code-context-2",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public double CommissionsPaid\n",
    "metadata": {
      "id": "backtester",
      "title": "backtester",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/backtester.md",
      "chunkIndex": "code-3",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "Backtester instance for the benchmark comparison backtest run. This property might contain null, in which case it is most likely the benchmark backtest itself that is running.\n\n### CashCurve\n```csharp\npublic TimeSeries CashCurve\n```\nReturns a TimeSeries instance that represents how much simulated cash was available during the backtest.\n\n### CashInterestEarned\n```csharp\npublic double CashInterestEarned\n```\nReturns the total simulated cash interest earned during the backtest.\n\n### CommissionsPaid\n"
    }
  },
  {
    "pageContent": "Backtester instance for the benchmark comparison backtest run. This property might contain null, in which case it is most likely the benchmark backtest itself that is running.\n\n### CashCurve\n```csharp\npublic TimeSeries CashCurve\n```\nReturns a TimeSeries instance that represents how much simulated cash was available during the backtest.\n\n### CashInterestEarned\n```csharp\npublic double CashInterestEarned\n```\nReturns the total simulated cash interest earned during the backtest.\n\n### CommissionsPaid\n\n\n```csharp\npublic double CommissionsPaid\n\n```",
    "metadata": {
      "id": "backtester",
      "title": "backtester",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/backtester.md",
      "chunkIndex": "code-context-3",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public double CurrentCash\n",
    "metadata": {
      "id": "backtester",
      "title": "backtester",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/backtester.md",
      "chunkIndex": "code-4",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": " benchmark backtest itself that is running.\n\n### CashCurve\n```csharp\npublic TimeSeries CashCurve\n```\nReturns a TimeSeries instance that represents how much simulated cash was available during the backtest.\n\n### CashInterestEarned\n```csharp\npublic double CashInterestEarned\n```\nReturns the total simulated cash interest earned during the backtest.\n\n### CommissionsPaid\n```csharp\npublic double CommissionsPaid\n```\nReturns the total amount of simulated commission paid in the backtest.\n\n### CurrentCash\n"
    }
  },
  {
    "pageContent": " benchmark backtest itself that is running.\n\n### CashCurve\n```csharp\npublic TimeSeries CashCurve\n```\nReturns a TimeSeries instance that represents how much simulated cash was available during the backtest.\n\n### CashInterestEarned\n```csharp\npublic double CashInterestEarned\n```\nReturns the total simulated cash interest earned during the backtest.\n\n### CommissionsPaid\n```csharp\npublic double CommissionsPaid\n```\nReturns the total amount of simulated commission paid in the backtest.\n\n### CurrentCash\n\n\n```csharp\npublic double CurrentCash\n\n```",
    "metadata": {
      "id": "backtester",
      "title": "backtester",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/backtester.md",
      "chunkIndex": "code-context-4",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public double CurrentEquity\n",
    "metadata": {
      "id": "backtester",
      "title": "backtester",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/backtester.md",
      "chunkIndex": "code-5",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "stance that represents how much simulated cash was available during the backtest.\n\n### CashInterestEarned\n```csharp\npublic double CashInterestEarned\n```\nReturns the total simulated cash interest earned during the backtest.\n\n### CommissionsPaid\n```csharp\npublic double CommissionsPaid\n```\nReturns the total amount of simulated commission paid in the backtest.\n\n### CurrentCash\n```csharp\npublic double CurrentCash\n```\nReturns the simulated cash available at the end of the backtest.\n\n### CurrentEquity\n"
    }
  },
  {
    "pageContent": "stance that represents how much simulated cash was available during the backtest.\n\n### CashInterestEarned\n```csharp\npublic double CashInterestEarned\n```\nReturns the total simulated cash interest earned during the backtest.\n\n### CommissionsPaid\n```csharp\npublic double CommissionsPaid\n```\nReturns the total amount of simulated commission paid in the backtest.\n\n### CurrentCash\n```csharp\npublic double CurrentCash\n```\nReturns the simulated cash available at the end of the backtest.\n\n### CurrentEquity\n\n\n```csharp\npublic double CurrentEquity\n\n```",
    "metadata": {
      "id": "backtester",
      "title": "backtester",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/backtester.md",
      "chunkIndex": "code-context-5",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public TimeSeries DailyReturns\n",
    "metadata": {
      "id": "backtester",
      "title": "backtester",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/backtester.md",
      "chunkIndex": "code-6",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "double CashInterestEarned\n```\nReturns the total simulated cash interest earned during the backtest.\n\n### CommissionsPaid\n```csharp\npublic double CommissionsPaid\n```\nReturns the total amount of simulated commission paid in the backtest.\n\n### CurrentCash\n```csharp\npublic double CurrentCash\n```\nReturns the simulated cash available at the end of the backtest.\n\n### CurrentEquity\n```csharp\npublic double CurrentEquity\n```\nReturns the total equity (capital) at the end of the backtest.\n\n### DailyReturns\n"
    }
  },
  {
    "pageContent": "double CashInterestEarned\n```\nReturns the total simulated cash interest earned during the backtest.\n\n### CommissionsPaid\n```csharp\npublic double CommissionsPaid\n```\nReturns the total amount of simulated commission paid in the backtest.\n\n### CurrentCash\n```csharp\npublic double CurrentCash\n```\nReturns the simulated cash available at the end of the backtest.\n\n### CurrentEquity\n```csharp\npublic double CurrentEquity\n```\nReturns the total equity (capital) at the end of the backtest.\n\n### DailyReturns\n\n\n```csharp\npublic TimeSeries DailyReturns\n\n```",
    "metadata": {
      "id": "backtester",
      "title": "backtester",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/backtester.md",
      "chunkIndex": "code-context-6",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public double DividendsPaid\n",
    "metadata": {
      "id": "backtester",
      "title": "backtester",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/backtester.md",
      "chunkIndex": "code-7",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "sionsPaid\n```\nReturns the total amount of simulated commission paid in the backtest.\n\n### CurrentCash\n```csharp\npublic double CurrentCash\n```\nReturns the simulated cash available at the end of the backtest.\n\n### CurrentEquity\n```csharp\npublic double CurrentEquity\n```\nReturns the total equity (capital) at the end of the backtest.\n\n### DailyReturns\n```csharp\npublic TimeSeries DailyReturns\n```\nReturns a TimeSeries containing the daily percentage returns of backtest equity curve.\n\n### DividendsPaid\n"
    }
  },
  {
    "pageContent": "sionsPaid\n```\nReturns the total amount of simulated commission paid in the backtest.\n\n### CurrentCash\n```csharp\npublic double CurrentCash\n```\nReturns the simulated cash available at the end of the backtest.\n\n### CurrentEquity\n```csharp\npublic double CurrentEquity\n```\nReturns the total equity (capital) at the end of the backtest.\n\n### DailyReturns\n```csharp\npublic TimeSeries DailyReturns\n```\nReturns a TimeSeries containing the daily percentage returns of backtest equity curve.\n\n### DividendsPaid\n\n\n```csharp\npublic double DividendsPaid\n\n```",
    "metadata": {
      "id": "backtester",
      "title": "backtester",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/backtester.md",
      "chunkIndex": "code-context-7",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public TimeSeries DrawdownCurve\n",
    "metadata": {
      "id": "backtester",
      "title": "backtester",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/backtester.md",
      "chunkIndex": "code-8",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": " the total equity (capital) at the end of the backtest.\n\n### DailyReturns\n```csharp\npublic TimeSeries DailyReturns\n```\nReturns a TimeSeries containing the daily percentage returns of backtest equity curve.\n\n### DividendsPaid\n```csharp\npublic double DividendsPaid\n```\nReturns the amount of simulated dividends collected in the backtest. Dividends are captured from EventDataPoint instances in the BarHistory EventDataPoints property with \"dividend\" in the instance's Name property.\n\n### DrawdownCurve\n"
    }
  },
  {
    "pageContent": " the total equity (capital) at the end of the backtest.\n\n### DailyReturns\n```csharp\npublic TimeSeries DailyReturns\n```\nReturns a TimeSeries containing the daily percentage returns of backtest equity curve.\n\n### DividendsPaid\n```csharp\npublic double DividendsPaid\n```\nReturns the amount of simulated dividends collected in the backtest. Dividends are captured from EventDataPoint instances in the BarHistory EventDataPoints property with \"dividend\" in the instance's Name property.\n\n### DrawdownCurve\n\n\n```csharp\npublic TimeSeries DrawdownCurve\n\n```",
    "metadata": {
      "id": "backtester",
      "title": "backtester",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/backtester.md",
      "chunkIndex": "code-context-8",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public TimeSeries DrawdownPctCurve\n",
    "metadata": {
      "id": "backtester",
      "title": "backtester",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/backtester.md",
      "chunkIndex": "code-9",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "quity curve.\n\n### DividendsPaid\n```csharp\npublic double DividendsPaid\n```\nReturns the amount of simulated dividends collected in the backtest. Dividends are captured from EventDataPoint instances in the BarHistory EventDataPoints property with \"dividend\" in the instance's Name property.\n\n### DrawdownCurve\n```csharp\npublic TimeSeries DrawdownCurve\n```\nReturns a TimeSeries instance of the backtest drawdown, which is the largest peak to trough decline of the equity over time.\n\n### DrawdownPctCurve\n"
    }
  },
  {
    "pageContent": "quity curve.\n\n### DividendsPaid\n```csharp\npublic double DividendsPaid\n```\nReturns the amount of simulated dividends collected in the backtest. Dividends are captured from EventDataPoint instances in the BarHistory EventDataPoints property with \"dividend\" in the instance's Name property.\n\n### DrawdownCurve\n```csharp\npublic TimeSeries DrawdownCurve\n```\nReturns a TimeSeries instance of the backtest drawdown, which is the largest peak to trough decline of the equity over time.\n\n### DrawdownPctCurve\n\n\n```csharp\npublic TimeSeries DrawdownPctCurve\n\n```",
    "metadata": {
      "id": "backtester",
      "title": "backtester",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/backtester.md",
      "chunkIndex": "code-context-9",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public TimeSeries EquityCurve\n",
    "metadata": {
      "id": "backtester",
      "title": "backtester",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/backtester.md",
      "chunkIndex": "code-10",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "backtest. Dividends are captured from EventDataPoint instances in the BarHistory EventDataPoints property with \"dividend\" in the instance's Name property.\n\n### DrawdownCurve\n```csharp\npublic TimeSeries DrawdownCurve\n```\nReturns a TimeSeries instance of the backtest drawdown, which is the largest peak to trough decline of the equity over time.\n\n### DrawdownPctCurve\n```csharp\npublic TimeSeries DrawdownPctCurve\n```\nReturns a TimeSeries instance of the backtest drawdown percentage.\n\n### EquityCurve\n"
    }
  },
  {
    "pageContent": "backtest. Dividends are captured from EventDataPoint instances in the BarHistory EventDataPoints property with \"dividend\" in the instance's Name property.\n\n### DrawdownCurve\n```csharp\npublic TimeSeries DrawdownCurve\n```\nReturns a TimeSeries instance of the backtest drawdown, which is the largest peak to trough decline of the equity over time.\n\n### DrawdownPctCurve\n```csharp\npublic TimeSeries DrawdownPctCurve\n```\nReturns a TimeSeries instance of the backtest drawdown percentage.\n\n### EquityCurve\n\n\n```csharp\npublic TimeSeries EquityCurve\n\n```",
    "metadata": {
      "id": "backtester",
      "title": "backtester",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/backtester.md",
      "chunkIndex": "code-context-10",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public BrokerAccount LiveAccount\n",
    "metadata": {
      "id": "backtester",
      "title": "backtester",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/backtester.md",
      "chunkIndex": "code-11",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ame property.\n\n### DrawdownCurve\n```csharp\npublic TimeSeries DrawdownCurve\n```\nReturns a TimeSeries instance of the backtest drawdown, which is the largest peak to trough decline of the equity over time.\n\n### DrawdownPctCurve\n```csharp\npublic TimeSeries DrawdownPctCurve\n```\nReturns a TimeSeries instance of the backtest drawdown percentage.\n\n### EquityCurve\n```csharp\npublic TimeSeries EquityCurve\n```\nReturns a TimeSeries instance that represents the equity curve of the backtest.\n\n### LiveAccount\n"
    }
  },
  {
    "pageContent": "ame property.\n\n### DrawdownCurve\n```csharp\npublic TimeSeries DrawdownCurve\n```\nReturns a TimeSeries instance of the backtest drawdown, which is the largest peak to trough decline of the equity over time.\n\n### DrawdownPctCurve\n```csharp\npublic TimeSeries DrawdownPctCurve\n```\nReturns a TimeSeries instance of the backtest drawdown percentage.\n\n### EquityCurve\n```csharp\npublic TimeSeries EquityCurve\n```\nReturns a TimeSeries instance that represents the equity curve of the backtest.\n\n### LiveAccount\n\n\n```csharp\npublic BrokerAccount LiveAccount\n\n```",
    "metadata": {
      "id": "backtester",
      "title": "backtester",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/backtester.md",
      "chunkIndex": "code-context-11",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public PositionList LosingPositions\n",
    "metadata": {
      "id": "backtester",
      "title": "backtester",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/backtester.md",
      "chunkIndex": "code-12",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "tage.\n\n### EquityCurve\n```csharp\npublic TimeSeries EquityCurve\n```\nReturns a TimeSeries instance that represents the equity curve of the backtest.\n\n### LiveAccount\n```csharp\npublic BrokerAccount LiveAccount\n```\nReturns a read-only Live BrokerAccount instance in the Strategy Monitor or Streaming Strategy Window.\n\n**Remarks:**\n- LiveAccount is null if the Backtester is not operating with the Live Positions preference\n- The Dummy Broker is also considered a live broker account\n\n### LosingPositions\n"
    }
  },
  {
    "pageContent": "tage.\n\n### EquityCurve\n```csharp\npublic TimeSeries EquityCurve\n```\nReturns a TimeSeries instance that represents the equity curve of the backtest.\n\n### LiveAccount\n```csharp\npublic BrokerAccount LiveAccount\n```\nReturns a read-only Live BrokerAccount instance in the Strategy Monitor or Streaming Strategy Window.\n\n**Remarks:**\n- LiveAccount is null if the Backtester is not operating with the Live Positions preference\n- The Dummy Broker is also considered a live broker account\n\n### LosingPositions\n\n\n```csharp\npublic PositionList LosingPositions\n\n```",
    "metadata": {
      "id": "backtester",
      "title": "backtester",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/backtester.md",
      "chunkIndex": "code-context-12",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public double MarginInterestPaid\n",
    "metadata": {
      "id": "backtester",
      "title": "backtester",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/backtester.md",
      "chunkIndex": "code-13",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "rokerAccount LiveAccount\n```\nReturns a read-only Live BrokerAccount instance in the Strategy Monitor or Streaming Strategy Window.\n\n**Remarks:**\n- LiveAccount is null if the Backtester is not operating with the Live Positions preference\n- The Dummy Broker is also considered a live broker account\n\n### LosingPositions\n```csharp\npublic PositionList LosingPositions\n```\nReturns a PositionList instance containing Position instances for positions with net profit less than zero.\n\n### MarginInterestPaid\n"
    }
  },
  {
    "pageContent": "rokerAccount LiveAccount\n```\nReturns a read-only Live BrokerAccount instance in the Strategy Monitor or Streaming Strategy Window.\n\n**Remarks:**\n- LiveAccount is null if the Backtester is not operating with the Live Positions preference\n- The Dummy Broker is also considered a live broker account\n\n### LosingPositions\n```csharp\npublic PositionList LosingPositions\n```\nReturns a PositionList instance containing Position instances for positions with net profit less than zero.\n\n### MarginInterestPaid\n\n\n```csharp\npublic double MarginInterestPaid\n\n```",
    "metadata": {
      "id": "backtester",
      "title": "backtester",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/backtester.md",
      "chunkIndex": "code-context-13",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public TimeSeries MonthlyNegativeReturns\n",
    "metadata": {
      "id": "backtester",
      "title": "backtester",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/backtester.md",
      "chunkIndex": "code-14",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": " is null if the Backtester is not operating with the Live Positions preference\n- The Dummy Broker is also considered a live broker account\n\n### LosingPositions\n```csharp\npublic PositionList LosingPositions\n```\nReturns a PositionList instance containing Position instances for positions with net profit less than zero.\n\n### MarginInterestPaid\n```csharp\npublic double MarginInterestPaid\n```\nReturns the amount of simulated interest paid for going on margin in the backtest.\n\n### MonthlyNegativeReturns\n"
    }
  },
  {
    "pageContent": " is null if the Backtester is not operating with the Live Positions preference\n- The Dummy Broker is also considered a live broker account\n\n### LosingPositions\n```csharp\npublic PositionList LosingPositions\n```\nReturns a PositionList instance containing Position instances for positions with net profit less than zero.\n\n### MarginInterestPaid\n```csharp\npublic double MarginInterestPaid\n```\nReturns the amount of simulated interest paid for going on margin in the backtest.\n\n### MonthlyNegativeReturns\n\n\n```csharp\npublic TimeSeries MonthlyNegativeReturns\n\n```",
    "metadata": {
      "id": "backtester",
      "title": "backtester",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/backtester.md",
      "chunkIndex": "code-context-14",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public TimeSeries MonthlyReturns\n",
    "metadata": {
      "id": "backtester",
      "title": "backtester",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/backtester.md",
      "chunkIndex": "code-15",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "sitionList LosingPositions\n```\nReturns a PositionList instance containing Position instances for positions with net profit less than zero.\n\n### MarginInterestPaid\n```csharp\npublic double MarginInterestPaid\n```\nReturns the amount of simulated interest paid for going on margin in the backtest.\n\n### MonthlyNegativeReturns\n```csharp\npublic TimeSeries MonthlyNegativeReturns\n```\nReturns a TimeSeries containing negative monthly percentage returns used for Sortino Ratio calculation.\n\n### MonthlyReturns\n"
    }
  },
  {
    "pageContent": "sitionList LosingPositions\n```\nReturns a PositionList instance containing Position instances for positions with net profit less than zero.\n\n### MarginInterestPaid\n```csharp\npublic double MarginInterestPaid\n```\nReturns the amount of simulated interest paid for going on margin in the backtest.\n\n### MonthlyNegativeReturns\n```csharp\npublic TimeSeries MonthlyNegativeReturns\n```\nReturns a TimeSeries containing negative monthly percentage returns used for Sortino Ratio calculation.\n\n### MonthlyReturns\n\n\n```csharp\npublic TimeSeries MonthlyReturns\n\n```",
    "metadata": {
      "id": "backtester",
      "title": "backtester",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/backtester.md",
      "chunkIndex": "code-context-15",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public double NetProfit\n",
    "metadata": {
      "id": "backtester",
      "title": "backtester",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/backtester.md",
      "chunkIndex": "code-16",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ginInterestPaid\n```csharp\npublic double MarginInterestPaid\n```\nReturns the amount of simulated interest paid for going on margin in the backtest.\n\n### MonthlyNegativeReturns\n```csharp\npublic TimeSeries MonthlyNegativeReturns\n```\nReturns a TimeSeries containing negative monthly percentage returns used for Sortino Ratio calculation.\n\n### MonthlyReturns\n```csharp\npublic TimeSeries MonthlyReturns\n```\nReturns a TimeSeries containing monthly percentage returns of backtest equity curve.\n\n### NetProfit\n"
    }
  },
  {
    "pageContent": "ginInterestPaid\n```csharp\npublic double MarginInterestPaid\n```\nReturns the amount of simulated interest paid for going on margin in the backtest.\n\n### MonthlyNegativeReturns\n```csharp\npublic TimeSeries MonthlyNegativeReturns\n```\nReturns a TimeSeries containing negative monthly percentage returns used for Sortino Ratio calculation.\n\n### MonthlyReturns\n```csharp\npublic TimeSeries MonthlyReturns\n```\nReturns a TimeSeries containing monthly percentage returns of backtest equity curve.\n\n### NetProfit\n\n\n```csharp\npublic double NetProfit\n\n```",
    "metadata": {
      "id": "backtester",
      "title": "backtester",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/backtester.md",
      "chunkIndex": "code-context-16",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public double NetProfitPct\n",
    "metadata": {
      "id": "backtester",
      "title": "backtester",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/backtester.md",
      "chunkIndex": "code-17",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "nterest paid for going on margin in the backtest.\n\n### MonthlyNegativeReturns\n```csharp\npublic TimeSeries MonthlyNegativeReturns\n```\nReturns a TimeSeries containing negative monthly percentage returns used for Sortino Ratio calculation.\n\n### MonthlyReturns\n```csharp\npublic TimeSeries MonthlyReturns\n```\nReturns a TimeSeries containing monthly percentage returns of backtest equity curve.\n\n### NetProfit\n```csharp\npublic double NetProfit\n```\nReturns the net profit of the backtest.\n\n### NetProfitPct\n"
    }
  },
  {
    "pageContent": "nterest paid for going on margin in the backtest.\n\n### MonthlyNegativeReturns\n```csharp\npublic TimeSeries MonthlyNegativeReturns\n```\nReturns a TimeSeries containing negative monthly percentage returns used for Sortino Ratio calculation.\n\n### MonthlyReturns\n```csharp\npublic TimeSeries MonthlyReturns\n```\nReturns a TimeSeries containing monthly percentage returns of backtest equity curve.\n\n### NetProfit\n```csharp\npublic double NetProfit\n```\nReturns the net profit of the backtest.\n\n### NetProfitPct\n\n\n```csharp\npublic double NetProfitPct\n\n```",
    "metadata": {
      "id": "backtester",
      "title": "backtester",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/backtester.md",
      "chunkIndex": "code-context-17",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public PositionList NSFPositions\n",
    "metadata": {
      "id": "backtester",
      "title": "backtester",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/backtester.md",
      "chunkIndex": "code-18",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "hlyNegativeReturns\n```\nReturns a TimeSeries containing negative monthly percentage returns used for Sortino Ratio calculation.\n\n### MonthlyReturns\n```csharp\npublic TimeSeries MonthlyReturns\n```\nReturns a TimeSeries containing monthly percentage returns of backtest equity curve.\n\n### NetProfit\n```csharp\npublic double NetProfit\n```\nReturns the net profit of the backtest.\n\n### NetProfitPct\n```csharp\npublic double NetProfitPct\n```\nReturns the percentage net profit of the backtest.\n\n### NSFPositions\n"
    }
  },
  {
    "pageContent": "hlyNegativeReturns\n```\nReturns a TimeSeries containing negative monthly percentage returns used for Sortino Ratio calculation.\n\n### MonthlyReturns\n```csharp\npublic TimeSeries MonthlyReturns\n```\nReturns a TimeSeries containing monthly percentage returns of backtest equity curve.\n\n### NetProfit\n```csharp\npublic double NetProfit\n```\nReturns the net profit of the backtest.\n\n### NetProfitPct\n```csharp\npublic double NetProfitPct\n```\nReturns the percentage net profit of the backtest.\n\n### NSFPositions\n\n\n```csharp\npublic PositionList NSFPositions\n\n```",
    "metadata": {
      "id": "backtester",
      "title": "backtester",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/backtester.md",
      "chunkIndex": "code-context-18",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public int OpenPositionCount\n",
    "metadata": {
      "id": "backtester",
      "title": "backtester",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/backtester.md",
      "chunkIndex": "code-19",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "p\npublic TimeSeries MonthlyReturns\n```\nReturns a TimeSeries containing monthly percentage returns of backtest equity curve.\n\n### NetProfit\n```csharp\npublic double NetProfit\n```\nReturns the net profit of the backtest.\n\n### NetProfitPct\n```csharp\npublic double NetProfitPct\n```\nReturns the percentage net profit of the backtest.\n\n### NSFPositions\n```csharp\npublic PositionList NSFPositions\n```\nReturns a PositionList instance for positions flagged as NSF (non-sufficient funds).\n\n### OpenPositionCount\n"
    }
  },
  {
    "pageContent": "p\npublic TimeSeries MonthlyReturns\n```\nReturns a TimeSeries containing monthly percentage returns of backtest equity curve.\n\n### NetProfit\n```csharp\npublic double NetProfit\n```\nReturns the net profit of the backtest.\n\n### NetProfitPct\n```csharp\npublic double NetProfitPct\n```\nReturns the percentage net profit of the backtest.\n\n### NSFPositions\n```csharp\npublic PositionList NSFPositions\n```\nReturns a PositionList instance for positions flagged as NSF (non-sufficient funds).\n\n### OpenPositionCount\n\n\n```csharp\npublic int OpenPositionCount\n\n```",
    "metadata": {
      "id": "backtester",
      "title": "backtester",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/backtester.md",
      "chunkIndex": "code-context-19",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public TimeSeries OpenPositionCountHistory\n",
    "metadata": {
      "id": "backtester",
      "title": "backtester",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/backtester.md",
      "chunkIndex": "code-20",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "rp\npublic double NetProfit\n```\nReturns the net profit of the backtest.\n\n### NetProfitPct\n```csharp\npublic double NetProfitPct\n```\nReturns the percentage net profit of the backtest.\n\n### NSFPositions\n```csharp\npublic PositionList NSFPositions\n```\nReturns a PositionList instance for positions flagged as NSF (non-sufficient funds).\n\n### OpenPositionCount\n```csharp\npublic int OpenPositionCount\n```\nReturns the number of currently open positions, excluding NSF positions.\n\n### OpenPositionCountHistory\n"
    }
  },
  {
    "pageContent": "rp\npublic double NetProfit\n```\nReturns the net profit of the backtest.\n\n### NetProfitPct\n```csharp\npublic double NetProfitPct\n```\nReturns the percentage net profit of the backtest.\n\n### NSFPositions\n```csharp\npublic PositionList NSFPositions\n```\nReturns a PositionList instance for positions flagged as NSF (non-sufficient funds).\n\n### OpenPositionCount\n```csharp\npublic int OpenPositionCount\n```\nReturns the number of currently open positions, excluding NSF positions.\n\n### OpenPositionCountHistory\n\n\n```csharp\npublic TimeSeries OpenPositionCountHistory\n\n```",
    "metadata": {
      "id": "backtester",
      "title": "backtester",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/backtester.md",
      "chunkIndex": "code-context-20",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public PositionList OpenPositions\n",
    "metadata": {
      "id": "backtester",
      "title": "backtester",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/backtester.md",
      "chunkIndex": "code-21",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "net profit of the backtest.\n\n### NSFPositions\n```csharp\npublic PositionList NSFPositions\n```\nReturns a PositionList instance for positions flagged as NSF (non-sufficient funds).\n\n### OpenPositionCount\n```csharp\npublic int OpenPositionCount\n```\nReturns the number of currently open positions, excluding NSF positions.\n\n### OpenPositionCountHistory\n```csharp\npublic TimeSeries OpenPositionCountHistory\n```\nReturns a TimeSeries instance containing number of open positions over time.\n\n### OpenPositions\n"
    }
  },
  {
    "pageContent": "net profit of the backtest.\n\n### NSFPositions\n```csharp\npublic PositionList NSFPositions\n```\nReturns a PositionList instance for positions flagged as NSF (non-sufficient funds).\n\n### OpenPositionCount\n```csharp\npublic int OpenPositionCount\n```\nReturns the number of currently open positions, excluding NSF positions.\n\n### OpenPositionCountHistory\n```csharp\npublic TimeSeries OpenPositionCountHistory\n```\nReturns a TimeSeries instance containing number of open positions over time.\n\n### OpenPositions\n\n\n```csharp\npublic PositionList OpenPositions\n\n```",
    "metadata": {
      "id": "backtester",
      "title": "backtester",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/backtester.md",
      "chunkIndex": "code-context-21",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public List<Transaction> Orders\n",
    "metadata": {
      "id": "backtester",
      "title": "backtester",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/backtester.md",
      "chunkIndex": "code-22",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ged as NSF (non-sufficient funds).\n\n### OpenPositionCount\n```csharp\npublic int OpenPositionCount\n```\nReturns the number of currently open positions, excluding NSF positions.\n\n### OpenPositionCountHistory\n```csharp\npublic TimeSeries OpenPositionCountHistory\n```\nReturns a TimeSeries instance containing number of open positions over time.\n\n### OpenPositions\n```csharp\npublic PositionList OpenPositions\n```\nReturns a PositionList instance containing open positions including NSF positions.\n\n### Orders\n"
    }
  },
  {
    "pageContent": "ged as NSF (non-sufficient funds).\n\n### OpenPositionCount\n```csharp\npublic int OpenPositionCount\n```\nReturns the number of currently open positions, excluding NSF positions.\n\n### OpenPositionCountHistory\n```csharp\npublic TimeSeries OpenPositionCountHistory\n```\nReturns a TimeSeries instance containing number of open positions over time.\n\n### OpenPositions\n```csharp\npublic PositionList OpenPositions\n```\nReturns a PositionList instance containing open positions including NSF positions.\n\n### Orders\n\n\n```csharp\npublic List<Transaction> Orders\n\n```",
    "metadata": {
      "id": "backtester",
      "title": "backtester",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/backtester.md",
      "chunkIndex": "code-context-22",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public List<string> PositionMetricNames\n",
    "metadata": {
      "id": "backtester",
      "title": "backtester",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/backtester.md",
      "chunkIndex": "code-23",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "sitions, excluding NSF positions.\n\n### OpenPositionCountHistory\n```csharp\npublic TimeSeries OpenPositionCountHistory\n```\nReturns a TimeSeries instance containing number of open positions over time.\n\n### OpenPositions\n```csharp\npublic PositionList OpenPositions\n```\nReturns a PositionList instance containing open positions including NSF positions.\n\n### Orders\n```csharp\npublic List<Transaction> Orders\n```\nReturns a List of Transaction instances representing pending orders.\n\n### PositionMetricNames\n"
    }
  },
  {
    "pageContent": "sitions, excluding NSF positions.\n\n### OpenPositionCountHistory\n```csharp\npublic TimeSeries OpenPositionCountHistory\n```\nReturns a TimeSeries instance containing number of open positions over time.\n\n### OpenPositions\n```csharp\npublic PositionList OpenPositions\n```\nReturns a PositionList instance containing open positions including NSF positions.\n\n### Orders\n```csharp\npublic List<Transaction> Orders\n```\nReturns a List of Transaction instances representing pending orders.\n\n### PositionMetricNames\n\n\n```csharp\npublic List<string> PositionMetricNames\n\n```",
    "metadata": {
      "id": "backtester",
      "title": "backtester",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/backtester.md",
      "chunkIndex": "code-context-23",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public PositionList Positions\n",
    "metadata": {
      "id": "backtester",
      "title": "backtester",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/backtester.md",
      "chunkIndex": "code-24",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": " instance containing number of open positions over time.\n\n### OpenPositions\n```csharp\npublic PositionList OpenPositions\n```\nReturns a PositionList instance containing open positions including NSF positions.\n\n### Orders\n```csharp\npublic List<Transaction> Orders\n```\nReturns a List of Transaction instances representing pending orders.\n\n### PositionMetricNames\n```csharp\npublic List<string> PositionMetricNames\n```\nReturns a list of all available Position Metrics for this backtest run.\n\n### Positions\n"
    }
  },
  {
    "pageContent": " instance containing number of open positions over time.\n\n### OpenPositions\n```csharp\npublic PositionList OpenPositions\n```\nReturns a PositionList instance containing open positions including NSF positions.\n\n### Orders\n```csharp\npublic List<Transaction> Orders\n```\nReturns a List of Transaction instances representing pending orders.\n\n### PositionMetricNames\n```csharp\npublic List<string> PositionMetricNames\n```\nReturns a list of all available Position Metrics for this backtest run.\n\n### Positions\n\n\n```csharp\npublic PositionList Positions\n\n```",
    "metadata": {
      "id": "backtester",
      "title": "backtester",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/backtester.md",
      "chunkIndex": "code-context-24",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public double RiskFreeRateOfReturn\n",
    "metadata": {
      "id": "backtester",
      "title": "backtester",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/backtester.md",
      "chunkIndex": "code-25",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "e containing open positions including NSF positions.\n\n### Orders\n```csharp\npublic List<Transaction> Orders\n```\nReturns a List of Transaction instances representing pending orders.\n\n### PositionMetricNames\n```csharp\npublic List<string> PositionMetricNames\n```\nReturns a list of all available Position Metrics for this backtest run.\n\n### Positions\n```csharp\npublic PositionList Positions\n```\nReturns a PositionList instance containing all positions taken during the backtest.\n\n### RiskFreeRateOfReturn\n"
    }
  },
  {
    "pageContent": "e containing open positions including NSF positions.\n\n### Orders\n```csharp\npublic List<Transaction> Orders\n```\nReturns a List of Transaction instances representing pending orders.\n\n### PositionMetricNames\n```csharp\npublic List<string> PositionMetricNames\n```\nReturns a list of all available Position Metrics for this backtest run.\n\n### Positions\n```csharp\npublic PositionList Positions\n```\nReturns a PositionList instance containing all positions taken during the backtest.\n\n### RiskFreeRateOfReturn\n\n\n```csharp\npublic double RiskFreeRateOfReturn\n\n```",
    "metadata": {
      "id": "backtester",
      "title": "backtester",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/backtester.md",
      "chunkIndex": "code-context-25",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public TimeSeries TradeCountHistory\n",
    "metadata": {
      "id": "backtester",
      "title": "backtester",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/backtester.md",
      "chunkIndex": "code-26",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ending orders.\n\n### PositionMetricNames\n```csharp\npublic List<string> PositionMetricNames\n```\nReturns a list of all available Position Metrics for this backtest run.\n\n### Positions\n```csharp\npublic PositionList Positions\n```\nReturns a PositionList instance containing all positions taken during the backtest.\n\n### RiskFreeRateOfReturn\n```csharp\npublic double RiskFreeRateOfReturn\n```\nReturns the average percentage return of 1-year US Treasury yield for the backtest timespan.\n\n### TradeCountHistory\n"
    }
  },
  {
    "pageContent": "ending orders.\n\n### PositionMetricNames\n```csharp\npublic List<string> PositionMetricNames\n```\nReturns a list of all available Position Metrics for this backtest run.\n\n### Positions\n```csharp\npublic PositionList Positions\n```\nReturns a PositionList instance containing all positions taken during the backtest.\n\n### RiskFreeRateOfReturn\n```csharp\npublic double RiskFreeRateOfReturn\n```\nReturns the average percentage return of 1-year US Treasury yield for the backtest timespan.\n\n### TradeCountHistory\n\n\n```csharp\npublic TimeSeries TradeCountHistory\n\n```",
    "metadata": {
      "id": "backtester",
      "title": "backtester",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/backtester.md",
      "chunkIndex": "code-context-26",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public List<Transaction> TransactionLog\n",
    "metadata": {
      "id": "backtester",
      "title": "backtester",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/backtester.md",
      "chunkIndex": "code-27",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ics for this backtest run.\n\n### Positions\n```csharp\npublic PositionList Positions\n```\nReturns a PositionList instance containing all positions taken during the backtest.\n\n### RiskFreeRateOfReturn\n```csharp\npublic double RiskFreeRateOfReturn\n```\nReturns the average percentage return of 1-year US Treasury yield for the backtest timespan.\n\n### TradeCountHistory\n```csharp\npublic TimeSeries TradeCountHistory\n```\nReturns a TimeSeries instance containing number of trades over time.\n\n### TransactionLog\n"
    }
  },
  {
    "pageContent": "ics for this backtest run.\n\n### Positions\n```csharp\npublic PositionList Positions\n```\nReturns a PositionList instance containing all positions taken during the backtest.\n\n### RiskFreeRateOfReturn\n```csharp\npublic double RiskFreeRateOfReturn\n```\nReturns the average percentage return of 1-year US Treasury yield for the backtest timespan.\n\n### TradeCountHistory\n```csharp\npublic TimeSeries TradeCountHistory\n```\nReturns a TimeSeries instance containing number of trades over time.\n\n### TransactionLog\n\n\n```csharp\npublic List<Transaction> TransactionLog\n\n```",
    "metadata": {
      "id": "backtester",
      "title": "backtester",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/backtester.md",
      "chunkIndex": "code-context-27",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public PositionList WinningPositions\n",
    "metadata": {
      "id": "backtester",
      "title": "backtester",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/backtester.md",
      "chunkIndex": "code-28",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "uring the backtest.\n\n### RiskFreeRateOfReturn\n```csharp\npublic double RiskFreeRateOfReturn\n```\nReturns the average percentage return of 1-year US Treasury yield for the backtest timespan.\n\n### TradeCountHistory\n```csharp\npublic TimeSeries TradeCountHistory\n```\nReturns a TimeSeries instance containing number of trades over time.\n\n### TransactionLog\n```csharp\npublic List<Transaction> TransactionLog\n```\nReturns a list of all Transaction instances representing executed trades.\n\n### WinningPositions\n"
    }
  },
  {
    "pageContent": "uring the backtest.\n\n### RiskFreeRateOfReturn\n```csharp\npublic double RiskFreeRateOfReturn\n```\nReturns the average percentage return of 1-year US Treasury yield for the backtest timespan.\n\n### TradeCountHistory\n```csharp\npublic TimeSeries TradeCountHistory\n```\nReturns a TimeSeries instance containing number of trades over time.\n\n### TransactionLog\n```csharp\npublic List<Transaction> TransactionLog\n```\nReturns a list of all Transaction instances representing executed trades.\n\n### WinningPositions\n\n\n```csharp\npublic PositionList WinningPositions\n\n```",
    "metadata": {
      "id": "backtester",
      "title": "backtester",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/backtester.md",
      "chunkIndex": "code-context-28",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public TimeSeries YearlyReturns\n",
    "metadata": {
      "id": "backtester",
      "title": "backtester",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/backtester.md",
      "chunkIndex": "code-29",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": " Treasury yield for the backtest timespan.\n\n### TradeCountHistory\n```csharp\npublic TimeSeries TradeCountHistory\n```\nReturns a TimeSeries instance containing number of trades over time.\n\n### TransactionLog\n```csharp\npublic List<Transaction> TransactionLog\n```\nReturns a list of all Transaction instances representing executed trades.\n\n### WinningPositions\n```csharp\npublic PositionList WinningPositions\n```\nReturns a PositionList instance containing positions with net profit >= 0.\n\n### YearlyReturns\n"
    }
  },
  {
    "pageContent": " Treasury yield for the backtest timespan.\n\n### TradeCountHistory\n```csharp\npublic TimeSeries TradeCountHistory\n```\nReturns a TimeSeries instance containing number of trades over time.\n\n### TransactionLog\n```csharp\npublic List<Transaction> TransactionLog\n```\nReturns a list of all Transaction instances representing executed trades.\n\n### WinningPositions\n```csharp\npublic PositionList WinningPositions\n```\nReturns a PositionList instance containing positions with net profit >= 0.\n\n### YearlyReturns\n\n\n```csharp\npublic TimeSeries YearlyReturns\n\n```",
    "metadata": {
      "id": "backtester",
      "title": "backtester",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/backtester.md",
      "chunkIndex": "code-context-29",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public BacktestSettings BacktestSettings\n",
    "metadata": {
      "id": "backtester",
      "title": "backtester",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/backtester.md",
      "chunkIndex": "code-30",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": " number of trades over time.\n\n### TransactionLog\n```csharp\npublic List<Transaction> TransactionLog\n```\nReturns a list of all Transaction instances representing executed trades.\n\n### WinningPositions\n```csharp\npublic PositionList WinningPositions\n```\nReturns a PositionList instance containing positions with net profit >= 0.\n\n### YearlyReturns\n```csharp\npublic TimeSeries YearlyReturns\n```\nReturns a TimeSeries containing yearly percentage returns.\n\n## Informational Properties\n\n### BacktestSettings\n"
    }
  },
  {
    "pageContent": " number of trades over time.\n\n### TransactionLog\n```csharp\npublic List<Transaction> TransactionLog\n```\nReturns a list of all Transaction instances representing executed trades.\n\n### WinningPositions\n```csharp\npublic PositionList WinningPositions\n```\nReturns a PositionList instance containing positions with net profit >= 0.\n\n### YearlyReturns\n```csharp\npublic TimeSeries YearlyReturns\n```\nReturns a TimeSeries containing yearly percentage returns.\n\n## Informational Properties\n\n### BacktestSettings\n\n\n```csharp\npublic BacktestSettings BacktestSettings\n\n```",
    "metadata": {
      "id": "backtester",
      "title": "backtester",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/backtester.md",
      "chunkIndex": "code-context-30",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public StrategyExecutionMode ExecutionMode\n",
    "metadata": {
      "id": "backtester",
      "title": "backtester",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/backtester.md",
      "chunkIndex": "code-31",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ransaction instances representing executed trades.\n\n### WinningPositions\n```csharp\npublic PositionList WinningPositions\n```\nReturns a PositionList instance containing positions with net profit >= 0.\n\n### YearlyReturns\n```csharp\npublic TimeSeries YearlyReturns\n```\nReturns a TimeSeries containing yearly percentage returns.\n\n## Informational Properties\n\n### BacktestSettings\n```csharp\npublic BacktestSettings BacktestSettings\n```\nReturns the backtest settings used in the backtest.\n\n### ExecutionMode\n"
    }
  },
  {
    "pageContent": "ransaction instances representing executed trades.\n\n### WinningPositions\n```csharp\npublic PositionList WinningPositions\n```\nReturns a PositionList instance containing positions with net profit >= 0.\n\n### YearlyReturns\n```csharp\npublic TimeSeries YearlyReturns\n```\nReturns a TimeSeries containing yearly percentage returns.\n\n## Informational Properties\n\n### BacktestSettings\n```csharp\npublic BacktestSettings BacktestSettings\n```\nReturns the backtest settings used in the backtest.\n\n### ExecutionMode\n\n\n```csharp\npublic StrategyExecutionMode ExecutionMode\n\n```",
    "metadata": {
      "id": "backtester",
      "title": "backtester",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/backtester.md",
      "chunkIndex": "code-context-31",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public PositionSize PositionSize\n",
    "metadata": {
      "id": "backtester",
      "title": "backtester",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/backtester.md",
      "chunkIndex": "code-32",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "```csharp\npublic TimeSeries YearlyReturns\n```\nReturns a TimeSeries containing yearly percentage returns.\n\n## Informational Properties\n\n### BacktestSettings\n```csharp\npublic BacktestSettings BacktestSettings\n```\nReturns the backtest settings used in the backtest.\n\n### ExecutionMode\n```csharp\npublic StrategyExecutionMode ExecutionMode\n```\nReturns the context in which the Strategy is being executed:\n- Strategy\n- Optimization\n- StreamingChart\n- StrategyMonitor\n- Rankings\n- Evolver\n\n### PositionSize\n"
    }
  },
  {
    "pageContent": "```csharp\npublic TimeSeries YearlyReturns\n```\nReturns a TimeSeries containing yearly percentage returns.\n\n## Informational Properties\n\n### BacktestSettings\n```csharp\npublic BacktestSettings BacktestSettings\n```\nReturns the backtest settings used in the backtest.\n\n### ExecutionMode\n```csharp\npublic StrategyExecutionMode ExecutionMode\n```\nReturns the context in which the Strategy is being executed:\n- Strategy\n- Optimization\n- StreamingChart\n- StrategyMonitor\n- Rankings\n- Evolver\n\n### PositionSize\n\n\n```csharp\npublic PositionSize PositionSize\n\n```",
    "metadata": {
      "id": "backtester",
      "title": "backtester",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/backtester.md",
      "chunkIndex": "code-context-32",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public double StartingCapital\n",
    "metadata": {
      "id": "backtester",
      "title": "backtester",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/backtester.md",
      "chunkIndex": "code-33",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "operties\n\n### BacktestSettings\n```csharp\npublic BacktestSettings BacktestSettings\n```\nReturns the backtest settings used in the backtest.\n\n### ExecutionMode\n```csharp\npublic StrategyExecutionMode ExecutionMode\n```\nReturns the context in which the Strategy is being executed:\n- Strategy\n- Optimization\n- StreamingChart\n- StrategyMonitor\n- Rankings\n- Evolver\n\n### PositionSize\n```csharp\npublic PositionSize PositionSize\n```\nReturns the position sizing method used in the backtest.\n\n### StartingCapital\n"
    }
  },
  {
    "pageContent": "operties\n\n### BacktestSettings\n```csharp\npublic BacktestSettings BacktestSettings\n```\nReturns the backtest settings used in the backtest.\n\n### ExecutionMode\n```csharp\npublic StrategyExecutionMode ExecutionMode\n```\nReturns the context in which the Strategy is being executed:\n- Strategy\n- Optimization\n- StreamingChart\n- StrategyMonitor\n- Rankings\n- Evolver\n\n### PositionSize\n```csharp\npublic PositionSize PositionSize\n```\nReturns the position sizing method used in the backtest.\n\n### StartingCapital\n\n\n```csharp\npublic double StartingCapital\n\n```",
    "metadata": {
      "id": "backtester",
      "title": "backtester",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/backtester.md",
      "chunkIndex": "code-context-33",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public Strategy Strategy\n",
    "metadata": {
      "id": "backtester",
      "title": "backtester",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/backtester.md",
      "chunkIndex": "code-34",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "tings used in the backtest.\n\n### ExecutionMode\n```csharp\npublic StrategyExecutionMode ExecutionMode\n```\nReturns the context in which the Strategy is being executed:\n- Strategy\n- Optimization\n- StreamingChart\n- StrategyMonitor\n- Rankings\n- Evolver\n\n### PositionSize\n```csharp\npublic PositionSize PositionSize\n```\nReturns the position sizing method used in the backtest.\n\n### StartingCapital\n```csharp\npublic double StartingCapital\n```\nReturns the starting capital used for the backtest.\n\n### Strategy\n"
    }
  },
  {
    "pageContent": "tings used in the backtest.\n\n### ExecutionMode\n```csharp\npublic StrategyExecutionMode ExecutionMode\n```\nReturns the context in which the Strategy is being executed:\n- Strategy\n- Optimization\n- StreamingChart\n- StrategyMonitor\n- Rankings\n- Evolver\n\n### PositionSize\n```csharp\npublic PositionSize PositionSize\n```\nReturns the position sizing method used in the backtest.\n\n### StartingCapital\n```csharp\npublic double StartingCapital\n```\nReturns the starting capital used for the backtest.\n\n### Strategy\n\n\n```csharp\npublic Strategy Strategy\n\n```",
    "metadata": {
      "id": "backtester",
      "title": "backtester",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/backtester.md",
      "chunkIndex": "code-context-34",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public List<BarHistory> Symbols\n",
    "metadata": {
      "id": "backtester",
      "title": "backtester",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/backtester.md",
      "chunkIndex": "code-35",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ode\n```\nReturns the context in which the Strategy is being executed:\n- Strategy\n- Optimization\n- StreamingChart\n- StrategyMonitor\n- Rankings\n- Evolver\n\n### PositionSize\n```csharp\npublic PositionSize PositionSize\n```\nReturns the position sizing method used in the backtest.\n\n### StartingCapital\n```csharp\npublic double StartingCapital\n```\nReturns the starting capital used for the backtest.\n\n### Strategy\n```csharp\npublic Strategy Strategy\n```\nReturns the instance of the Strategy class.\n\n### Symbols\n"
    }
  },
  {
    "pageContent": "ode\n```\nReturns the context in which the Strategy is being executed:\n- Strategy\n- Optimization\n- StreamingChart\n- StrategyMonitor\n- Rankings\n- Evolver\n\n### PositionSize\n```csharp\npublic PositionSize PositionSize\n```\nReturns the position sizing method used in the backtest.\n\n### StartingCapital\n```csharp\npublic double StartingCapital\n```\nReturns the starting capital used for the backtest.\n\n### Strategy\n```csharp\npublic Strategy Strategy\n```\nReturns the instance of the Strategy class.\n\n### Symbols\n\n\n```csharp\npublic List<BarHistory> Symbols\n\n```",
    "metadata": {
      "id": "backtester",
      "title": "backtester",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/backtester.md",
      "chunkIndex": "code-context-35",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public dynamic Metrics\n",
    "metadata": {
      "id": "backtester",
      "title": "backtester",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/backtester.md",
      "chunkIndex": "code-36",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": " Evolver\n\n### PositionSize\n```csharp\npublic PositionSize PositionSize\n```\nReturns the position sizing method used in the backtest.\n\n### StartingCapital\n```csharp\npublic double StartingCapital\n```\nReturns the starting capital used for the backtest.\n\n### Strategy\n```csharp\npublic Strategy Strategy\n```\nReturns the instance of the Strategy class.\n\n### Symbols\n```csharp\npublic List<BarHistory> Symbols\n```\nReturns a List containing BarHistory instances for backtested symbols.\n\n## Metrics\n\n### Metrics\n"
    }
  },
  {
    "pageContent": " Evolver\n\n### PositionSize\n```csharp\npublic PositionSize PositionSize\n```\nReturns the position sizing method used in the backtest.\n\n### StartingCapital\n```csharp\npublic double StartingCapital\n```\nReturns the starting capital used for the backtest.\n\n### Strategy\n```csharp\npublic Strategy Strategy\n```\nReturns the instance of the Strategy class.\n\n### Symbols\n```csharp\npublic List<BarHistory> Symbols\n```\nReturns a List containing BarHistory instances for backtested symbols.\n\n## Metrics\n\n### Metrics\n\n\n```csharp\npublic dynamic Metrics\n\n```",
    "metadata": {
      "id": "backtester",
      "title": "backtester",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/backtester.md",
      "chunkIndex": "code-context-36",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public int? CancelationCode\n",
    "metadata": {
      "id": "backtester",
      "title": "backtester",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/backtester.md",
      "chunkIndex": "code-37",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "tartingCapital\n```\nReturns the starting capital used for the backtest.\n\n### Strategy\n```csharp\npublic Strategy Strategy\n```\nReturns the instance of the Strategy class.\n\n### Symbols\n```csharp\npublic List<BarHistory> Symbols\n```\nReturns a List containing BarHistory instances for backtested symbols.\n\n## Metrics\n\n### Metrics\n```csharp\npublic dynamic Metrics\n```\nReturns a dynamic class instance containing various performance metrics from available ScoreCards.\n\n## Trading Control\n\n### CancelationCode\n"
    }
  },
  {
    "pageContent": "tartingCapital\n```\nReturns the starting capital used for the backtest.\n\n### Strategy\n```csharp\npublic Strategy Strategy\n```\nReturns the instance of the Strategy class.\n\n### Symbols\n```csharp\npublic List<BarHistory> Symbols\n```\nReturns a List containing BarHistory instances for backtested symbols.\n\n## Metrics\n\n### Metrics\n```csharp\npublic dynamic Metrics\n```\nReturns a dynamic class instance containing various performance metrics from available ScoreCards.\n\n## Trading Control\n\n### CancelationCode\n\n\n```csharp\npublic int? CancelationCode\n\n```",
    "metadata": {
      "id": "backtester",
      "title": "backtester",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/backtester.md",
      "chunkIndex": "code-context-37",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "# Broker Adapter API\n\nThis document details the API for building Broker Adapter extensions for WealthLab 8. A Broker Adapter allows WL8 to connect to a live broker, obtain account information, place, and monitor trades. With a Broker Adapter connected, WL8 becomes a powerful trading bot. Both the Strategy Monitor and the Streaming Chart tool can be configured to automatically stage or even place Strategy-generated Signals to a connected broker.\n\n## Build Environment\n\nYou can create a Broker Adapter in a .NET development tool such as Visual Studio 2022. Create a class library project that targets .NET8, then reference the WealthLab.Core library DLL that you'll find in the WL8 installation folder.\n\n> **Note:** If you are using Visual Studio 2022, it will need to be updated to at least version 17.8.6 to use .NET8.\n\nYour Broker Adapter will be a class in this library that descends from `BrokerBase`, which is defined in the WealthLab.Core library, in the `WealthLab.Backtest` namespace. After you implement and build your library, simply copy the resulting assembly DLL into the WL8 installation folder. The next time WL8 starts up, it will discover your Broker Adapter, making it available in appropriate locations of the WL8 user interface.\n\n## Configuration of a Broker Adapter\n\n`BrokerBase` descends from the base class `Configurable`, which provides a way to allow the user to configure the Broker Adapter. Consult the Configurable class reference for details.\n\nBy default, `BrokerBase` assigns the `ParameterListType` value to its `ConfigurableType` property, so the BrokerAdapter will use a `ParameterList` containing `Parameter` instances for configuration.\n\nYou'll define these Parameters in the `GenerateParameters` method, as described in the Configurable class reference.\n\n## Important Descriptive Properties\n\nThe `Configurable` class provides descriptive properties that control how your Broker Adapter appears in WL8. The most important ones to override are:\n- `Name`\n- `GlyphResource`\n- `Description`\n- `URL`\n\n## Accessing the Host (WL8) Environment\n\nThe `IHost` interface allows your extension to access information about the user's WealthLab environment. For example, the location of the user data folder, or obtaining a list of DataSets defined by the user. At any point in your extension's code base, you can access an instance of the `IHost` interface using the singleton class `WLHost` and its `Instance` property. Example:\n\n",
    "metadata": {
      "id": "broker-adapter",
      "title": "broker-adapter",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/broker-adapter.md",
      "chunkIndex": 0,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n## Connecting to the Broker\n\n### protected virtual bool Connect()\nWL8 calls this method when it needs to connect to the broker supported by your Broker Adapter. Override the method to perform the actual connection, returning the success or failure. Prior to attempting to connect, you'll likely need to ensure that the user has properly configured the Broker Adapter. Check the Parameters, or the Configuration string property to determine if the Broker Adapter is configured.\n\n### public virtual bool IsConnected\nReturns true if a previous connection attempt has been successful. The default implementation uses a local bool variable that stores the result of your Connect method above. You can override this property to employ some different method to determine if the Broker Adapter is connected to the broker.\n\n### public void Disconnect()\nIf you detect a disconnection with the broker services, call this method to notify WL8.\n\n### public void DisplayBrokerMessage(string msg, WLColor color, Exception ex = null)\nCall this method to communicate connection status information back to WL8. The color parameter uses the convention of:\n- Red for errors\n- Yellow for warnings\n- Green for informational messages\n\nTry to keep the chatter to the required minimum to avoid clogging up the WL8 Log Viewer.\n\n## Account Information\n\n### public List<BrokerAccount> Accounts\nReturns a list of `BrokerAccount` instances that represent the accounts associated with this Broker. Your Broker Adapter should call the `UpdateAccounts` method after successfully connecting, to initially populate this list.\n\n### public virtual void UpdateAccounts()\nOverride this method to populate the Accounts property with instances of the `BrokerAccount` class, to represent the accounts associated with this Broker. WL8 calls this method directly when the user explicitly requests an account update, and when trades are filled. After the update procedure is complete and the Accounts are ready, call `AccountsUpdated` to notify WL8 that accounts have been updated.\n\n### public void AccountsUpdated()\nCall this method after your `UpdateAccounts` method has completely updated accounts and their positions. This notifies WL8 that accounts have been updated, causing this to be reflected in any open Accounts window.\n\n### public List<string> AccountNumbers\nThis property returns a List of strings containing the Account ID's of the Accounts associated with this Broker.\n\n### public virtual List<Transaction> GetActiveOrders()\nOverride this method to return a list of active orders (typically limit or stop orders) that are live at the Broker. Create a Transaction object instance for each order. Assign:\n- The order's account identifier to the Transaction Account property\n- The broker-specific order identifier in its BrokerTag property\n- Values to the Symbol, TransactionType, Quantity, OrderType, and OrderPrice properties\n\nAlso be sure to complete any other internal mapping your Broker Provider might require to associate a Transaction with a broker specific order identifier (BrokerTag).\n\n## Market and Symbol Information\n\n### public virtual int GetSymbolDecimals(string symbol, double price)\nOverride this method to return the number of decimal places the broker uses for limit/stop order pricing for the specified symbol and price values. This is used to establish the value of the Transaction class OrderPriceAdjusted property, which you should use in PlaceTrade. The default value is 2 decimal places.\n\n### public virtual int GetSymbolQuantityDecimals(string symbol)\nOverride this method to return the number of decimal places the broker uses for the quantity (number of shares, coins, contracts, etc.) of an order for the specified symbol. This is used to establish the value of the Transaction class QuantityAdjusted property, which you should use in PlaceTrade. The default value is 0 decimal places.\n\n### public virtual MarketDetails GetMarketForSymbol(string symbol)\nOverride this method to return a `MarketDetails` instance that represents the market which the specified symbol trades in. You can find `MarketDetails` instances in the `MarketManager` class, specifically the Markets property and the FindMarket method. The default implementation returns `MarketManager.USAStocks`.\n\n### public virtual MarketDetails DefaultMarket\nOverride this property to return a default `MarketDetails` instance for the Broker Provider. The default return value is `MarketManager.USAStocks`.\n\n## Placing and Canceling Trades\n\n### protected abstract void PlaceTrade(Transaction t)\nWL8 calls this method whenever a trade is being placed. The Transaction instance in the t parameter contains all of the relevant information about the trade, including:\n\n- `MappedSymbol` - use this property, rather than the Transaction Symbol property, when passing the symbol to the broker\n- `TransactionType` - Buy, Sell, Short or Cover\n- `OrderType` - Limit (or LimitMove, which can be treated as a Limit order), Stop, Market, or MarketClose\n- `QuantityAdjusted` - the Quantity rounded by the number of decimals returned in GetSymbolDecimals\n- `OrderPriceAdjusted` - the stop/limit order price rounded by the number of decimals returned in GetSymbolQuantityDecimals\n\nYour implementation should place the trade with the broker, and map any incoming identifier such as an order ID back to the original Transaction instance. You can use the Transaction instance's BrokerTag property to store a broker-specific order ID.\n\n### protected abstract void CancelTrade(Transaction t)\nWL8 calls this method whenever a trade should be canceled. The Transaction instance is passed in the t parameter, and you would typically use its BrokerTag property to map it back to a broker-specific identifier you can then use to request the cancellation of the trade with the broker.\n\n### public virtual bool SupportsOco\nOverride this property and return true if your Broker Adapter supports native OCO (One-Cancels-Other) orders.\n\n### protected virtual void PlaceOcoTradePair(Transaction t1, Transaction t2)\nWL8 calls this method if a pair of trades should be submitted as an OCO (One-Cancels-Other) pair. This will only occur if your Broker Adapter returns true for `SupportsOCO`, and the user has selected \"Use OCO orders when possible\" in Trading Preferences.\n\n### public virtual bool SupportsReplace\nOverride this property and return true if your Broker Adapter supports native order replacement.\n\n### protected virtual void ReplaceTrade(Transaction oldOrder, Transaction newOrder)\nWL8 calls this method whenever an active order should be replaced. This will only occur if your Broker Adapter returns true for `SupportsReplace`.\n\n### public virtual bool SupportsMOC\nOverride this property to return true if the broker supports native Market on Close orders. If false, WL8 will stage these orders in the Order Manager with a WaitForClose status, and then submit them as Market orders shortly before the market close.\n\n### public virtual bool SupportsLOC\nOverride this property to return true if the broker supports native Limit on Close orders. If false, WL8 will stage these orders in the Order Manager with a WaitForClose status, and then submit them as Limit orders shortly before the market close.\n\n### public virtual bool AllowExit(BrokerAccount acct, string symbol, PositionType pt)\nWL8 calls this method to determine a Sell or Cover order can be placed with the broker. The default implementation is to look for a broker position with a matching symbol and PositionType (pt) in the specific BrokerAccount (acct). You can override this method if your Broker Provider does not access broker positions.\n\n### public virtual int FinalOrderDelayMinutes\nSome brokers cancel day orders for the next session immediately if they're submitted moments (or even minutes) after the market close. Starting with WL8 Build 18 orders placed for the final bar of the session go into a status FinalOrder. They'll sit in the Order Manager until N minutes (FinalOrderDelayMinutes) after market close at which time \"Final orders\" are placed. The default value is 15 minutes.\n\n## Monitoring Trade Status\n\nAfter a broker connection is successful, your Broker Adapter should employ some mechanism to receive order status updates from the broker. Typical mechanisms for receiving order status are:\n\n- Connections to a socket-based API (Interactive Brokers, Tradier)\n- Handling events from an interface library (Binance)\n- Periodically polling for status updates (Schwab)\n\n### public void UpdateSignalStatus(Transaction t, SignalStatuses newStatus)\nWhen you receive an updated order status, call this method to communicate it back to the WL8 Order Manager. Pass the Transaction instance (which you might map back to using its BrokerTag property), along with the new order status in the newStatus parameter. The SignalStatus enum has the following values:\n\n- Staged\n- Placed\n- Active\n- Filled\n- PartialFilled\n- CancelPending\n- Canceled\n- Error\n- WaitForClose - used when an order is submitted in WealthLab's MarketClose order type\n- Published - used by signal subscription services such as Collective2 that have an integrated Broker Adapter\n\nIf an order is partially or completely filled, assign values to the Transaction object's `FillPrice` and `FillQty` properties prior to calling `UpdateSignalStatus`. You can also add messages to the Transaction object's Messages property to communicate information from the broker to WL8.\n\n## Companion Providers\n\nWL8 attempts to link a Broker Provider with a companion Streaming and Historical Provider in various parts of the user interface. For example, the Order Manager shows a streaming quote using the companion Streaming Provider when a broker is selected and connected.\n\n### public virtual string CompanionStreamingProviderName\nOverride this property to return the Name of a companion Streaming Provider associated with your Broker Provider, if any.\n\n### public virtual string CompanionDataProviderName\nOverride this property to return the Name of a companion Historical Data Provider associated with your Broker Provider, if any. ",
    "metadata": {
      "id": "broker-adapter",
      "title": "broker-adapter",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/broker-adapter.md",
      "chunkIndex": 1,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "//get user data folder\nstring folder = WLHost.Instance.DataFolder;\n",
    "metadata": {
      "id": "broker-adapter",
      "title": "broker-adapter",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/broker-adapter.md",
      "chunkIndex": "code-0",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "tant ones to override are:\n- `Name`\n- `GlyphResource`\n- `Description`\n- `URL`\n\n## Accessing the Host (WL8) Environment\n\nThe `IHost` interface allows your extension to access information about the user's WealthLab environment. For example, the location of the user data folder, or obtaining a list of DataSets defined by the user. At any point in your extension's code base, you can access an instance of the `IHost` interface using the singleton class `WLHost` and its `Instance` property. Example:\n\n"
    }
  },
  {
    "pageContent": "tant ones to override are:\n- `Name`\n- `GlyphResource`\n- `Description`\n- `URL`\n\n## Accessing the Host (WL8) Environment\n\nThe `IHost` interface allows your extension to access information about the user's WealthLab environment. For example, the location of the user data folder, or obtaining a list of DataSets defined by the user. At any point in your extension's code base, you can access an instance of the `IHost` interface using the singleton class `WLHost` and its `Instance` property. Example:\n\n\n\n```csharp\n//get user data folder\nstring folder = WLHost.Instance.DataFolder;\n\n```",
    "metadata": {
      "id": "broker-adapter",
      "title": "broker-adapter",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/broker-adapter.md",
      "chunkIndex": "code-context-0",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "# Building Block Extension API\n\nThis document details the API for creating Building Block Extensions for Wealth-Lab 8, which users can drag and drop to compose a Building Block Strategy.\n\n## Build Environment\n\nYou can create a BuildingBlock in a .NET development tool such as Visual Studio 2022. Create a class library project that targets .NET8, then reference the WealthLab.Core library DLL that you'll find in the WL8 installation folder.\n\n> **Note:** If you are using Visual Studio 2022, it will need to be updated to at least version 17.8.6 to use .NET8.\n\nYour BuildingBlock will be a class in this library that descends from `BuildingBlockBase`, which is defined in the WealthLab.Core library, in the `WealthLab.Backtest` namespace. After you implement and build your library, simply copy the resulting assembly DLL into the WL8 installation folder. The next time WL8 starts up, it will discover your BuildingBlock, making it available in appropriate locations of the WL8 user interface.\n\nYour Blocks will appear in a node in the Building Block tree labelled with the name of your assembly. You can change this name by assigning a value to the `LibraryName` of your Building Block.\n\n## Accessing the Host (WL8) Environment\n\nThe `IHost` interface allows your extension to access information about the user's WealthLab environment. For example, the location of the user data folder, or obtaining a list of DataSets defined by the user. At any point in your extension's code base, you can access an instance of the `IHost` interface using the singleton class `WLHost` and its `Instance` property. Example:\n\n",
    "metadata": {
      "id": "building-block",
      "title": "building-block",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/building-block.md",
      "chunkIndex": 0,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n## Building Block Types\n\nAlthough `BuildingBlockBase` is the ultimate base class, your Blocks will descend from one of three descendant classes of `BuildingBlockBase`:\n\n- Entry/Exit Blocks - `EntryExitBuildingBlock` class\n- Condition Blocks - `ConditionBuildingBlock` class\n- Qualifier Blocks - `QualiferBuildingBlock` class\n\n## Configuration of a Building Block\n\n`BuildingBlockBase` descends from the base class `Configurable`, which provides a way to allow the user to configure the Broker Adapter. Consult the Configurable class reference for details. BuildingBlocks use a `ConfigurableType` of `ParameterList`, which should not be changed. This means that you can add `Parameter` instances to the Building Block's Parameters property, doing so in the `GenerateParameters` method. The user can configure these Parameter instances to configure the Building Block.\n\nThe `Configurable` type provides properties you will override to describe the Building Block, such as `Name` and `GlyphResource`.\n\n## Code Generation\n\nBuilding Blocks work by generating C# code. The generated code is assembled together by WL8 and ultimately compiled, just like a C# Coded Strategy. If you select Open as C# Coded Strategy in a Building Block Strategy window, you can see the C# code that WL8 generates for a Building Block Strategy.\n\nBuilding Blocks need to inject code into the Strategy in three different places. Each of these injection sites is represented by a different property of `BuildingBlockBase`.\n\n### public virtual void Initialize()\nOverride this method to perform one-time initialization in your Building Block. Here you can change the `LibraryName`, which determines the name of the node that your Building Block appears under in the WL8 Building Blocks list.\n\n### public List<string> VarCode\nThis List of strings contains the lines of code that will be injected into the private variables section of the C# Strategy code. It consists of a number of C# variable declarations. The Building Block architecture has some features that make sure variable names remain unique, even if multiple Building Blocks of the same type are used in a Strategy.\n\n### public virtual void GenerateVarCode()\nThe Building Block code generate calls this method in your Building Block to generate the code for the private variables section. You typically don't need to override this method, as the default implementation goes through the variables that you registered using `RegisterVariable` (described below) and generates the appropriate lines of code. If you do override this method, call the base method first, `base.GenerateVarCode();`, before adding VarCode strings.\n\n### public List<string> InitCode\nThis List of strings contains the lines of code that will be injected into the Initialize method of the generated `UserStrategyBase` class source code. Here, indicators and other variables can be initialized, either by calling their constructors using the new operator or calling the `IndicatorBase` static Series method. Your injected code can make use of the passed `BarHistory` instance (bars parameter).\n\n### public virtual void GenerateInitCode()\nOverride this method to add lines of code to be injected into the Strategy's Initialize method. The lines should be added to the `InitCode` property.\n\n### public List<string> MainCode\nThis List of strings contains the lines of code that will be injected into the Execute method of the `UserStrategyBase` class. The code contained here depends on the type of Building Block being implemented. Your injected code can make use of the passed `BarHistory` instance (bars parameter), and the current index being processed.\n\n### public abstract void GenerateMainCode()\nOverride this method to add lines of code to be injected into the Strategy's Execute method. The lines should be added to the `MainCode` property.\n\n### public List<string> PreExecCode\nThis List of strings contains the lines of code that will be injected into the PreExecute method of the generated `UserStrategyBase` class source code. A PreExecute override will be generated only if there are any lines of code added to this property. If so, it will use the standard method signature of the PreExecute method, including the dt DateTime parameter and the participants List<BarHistory> parameter.\n\n### public virtual void GeneratePreExecCode()\nOverride this method to add lines of code to be injected into the Strategy's PreExecute method. The lines should be added to the `PreExecCode` property.\n\n### public List<string> PostExecCode\nThis List of strings contains the lines of code that will be injected into the PostExecute method of the generated `UserStrategyBase` class source code. A PostExecute method will be generated only if there are any lines of code added to this property. If so, it will use the standard method signature of the PostExecute method, including the dt DateTime parameter and the participants List<BarHistory> parameter.\n\n### public virtual void GeneratePostExecCode()\nOverride this method to add lines of code to be injected into the Strategy's PostExecute method. The lines should be added to the `PostExecCode` property.\n\n### public List<string> BacktestCompleteCode\nThis List of strings contains the lines of code that will be injected into the BacktestComplete method of the generated `UserStrategyBase` class source code. A BacktestComplete method will be generated only if there are any lines of code added to this property.\n\n### public virtual void GenerateBacktestCompleteCode()\nOverride this method to add lines of code to be injected into the Strategy's BacktestComplete method. The lines should be added to the `BacktestCompleteCode` property.\n\n## Using Clause\n\n### public List<string> UsingClauseLibs\nThis List of strings contains the namespaces that will be added to the using clause of the `UserStrategyBase` class being generated. If your Building Block uses classes and methods particular to an assembly that is not referenced by default, such as your extension's assembly, you'll need to ensure that the assembly is added to the generated code's using clause. Rather than add it directly to this List, use the helper method described below.\n\n### public void AddToUsingClause(string libraryName)\nCall this method to add a namespace to the generated code's using clause. This method ensures that each namespace is only added once to the generated code.\n\n## Building Block Parameters\n\n### public ParameterList Parameters\nThis property is a `ParameterList` instance that contains `Parameter` instances, which allow the user to change different settings of the Building Block. A plethora of different parameter types are available, see the Parameter class reference for a full list and description.\n\n### public virtual void GenerateParameters()\nOverride this method to add `Parameter` instances to the Building Block's Parameters property. See the Configurable reference, which includes a number of helper methods that make it easier to add certain kinds of Parameter instances. Specifically, `AddParameter`, `AddIndicatorParameter`, `AddValueCompareParameter`, and `AddEnumParameter` are most helpful.\n\nThe `Parameter` class has a property called `BuildingBlockTextOutput` that you should use whenever you need to inject a parameter's value into generated code. In the example below, we create an int parameter representing a day of the week. A second comparison parameter is used to compare the current date with our first parameter:\n\n",
    "metadata": {
      "id": "building-block",
      "title": "building-block",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/building-block.md",
      "chunkIndex": 1,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n## Building Block Description\n\nOverride the `Description` property to return a brief description of the configured Building Block. This Description is used in the Building Block design surface to represent your Building Block. For Entries and Exits, WL8 will prepend the Description with \"Buy\", \"Sell\", \"Short\", or \"Cover\", so return the remainder of what the final Description should resolve to.\n\n## Defining Variables\n\n### public void RegisterVariable(string varName, string varType, int parameterNum = -1)\nCall this from within your Initialize method to register a C# variable name with the Building Block. When you add lines of code to the injection points (InitCode and MainCode), you should put angle brackets around the variable names. WL8 uses these brackets variable names to ensure that each variable you register winds up with a unique variable name in the generated C# Strategy code.\n\nIf your variable should be based on the value of one of your Building Block Parameters, pass the parameter index number in the parameterNum parameter.\n\nExample:\n",
    "metadata": {
      "id": "building-block",
      "title": "building-block",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/building-block.md",
      "chunkIndex": 2,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n## Working with Indicators\n\n### public void GenerateIndicatorInitCode(int paramNum, string paramName, string parentIndicator = \"\")\nCall this helper method within your `GenerateInitCode` to generate the initialization code for variables based on indicator parameters. Indicator parameters are Parameter instances in your Building Block Parameters that were created using the `AddIndicatorParameter` method, and they have a Type of `ParameterType.Indicator` or `ParameterType.Smoother`.\n\nExample:\n",
    "metadata": {
      "id": "building-block",
      "title": "building-block",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/building-block.md",
      "chunkIndex": 3,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n## Entry/Exit Building Blocks\n\nBuilding Blocks that represent market entries and exits are handled by the `EntryExitBuildingBlock` base class. The primary job here is to override the `GenerateMainCode` method to add the code for entering or exiting a position.\n\n### public virtual bool IsEntry => false;\n### public virtual bool IsExit => false; \nOverride one of these properties to return true, depending on whether you are implementing an entry or an exit building block.\n\n### public virtual PositionType? PositionType\nOverride this property to return whether your entry/exit handles long (`PositionType.Long`, Buy/Sell) or short (`PositionType.Short`, Short/Cover) positions.\n\n### public int GroupCode\nThis property stores a behind-the-scenes value that helps the code generator track entry/exit blocks. For entry Building Blocks, your injected code should issue a `PlaceTrade` call, assigning the result of the call to a variable named `_transaction`.\n\nExample of a BuyAtMarket entry block:\n",
    "metadata": {
      "id": "building-block",
      "title": "building-block",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/building-block.md",
      "chunkIndex": 4,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\nFor exit Building Blocks:\n",
    "metadata": {
      "id": "building-block",
      "title": "building-block",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/building-block.md",
      "chunkIndex": 5,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n## Condition Building Blocks\n\nBuilding Blocks that represent conditions are implemented by the `ConditionBuildingBlock` base class. They typically examine the Building Block Parameters and generate if/then statements based on their values.\n\n### public abstract void GenerateConditionCode()\nImplement the injection of code lines into MainCode here, instead of the ancestor's `GenerateMainCode` method. Example:\n\n",
    "metadata": {
      "id": "building-block",
      "title": "building-block",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/building-block.md",
      "chunkIndex": 6,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n## Qualifier Building Blocks\n\nQualifier Building Blocks can be added to Condition Building Blocks to add additional logic. They are implemented as instances of the `QualifierBuildingBlock` base class.\n\nExample implementation of NBarsAgo Qualifier:\n",
    "metadata": {
      "id": "building-block",
      "title": "building-block",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/building-block.md",
      "chunkIndex": 7,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n## Enabling Same Bar Exits\n\n### public virtual bool SupportsSameBarExit\nOverride this property to return true if you want your Exit Building Block to support same-bar exits.\n\n### public virtual void GenerateSameBarExitCode()\nIn this method you'll inject lines of code into the `SameBarExitCode` property of your Building Block.\n\nExample implementation for Sell at Profit Target Building Block:\n",
    "metadata": {
      "id": "building-block",
      "title": "building-block",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/building-block.md",
      "chunkIndex": 8,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n## Associating a Building Block with a Strategy Gene\n\n### public virtual StrategyGeneBase GetGene()\nIf your Building Block can be represented by a Strategy Gene, either one already defined in WL8, or one of your own creation, override this method to make the association. Create an instance of the `StrategyGeneBase` derived class here, and assign appropriate values to its property parameters, based on the Building Block's current Parameters values. ",
    "metadata": {
      "id": "building-block",
      "title": "building-block",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/building-block.md",
      "chunkIndex": 9,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "//get user data folder\nstring folder = WLHost.Instance.DataFolder;\n",
    "metadata": {
      "id": "building-block",
      "title": "building-block",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/building-block.md",
      "chunkIndex": "code-0",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "e this name by assigning a value to the `LibraryName` of your Building Block.\n\n## Accessing the Host (WL8) Environment\n\nThe `IHost` interface allows your extension to access information about the user's WealthLab environment. For example, the location of the user data folder, or obtaining a list of DataSets defined by the user. At any point in your extension's code base, you can access an instance of the `IHost` interface using the singleton class `WLHost` and its `Instance` property. Example:\n\n"
    }
  },
  {
    "pageContent": "e this name by assigning a value to the `LibraryName` of your Building Block.\n\n## Accessing the Host (WL8) Environment\n\nThe `IHost` interface allows your extension to access information about the user's WealthLab environment. For example, the location of the user data folder, or obtaining a list of DataSets defined by the user. At any point in your extension's code base, you can access an instance of the `IHost` interface using the singleton class `WLHost` and its `Instance` property. Example:\n\n\n\n```csharp\n//get user data folder\nstring folder = WLHost.Instance.DataFolder;\n\n```",
    "metadata": {
      "id": "building-block",
      "title": "building-block",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/building-block.md",
      "chunkIndex": "code-context-0",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public override GenerateParameters()\n{\n   AddParameter(\"Day of Week\", ParameterType.Int32, 1);\n   AddValueCompareParameter();\n}\n\npublic override GenerateMainCode()\n{\n   string day = Parameters[0].BuildingBlockTextOutput;\n   string operand = Parameters[0].AsCompareOperation; //helper property of Parameter class\n   MainCode.Add(\"if (bars.DateTimes[index].Day \" + operand + \" \" + day + \")\");\n   MainCode.Add(\"   SetBackgroundColor(index, Colors.LightGreen);\");\n}\n",
    "metadata": {
      "id": "building-block",
      "title": "building-block",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/building-block.md",
      "chunkIndex": "code-1",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "add certain kinds of Parameter instances. Specifically, `AddParameter`, `AddIndicatorParameter`, `AddValueCompareParameter`, and `AddEnumParameter` are most helpful.\n\nThe `Parameter` class has a property called `BuildingBlockTextOutput` that you should use whenever you need to inject a parameter's value into generated code. In the example below, we create an int parameter representing a day of the week. A second comparison parameter is used to compare the current date with our first parameter:\n\n"
    }
  },
  {
    "pageContent": "add certain kinds of Parameter instances. Specifically, `AddParameter`, `AddIndicatorParameter`, `AddValueCompareParameter`, and `AddEnumParameter` are most helpful.\n\nThe `Parameter` class has a property called `BuildingBlockTextOutput` that you should use whenever you need to inject a parameter's value into generated code. In the example below, we create an int parameter representing a day of the week. A second comparison parameter is used to compare the current date with our first parameter:\n\n\n\n```csharp\npublic override GenerateParameters()\n{\n   AddParameter(\"Day of Week\", ParameterType.Int32, 1);\n   AddValueCompareParameter();\n}\n\npublic override GenerateMainCode()\n{\n   string day = Parameters[0].BuildingBlockTextOutput;\n   string operand = Parameters[0].AsCompareOperation; //helper property of Parameter class\n   MainCode.Add(\"if (bars.DateTimes[index].Day \" + operand + \" \" + day + \")\");\n   MainCode.Add(\"   SetBackgroundColor(index, Colors.LightGreen);\");\n}\n\n```",
    "metadata": {
      "id": "building-block",
      "title": "building-block",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/building-block.md",
      "chunkIndex": "code-context-1",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public override void Initialize()\n{\n   RegisterVariable(\"n\", \"int\");\n}\n\npublic override GenerateInitCode()\n{\n   InitCode.Add(\"<n> = bars.Count;\");\n}\n\npublic override GenerateMainCode()\n{\n   MainCode.Add(\"<n>--;\");\n}\n",
    "metadata": {
      "id": "building-block",
      "title": "building-block",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/building-block.md",
      "chunkIndex": "code-2",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "egister a C# variable name with the Building Block. When you add lines of code to the injection points (InitCode and MainCode), you should put angle brackets around the variable names. WL8 uses these brackets variable names to ensure that each variable you register winds up with a unique variable name in the generated C# Strategy code.\n\nIf your variable should be based on the value of one of your Building Block Parameters, pass the parameter index number in the parameterNum parameter.\n\nExample:\n"
    }
  },
  {
    "pageContent": "egister a C# variable name with the Building Block. When you add lines of code to the injection points (InitCode and MainCode), you should put angle brackets around the variable names. WL8 uses these brackets variable names to ensure that each variable you register winds up with a unique variable name in the generated C# Strategy code.\n\nIf your variable should be based on the value of one of your Building Block Parameters, pass the parameter index number in the parameterNum parameter.\n\nExample:\n\n\n```csharp\npublic override void Initialize()\n{\n   RegisterVariable(\"n\", \"int\");\n}\n\npublic override GenerateInitCode()\n{\n   InitCode.Add(\"<n> = bars.Count;\");\n}\n\npublic override GenerateMainCode()\n{\n   MainCode.Add(\"<n>--;\");\n}\n\n```",
    "metadata": {
      "id": "building-block",
      "title": "building-block",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/building-block.md",
      "chunkIndex": "code-context-2",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public override Initialize()\n{\n   AddIndicatorParameter(\"slowMA\", \"SMA\");\n   AddIndicatorParameter(\"fastMA\", \"SMA\");\n   RegisterVariable(\"slowMA\", \"IndicatorBase\", 0);\n   RegisterVariable(\"fastMA\", \"IndicatorBase\", 1);\n}\n\npublic override GenerateInitCode()\n{\n   GenerateIndicatorInitCode(0, \"slowMA\");\n   GenerateIndicatorInitCode(1, \"fastMA\");\n}\n",
    "metadata": {
      "id": "building-block",
      "title": "building-block",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/building-block.md",
      "chunkIndex": "code-3",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "```\n\n## Working with Indicators\n\n### public void GenerateIndicatorInitCode(int paramNum, string paramName, string parentIndicator = \"\")\nCall this helper method within your `GenerateInitCode` to generate the initialization code for variables based on indicator parameters. Indicator parameters are Parameter instances in your Building Block Parameters that were created using the `AddIndicatorParameter` method, and they have a Type of `ParameterType.Indicator` or `ParameterType.Smoother`.\n\nExample:\n"
    }
  },
  {
    "pageContent": "```\n\n## Working with Indicators\n\n### public void GenerateIndicatorInitCode(int paramNum, string paramName, string parentIndicator = \"\")\nCall this helper method within your `GenerateInitCode` to generate the initialization code for variables based on indicator parameters. Indicator parameters are Parameter instances in your Building Block Parameters that were created using the `AddIndicatorParameter` method, and they have a Type of `ParameterType.Indicator` or `ParameterType.Smoother`.\n\nExample:\n\n\n```csharp\npublic override Initialize()\n{\n   AddIndicatorParameter(\"slowMA\", \"SMA\");\n   AddIndicatorParameter(\"fastMA\", \"SMA\");\n   RegisterVariable(\"slowMA\", \"IndicatorBase\", 0);\n   RegisterVariable(\"fastMA\", \"IndicatorBase\", 1);\n}\n\npublic override GenerateInitCode()\n{\n   GenerateIndicatorInitCode(0, \"slowMA\");\n   GenerateIndicatorInitCode(1, \"fastMA\");\n}\n\n```",
    "metadata": {
      "id": "building-block",
      "title": "building-block",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/building-block.md",
      "chunkIndex": "code-context-3",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public override void GenerateMainCode()\n{\n    MainCode.Add(\"_transaction = PlaceTrade(bars, TransactionType.Buy, OrderType.Market, 0, \" + GroupCode + \");\");\n    base.GenerateMainCode();\n}\n",
    "metadata": {
      "id": "building-block",
      "title": "building-block",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/building-block.md",
      "chunkIndex": "code-4",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ositionType? PositionType\nOverride this property to return whether your entry/exit handles long (`PositionType.Long`, Buy/Sell) or short (`PositionType.Short`, Short/Cover) positions.\n\n### public int GroupCode\nThis property stores a behind-the-scenes value that helps the code generator track entry/exit blocks. For entry Building Blocks, your injected code should issue a `PlaceTrade` call, assigning the result of the call to a variable named `_transaction`.\n\nExample of a BuyAtMarket entry block:\n"
    }
  },
  {
    "pageContent": "ositionType? PositionType\nOverride this property to return whether your entry/exit handles long (`PositionType.Long`, Buy/Sell) or short (`PositionType.Short`, Short/Cover) positions.\n\n### public int GroupCode\nThis property stores a behind-the-scenes value that helps the code generator track entry/exit blocks. For entry Building Blocks, your injected code should issue a `PlaceTrade` call, assigning the result of the call to a variable named `_transaction`.\n\nExample of a BuyAtMarket entry block:\n\n\n```csharp\npublic override void GenerateMainCode()\n{\n    MainCode.Add(\"_transaction = PlaceTrade(bars, TransactionType.Buy, OrderType.Market, 0, \" + GroupCode + \");\");\n    base.GenerateMainCode();\n}\n\n```",
    "metadata": {
      "id": "building-block",
      "title": "building-block",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/building-block.md",
      "chunkIndex": "code-context-4",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public override void GenerateMainCode()\n{\n    MainCode.Add(\"ClosePosition(foundPosition\" + GroupCode + \", OrderType.Market);\");\n}\n",
    "metadata": {
      "id": "building-block",
      "title": "building-block",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/building-block.md",
      "chunkIndex": "code-5",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "s a behind-the-scenes value that helps the code generator track entry/exit blocks. For entry Building Blocks, your injected code should issue a `PlaceTrade` call, assigning the result of the call to a variable named `_transaction`.\n\nExample of a BuyAtMarket entry block:\n```csharp\npublic override void GenerateMainCode()\n{\n    MainCode.Add(\"_transaction = PlaceTrade(bars, TransactionType.Buy, OrderType.Market, 0, \" + GroupCode + \");\");\n    base.GenerateMainCode();\n}\n```\n\nFor exit Building Blocks:\n"
    }
  },
  {
    "pageContent": "s a behind-the-scenes value that helps the code generator track entry/exit blocks. For entry Building Blocks, your injected code should issue a `PlaceTrade` call, assigning the result of the call to a variable named `_transaction`.\n\nExample of a BuyAtMarket entry block:\n```csharp\npublic override void GenerateMainCode()\n{\n    MainCode.Add(\"_transaction = PlaceTrade(bars, TransactionType.Buy, OrderType.Market, 0, \" + GroupCode + \");\");\n    base.GenerateMainCode();\n}\n```\n\nFor exit Building Blocks:\n\n\n```csharp\npublic override void GenerateMainCode()\n{\n    MainCode.Add(\"ClosePosition(foundPosition\" + GroupCode + \", OrderType.Market);\");\n}\n\n```",
    "metadata": {
      "id": "building-block",
      "title": "building-block",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/building-block.md",
      "chunkIndex": "code-context-5",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public override void GenerateConditionCode()\n{\n    string operand = Parameters[1].AsOperand;\n    string barsBack = Parameters[3].BuildingBlockTextOutput;\n    MainCode.Add(\"if (index - \" + barsBack + \" >= 0 && <indicator1>[index] \" + operand + \" <indicator2>[index - \" + barsBack + \"])\");\n}\n",
    "metadata": {
      "id": "building-block",
      "title": "building-block",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/building-block.md",
      "chunkIndex": "code-6",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "MainCode.Add(\"ClosePosition(foundPosition\" + GroupCode + \", OrderType.Market);\");\n}\n```\n\n## Condition Building Blocks\n\nBuilding Blocks that represent conditions are implemented by the `ConditionBuildingBlock` base class. They typically examine the Building Block Parameters and generate if/then statements based on their values.\n\n### public abstract void GenerateConditionCode()\nImplement the injection of code lines into MainCode here, instead of the ancestor's `GenerateMainCode` method. Example:\n\n"
    }
  },
  {
    "pageContent": "MainCode.Add(\"ClosePosition(foundPosition\" + GroupCode + \", OrderType.Market);\");\n}\n```\n\n## Condition Building Blocks\n\nBuilding Blocks that represent conditions are implemented by the `ConditionBuildingBlock` base class. They typically examine the Building Block Parameters and generate if/then statements based on their values.\n\n### public abstract void GenerateConditionCode()\nImplement the injection of code lines into MainCode here, instead of the ancestor's `GenerateMainCode` method. Example:\n\n\n\n```csharp\npublic override void GenerateConditionCode()\n{\n    string operand = Parameters[1].AsOperand;\n    string barsBack = Parameters[3].BuildingBlockTextOutput;\n    MainCode.Add(\"if (index - \" + barsBack + \" >= 0 && <indicator1>[index] \" + operand + \" <indicator2>[index - \" + barsBack + \"])\");\n}\n\n```",
    "metadata": {
      "id": "building-block",
      "title": "building-block",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/building-block.md",
      "chunkIndex": "code-context-6",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "using WealthLab.Core;\n\nnamespace WealthLab.Backtest\n{\n    public class NBarsAgo : QualifierBuildingBlock\n    {\n        public override void GenerateParameters()\n        {\n            Parameter p = AddParameter(\"How many bars ago\", ParameterType.Int32, 1);\n            p.MinValue = 1.0;\n        }\n\n        public override void Initialize()\n        {\n            RegisterVariable(\"savedIndex\", \"int\");\n            RegisterVariable(\"flag\", \"bool\");\n        }\n\n        public override string Name => \"N Bars Ago\";\n        \n        public override void GenerateMainCode()\n        {\n            string numBars = Parameters[0].BuildingBlockTextOutput;\n            MainCode.Add(\"<savedIndex> = index;\");\n            MainCode.Add(\"<flag> = false;\");\n            MainCode.Add(\"index = index - \" + numBars + \";\");\n            MainCode.Add(\"if (index >= 0)\");\n            MainCode.Add(\"{\");\n            MainCode.Add(\"\\t<Condition>\");\n            MainCode.Add(\"\\t\\t<flag> = true;\");\n            MainCode.Add(\"}\");\n            MainCode.Add(\"index = <savedIndex>;\");\n            MainCode.Add(\"if (<flag>)\");\n        }\n\n        public override string Description\n        {\n            get\n            {\n                int bars = Parameters[0].AsInt;\n                return bars.ToString() + (bars == 1 ? \" bar\" : \" bars\") + \" ago\";\n            }\n        }\n    }\n}\n",
    "metadata": {
      "id": "building-block",
      "title": "building-block",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/building-block.md",
      "chunkIndex": "code-7",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": ")\n{\n    string operand = Parameters[1].AsOperand;\n    string barsBack = Parameters[3].BuildingBlockTextOutput;\n    MainCode.Add(\"if (index - \" + barsBack + \" >= 0 && <indicator1>[index] \" + operand + \" <indicator2>[index - \" + barsBack + \"])\");\n}\n```\n\n## Qualifier Building Blocks\n\nQualifier Building Blocks can be added to Condition Building Blocks to add additional logic. They are implemented as instances of the `QualifierBuildingBlock` base class.\n\nExample implementation of NBarsAgo Qualifier:\n"
    }
  },
  {
    "pageContent": ")\n{\n    string operand = Parameters[1].AsOperand;\n    string barsBack = Parameters[3].BuildingBlockTextOutput;\n    MainCode.Add(\"if (index - \" + barsBack + \" >= 0 && <indicator1>[index] \" + operand + \" <indicator2>[index - \" + barsBack + \"])\");\n}\n```\n\n## Qualifier Building Blocks\n\nQualifier Building Blocks can be added to Condition Building Blocks to add additional logic. They are implemented as instances of the `QualifierBuildingBlock` base class.\n\nExample implementation of NBarsAgo Qualifier:\n\n\n```csharp\nusing WealthLab.Core;\n\nnamespace WealthLab.Backtest\n{\n    public class NBarsAgo : QualifierBuildingBlock\n    {\n        public override void GenerateParameters()\n        {\n            Parameter p = AddParameter(\"How many bars ago\", ParameterType.Int32, 1);\n            p.MinValue = 1.0;\n        }\n\n        public override void Initialize()\n        {\n            RegisterVariable(\"savedIndex\", \"int\");\n            RegisterVariable(\"flag\", \"bool\");\n        }\n\n        public override string Name => \"N Bars Ago\";\n        \n        public override void GenerateMainCode()\n        {\n            string numBars = Parameters[0].BuildingBlockTextOutput;\n            MainCode.Add(\"<savedIndex> = index;\");\n            MainCode.Add(\"<flag> = false;\");\n            MainCode.Add(\"index = index - \" + numBars + \";\");\n            MainCode.Add(\"if (index >= 0)\");\n            MainCode.Add(\"{\");\n            MainCode.Add(\"\\t<Condition>\");\n            MainCode.Add(\"\\t\\t<flag> = true;\");\n            MainCode.Add(\"}\");\n            MainCode.Add(\"index = <savedIndex>;\");\n            MainCode.Add(\"if (<flag>)\");\n        }\n\n        public override string Description\n        {\n            get\n            {\n                int bars = Parameters[0].AsInt;\n                return bars.ToString() + (bars == 1 ? \" bar\" : \" bars\") + \" ago\";\n            }\n        }\n    }\n}\n\n```",
    "metadata": {
      "id": "building-block",
      "title": "building-block",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/building-block.md",
      "chunkIndex": "code-context-7",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public override void GenerateSameBarExitCode()\n{\n   double mult = Parameters[0].AsDouble / 100.0 + 1.0;\n   SameBarExitCode.Add(\"\\t\\t\\tprice = executionPrice * \" + mult + \";\");\n   SameBarExitCode.Add(\"\\t\\t\\tt.AssignAutoProfitTargetPrice(price);\");\n}\n",
    "metadata": {
      "id": "building-block",
      "title": "building-block",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/building-block.md",
      "chunkIndex": "code-8",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "   return bars.ToString() + (bars == 1 ? \" bar\" : \" bars\") + \" ago\";\n            }\n        }\n    }\n}\n```\n\n## Enabling Same Bar Exits\n\n### public virtual bool SupportsSameBarExit\nOverride this property to return true if you want your Exit Building Block to support same-bar exits.\n\n### public virtual void GenerateSameBarExitCode()\nIn this method you'll inject lines of code into the `SameBarExitCode` property of your Building Block.\n\nExample implementation for Sell at Profit Target Building Block:\n"
    }
  },
  {
    "pageContent": "   return bars.ToString() + (bars == 1 ? \" bar\" : \" bars\") + \" ago\";\n            }\n        }\n    }\n}\n```\n\n## Enabling Same Bar Exits\n\n### public virtual bool SupportsSameBarExit\nOverride this property to return true if you want your Exit Building Block to support same-bar exits.\n\n### public virtual void GenerateSameBarExitCode()\nIn this method you'll inject lines of code into the `SameBarExitCode` property of your Building Block.\n\nExample implementation for Sell at Profit Target Building Block:\n\n\n```csharp\npublic override void GenerateSameBarExitCode()\n{\n   double mult = Parameters[0].AsDouble / 100.0 + 1.0;\n   SameBarExitCode.Add(\"\\t\\t\\tprice = executionPrice * \" + mult + \";\");\n   SameBarExitCode.Add(\"\\t\\t\\tt.AssignAutoProfitTargetPrice(price);\");\n}\n\n```",
    "metadata": {
      "id": "building-block",
      "title": "building-block",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/building-block.md",
      "chunkIndex": "code-context-8",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "# Using the Chart Component in Extensions\n\nThis document describes how to use the Chart components in Wealth-Lab 8 in your own Extensions. The Chart components are located in the `WealthLab.ChartWPF` assembly, so reference this assembly in addition to the other ones required for your Extension.\n\n> **Note:** For a complete example of using the Chart components in an Extension, see our open source Extension Demo Project on GitHub.\n\nThe Chart Components in `WealthLab.ChartWPF` are organized into two primary classes:\n\n- `CoreChart` - The stripped down chart without toolbar and status bar\n- `Chart` - A higher level chart that contains a CoreChart, toolbar, and status bar\n\n## Accessing the Host (WL8) Environment\n\nThe `IHost` interface allows your extension to access information about the user's WealthLab environment. For example, the location of the user data folder, or obtaining a list of DataSets defined by the user. At any point in your extension's code base, you can access an instance of the `IHost` interface using the singleton class `WLHost` and its `Instance` property. Example:\n\n",
    "metadata": {
      "id": "chart-components",
      "title": "chart-components",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/chart-components.md",
      "chunkIndex": 0,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n## Working with CoreChart\n\nThe first tab of the Extension Demo Project contains 4 CoreChart instances in a 2x2 grid. Examine the XAML and CS code for an example of how to bring the CoreChart into your project code base.\n\n### public void Refresh(bool fullRefresh)\nCauses the chart to refresh. Can be used to force a refresh after changing some properties in its ChartPreferences, for example. The chart uses two-pass rendering logic:\n- First pass renders the underlying bars of data\n- Second pass renders only the transient elements like cursors\n\nThe `fullRefresh` parameter controls whether both rendering passes will occur (`true`) or only the second pass (`false`).\n\n### public BarHistory Bars\nAssign a `BarHistory` instance to the Bars property to cause that data to be plotted in the chart.\n\n### public ChartPreferences ChartPreferences\nAn instance of the `ChartPreferences` class that contains the cosmetic settings the chart will use to render. Assigning a new value to this property causes the chart to refresh with the new settings.\n\n### public bool IsCrosshairEnabled\nControls whether the crosshair cursor is visible.\n\n### public bool IsVerticalBarEnabled\nControls whether the vertical bar cursor is visible.\n\n### public bool IsStreaming\nControls whether the chart is streaming. If you assign true, the chart will use the most recently selected Streaming Data Provider.\n\n### public bool ActivateStreamingWith(StreamingProviderBase sb)\nLets you begin streaming with a specific Streaming Data Provider.\n\n> **Note:** CoreChart has many more properties, methods and events, and we will continue to flesh out this document as time goes on. For answers to any particular questions, please use our Discussion Forum.\n\n## Working with Chart\n\nThe second tab of the Extension Demo Project contains a Chart component that accepts user-selected Indicators for plotting. Examine the XAML and CS code for an example of how to bring the Chart into your project code base.\n\n### public void ChartThisSymbol(string symbol, DataSet ds = null)\nCauses the chart to load data for the specified symbol, optionally using the DataSet specified in `ds`.\n\n### public CoreChart Core\nThe instance of `CoreChart` contained in this Chart.\n\n### public void InstallContextMenuItem(string text, ImageSource imgsrc, RoutedEventHandler handler)\nLets you add a new menu item to the chart's right click context menu. Parameters:\n- `text`: The text to display in the menu item\n- `imgsrc`: The image to display next to the menu item\n- `handler`: The event handler to execute when the menu item is clicked\n\n### public bool AllowStreaming\nControls whether the streaming button should be visible in the chart toolbar.\n\n### public bool IsStreaming\nDetermines whether the chart is streaming.\n\n> **Note:** Chart has many more properties, methods and events, and we will continue to flesh out this document as time goes on. For answers to any particular questions, please use our Discussion Forum. ",
    "metadata": {
      "id": "chart-components",
      "title": "chart-components",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/chart-components.md",
      "chunkIndex": 1,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "//get user data folder\nstring folder = WLHost.Instance.DataFolder;\n",
    "metadata": {
      "id": "chart-components",
      "title": "chart-components",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/chart-components.md",
      "chunkIndex": "code-0",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "rt` - A higher level chart that contains a CoreChart, toolbar, and status bar\n\n## Accessing the Host (WL8) Environment\n\nThe `IHost` interface allows your extension to access information about the user's WealthLab environment. For example, the location of the user data folder, or obtaining a list of DataSets defined by the user. At any point in your extension's code base, you can access an instance of the `IHost` interface using the singleton class `WLHost` and its `Instance` property. Example:\n\n"
    }
  },
  {
    "pageContent": "rt` - A higher level chart that contains a CoreChart, toolbar, and status bar\n\n## Accessing the Host (WL8) Environment\n\nThe `IHost` interface allows your extension to access information about the user's WealthLab environment. For example, the location of the user data folder, or obtaining a list of DataSets defined by the user. At any point in your extension's code base, you can access an instance of the `IHost` interface using the singleton class `WLHost` and its `Instance` property. Example:\n\n\n\n```csharp\n//get user data folder\nstring folder = WLHost.Instance.DataFolder;\n\n```",
    "metadata": {
      "id": "chart-components",
      "title": "chart-components",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/chart-components.md",
      "chunkIndex": "code-context-0",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "# Chart Drawing Object API\n\nThis document details the API for building Chart Drawing Objects for Wealth-Lab 8. A Chart Drawing Object appears in a toolbar along the right edge of the WL8 main window when a chart has focus. The user can select a Drawing Object with the mouse, then click and drag on the chart to draw it there. Common Drawing Objects include:\n\n- Trendline\n- Triangle, and other shapes\n- Fibonacci Retracement\n\n## Build Environment\n\nYou can create a Drawing Object in a .NET development tool such as Visual Studio 2022. Create a class library project that targets .NET8, then reference the WealthLab.ChartWPF library DLL that you'll find in the WL8 installation folder.\n\n> **Note:** If you are using Visual Studio 2022, it will need to be updated to at least version 17.8.6 to use .NET8.\n\nYour Drawing Object will be a class in this library that descends from `DrawingObjectBase`, which is defined in the WealthLab.ChartWPF library, in the `WealthLab.ChartWPF` namespace. After you implement and build your library, simply copy the resulting assembly DLL into the WL8 installation folder. The next time WL8 starts up, it will discover your Drawing Object, making it available in appropriate locations of the WL8 user interface.\n\n`DrawingObjectBase` is derived from the `PlotBase` base class. Consult the PlotBase class reference for more properties and methods available to `DrawingObjectBase`.\n\n## Accessing the Host (WL8) Environment\n\nThe `IHost` interface allows your extension to access information about the user's WealthLab environment. For example, the location of the user data folder, or obtaining a list of DataSets defined by the user. At any point in your extension's code base, you can access an instance of the `IHost` interface using the singleton class `WLHost` and its `Instance` property. Example:\n\n",
    "metadata": {
      "id": "chart-drawing-object",
      "title": "chart-drawing-object",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/chart-drawing-object.md",
      "chunkIndex": 0,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n## Descriptive Properties\n\n`DrawingObjectBase` derived from the `Configurable` base class, which exposes a number of descriptive properties you should implement. These include:\n\n- `Name` - the Drawing Object's name\n- `GlyphResource` - an icon to represent the drawing object in the toolbar\n\nThe following additional properties are specific to `DrawingObjectBase`:\n\n### public string GroupName\nBy default `GroupName` returns the string \"Basic\". You can override this to return a string allowing you to group like Drawing Objects within the toolbar.\n\n### public virtual bool AutoEdit\nReturns false by default. If you override this to return true, WL8 will pop open the parameter editor window as soon as your Drawing Object is placed on the chart by the user. The Text Note Drawing Object employs this method to prompt the user to enter the text for the note as soon as it's placed on the chart.\n\n## Drawing Object Parameters\n\nThe `Configurable` base class provides a mechanism for the user to configure parameters of your Drawing Object, via the `Parameters` property. Create `Parameter` instances in the `GenerateParameters` method override.\n\n### Other Parameter-Related Functionality\n\nThe `DrawingObjectBase` class adds the following the Parameter instances in its default implementation of `GenerateParameters`. If you wish to keep these default parameters, calls `base.GenerateParameters` in your own implementation:\n\n- Color (type = WLColor)\n- Line Width (type = Int32)\n- Line Style (type = LineStyle)\n\n### protected void AddFilledShapeParameters()\nYou can call this method in your `GenerateParameters` override to add the following 2 Parameter instances to the Parameters property. You might use these parameters, for example, if your Drawing Object is a solid shape that shape that can optionally be filled with color:\n\n- Fill? (type = Boolean)\n- Opacity (0-100) (type = Int32)\n\n## Accessing the CoreChart Instance\n\n### public CoreChart Chart\nThis property is inherited from the `PlotBase` parent class, and returns an instance of the underlying chart component (an instance of the `CoreChart` class) that your Drawing Object is rendering to. Consult the CoreChart class reference for information about the properties and methods available.\n\n## Handles and Lines\n\nA Drawing Object is typically composed of handles and lines. Handles are the small circles that appear as you mouse over a Drawing Object. The user can click and drag a handle to move some or part of the Drawing Object. At minimum, a Drawing Object must have at least one handle. Handles are instances of the `Handle` class.\n\nTwo handles are often connected by a line. The user can typically drag a line to move the entire Drawing Object. Lines are instances of the `DrawingObjectLine` class.\n\n### public List<Handle> Handles\nA List containing the `Handle` instances representing the Drawing Object's handles.\n\n### public List<DrawingObjectLine> Lines\nA List containing `DrawingObjectLine` instances representing the Drawing Object's lines.\n\n### public bool SnapToPrice\nThis property functions only if you added a Boolean Parameter instance named \"Snap to Price\" to the Drawing Object's Parameters. The property controls whether or not the Handles of your Drawing Object snap to the price on the chart as the user moves them with the mouse.\n\n### public virtual void HandleMoved(Handle h)\nWL8 calls this method after the user has moved one of the handles of your Drawing Object. You can override this to perform any calculations needed, or to move other handles to keep them synchronized with the moved handle, as required.\n\n## Drawing Object Inception\n\n### public abstract Handle InitializeAt(double x, double y)\nWL8 calls this method when the user first begins to draw your Drawing Object on the chart. It is here that you add the code to define the handles and lines that make up your Drawing Object. Use a combination of the methods below to add handles and lines. The return value of the method should be an instance of the `Handle` class that becomes the handle that the user drags as they continue to draw your Drawing Object on the chart.\n\n### protected Handle AddHandle Methods\n",
    "metadata": {
      "id": "chart-drawing-object",
      "title": "chart-drawing-object",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/chart-drawing-object.md",
      "chunkIndex": 1,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\nCall these methods to add handles to your Drawing Object. You can add handles using x, y pixel coordinates, or by specifying DateTime (dt), y-axis value val coordinates. \n\nExample of the Triangle Drawing Object which creates 3 handles, and then creates 3 lines based on these handles:\n",
    "metadata": {
      "id": "chart-drawing-object",
      "title": "chart-drawing-object",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/chart-drawing-object.md",
      "chunkIndex": 2,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n### protected DrawingObjectLine AddLine Methods\n",
    "metadata": {
      "id": "chart-drawing-object",
      "title": "chart-drawing-object",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/chart-drawing-object.md",
      "chunkIndex": 3,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\nCall these methods to add lines to your Drawing Object. You can base the lines using the same parameter options as the AddHandle calls above. Additionally, you can create a line based on Handle instances that you created earlier.\n\nExample of the Trendline Drawing Object:\n",
    "metadata": {
      "id": "chart-drawing-object",
      "title": "chart-drawing-object",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/chart-drawing-object.md",
      "chunkIndex": 4,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n## Responding to User Interaction\n\n### public virtual void Moved(double startX, double startY, double x, double y)\nThis method is called when the user moves the Drawing Object on the chart. You are supplied the starting x, y mouse coordinates for when the move operation began, and then the current x, y mouse coordinates.\n\n### public virtual void HandleMoved()\nThis method is called as the user moves one of the Drawing Object's handles on the chart.\n\n### public virtual void MoveComplete()\nThis method is called when the user has finished moving the Drawing Object on the chart and has released the mouse button.\n\n## Rendering Drawing Objects\n\n### public override void Render(DrawingContext dc)\nThe Drawing Object Render method offers a default implementation that renders the lines of your Drawing Object using its Color, Line Width, and Line Style. You can override the Render method if you need to either replace or augment the default rendering.\n\n### public override void RenderHighlight(DrawingContext dc)\nThe Drawing Object RenderHighlight method offers a default implementation that renders the handles of the Drawing Object when the user moves the mouse over it. Additionally, it calls `RenderDrawingObjectHighlight` described below. If you wish to keep the rendering of the handles but replace or augment the rendering of the highlighted lines, override the method below instead of this one.\n\n### public virtual void RenderDrawingObjectHighlight(DrawingContext dc)\nThis method is called by RenderHightlight when the user moves the mouse over the Drawing Object. The default implementation renders a thick, translucent line over the first line defined in the Drawing Object. You can replace or augment this behavior by overriding this method.\n\n### protected void RenderAllLinesHighlighted(DrawingContext dc)\nYou can call this helper method within your implementation of `RenderDrawingObjectHighlight` to render thick, translucent lines over all of the Drawing Object's lines.\n\n### protected Brush GetBrush()\nReturns a Brush that you can use to fill a fillable Drawing Object, based on its Parameters values.\n\n### protected Pen GetPen(DrawingObjectLine line = null)\nReturns a Pen that you can use the render the lines of a Drawing Object, based on its Parameters values. You can also pass the optional line parameter, an instance of the `DrawingObjectLine` class, to return a Pen for that specific line's properties.\n\n### protected Pen GetHighlightPen()\nReturns a Pen that you can use the render the highlighted line(s) of a Drawing Object, that get rendered when the mouse moves over the Drawing Object, based on its Parameters values.\n\n### protected bool IsFilled\nReturns true if the \"Fill?\" Parameter instance contains a value of true.\n\n### protected Color FillColor\nReturns a color based on the value of the Drawing Object's Color and the value of the \"Fill Opacity (0-100)\" Parameter value.\n\n### protected List<Point> GetPointsArray()\nReturns an array of Point instances that represent the Drawing Object's lines.\n\n## Example\n\nBelow is the source code for the Triangle Drawing Object:\n\n```csharp\nnamespace WealthLab.ChartWPF\n{\n    //triangle drawing object\n    public class TriangleDrawingObject : DrawingObjectBase\n    {\n        //parameters\n        public override void GenerateParameters()\n        {\n            base.GenerateParameters();\n            AddFilledShapeParameters();\n        }\n\n        //name\n        public override string Name => \"Triangle\";\n\n        //Glyph\n        public override string GlyphResource => \"WealthLab.ChartWPF.Glyphs.TriangleDrawing.png\";\n\n        //initialize\n        public override Handle InitializeAt(double x, double y)\n        {\n            Handle h1 = AddHandle(x - 100, y - 50);\n            Handle h2 = AddHandle(x, y);\n            Handle h3 = AddHandle(x - 100, y + 50);\n            AddLine(h1, h2);\n            AddLine(h2, h3);\n            AddLine(h3, h1);\n            return h2;\n        }\n    }\n} ",
    "metadata": {
      "id": "chart-drawing-object",
      "title": "chart-drawing-object",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/chart-drawing-object.md",
      "chunkIndex": 5,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "//get user data folder\nstring folder = WLHost.Instance.DataFolder;\n",
    "metadata": {
      "id": "chart-drawing-object",
      "title": "chart-drawing-object",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/chart-drawing-object.md",
      "chunkIndex": "code-0",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "s reference for more properties and methods available to `DrawingObjectBase`.\n\n## Accessing the Host (WL8) Environment\n\nThe `IHost` interface allows your extension to access information about the user's WealthLab environment. For example, the location of the user data folder, or obtaining a list of DataSets defined by the user. At any point in your extension's code base, you can access an instance of the `IHost` interface using the singleton class `WLHost` and its `Instance` property. Example:\n\n"
    }
  },
  {
    "pageContent": "s reference for more properties and methods available to `DrawingObjectBase`.\n\n## Accessing the Host (WL8) Environment\n\nThe `IHost` interface allows your extension to access information about the user's WealthLab environment. For example, the location of the user data folder, or obtaining a list of DataSets defined by the user. At any point in your extension's code base, you can access an instance of the `IHost` interface using the singleton class `WLHost` and its `Instance` property. Example:\n\n\n\n```csharp\n//get user data folder\nstring folder = WLHost.Instance.DataFolder;\n\n```",
    "metadata": {
      "id": "chart-drawing-object",
      "title": "chart-drawing-object",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/chart-drawing-object.md",
      "chunkIndex": "code-context-0",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "protected Handle AddHandle(double x, double y)\nprotected Handle AddHandle(DateTime dt, double val)\n",
    "metadata": {
      "id": "chart-drawing-object",
      "title": "chart-drawing-object",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/chart-drawing-object.md",
      "chunkIndex": "code-1",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "lizeAt(double x, double y)\nWL8 calls this method when the user first begins to draw your Drawing Object on the chart. It is here that you add the code to define the handles and lines that make up your Drawing Object. Use a combination of the methods below to add handles and lines. The return value of the method should be an instance of the `Handle` class that becomes the handle that the user drags as they continue to draw your Drawing Object on the chart.\n\n### protected Handle AddHandle Methods\n"
    }
  },
  {
    "pageContent": "lizeAt(double x, double y)\nWL8 calls this method when the user first begins to draw your Drawing Object on the chart. It is here that you add the code to define the handles and lines that make up your Drawing Object. Use a combination of the methods below to add handles and lines. The return value of the method should be an instance of the `Handle` class that becomes the handle that the user drags as they continue to draw your Drawing Object on the chart.\n\n### protected Handle AddHandle Methods\n\n\n```csharp\nprotected Handle AddHandle(double x, double y)\nprotected Handle AddHandle(DateTime dt, double val)\n\n```",
    "metadata": {
      "id": "chart-drawing-object",
      "title": "chart-drawing-object",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/chart-drawing-object.md",
      "chunkIndex": "code-context-1",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public override Handle InitializeAt(double x, double y)\n{\n    Handle h1 = AddHandle(x - 100, y - 50);\n    Handle h2 = AddHandle(x, y);\n    Handle h3 = AddHandle(x - 100, y + 50);\n    AddLine(h1, h2);\n    AddLine(h2, h3);\n    AddLine(h3, h1);\n    return h2;\n}\n",
    "metadata": {
      "id": "chart-drawing-object",
      "title": "chart-drawing-object",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/chart-drawing-object.md",
      "chunkIndex": "code-2",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "s as they continue to draw your Drawing Object on the chart.\n\n### protected Handle AddHandle Methods\n```csharp\nprotected Handle AddHandle(double x, double y)\nprotected Handle AddHandle(DateTime dt, double val)\n```\n\nCall these methods to add handles to your Drawing Object. You can add handles using x, y pixel coordinates, or by specifying DateTime (dt), y-axis value val coordinates. \n\nExample of the Triangle Drawing Object which creates 3 handles, and then creates 3 lines based on these handles:\n"
    }
  },
  {
    "pageContent": "s as they continue to draw your Drawing Object on the chart.\n\n### protected Handle AddHandle Methods\n```csharp\nprotected Handle AddHandle(double x, double y)\nprotected Handle AddHandle(DateTime dt, double val)\n```\n\nCall these methods to add handles to your Drawing Object. You can add handles using x, y pixel coordinates, or by specifying DateTime (dt), y-axis value val coordinates. \n\nExample of the Triangle Drawing Object which creates 3 handles, and then creates 3 lines based on these handles:\n\n\n```csharp\npublic override Handle InitializeAt(double x, double y)\n{\n    Handle h1 = AddHandle(x - 100, y - 50);\n    Handle h2 = AddHandle(x, y);\n    Handle h3 = AddHandle(x - 100, y + 50);\n    AddLine(h1, h2);\n    AddLine(h2, h3);\n    AddLine(h3, h1);\n    return h2;\n}\n\n```",
    "metadata": {
      "id": "chart-drawing-object",
      "title": "chart-drawing-object",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/chart-drawing-object.md",
      "chunkIndex": "code-context-2",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "protected DrawingObjectLine AddLine(double x1, double y1, double x2, double y2, bool canDrag = true)\nprotected DrawingObjectLine AddLine(Handle handle1, Handle handle2, bool canDrag = true)\nprotected DrawingObjectLine AddLine(DateTime dt1, double val1, DateTime dt2, double val2, bool canDrag = true)\n",
    "metadata": {
      "id": "chart-drawing-object",
      "title": "chart-drawing-object",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/chart-drawing-object.md",
      "chunkIndex": "code-3",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": " or by specifying DateTime (dt), y-axis value val coordinates. \n\nExample of the Triangle Drawing Object which creates 3 handles, and then creates 3 lines based on these handles:\n```csharp\npublic override Handle InitializeAt(double x, double y)\n{\n    Handle h1 = AddHandle(x - 100, y - 50);\n    Handle h2 = AddHandle(x, y);\n    Handle h3 = AddHandle(x - 100, y + 50);\n    AddLine(h1, h2);\n    AddLine(h2, h3);\n    AddLine(h3, h1);\n    return h2;\n}\n```\n\n### protected DrawingObjectLine AddLine Methods\n"
    }
  },
  {
    "pageContent": " or by specifying DateTime (dt), y-axis value val coordinates. \n\nExample of the Triangle Drawing Object which creates 3 handles, and then creates 3 lines based on these handles:\n```csharp\npublic override Handle InitializeAt(double x, double y)\n{\n    Handle h1 = AddHandle(x - 100, y - 50);\n    Handle h2 = AddHandle(x, y);\n    Handle h3 = AddHandle(x - 100, y + 50);\n    AddLine(h1, h2);\n    AddLine(h2, h3);\n    AddLine(h3, h1);\n    return h2;\n}\n```\n\n### protected DrawingObjectLine AddLine Methods\n\n\n```csharp\nprotected DrawingObjectLine AddLine(double x1, double y1, double x2, double y2, bool canDrag = true)\nprotected DrawingObjectLine AddLine(Handle handle1, Handle handle2, bool canDrag = true)\nprotected DrawingObjectLine AddLine(DateTime dt1, double val1, DateTime dt2, double val2, bool canDrag = true)\n\n```",
    "metadata": {
      "id": "chart-drawing-object",
      "title": "chart-drawing-object",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/chart-drawing-object.md",
      "chunkIndex": "code-context-3",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public override Handle InitializeAt(double x, double y)\n{\n    AddLine(x, y, x, y, true);\n    return Lines[0].Handle2;\n}\n",
    "metadata": {
      "id": "chart-drawing-object",
      "title": "chart-drawing-object",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/chart-drawing-object.md",
      "chunkIndex": "code-4",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": ", bool canDrag = true)\nprotected DrawingObjectLine AddLine(Handle handle1, Handle handle2, bool canDrag = true)\nprotected DrawingObjectLine AddLine(DateTime dt1, double val1, DateTime dt2, double val2, bool canDrag = true)\n```\n\nCall these methods to add lines to your Drawing Object. You can base the lines using the same parameter options as the AddHandle calls above. Additionally, you can create a line based on Handle instances that you created earlier.\n\nExample of the Trendline Drawing Object:\n"
    }
  },
  {
    "pageContent": ", bool canDrag = true)\nprotected DrawingObjectLine AddLine(Handle handle1, Handle handle2, bool canDrag = true)\nprotected DrawingObjectLine AddLine(DateTime dt1, double val1, DateTime dt2, double val2, bool canDrag = true)\n```\n\nCall these methods to add lines to your Drawing Object. You can base the lines using the same parameter options as the AddHandle calls above. Additionally, you can create a line based on Handle instances that you created earlier.\n\nExample of the Trendline Drawing Object:\n\n\n```csharp\npublic override Handle InitializeAt(double x, double y)\n{\n    AddLine(x, y, x, y, true);\n    return Lines[0].Handle2;\n}\n\n```",
    "metadata": {
      "id": "chart-drawing-object",
      "title": "chart-drawing-object",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/chart-drawing-object.md",
      "chunkIndex": "code-context-4",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "# Chart Style Extension API\n\nThis document details the API for building Chart Style Extensions for Wealth-Lab 8. A Chart Style determines how the open, high, low, close (OHLC) bars are rendered on the WL8 chart. Common Charts Styles include:\n\n- Bar\n- Candlestick\n- Line\n\n## Build Environment\n\nYou can create a Chart Style in a .NET development tool such as Visual Studio 2022. Create a class library project that targets .NET8, then reference the WealthLab.ChartWPF library DLL that you'll find in the WL8 installation folder.\n\n> **Note:** If you are using Visual Studio 2022, it will need to be updated to at least version 17.8.6 to use .NET8.\n\nYour Chart Style will be a class in this library that descends from `ChartStyleBase`, which is defined in the WealthLab.ChartWPF library, in the `WealthLab.ChartWPF` namespace. After you implement and build your library, simply copy the resulting assembly DLL into the WL8 installation folder. The next time WL8 starts up, it will discover your Chart Style, making it available in appropriate locations of the WL8 user interface.\n\n`ChartStyleBase` is derived from the `PlotBase` base class. Consult the PlotBase class reference for more properties and methods available to `ChartStyleBase`.\n\n## Accessing the Host (WL8) Environment\n\nThe `IHost` interface allows your extension to access information about the user's WealthLab environment. For example, the location of the user data folder, or obtaining a list of DataSets defined by the user. At any point in your extension's code base, you can access an instance of the `IHost` interface using the singleton class `WLHost` and its `Instance` property. Example:\n\n",
    "metadata": {
      "id": "chart-style",
      "title": "chart-style",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/chart-style.md",
      "chunkIndex": 0,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n## Configuration of a Chart Style\n\n`ChartStyleBase` descends from the base class `Configurable`, which provides a way to allow the user to configure the Chart Style. Consult the Configurable class reference for details.\n\nBy default, `ChartStyleBase` assigns the `ParameterListType` value to its `ConfigurableType` property, so the Chart Style will use a `ParameterList` containing `Parameter` instances for configuration.\n\nYou'll define these Parameters in the `GenerateParameters` method, as described in the Configurable class reference.\n\n## Important Descriptive Properties\n\nThe `Configurable` class provides descriptive properties that control how your Chart Style appears in WL8. The most important ones to override are `Name` and `GlyphResource`.\n\n## Accessing the CoreChart Instance\n\n### public CoreChart Chart\nThis property is inherited from the `PlotBase` parent class, and returns an instance of the underlying chart component (an instance of the `CoreChart` class) that your Chart Style is rendering to. You'll need to access several important properties of the Chart instance as you develop a Chart Style. Most notable are the `StartIndex` and `EndIndex` properties that return the indices within the `BarHistory` being charted. These properties let you know:\n- First bar number being charted along the left edge of the Chart\n- Last bar number being charted along the right edge\n\n## Initializing and Calculating Bar Width\n\n### public virtual void Initialize(BarHistory bars)\nOverride this method to perform any required initialization. WL8 calls your Chart Style's Initialize method whenever the `BarHistory` instance being charted changes. You are passed this instance in the bars parameter.\n\n### public virtual bool IsSimpleStyle\nYour Chart Style can support fixed or variable bar width charts:\n\n- Fixed width styles (most common):\n  - Candlestick\n  - Bar\n  - Line\n  - Each bar has the same width in pixels\n\n- Variable bar width styles:\n  - Kagi\n  - Point & Figure\n  - Each bar can have different width in pixels\n  - Some bars can have zero width\n\nIf you are creating a fixed width Chart Style, let this property return its default value of false. If you are creating a variable bar width Chart Style, return false and implement the following methods:\n\n### public virtual double GetBarWidth(int idx)\nReturn the width, in pixels, of the bar at index number idx. Returning a width of zero is valid for certain Chart Styles that render only a subset of the data.\n\n### public virtual int CalculateBarSpacings()\nWL8 calls this method when:\n- The selected ChartPreferences bar spacing has changed\n- The underlying BarHistory being charted has changed\n- The chart has scrolled\n\nYou might override this method to recalculate any internal data structures you're using to represent the internals of your Chart Style. After performing your Chart Style-specific logic, be sure to call `base.CalculateBarSpacings`. The base implementation sums up the bar widths starting along the right edge of the chart to determine the leftmost bar number that needs to be rendered.\n\n## Rendering the Chart Style\n\n### public abstract void Render(DrawingContext dc)\nOverride this method to render your Chart Style onto the WPF DrawingContext passed in the dc parameter. The typical implementation does the following:\n\n1. Loop through the bars in the BarHistory being charted (accessible via the Bars property), starting at `Chart.StartIndex` and ending at `Chart.EndIndex`\n2. Use the conversion methods provided by the PlotBase ancestor class:\n   - `ConvertIndexToX`: Convert index values to x-pixel coordinates\n   - `ConvertValueToY`: Convert price values to y-pixel coordinates\n3. Render each of the bars onto the DrawingContext using its drawing methods\n4. Use the `PenBrushFactory` helper class to get instances of System.Windows.Media Pens and Brushes\n\n### public override WLColor GetBarColor(int idx)\nThis method returns the color that should be used to render the bar with the index of idx. The color depends on:\n- The selected ChartPreferences instance\n- Possible color changes initiated by Strategy code\n\n### public virtual void RenderStreamingBar(DrawingContext dc)\nOverride this method to render the streaming partial bar onto the WPF DrawingContext passed in the dc parameter. Use the following properties:\n\n- `Chart.StreamingBarColor`\n- `Chart.StreamingBarPlotX`\n- `Bars.StreamingBar` (a BarData instance that contains the OHLC/V values of the streaming bar)\n\n### protected void RenderAsLine(DrawingContext dc)\nYou can call this method within Render to render the chart as a simple line style. The basic Chart Styles Candlestick and Bar do this when `ChartPreferences.BarSpacing` is <= 2. This logic:\n- Allows the chart to collapse gracefully when squeezed tight by the user\n- Improves rendering performance\n\n## Example Code\n\nBelow is the full implementation of the Heikin-Ashi Chart Style:\n\n```csharp\nusing WealthLab.WPF;\nusing System.Windows;\nusing System.Windows.Media;\nusing WealthLab.Core;\n\nnamespace WealthLab.ChartWPF\n{\n    //heikin ashi chart style\n    public class HeikinAshiChartStyle : ChartStyleBase\n    {\n        //name\n        public override string Name => \"Heikin Ashi\";\n\n        //it's a simple style\n        public override bool IsSimpleStyle => true;\n\n        //Glyph\n        public override string GlyphResource => \"WealthLab.ChartWPF.Glyphs.HeikinAshi.png\";\n\n        //The Glyph works as is in both Light and Dark Themes\n        public override bool DisableGlyphReverse => true;\n\n        //render the chart style\n        public override void Render(DrawingContext dc)\n        {\n            if (ChartPreferences.BarSpacing <= 2 && !ChartPreferences.DisableRenderingOptimization)\n            {\n                RenderAsLine(dc);\n                return;\n            }\n            BarHistory ha = HeikinAshi.Convert(Bars);\n            Brush bkg = PenBrushFactory.GetBrush(ChartPreferences.ColorBackground);\n            for (int n = Chart.StartIndex; n <= Chart.EndIndex; n++)\n            {\n                if (Double.IsNaN(ha.Close[n]))\n                    continue;\n\n                //determine color, override only if custom color not assigned\n                WLColor c;\n                if (ha.Close[n] >= ha.Open[n])\n                    c = ChartPreferences.ColorUpBar;\n                else\n                    c = ChartPreferences.ColorDownBar;\n\n                //render high/low line\n                double xCoord = ConvertIndexToX(n);\n                double yHigh = ConvertValueToY(ha.High[n]);\n                double yLow = ConvertValueToY(ha.Low[n]);\n                Pen pen = PenBrushFactory.GetPen(c, 1);\n                dc.DrawLine(pen, new Point(xCoord, yHigh), new Point(xCoord, yLow));\n\n                //determine width of candle\n                double tickSize = ChartPreferences.BarSpacing / 2.0 - 1.0;\n                if (tickSize < 1)\n                    tickSize = 1;\n\n                //render candle\n                double yOpen = ConvertValueToY(ha.Open[n]);\n                double yClose = ConvertValueToY(ha.Close[n]);\n                double height = Math.Abs(yOpen - yClose);\n                if (height < 1.0)\n                    height = 1.0;\n                double width = tickSize * 2.0;\n                double x = xCoord - tickSize;\n                if (ha.Close[n] >= ha.Open[n])\n                {\n                    Rect rect = new Rect(x, yClose, width, height);\n                    dc.DrawRectangle(bkg, PenBrushFactory.GetPen(c, 1), rect);\n                }\n                else\n                {\n                    Rect rect = new Rect(x, yOpen, width, height);\n                    dc.DrawRectangle(PenBrushFactory.GetBrush(c), null, rect);\n                }\n            }\n        }\n    }\n} ",
    "metadata": {
      "id": "chart-style",
      "title": "chart-style",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/chart-style.md",
      "chunkIndex": 1,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "//get user data folder\nstring folder = WLHost.Instance.DataFolder;\n",
    "metadata": {
      "id": "chart-style",
      "title": "chart-style",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/chart-style.md",
      "chunkIndex": "code-0",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "lass reference for more properties and methods available to `ChartStyleBase`.\n\n## Accessing the Host (WL8) Environment\n\nThe `IHost` interface allows your extension to access information about the user's WealthLab environment. For example, the location of the user data folder, or obtaining a list of DataSets defined by the user. At any point in your extension's code base, you can access an instance of the `IHost` interface using the singleton class `WLHost` and its `Instance` property. Example:\n\n"
    }
  },
  {
    "pageContent": "lass reference for more properties and methods available to `ChartStyleBase`.\n\n## Accessing the Host (WL8) Environment\n\nThe `IHost` interface allows your extension to access information about the user's WealthLab environment. For example, the location of the user data folder, or obtaining a list of DataSets defined by the user. At any point in your extension's code base, you can access an instance of the `IHost` interface using the singleton class `WLHost` and its `Instance` property. Example:\n\n\n\n```csharp\n//get user data folder\nstring folder = WLHost.Instance.DataFolder;\n\n```",
    "metadata": {
      "id": "chart-style",
      "title": "chart-style",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/chart-style.md",
      "chunkIndex": "code-context-0",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "# Client Extension API\n\nThis document details the API for building Client Extensions for Wealth-Lab 8. A Client Extension allows you to add custom menu items to the WL8 Extensions menu and create child windows with custom functionality.\n\n## Architecture Overview\n\nClient Extensions are implemented using two base classes:\n\n1. `WL8ExtensionBase` (WealthLab.Core)\n   - One-time initialization\n   - Help System integration\n   - Platform-neutral functionality\n\n2. `WL8ClientExtensionBase` (WealthLab.WPF)\n   - Extension menu items\n   - Child window creation\n   - Preference pages\n   - Windows WPF-specific functionality\n\n## Build Environment\n\nYou can create a Client Extension in a .NET development tool such as Visual Studio 2022. Create a class library project that targets .NET8, then reference the WealthLab.WPF library DLL that you'll find in the WL8 installation folder.\n\n> **Note:** If you are using Visual Studio 2022, it will need to be updated to at least version 17.8.6 to use .NET8.\n\nYour Client Extension will be a class that descends from `WL8ClientExtensionBase`, defined in the WealthLab.WPF library. After building, copy the assembly DLL to the WL8 installation folder for automatic discovery on next startup.\n\n## Accessing the Host Environment\n\nThe `IHost` interface provides access to the WL8 environment:\n\n",
    "metadata": {
      "id": "client-extension",
      "title": "client-extension",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/client-extension.md",
      "chunkIndex": 0,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n## WL8ExtensionBase Class\n\n### Initialization\n",
    "metadata": {
      "id": "client-extension",
      "title": "client-extension",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/client-extension.md",
      "chunkIndex": 1,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n### Help System Integration\n\nHelp pages should be:\n- Installed in WL8's \"Help\" folder\n- Written in Markdown format (.md)\n- Named to match the final page name in contents string\n\nExample help page structure:\n",
    "metadata": {
      "id": "client-extension",
      "title": "client-extension",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/client-extension.md",
      "chunkIndex": 2,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n## WL8ClientExtensionBase Class\n\n### Menu Item Management\n\n",
    "metadata": {
      "id": "client-extension",
      "title": "client-extension",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/client-extension.md",
      "chunkIndex": 3,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n### Child Window Support\n\n",
    "metadata": {
      "id": "client-extension",
      "title": "client-extension",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/client-extension.md",
      "chunkIndex": 4,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n### Preference Pages\n\n",
    "metadata": {
      "id": "client-extension",
      "title": "client-extension",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/client-extension.md",
      "chunkIndex": 5,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n## Complete Example Implementation\n\nHere's a complete example of a Client Extension:\n\n",
    "metadata": {
      "id": "client-extension",
      "title": "client-extension",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/client-extension.md",
      "chunkIndex": 6,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\nThis example demonstrates:\n1. Core extension initialization\n2. Help system integration\n3. Menu item creation\n4. Child window management\n5. Preference page integration\n6. Workspace support\n7. Help system action support\n\n## Best Practices\n\n1. **Initialization**\n   - Keep initialization code minimal\n   - Use `Initialize()` for one-time setup only\n   - Add help pages during initialization\n\n2. **Menu Items**\n   - Use descriptive captions\n   - Provide meaningful icons\n   - Consider theme support for icons\n\n3. **Child Windows**\n   - Derive from `ChildWindow`\n   - Support workspace save/restore\n   - Handle theme changes\n\n4. **Help Integration**\n   - Organize help pages logically\n   - Use markdown formatting\n   - Include action links where appropriate\n\n5. **Resource Management**\n   - Cache glyph images\n   - Clean up resources properly\n   - Handle window disposal ",
    "metadata": {
      "id": "client-extension",
      "title": "client-extension",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/client-extension.md",
      "chunkIndex": 7,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "// Get user data folder\nstring folder = WLHost.Instance.DataFolder;\n",
    "metadata": {
      "id": "client-extension",
      "title": "client-extension",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/client-extension.md",
      "chunkIndex": "code-0",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "L that you'll find in the WL8 installation folder.\n\n> **Note:** If you are using Visual Studio 2022, it will need to be updated to at least version 17.8.6 to use .NET8.\n\nYour Client Extension will be a class that descends from `WL8ClientExtensionBase`, defined in the WealthLab.WPF library. After building, copy the assembly DLL to the WL8 installation folder for automatic discovery on next startup.\n\n## Accessing the Host Environment\n\nThe `IHost` interface provides access to the WL8 environment:\n\n"
    }
  },
  {
    "pageContent": "L that you'll find in the WL8 installation folder.\n\n> **Note:** If you are using Visual Studio 2022, it will need to be updated to at least version 17.8.6 to use .NET8.\n\nYour Client Extension will be a class that descends from `WL8ClientExtensionBase`, defined in the WealthLab.WPF library. After building, copy the assembly DLL to the WL8 installation folder for automatic discovery on next startup.\n\n## Accessing the Host Environment\n\nThe `IHost` interface provides access to the WL8 environment:\n\n\n\n```csharp\n// Get user data folder\nstring folder = WLHost.Instance.DataFolder;\n\n```",
    "metadata": {
      "id": "client-extension",
      "title": "client-extension",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/client-extension.md",
      "chunkIndex": "code-context-0",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public class MyExtension : WL8ExtensionBase\n{\n    public override string Name => \"My Extension\";\n    \n    public override void Initialize()\n    {\n        // Perform one-time initialization\n        // Add help pages\n        HelpManager.InsertPage(\"Extensions\\\\MyExtension\");\n        HelpManager.InsertPage(\"Extensions\\\\MyExtension\\\\Details\");\n    }\n}\n",
    "metadata": {
      "id": "client-extension",
      "title": "client-extension",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/client-extension.md",
      "chunkIndex": "code-1",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "o at least version 17.8.6 to use .NET8.\n\nYour Client Extension will be a class that descends from `WL8ClientExtensionBase`, defined in the WealthLab.WPF library. After building, copy the assembly DLL to the WL8 installation folder for automatic discovery on next startup.\n\n## Accessing the Host Environment\n\nThe `IHost` interface provides access to the WL8 environment:\n\n```csharp\n// Get user data folder\nstring folder = WLHost.Instance.DataFolder;\n```\n\n## WL8ExtensionBase Class\n\n### Initialization\n"
    }
  },
  {
    "pageContent": "o at least version 17.8.6 to use .NET8.\n\nYour Client Extension will be a class that descends from `WL8ClientExtensionBase`, defined in the WealthLab.WPF library. After building, copy the assembly DLL to the WL8 installation folder for automatic discovery on next startup.\n\n## Accessing the Host Environment\n\nThe `IHost` interface provides access to the WL8 environment:\n\n```csharp\n// Get user data folder\nstring folder = WLHost.Instance.DataFolder;\n```\n\n## WL8ExtensionBase Class\n\n### Initialization\n\n\n```csharp\npublic class MyExtension : WL8ExtensionBase\n{\n    public override string Name => \"My Extension\";\n    \n    public override void Initialize()\n    {\n        // Perform one-time initialization\n        // Add help pages\n        HelpManager.InsertPage(\"Extensions\\\\MyExtension\");\n        HelpManager.InsertPage(\"Extensions\\\\MyExtension\\\\Details\");\n    }\n}\n\n```",
    "metadata": {
      "id": "client-extension",
      "title": "client-extension",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/client-extension.md",
      "chunkIndex": "code-context-1",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "Help/\n  └── Extensions/\n      └── MyExtension/\n          ├── MyExtension.md\n          └── Details.md\n",
    "metadata": {
      "id": "client-extension",
      "title": "client-extension",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/client-extension.md",
      "chunkIndex": "code-2",
      "contentType": "code",
      "language": "text",
      "chunkType": "code_block",
      "context": "ide string Name => \"My Extension\";\n    \n    public override void Initialize()\n    {\n        // Perform one-time initialization\n        // Add help pages\n        HelpManager.InsertPage(\"Extensions\\\\MyExtension\");\n        HelpManager.InsertPage(\"Extensions\\\\MyExtension\\\\Details\");\n    }\n}\n```\n\n### Help System Integration\n\nHelp pages should be:\n- Installed in WL8's \"Help\" folder\n- Written in Markdown format (.md)\n- Named to match the final page name in contents string\n\nExample help page structure:\n"
    }
  },
  {
    "pageContent": "ide string Name => \"My Extension\";\n    \n    public override void Initialize()\n    {\n        // Perform one-time initialization\n        // Add help pages\n        HelpManager.InsertPage(\"Extensions\\\\MyExtension\");\n        HelpManager.InsertPage(\"Extensions\\\\MyExtension\\\\Details\");\n    }\n}\n```\n\n### Help System Integration\n\nHelp pages should be:\n- Installed in WL8's \"Help\" folder\n- Written in Markdown format (.md)\n- Named to match the final page name in contents string\n\nExample help page structure:\n\n\n```text\nHelp/\n  └── Extensions/\n      └── MyExtension/\n          ├── MyExtension.md\n          └── Details.md\n\n```",
    "metadata": {
      "id": "client-extension",
      "title": "client-extension",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/client-extension.md",
      "chunkIndex": "code-context-2",
      "contentType": "mixed",
      "language": "text",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public class MyClientExtension : WL8ClientExtensionBase\n{\n    public override string Name => \"My Extension\";\n    \n    public override List<MenuItem> GetMenuItems()\n    {\n        var menuItems = new List<MenuItem>();\n        \n        // Create menu item with icon\n        var menuItem = CreateExtensionMenuItem(\n            \"My Tool\",\n            GetGlyphImage(),\n            OnMenuItemClick,\n            reversableImage: true\n        );\n        \n        menuItems.Add(menuItem);\n        return menuItems;\n    }\n    \n    private void OnMenuItemClick(object sender, RoutedEventArgs e)\n    {\n        // Create and show child window\n        var childWindow = new MyChildWindow();\n        MyClientHost.ShowExtensionChildWindow(\n            childWindow,\n            \"My Tool Window\",\n            GetGlyphImage()\n        );\n    }\n}\n",
    "metadata": {
      "id": "client-extension",
      "title": "client-extension",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/client-extension.md",
      "chunkIndex": "code-3",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ger.InsertPage(\"Extensions\\\\MyExtension\");\n        HelpManager.InsertPage(\"Extensions\\\\MyExtension\\\\Details\");\n    }\n}\n```\n\n### Help System Integration\n\nHelp pages should be:\n- Installed in WL8's \"Help\" folder\n- Written in Markdown format (.md)\n- Named to match the final page name in contents string\n\nExample help page structure:\n```\nHelp/\n  └── Extensions/\n      └── MyExtension/\n          ├── MyExtension.md\n          └── Details.md\n```\n\n## WL8ClientExtensionBase Class\n\n### Menu Item Management\n\n"
    }
  },
  {
    "pageContent": "ger.InsertPage(\"Extensions\\\\MyExtension\");\n        HelpManager.InsertPage(\"Extensions\\\\MyExtension\\\\Details\");\n    }\n}\n```\n\n### Help System Integration\n\nHelp pages should be:\n- Installed in WL8's \"Help\" folder\n- Written in Markdown format (.md)\n- Named to match the final page name in contents string\n\nExample help page structure:\n```\nHelp/\n  └── Extensions/\n      └── MyExtension/\n          ├── MyExtension.md\n          └── Details.md\n```\n\n## WL8ClientExtensionBase Class\n\n### Menu Item Management\n\n\n\n```csharp\npublic class MyClientExtension : WL8ClientExtensionBase\n{\n    public override string Name => \"My Extension\";\n    \n    public override List<MenuItem> GetMenuItems()\n    {\n        var menuItems = new List<MenuItem>();\n        \n        // Create menu item with icon\n        var menuItem = CreateExtensionMenuItem(\n            \"My Tool\",\n            GetGlyphImage(),\n            OnMenuItemClick,\n            reversableImage: true\n        );\n        \n        menuItems.Add(menuItem);\n        return menuItems;\n    }\n    \n    private void OnMenuItemClick(object sender, RoutedEventArgs e)\n    {\n        // Create and show child window\n        var childWindow = new MyChildWindow();\n        MyClientHost.ShowExtensionChildWindow(\n            childWindow,\n            \"My Tool Window\",\n            GetGlyphImage()\n        );\n    }\n}\n\n```",
    "metadata": {
      "id": "client-extension",
      "title": "client-extension",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/client-extension.md",
      "chunkIndex": "code-context-3",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public override ChildWindow GetChildWindow(string token)\n{\n    // Support workspace save/restore\n    if (token == \"MyTool\")\n        return new MyChildWindow();\n    return null;\n}\n\npublic override bool ProcessHelpToken(string token)\n{\n    // Support help system links\n    if (token == \"MyTool\")\n    {\n        var window = new MyChildWindow();\n        MyClientHost.ShowExtensionChildWindow(window, \"My Tool\", GetGlyphImage());\n        return true;\n    }\n    return false;\n}\n",
    "metadata": {
      "id": "client-extension",
      "title": "client-extension",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/client-extension.md",
      "chunkIndex": "code-4",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "age(),\n            OnMenuItemClick,\n            reversableImage: true\n        );\n        \n        menuItems.Add(menuItem);\n        return menuItems;\n    }\n    \n    private void OnMenuItemClick(object sender, RoutedEventArgs e)\n    {\n        // Create and show child window\n        var childWindow = new MyChildWindow();\n        MyClientHost.ShowExtensionChildWindow(\n            childWindow,\n            \"My Tool Window\",\n            GetGlyphImage()\n        );\n    }\n}\n```\n\n### Child Window Support\n\n"
    }
  },
  {
    "pageContent": "age(),\n            OnMenuItemClick,\n            reversableImage: true\n        );\n        \n        menuItems.Add(menuItem);\n        return menuItems;\n    }\n    \n    private void OnMenuItemClick(object sender, RoutedEventArgs e)\n    {\n        // Create and show child window\n        var childWindow = new MyChildWindow();\n        MyClientHost.ShowExtensionChildWindow(\n            childWindow,\n            \"My Tool Window\",\n            GetGlyphImage()\n        );\n    }\n}\n```\n\n### Child Window Support\n\n\n\n```csharp\npublic override ChildWindow GetChildWindow(string token)\n{\n    // Support workspace save/restore\n    if (token == \"MyTool\")\n        return new MyChildWindow();\n    return null;\n}\n\npublic override bool ProcessHelpToken(string token)\n{\n    // Support help system links\n    if (token == \"MyTool\")\n    {\n        var window = new MyChildWindow();\n        MyClientHost.ShowExtensionChildWindow(window, \"My Tool\", GetGlyphImage());\n        return true;\n    }\n    return false;\n}\n\n```",
    "metadata": {
      "id": "client-extension",
      "title": "client-extension",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/client-extension.md",
      "chunkIndex": "code-context-4",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public override List<TabPage> PreferencePages\n{\n    get\n    {\n        return new List<TabPage>\n        {\n            new MyPreferencePage()\n        };\n    }\n}\n",
    "metadata": {
      "id": "client-extension",
      "title": "client-extension",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/client-extension.md",
      "chunkIndex": "code-5",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "\npublic override ChildWindow GetChildWindow(string token)\n{\n    // Support workspace save/restore\n    if (token == \"MyTool\")\n        return new MyChildWindow();\n    return null;\n}\n\npublic override bool ProcessHelpToken(string token)\n{\n    // Support help system links\n    if (token == \"MyTool\")\n    {\n        var window = new MyChildWindow();\n        MyClientHost.ShowExtensionChildWindow(window, \"My Tool\", GetGlyphImage());\n        return true;\n    }\n    return false;\n}\n```\n\n### Preference Pages\n\n"
    }
  },
  {
    "pageContent": "\npublic override ChildWindow GetChildWindow(string token)\n{\n    // Support workspace save/restore\n    if (token == \"MyTool\")\n        return new MyChildWindow();\n    return null;\n}\n\npublic override bool ProcessHelpToken(string token)\n{\n    // Support help system links\n    if (token == \"MyTool\")\n    {\n        var window = new MyChildWindow();\n        MyClientHost.ShowExtensionChildWindow(window, \"My Tool\", GetGlyphImage());\n        return true;\n    }\n    return false;\n}\n```\n\n### Preference Pages\n\n\n\n```csharp\npublic override List<TabPage> PreferencePages\n{\n    get\n    {\n        return new List<TabPage>\n        {\n            new MyPreferencePage()\n        };\n    }\n}\n\n```",
    "metadata": {
      "id": "client-extension",
      "title": "client-extension",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/client-extension.md",
      "chunkIndex": "code-context-5",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "using System.Collections.Generic;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Media;\nusing WealthLab.Core;\nusing WealthLab.WPF;\n\nnamespace MyCompany.WL8Extension\n{\n    // Core extension functionality\n    public class MyExtension : WL8ExtensionBase\n    {\n        public override string Name => \"My Tool\";\n        \n        public override void Initialize()\n        {\n            // Add help pages\n            HelpManager.InsertPage(\"Extensions\\\\MyTool\");\n            HelpManager.InsertPage(\"Extensions\\\\MyTool\\\\Usage\");\n        }\n    }\n    \n    // Client extension functionality\n    public class MyClientExtension : WL8ClientExtensionBase\n    {\n        public override string Name => \"My Tool\";\n        \n        // Menu items\n        public override List<MenuItem> GetMenuItems()\n        {\n            var menuItems = new List<MenuItem>();\n            \n            var menuItem = CreateExtensionMenuItem(\n                \"Launch My Tool\",\n                Glyph,\n                OnMenuItemClick\n            );\n            \n            menuItems.Add(menuItem);\n            return menuItems;\n        }\n        \n        // Child window management\n        public override ChildWindow GetChildWindow(string token)\n        {\n            if (token == \"MyTool\")\n                return CreateChildWindow();\n            return null;\n        }\n        \n        public override bool ProcessHelpToken(string token)\n        {\n            if (token == \"MyTool\")\n            {\n                CreateChildWindow();\n                return true;\n            }\n            return false;\n        }\n        \n        // Preferences\n        public override List<TabPage> PreferencePages\n        {\n            get\n            {\n                return new List<TabPage>\n                {\n                    new MyToolPreferences()\n                };\n            }\n        }\n        \n        // Private helpers\n        private void OnMenuItemClick(object sender, RoutedEventArgs e)\n        {\n            CreateChildWindow();\n        }\n        \n        private ChildWindow CreateChildWindow()\n        {\n            var window = new MyToolWindow();\n            MyClientHost.ShowExtensionChildWindow(\n                window,\n                \"My Tool\",\n                Glyph\n            );\n            return window;\n        }\n        \n        private ImageSource Glyph =>\n            GlyphManager.GetImageSource(\n                \"MyCompany.WL8Extension.Glyphs.MyTool.png\",\n                this\n            );\n    }\n}\n",
    "metadata": {
      "id": "client-extension",
      "title": "client-extension",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/client-extension.md",
      "chunkIndex": "code-6",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "m links\n    if (token == \"MyTool\")\n    {\n        var window = new MyChildWindow();\n        MyClientHost.ShowExtensionChildWindow(window, \"My Tool\", GetGlyphImage());\n        return true;\n    }\n    return false;\n}\n```\n\n### Preference Pages\n\n```csharp\npublic override List<TabPage> PreferencePages\n{\n    get\n    {\n        return new List<TabPage>\n        {\n            new MyPreferencePage()\n        };\n    }\n}\n```\n\n## Complete Example Implementation\n\nHere's a complete example of a Client Extension:\n\n"
    }
  },
  {
    "pageContent": "m links\n    if (token == \"MyTool\")\n    {\n        var window = new MyChildWindow();\n        MyClientHost.ShowExtensionChildWindow(window, \"My Tool\", GetGlyphImage());\n        return true;\n    }\n    return false;\n}\n```\n\n### Preference Pages\n\n```csharp\npublic override List<TabPage> PreferencePages\n{\n    get\n    {\n        return new List<TabPage>\n        {\n            new MyPreferencePage()\n        };\n    }\n}\n```\n\n## Complete Example Implementation\n\nHere's a complete example of a Client Extension:\n\n\n\n```csharp\nusing System.Collections.Generic;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Media;\nusing WealthLab.Core;\nusing WealthLab.WPF;\n\nnamespace MyCompany.WL8Extension\n{\n    // Core extension functionality\n    public class MyExtension : WL8ExtensionBase\n    {\n        public override string Name => \"My Tool\";\n        \n        public override void Initialize()\n        {\n            // Add help pages\n            HelpManager.InsertPage(\"Extensions\\\\MyTool\");\n            HelpManager.InsertPage(\"Extensions\\\\MyTool\\\\Usage\");\n        }\n    }\n    \n    // Client extension functionality\n    public class MyClientExtension : WL8ClientExtensionBase\n    {\n        public override string Name => \"My Tool\";\n        \n        // Menu items\n        public override List<MenuItem> GetMenuItems()\n        {\n            var menuItems = new List<MenuItem>();\n            \n            var menuItem = CreateExtensionMenuItem(\n                \"Launch My Tool\",\n                Glyph,\n                OnMenuItemClick\n            );\n            \n            menuItems.Add(menuItem);\n            return menuItems;\n        }\n        \n        // Child window management\n        public override ChildWindow GetChildWindow(string token)\n        {\n            if (token == \"MyTool\")\n                return CreateChildWindow();\n            return null;\n        }\n        \n        public override bool ProcessHelpToken(string token)\n        {\n            if (token == \"MyTool\")\n            {\n                CreateChildWindow();\n                return true;\n            }\n            return false;\n        }\n        \n        // Preferences\n        public override List<TabPage> PreferencePages\n        {\n            get\n            {\n                return new List<TabPage>\n                {\n                    new MyToolPreferences()\n                };\n            }\n        }\n        \n        // Private helpers\n        private void OnMenuItemClick(object sender, RoutedEventArgs e)\n        {\n            CreateChildWindow();\n        }\n        \n        private ChildWindow CreateChildWindow()\n        {\n            var window = new MyToolWindow();\n            MyClientHost.ShowExtensionChildWindow(\n                window,\n                \"My Tool\",\n                Glyph\n            );\n            return window;\n        }\n        \n        private ImageSource Glyph =>\n            GlyphManager.GetImageSource(\n                \"MyCompany.WL8Extension.Glyphs.MyTool.png\",\n                this\n            );\n    }\n}\n\n```",
    "metadata": {
      "id": "client-extension",
      "title": "client-extension",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/client-extension.md",
      "chunkIndex": "code-context-6",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "# Data Panel ScoreCard API\n\nThis document details the API for building Data Panel ScoreCard extensions for Wealth-Lab 8. A Data Panel ScoreCard generates adds a new choice to the ScoreCard selector in the WL8 Data Panel. The Data Panel displays values as the mouse moves over a chart. Your Data Panel ScoreCard determines what values are displayed in the Data Panel.\n\n## Build Environment\n\nYou can create a Data Panel ScoreCard in a .NET development tool such as Visual Studio 2022. Create a class library project that targets .NET8, then reference the WealthLab.Core library DLL that you'll find in the WL8 installation folder.\n\n> **Note:** If you are using Visual Studio 2022, it will need to be updated to at least version 17.8.6 to use .NET8.\n\nYour Data Panel ScoreCard will be a class in this library that descends from `DataPanelScoreCardBase`, which is defined in the WealthLab.Core library, in the `WealthLab.Backtest` namespace. After you implement and build your library, simply copy the resulting assembly DLL into the WL8 installation folder. The next time WL8 starts up, it will discover your Data Panel ScoreCard, making it available in appropriate locations of the WL8 user interface.\n\n## Accessing the Host (WL8) Environment\n\nThe `IHost` interface allows your extension to access information about the user's WealthLab environment. For example, the location of the user data folder, or obtaining a list of DataSets defined by the user. At any point in your extension's code base, you can access an instance of the `IHost` interface using the singleton class `WLHost` and its `Instance` property. Example:\n\n",
    "metadata": {
      "id": "data-panel-scorecard",
      "title": "data-panel-scorecard",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/data-panel-scorecard.md",
      "chunkIndex": 0,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n## Descriptive Properties\n\n### public abstract string Name\nReturn the name of the Data Panel ScoreCard, which appears in the selector field of the Data Panel in WL8.\n\n## Calculating and Displaying Values\n\n### public abstract List<DataPanelItem> GetItems(BarHistory bars, int idx, List<IndicatorBase> plottedIndicators)\nOverride this method to determine what values are displayed in the Data Panel. Create instances of the `DataPanelItem` class, one for each row of data that should be displayed. \n\nThe `DataPanelItem` class has several constructors you can choose from depending on:\n- Whether the value is a string or a numeric\n- The color used for the item\n\nThis method receives the following parameters:\n- `bars`: The `BarHistory` instance containing the data being displayed\n- `idx`: The index of the bar being hovered over\n- `plottedIndicators`: A list of indicators currently plotted on the chart ",
    "metadata": {
      "id": "data-panel-scorecard",
      "title": "data-panel-scorecard",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/data-panel-scorecard.md",
      "chunkIndex": 1,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "//get user data folder\nstring folder = WLHost.Instance.DataFolder;\n",
    "metadata": {
      "id": "data-panel-scorecard",
      "title": "data-panel-scorecard",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/data-panel-scorecard.md",
      "chunkIndex": "code-0",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "Card, making it available in appropriate locations of the WL8 user interface.\n\n## Accessing the Host (WL8) Environment\n\nThe `IHost` interface allows your extension to access information about the user's WealthLab environment. For example, the location of the user data folder, or obtaining a list of DataSets defined by the user. At any point in your extension's code base, you can access an instance of the `IHost` interface using the singleton class `WLHost` and its `Instance` property. Example:\n\n"
    }
  },
  {
    "pageContent": "Card, making it available in appropriate locations of the WL8 user interface.\n\n## Accessing the Host (WL8) Environment\n\nThe `IHost` interface allows your extension to access information about the user's WealthLab environment. For example, the location of the user data folder, or obtaining a list of DataSets defined by the user. At any point in your extension's code base, you can access an instance of the `IHost` interface using the singleton class `WLHost` and its `Instance` property. Example:\n\n\n\n```csharp\n//get user data folder\nstring folder = WLHost.Instance.DataFolder;\n\n```",
    "metadata": {
      "id": "data-panel-scorecard",
      "title": "data-panel-scorecard",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/data-panel-scorecard.md",
      "chunkIndex": "code-context-0",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "# DataSet Provider API\n\nThis document details the API for building DataSet Provider extensions for WealthLab 8. A DataSet Provider provides one or more pre-generated DataSets that users can select for backtesting. These DataSets appear under special nodes in the DataSet tree in WL8.\n\n> For Wealth-Lab 7 DataSet Providers, see the [DataSet API Reference](https://www.wealth-lab.com/Support/ApiReference/DataSet).\n\n## Build Environment\n\nYou can create a DataSet Provider in a .NET development tool such as Visual Studio 2022. Create a class library project that targets .NET8, then reference the WealthLab.Core library DLL that you'll find in the WL8 installation folder.\n\n> **Note:** If you are using Visual Studio 2022, it will need to be updated to at least version 17.8.6 to use .NET8.\n\nYour DataSet Provider will be a class in this library that descends from `DataSetProviderBase`, which is defined in the WealthLab.Core library, in the `WealthLab.Data` namespace. After you implement and build your library, simply copy the resulting assembly DLL into the WL8 installation folder. The next time WL8 starts up, it will discover your DataSet Provider, making it available in appropriate locations of the WL8 user interface.\n\n## Accessing the Host (WL8) Environment\n\nThe `IHost` interface allows your extension to access information about the user's WealthLab environment. For example, the location of the user data folder, or obtaining a list of DataSets defined by the user. At any point in your extension's code base, you can access an instance of the `IHost` interface using the singleton class `WLHost` and its `Instance` property. Example:\n\n",
    "metadata": {
      "id": "dataset-provider",
      "title": "dataset-provider",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/dataset-provider.md",
      "chunkIndex": 0,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n## Descriptive Properties\n\n### public string Name\nReturn the name that you wish to appear in the tree node that will hold your DataSet Provider's DataSets. If you do not override this property, it will return a default value based on the name of your library assembly.\n\n## Core Functionality\n\n### public virtual void Initialize()\nOverride this method to perform any initialization your DataSet Provider might require. Typically, here you would create the instances of the DataSets that you return in the method below.\n\n### public abstract List<DataSet> DataSets\nOverride this method to return a list of `DataSet` instances, or instances of custom classes that you create that derive from `DataSet`. Each DataSet in the list will ultimately appear as a sub-node in WL8's DataSet tree.\n\n### public virtual void SymbolsModified(DataSet ds, List<string> symbols)\nWL8 calls this method when the user modifies the symbols of one of your DataSet Provider's DataSets. Note that this can only occur if the DataSet instance's `ReadOnlySymbols` property is set to false. The default implementation assigns the symbols to the DataSet's `Symbols` property. You can override this method to perform further processing, but typically you would call `base.SymbolsModified` to retain this default behavior.\n\n## Creating DataSet Instances\n\nBelow is a summary of the important properties and methods you'll work with when managing the DataSet instances your Provider returns. Remember, you can return instances of the `DataSet` class itself, or of a custom class that derives from `DataSet`.\n\n### public string Name\nAssign a value to the DataSet's name.\n\n### public List<string> Symbols\nAssign to, or populate this List with the symbols that your DataSet comprises.\n\n### public virtual List<string> TradableSymbols\nOverride this property in a DataSet-derived class to return a List of the symbols that should be considered tradable. By default, this property returns the value of the `Symbols` property. Here you can exclude decommissioned stock symbols that no longer trade, for example. WL8's Strategy Monitor uses this property to process only tradable symbols when a Strategy is activated.\n\n### public string GlyphResource\nOverride this property in a DataSet-derived class to return the name of an image file that is stored as an embedded resource in your library, which will be used to represent the DataSet in the tree. \n\nExample: If your library is named \"MyCompany.WLExtension\", and you have a folder named \"Glyphs\" with an embedded resource image file named \"MyImage.png\", the GlyphResource string would be \"MyCompany.WLExtension.Glyphs.MyImage.png\".\n\n### public string PreferredDataProviderName\nIf your DataSet is linked to a specific Historical Data Provider, you can assign its Name to this property. WL8 will attempt to first load data from that Provider whenever your DataSet is being read.\n\n### public bool ReadOnlySymbols\nIndicates whether or not the user will be able to modify the symbols in your DataSet.\n\n### public Dictionary<string, DateRange> DynamicDateRanges\nA Dictionary keyed by symbol strings, containing `DateRange` instances that represent a date range that WL8 considers when backtesting using this DataSet. If a symbol is registered in this Dictionary with a DateRange, only trades that occur during this range will be included in a backtest. This is WL8's way of modeling dynamic indices, where symbols can enter and leave an index over time.\n\n## Self-Loading DataSets\n\nYou can derive a new class from `DataSet` and override the following to cause the DataSet to load its own data when read.\n\n### public virtual bool ShouldReturnOwnData\nReturn true to indicate that the DataSet wishes to load its own data instead of relying on the built-in WL8 Historical Data Provider loading mechanism.\n\n### public virtual bool SupportsScale(HistoryScale scale)\nReturn whether or not the DataSet supports returning data from the specified scale.\n\n### public virtual BarHistory GetHistory(string symbol, HistoryScale scale, DateTime startDate, DateTime endDate, int maxBars, DataRequestOptions cb)\nWL8 calls this method to request historical data from your DataSet. \n\nParameters:\n- If `maxBars` is non-zero, return this many bars of historical data, up to the current date/time\n- If `endDate` is DateTime.MaxValue, return data up to the current date/time\n- If `startDate` is DateTime.MinValue, return data going back as far as possible into the past\n- Otherwise, use the date range specified in startDate and endDate\n\nImplementation steps:\n1. Check if the scale passed in the scale parameter (an instance of the HistoryScale) is supported, if not return null\n2. Determine if the symbol is one that your DataSet supports, if not return null\n3. Create a `BarHistory` instance, using the constructor that accepts the symbol and scale parameters\n4. Assign a value to the BarHistory's SecurityName property, if a security name can be obtained\n5. Obtain the historical data from the source, for as much of the requested range as possible\n6. Use the BarHistory Add method to add the date, open, high, low, close and volume to the instance\n7. Return the BarHistory instance\n\n### public virtual void PostDataLoad(BarHistory bh)\nWL8 calls this after your DataSet loads data in a GetHistory call. The default implementation processes the `DynamicDataRanges` of your DataSet, calling the BarHistory `AddExecutableRange` method for each one. If you override this method to perform further processing, be sure to call `base.PostDataLoad`.\n\n## Example: Avoiding Survivorship Bias\n\nTo implement a WealthData-like solution for anti-survivorship bias in a custom DataSetProvider, follow these steps. Although technical implementation can vary, this example assumes a hypothetical MySql data provider which keeps track of the range of dates a symbol was a constituent to an index.\n\n1. Create a subclass of `DataSet` (for example, `MySqlDataSet`)\n2. Your DataSetProvider will create instance(s) of `MySqlDataSet` and use them when returning its value in the `DataSets` property override\n3. `MySqlDataSet` should set:\n   - `ReadOnlySymbols` to true\n   - `PreferredDataProviderName` to the name of your SQL Historical Provider\n   - `ShouldReturnOwnData` to true\n4. `MySqlDataSet` needs to override and implement the `GetHistory` method\n5. In `GetHistory`:\n   - Get an instance of the Historical Data Provider (SQL) using the `DataProviderFactory.Instance.Find`\n   - Once you have the instance, call its `GetHistory` to get the BarHistory data for the symbol, date range\n   - Now that you have the BarHistory, call its `AddExecutableRange` method\n   - This defines the range of dates that are valid for when this symbol is in the specific index that your dynamic DataSet is representing ",
    "metadata": {
      "id": "dataset-provider",
      "title": "dataset-provider",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/dataset-provider.md",
      "chunkIndex": 1,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "//get user data folder\nstring folder = WLHost.Instance.DataFolder;\n",
    "metadata": {
      "id": "dataset-provider",
      "title": "dataset-provider",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/dataset-provider.md",
      "chunkIndex": "code-0",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ider, making it available in appropriate locations of the WL8 user interface.\n\n## Accessing the Host (WL8) Environment\n\nThe `IHost` interface allows your extension to access information about the user's WealthLab environment. For example, the location of the user data folder, or obtaining a list of DataSets defined by the user. At any point in your extension's code base, you can access an instance of the `IHost` interface using the singleton class `WLHost` and its `Instance` property. Example:\n\n"
    }
  },
  {
    "pageContent": "ider, making it available in appropriate locations of the WL8 user interface.\n\n## Accessing the Host (WL8) Environment\n\nThe `IHost` interface allows your extension to access information about the user's WealthLab environment. For example, the location of the user data folder, or obtaining a list of DataSets defined by the user. At any point in your extension's code base, you can access an instance of the `IHost` interface using the singleton class `WLHost` and its `Instance` property. Example:\n\n\n\n```csharp\n//get user data folder\nstring folder = WLHost.Instance.DataFolder;\n\n```",
    "metadata": {
      "id": "dataset-provider",
      "title": "dataset-provider",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/dataset-provider.md",
      "chunkIndex": "code-context-0",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "# Event Provider API\n\nThis document details the API for building Event Provider extensions for Wealth-Lab 8. An Event Provider provides data points that are based on events that occur on specific dates. Some examples of appropriate events are:\n\n- Fundamental items such as dividends, splits, and earnings\n- Analyst ratings\n- Chart or candlestick patterns\n- News\n\n## Build Environment\n\nYou can create an Event Provider in a .NET development tool such as Visual Studio 2022. Create a class library project that targets .NET8, then reference the WealthLab.Core library DLL that you'll find in the WL8 installation folder.\n\n> **Note:** If you are using Visual Studio 2022, it will need to be updated to at least version 17.8.6 to use .NET8.\n\nYour Event Provider will be a class in this library that descends from `EventProviderBase`, which is defined in the WealthLab.Core library, in the `WealthLab.Data` namespace. After you implement and build your library, simply copy the resulting assembly DLL into the WL8 installation folder. The next time WL8 starts up, it will discover your Event Provider, making it available in appropriate locations of the WL8 user interface.\n\n## Accessing the Host (WL8) Environment\n\nThe `IHost` interface allows your extension to access information about the user's WealthLab environment. For example, the location of the user data folder, or obtaining a list of DataSets defined by the user. At any point in your extension's code base, you can access an instance of the `IHost` interface using the singleton class `WLHost` and its `Instance` property. Example:\n\n",
    "metadata": {
      "id": "event-provider",
      "title": "event-provider",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/event-provider.md",
      "chunkIndex": 0,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n## Configuration of an Event Provider\n\n`EventProviderBase` ultimately descends from the base class `Configurable`, which provides a way to allow the user to configure the Historical Data Provider. Consult the Configurable class reference for details.\n\nBy default, `EventProviderBase` assigns the enum value `ParameterList` to its `ConfigurableType` property, so the Event Provider will use a `ParameterList` containing `Parameter` instances for configuration. You'll define these Parameters in the `GenerateParameters` method.\n\nYou can create Parameter instances to represent things like:\n- User names\n- Passwords\n- API keys\n\nWhen the user configures your Provider, WL8 will show a dialog box allowing them to enter appropriate, typed, values for each Parameter instance.\n\nYou are free to change the `ConfigurableType` to the alternate option of `VanillaString`, in which case you'll need to:\n- Work directly with the Configuration string rather than the Parameters instances\n- Create your own Editor (see the topic on Providing User Interfaces for WealthLab 8 Components for details)\n\n## Important Descriptive Properties\n\nThe `Configurable` class provides descriptive properties that control how your Event Provider appears in WL8. The most important ones to override are:\n- `Name`\n- `GlyphResource`\n- `Description`\n- `URL`\n\n## Initialization\n\n### public virtual void Initialize()\nIf your Event Provider requires any kind of initialization before use, you can override this method and implement it here.\n\n## Returning Event Data\n\n### public abstract List<string> ItemNames\nOverride this property to return a List containing the names of each type of event your Event Provider supports. These values should correspond to the `Name` property of the `EventDataPoint` instances that your EDP will eventually create and return in `GetNewEventData` below.\n\nExample: If your Event Provider will return stock split and dividends, you might return a list containing the strings \"Split\" and \"Dividend\".\n\n### protected abstract void GetNewEventData(BarHistory bh, DateTime lastUpdateDate)\nWL8 calls this method when it attempts to download fresh events from your Event Provider. \n\nParameters:\n- `lastUpdateDate`: Contains the most recent DateTime for which data is already available\n  - Only contains a value if your Event Provider uses persistent storage\n  - If not DateTime.MinValue, add only new events that occurred after this date\n\nImplementation:\n1. Collect events from your source\n2. Create instances of the `EventDataPoint` class (or a derived class) for each event\n3. Add these `EventDataPoint` instances to the BarHistory instance using its `EventDataPoints.Add` method\n\n> **Important:** WL8 will call your Event Provider's `GetNewEventData` method from multiple threads in parallel processing mode. Avoid accessing class level variables in `GetNewEventData`. Use variables defined in the method itself.\n\n## Persistent Storage Option\n\n### public virtual bool UsesPersistentStorage\nReturns false by default. Override this and return true to utilize the built-in persistent storage mechanism in your Event Provider. Typically used if your Event Provider:\n- Procures data from a remote service\n- Needs to keep a local copy to avoid redundant requests\n\n### protected abstract List<EventDataPoint> ConvertEventItems(EventDataCollection fdc)\nIf your Event Provider uses persistent storage:\n- WL8 stores collected event data locally as `EventDataPoint` instances\n- When requesting updates, WL8 reads these into an `EventDataCollection` instance\n- Your Provider may use custom classes derived from `EventDataPoint`\n- In this method:\n  1. Enumerate through all `EventDataPoint` instances in the `fdc` parameter\n  2. Examine their `Name` property\n  3. Create instances of the correct derived class\n  4. Add them to the returned List\n\n### public virtual EventDataCollection ReadFromStorage(string symbol, bool metaDataOnly)\n### public virtual void WriteToStorage(string symbol, List<EventDataPoint> lst)\nBy default, WL8 stores event data in binary files with the QF extension. Override these methods to implement your own storage mechanism.\n\n## Provider Update Option\n\n### public override bool SupportsBulkUpdate\nThis property determines whether your Event Provider supports Provider-wide updates from within the WL8 Data Manager, allowing updates for all symbols at once.\n\nBy default:\n- Returns the value of `UsesPersistentStorage`\n- If using built-in persistent storage, keep default for built-in Provider Update behavior\n- If not using built-in mechanism but want Provider Update support, override the methods below\n\n### public override void PerformBulkUpdate(IBulkUpdateHost updateHost)\nImplement the logic to update all symbols for your Event Provider here. Communicate update status through callbacks to the `updateHost` instance.\n\n### public override void CancelBulkUpdate()\nWL8 calls this when the user cancels a Provider Update. Override to cancel your Provider-specific update routine.\n\n### public virtual List<string> GetSymbols()\nReturns symbols that already have some event data persisted. If you override the default persistent storage mechanism (`ReadFromStorage` and `WriteToStorage`), also override this to return symbols with event data. ",
    "metadata": {
      "id": "event-provider",
      "title": "event-provider",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/event-provider.md",
      "chunkIndex": 1,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "//get user data folder\nstring folder = WLHost.Instance.DataFolder;\n",
    "metadata": {
      "id": "event-provider",
      "title": "event-provider",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/event-provider.md",
      "chunkIndex": "code-0",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ider, making it available in appropriate locations of the WL8 user interface.\n\n## Accessing the Host (WL8) Environment\n\nThe `IHost` interface allows your extension to access information about the user's WealthLab environment. For example, the location of the user data folder, or obtaining a list of DataSets defined by the user. At any point in your extension's code base, you can access an instance of the `IHost` interface using the singleton class `WLHost` and its `Instance` property. Example:\n\n"
    }
  },
  {
    "pageContent": "ider, making it available in appropriate locations of the WL8 user interface.\n\n## Accessing the Host (WL8) Environment\n\nThe `IHost` interface allows your extension to access information about the user's WealthLab environment. For example, the location of the user data folder, or obtaining a list of DataSets defined by the user. At any point in your extension's code base, you can access an instance of the `IHost` interface using the singleton class `WLHost` and its `Instance` property. Example:\n\n\n\n```csharp\n//get user data folder\nstring folder = WLHost.Instance.DataFolder;\n\n```",
    "metadata": {
      "id": "event-provider",
      "title": "event-provider",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/event-provider.md",
      "chunkIndex": "code-context-0",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "# Historical Data Provider API\n\nThis document details the API for building Historical Data Provider extensions for Wealth-Lab 8. A Historical Data Provider allows WealthLab 8 to consume historical price/volume data from a specific source. Examples of such sources are:\n\n- Remote web services\n- Scraped web pages\n- Files in a specific format on the local file system\n\n## Build Environment\n\nYou can create a Historical Data Provider in a .NET development tool such as Visual Studio 2022. Create a class library project that targets .NET8, then reference the WealthLab.Core library DLL that you'll find in the WL8 installation folder.\n\n> **Note:** If you are using Visual Studio 2022, it will need to be updated to at least version 17.8.6 to use .NET8.\n\nYour Historical Data Provider will be a class in this library that descends from `DataProviderBase`, which is defined in the WealthLab.Core library, in the `WealthLab.Data` namespace. After you implement and build your library, simply copy the resulting assembly DLL into the WL8 installation folder. The next time WL8 starts up, it will discover your Historical Data Provider, making it available in appropriate locations of the WL8 user interface.\n\n## Accessing the Host (WL8) Environment\n\nThe `IHost` interface allows your extension to access information about the user's WealthLab environment. For example, the location of the user data folder, or obtaining a list of DataSets defined by the user. At any point in your extension's code base, you can access an instance of the `IHost` interface using the singleton class `WLHost` and its `Instance` property. Example:\n\n",
    "metadata": {
      "id": "historical-data-provider",
      "title": "historical-data-provider",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/historical-data-provider.md",
      "chunkIndex": 0,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n## Configuration of a Historical Data Provider\n\n`DataProviderBase` ultimately descends from the base class `Configurable`, which provides a way to allow the user to configure the Historical Data Provider. Consult the Configurable class reference for details.\n\nBy default, `DataProviderBase` assigns the enum value `ParameterList` to its `ConfigurableType` property, so the Historical Data Provider will use a `ParameterList` containing `Parameter` instances for configuration. You'll define these Parameters in the `GenerateParameters` method.\n\nYou can create Parameter instances to represent things like:\n- User names\n- Passwords\n- API keys\n\nWhen the user configures your Provider, WL8 will show a dialog box allowing them to enter appropriate, typed, values for each Parameter instance.\n\nYou are free to change the `ConfigurableType` to the alternate option of `VanillaString`, in which case you'll need to:\n- Work directly with the Configuration string rather than the Parameters instances\n- Create your own Editor (see the topic on Providing User Interfaces for WealthLab 8 Components for details)\n\n## Important Descriptive Properties\n\nThe `Configurable` class provides descriptive properties that control how your Historical Data Provider appears in WL8. The most important ones to override are:\n- `Name`\n- `GlyphResource`\n- `Description`\n- `URL`\n\n## Complete WL8 Data Subsystem Class Hierarchy\n\nWL8's data subsystem has a hierarchy of several classes that derive from the `Configurable` base class. The `DataProviderBase` class follows a path that takes it from:\n1. `Configurable`\n2. `ProviderBase`\n3. `BulkUpdatableProviderBase`\n4. `DataProviderBase`\n\n## Historical Data Provider Properties\n\nBelow are properties you can override to tell WL8 what features your Historical Data Provider supports.\n\n### public virtual bool SupportsUpdate\nReturns true by default, indicating that the Provider supports data updates from the source. Return false if your Provider will not be updatable from within WL8 (e.g., sourced from local files updated by an external mechanism).\n\n### public virtual bool IsGeneralPurposeProvider\nReturns true by default, indicating it can service ad-hoc symbol requests from Charts or Strategy windows. Return false to indicate your Provider cannot handle ad-hoc requests, but instead can provide data for only a fixed set of symbols.\n\nExamples:\n- Returns true: WealthData\n- Returns false: MetaStock provider\n\n### public virtual bool SupportsPartialBar\nReturns the value of `IsGeneralPurposeProvider` by default. Indicates whether the Provider can return a \"partial bar\" of data. A partial bar consists of the trading session's open, high, low, volume and close up to the current point in time.\n\n### public virtual bool ShowInNewDataSetList\nReturns true by default, causing Providers that also returned true for `IsGeneralPurposeProvider` to appear in the list of available Providers in the New DataSet Wizard.\n\n### public virtual bool NeedsNewInstancesForEachDataSet\nReturns false by default. Return true if WL8 should create a new instance of your Provider for each DataSet that is created based on it.\n\nExample: The ASCII Data Provider requires:\n- User to define specific ASCII format\n- Location of ASCII files to load\n- New instance for each DataSet created\n- These instances appear in general-purpose Data Provider list\n\n### public virtual bool InjectNewProviderInstances\nIf a Provider returned true for `NeedsNewInstancesForEachDataSet`, instances typically appear in the Data Manager's list. Return false to prevent this.\n\nExample: Stock Scanner Dynamic DataSet Provider returns false because:\n- Returns symbols based on filter criteria\n- DataSet appears in DataSets list\n- Generated Data Providers shouldn't show in Data Manager/Providers list\n\n### public string DSString\nIf `NeedsNewInstancesForEachDataSet` is true, contains the DSString describing the DataSet this Provider instance was based on.\n\n### public DataSet DataSet\nIf `NeedsNewInstancesForEachDataSet` is true, contains the DataSet instance used when the Provider instance was created.\n\n### public virtual bool ReadOnlySymbols\nReturns false by default. Return true if users shouldn't modify symbols in a DataSet linked to your Provider.\n\n### public virtual List<string> Symbols\nOverride if your Provider:\n- Uses `ReadOnlySymbols`\n- Has `NeedsNewInstancesForEachDataSet` true\n- Symbols may change outside WL8 environment\n\n### public virtual bool AllowConfigurationOfExistingDataSets\nReturns true by default. Return false to disallow reconfiguring a DataSet after creation.\n\n### public virtual bool LookForIntradayWhenNoDaily\nReturns false by default. If true, WL8 attempts to load and compress intraday data when a daily/higher frequency request fails.\n\n### public virtual bool Compress30MinuteBarsFor60Minute\nControls whether WL8 should compress 30-minute data for 60-minute requests. Default is true.\n\n### public virtual void SymbolsChanged(DataSet ds)\nCalled when user changes DataSet symbols in DataSet panel or Data Manager.\n\n## Initialization\n\n### public virtual void Initialize()\nOverride to perform any required initialization before use.\n\n## Returning Historical Data\n\nThe primary method of the Historical Data Provider returns historical data for a specified symbol, scale, and date range.\n\n### protected abstract BarHistory GetHistoryInternal(string symbol, HistoryScale scale, DateTime startDate, DateTime endDate, int maxBars)\n\nParameters interpretation:\n- If `maxBars` is non-zero: Return this many bars up to current date/time\n- If `endDate` is DateTime.MaxValue: Return data up to current date/time\n- If `startDate` is DateTime.MinValue: Return data from earliest possible date\n- Otherwise: Use specified date range\n\nImplementation steps:\n1. Verify scale is supported (return null if not)\n2. Verify symbol is supported (return null if not)\n3. Create `BarHistory` instance with symbol and scale\n4. Set `SecurityName` property if available\n5. Get historical data from source\n6. Add date, OHLCV data using `Add` method\n7. Return `BarHistory` instance\n\n> **Important:** Do not return incomplete partial bars! Either ignore them or call `RemovePartialBar`.\n\n### public BarData RemovePartialBar(BarHistory bh)\nHelper to remove potentially incomplete partial bar from end of BarHistory. Returns removed bar as `BarData` if one was removed.\n\n### public virtual string GetSecurityName(string symbol)\nOverride to return security name if not available during `GetHistory`.\n\n### public virtual bool SupportsScale(HistoryScale scale)\nReturn whether Provider natively supports specified scale. Don't consider compression capabilities.\n\n### protected virtual BarData GetPartialBarInternal(string symbol, HistoryScale scale)\nReturn partial bar data for open markets. Return null if unavailable.\n\n## Returning Symbol MetaData\n\n### public virtual MarketDetails GetMarketForSymbol(string symbol)\nReturn `MarketDetails` instance for symbol's market. Defaults to US stock market.\n\n### public virtual string GetSecurityName(string symbol)\nReturn security name (e.g., \"Microsoft Corp\" for MSFT).\n\n### public virtual SymbolInfo GetSymbolInfoForSymbol(string symbol, double price = 0.0)\nReturn `SymbolInfo` with symbol properties (SecurityType, decimal settings, etc.).\n\n### public virtual bool IsSymbolDelisted(string symbol)\nReturn true for delisted stocks.\n\n### public virtual bool IsSymbolNonTradable(string symbol, bool excludeBroadMarketIndexes = true)\nReturn true for non-tradable symbols (indexes, indicators).\n\n## Options Support\n\n### public virtual string GetOptionsSymbol(BarHistory underlierBars, OptionType optionType, double price, DateTime currentDate, int minDaysAhead = 0, bool useWeeklies = false, bool allowExpired = false, bool closestStrike = true, double multiplier = 100)\nReturn option symbol based on parameters. Cache option chains if available.\n\nParameters:\n| Parameter | Description |\n|-----------|-------------|\n| underlierBars | Underlier BarHistory for symbol/scale info |\n| optionType | Call or Put |\n| price | For strike identification |\n| currentDate | Current backtest date |\n| minDaysAhead | Minimum days to expiration |\n| useWeeklies | Use weekly vs monthly expirations |\n| allowExpired | Allow past contracts |\n| closestStrike | Find closest vs next strike |\n| multiplier | Contract multiplier |\n\n### public virtual OptionChain GetOptionChain(string underlier)\nReturn `OptionChain` object. Return null if not implemented.\n\n### public virtual List<OptionGreek> GetOptionChainSnapshot(string underlier, DateTime expiration, OptionType optionType = OptionType.Call, double lowStrike = 0, double highStrike = 0)\nReturn option chain snapshot. Return empty List if not implemented.\n\n### public virtual DateTime GetSymbolExpiry(string optionSymbol)\nReturn option expiration date.\n\n### public virtual double GetSymbolStrike(string optionSymbol)\nReturn option strike price.\n\n### public virtual OptionGreek GetGreeks(string optionSymbol)\nReturn `OptionGreek` object with supported fields.\n\n### public virtual OptionGreek GetGreeks(string optionSymbol, double impliedVolatility, double priceUnderlying)\nCalculate Greeks based on IV and underlying price.\n\n### public virtual double CalculateIV(string optionSymbol, double priceOption, double priceUnderlying)\nCalculate implied volatility.\n\n### public virtual double CalculateOptionPrice(string optionSymbol, double impliedVolatility, double priceUnderlying)\nCalculate option price from IV and underlying price.\n\n## Returning Quotes\n\n### public virtual double GetQuote(string symbol)\nReturn current quote. Default implementation:\n- If market open: Use `GetPartialBarInternal`\n- If market closed: Get last daily close via `GetHistoryInternal`\n\n## Persistent Storage Options\n\n### public virtual bool UsesPersistentStorage\nReturn true to use built-in storage for downloaded data.\n\n### public virtual BarHistory LoadFromStorage(string symbol, HistoryScale scale, DateTime? startDate = null, DateTime? endDate = null, int maxBars = 0)\n### public virtual void SaveToStorage(BarHistory bh)\nOverride these to implement custom storage scheme instead of default .QX files.\n\n### protected virtual string ConstructSymbolFileName(string symbol, HistoryScale scale)\nGet/customize filename for symbol/scale combination.\n\n### public virtual BarHistory ReloadHistory(string symbol, HistoryScale scale)\nCalled on \"Reload Chart Data\". Override to handle Provider-specific persistent data.\n\n### public virtual void DeleteLocalData()\nCalled on \"Delete all Local Data\". Override to handle Provider-specific data.\n\n### public virtual void ClearRequestLists()\nCalled on \"Clear Internal Tracking Info\". Override to handle Provider tracking data.\n\n## Data Corrections\n\n### public virtual bool SupportsDataCorrections\nReturn true if Provider supports correcting previously downloaded data.\n\n### protected virtual ResponseWithCorrections GetHistoryInternalWithCorrections(string symbol, HistoryScale scale, DateTime startDate, DateTime endDate, int maxBars, DateTime lastRequestDate)\nReturn `ResponseWithCorrections` with:\n- Bars: Historical data\n- Corrections: Corrected data since lastRequestDate\n\n### protected virtual string CompanionEventProviderName\nReturn corresponding Event Provider's Name for dividend/split handling.\n\n### public virtual bool ReloadOnAnomaly(string symbol)\nControl whether to reload on price gaps or new corporate actions.\n\n## Provider Update Option\n\n### public override bool SupportsBulkUpdate\nControls Provider-wide updates support. Defaults to `UsesPersistentStorage` value.\n\n### public override void PerformBulkUpdate(IBulkUpdateHost updateHost)\nImplement Provider-wide update logic.\n\n### public override void CancelBulkUpdate()\nHandle update cancellation.\n\n### public virtual List<HistoryScale> ScalesWithData\nReturn scales with persisted data.\n\n### public virtual List<string> GetSymbolsForScale(HistoryScale scale)\nReturn symbols persisted for given scale.\n\n### public override bool SupportsParallelRequests()\nReturn false to restrict to single-threaded updates.\n\n## Parallel Processing Considerations\n\nWL8 uses parallel processing by default. To handle this:\n- Avoid class-level variables in `GetHistoryInternal`\n- Use method-level variables\n- Use locking for non-parallel-safe sources\n\nExample locking implementation:\n",
    "metadata": {
      "id": "historical-data-provider",
      "title": "historical-data-provider",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/historical-data-provider.md",
      "chunkIndex": 1,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n## Tick Data Support\n\n### public virtual List<Tick> GetTicks(string symbol, DateTime startDate, DateTime endDate)\nReturn tick data for symbol and date range.\n\n### public virtual bool UsesTickDataStore\nReturn true to use built-in tick data storage.\n\n## Customizing Configuration and New DataSet UI\n\nSee \"Providing Editors for WealthLab 8 Components\" for:\n- Custom Settings Editor Panels\n- New DataSet Wizard Pages\n\n## Integrating with the Symbol Chooser\n\n### public virtual List<SymbolChooserItem> GetChooserSymbols(string filter)\nReturn matching `SymbolChooserItem` instances for filter text.\n\n`SymbolChooserItem` properties:\n- Symbol (e.g., \"AAPL\")\n- SecurityName (e.g., \"Apple Computer\")\n- Source (DataProviderBase instance)\n- ProviderName (Provider Name) ",
    "metadata": {
      "id": "historical-data-provider",
      "title": "historical-data-provider",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/historical-data-provider.md",
      "chunkIndex": 2,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "//get user data folder\nstring folder = WLHost.Instance.DataFolder;\n",
    "metadata": {
      "id": "historical-data-provider",
      "title": "historical-data-provider",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/historical-data-provider.md",
      "chunkIndex": "code-0",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ider, making it available in appropriate locations of the WL8 user interface.\n\n## Accessing the Host (WL8) Environment\n\nThe `IHost` interface allows your extension to access information about the user's WealthLab environment. For example, the location of the user data folder, or obtaining a list of DataSets defined by the user. At any point in your extension's code base, you can access an instance of the `IHost` interface using the singleton class `WLHost` and its `Instance` property. Example:\n\n"
    }
  },
  {
    "pageContent": "ider, making it available in appropriate locations of the WL8 user interface.\n\n## Accessing the Host (WL8) Environment\n\nThe `IHost` interface allows your extension to access information about the user's WealthLab environment. For example, the location of the user data folder, or obtaining a list of DataSets defined by the user. At any point in your extension's code base, you can access an instance of the `IHost` interface using the singleton class `WLHost` and its `Instance` property. Example:\n\n\n\n```csharp\n//get user data folder\nstring folder = WLHost.Instance.DataFolder;\n\n```",
    "metadata": {
      "id": "historical-data-provider",
      "title": "historical-data-provider",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/historical-data-provider.md",
      "chunkIndex": "code-context-0",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "protected override BarHistory GetHistoryInternal(string symbol, HistoryScale scale, DateTime startDate, DateTime endDate, int maxBars)\n{\n    //_requestLock is defined as a private variable of type object\n    lock(_requestLock)\n    {\n        //normal Provider processing\n    }\n}\n",
    "metadata": {
      "id": "historical-data-provider",
      "title": "historical-data-provider",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/historical-data-provider.md",
      "chunkIndex": "code-1",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "s with persisted data.\n\n### public virtual List<string> GetSymbolsForScale(HistoryScale scale)\nReturn symbols persisted for given scale.\n\n### public override bool SupportsParallelRequests()\nReturn false to restrict to single-threaded updates.\n\n## Parallel Processing Considerations\n\nWL8 uses parallel processing by default. To handle this:\n- Avoid class-level variables in `GetHistoryInternal`\n- Use method-level variables\n- Use locking for non-parallel-safe sources\n\nExample locking implementation:\n"
    }
  },
  {
    "pageContent": "s with persisted data.\n\n### public virtual List<string> GetSymbolsForScale(HistoryScale scale)\nReturn symbols persisted for given scale.\n\n### public override bool SupportsParallelRequests()\nReturn false to restrict to single-threaded updates.\n\n## Parallel Processing Considerations\n\nWL8 uses parallel processing by default. To handle this:\n- Avoid class-level variables in `GetHistoryInternal`\n- Use method-level variables\n- Use locking for non-parallel-safe sources\n\nExample locking implementation:\n\n\n```csharp\nprotected override BarHistory GetHistoryInternal(string symbol, HistoryScale scale, DateTime startDate, DateTime endDate, int maxBars)\n{\n    //_requestLock is defined as a private variable of type object\n    lock(_requestLock)\n    {\n        //normal Provider processing\n    }\n}\n\n```",
    "metadata": {
      "id": "historical-data-provider",
      "title": "historical-data-provider",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/historical-data-provider.md",
      "chunkIndex": "code-context-1",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "# Indicator Library API\n\nThis document details the API for building Indicator Library extensions for Wealth-Lab 8. An Indicator Library exposes one or more Indicators, which appear in their own node in the WL8 indicator tree.\n\n## Build Environment\n\nYou can create an Indicator in a .NET development tool such as Visual Studio 2022. Create a class library project that targets .NET8, then reference the WealthLab.Core library DLL that you'll find in the WL8 installation folder.\n\n> **Note:** If you are using Visual Studio 2022, it will need to be updated to at least version 17.8.6 to use .NET8.\n\nYour Indicator will be a class in this library that descends from `IndicatorBase`, which is defined in the WealthLab.Core library, in the `WealthLab.Indicators` namespace. After you implement and build your library, simply copy the resulting assembly DLL into the WL8 installation folder. The next time WL8 starts up, it will discover your Indicator, making it available in appropriate locations of the WL8 user interface.\n\n## Accessing the Host (WL8) Environment\n\nThe `IHost` interface allows your extension to access information about the user's WealthLab environment. For example, the location of the user data folder, or obtaining a list of DataSets defined by the user. At any point in your extension's code base, you can access an instance of the `IHost` interface using the singleton class `WLHost` and its `Instance` property. Example:\n\n",
    "metadata": {
      "id": "indicator-library",
      "title": "indicator-library",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/indicator-library.md",
      "chunkIndex": 0,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n## IndicatorBase Class\n\nEach Indicator in your Library should be implemented as a class that descends from `IndicatorBase`, which is defined in the `WealthLab.Indicators` namespace. Here is the hierarchy of `IndicatorBase`'s ancestor classes:\n\n1. `DateSynchedList<double>`\n2. `TimeSeriesBase`\n3. `TimeSeries`\n4. `IndicatorBase`\n\n## Constructors\n\nEach Indicator should have at least two constructors:\n\n1. A parameterless constructor (used by WL8 to create lightweight instances for the Indicator roster)\n2. A constructor with parameters matching the Parameter instances from `GenerateParameters`\n\nExample SMA Indicator constructors:\n",
    "metadata": {
      "id": "indicator-library",
      "title": "indicator-library",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/indicator-library.md",
      "chunkIndex": 1,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n## Working with Parameters\n\n### Parameters Property\n",
    "metadata": {
      "id": "indicator-library",
      "title": "indicator-library",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/indicator-library.md",
      "chunkIndex": 2,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nContains Parameter instances that define the Indicator's configurable values.\n\n### GenerateParameters\n",
    "metadata": {
      "id": "indicator-library",
      "title": "indicator-library",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/indicator-library.md",
      "chunkIndex": 3,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nOverride to create and add Parameter instances. Example for SMA:\n",
    "metadata": {
      "id": "indicator-library",
      "title": "indicator-library",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/indicator-library.md",
      "chunkIndex": 4,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n### Helper Methods\n\n#### AddParameter\n",
    "metadata": {
      "id": "indicator-library",
      "title": "indicator-library",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/indicator-library.md",
      "chunkIndex": 5,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nCreates and adds a Parameter instance.\n\n#### AddIndicatorParameter\n",
    "metadata": {
      "id": "indicator-library",
      "title": "indicator-library",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/indicator-library.md",
      "chunkIndex": 6,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nCreates a Parameter for accepting another Indicator as input. Example:\n",
    "metadata": {
      "id": "indicator-library",
      "title": "indicator-library",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/indicator-library.md",
      "chunkIndex": 7,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n#### AddSmootherParameter\n",
    "metadata": {
      "id": "indicator-library",
      "title": "indicator-library",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/indicator-library.md",
      "chunkIndex": 8,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nCreates a Parameter for selecting from available smoother Indicators.\n\n## Descriptive Properties\n\n### Required Properties\n\n- `public abstract string Name` - Full name (e.g., \"Simple Moving Average\")\n- `public abstract string Abbreviation` - Short name (e.g., \"SMA\")\n- `public abstract string HelpDescription` - Brief description shown in Indicator tree\n- `public string Tooltip` - Optional hover text for plotted values\n- `public virtual string HelpURL` - Optional link to detailed documentation\n\n### Indicator Type Properties\n\n- `public bool IsOscillator` - True if OverboughtLevel/OversoldLevel are set\n- `public double OversoldLevel` - Lower bound for oscillator\n- `public double OverboughtLevel` - Upper bound for oscillator\n- `public virtual bool IsSmoother` - True for smoothing indicators\n- `public string LibraryName` - Node name in Indicator tree\n\n## Color and Plot Style\n\n### Plot Location\n",
    "metadata": {
      "id": "indicator-library",
      "title": "indicator-library",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/indicator-library.md",
      "chunkIndex": 9,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturn:\n- \"Price\" for price pane\n- \"Volume\" for volume pane\n- Custom string for own pane\n\n### Color Properties\n",
    "metadata": {
      "id": "indicator-library",
      "title": "indicator-library",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/indicator-library.md",
      "chunkIndex": 10,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nDefault plot color. For multi-color indicators:\n",
    "metadata": {
      "id": "indicator-library",
      "title": "indicator-library",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/indicator-library.md",
      "chunkIndex": 11,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n### Plot Style Properties\n",
    "metadata": {
      "id": "indicator-library",
      "title": "indicator-library",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/indicator-library.md",
      "chunkIndex": 12,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nAvailable styles:\n- Line\n- Histogram\n- Dots\n- ThickLine\n- ThickHistogram\n- DottedLine\n- DashedLine\n- BooleanDots\n- Bands\n- ZigZag\n- Blocks\n- GradientBlocks\n- BarHistory\n- BarChart\n- HistogramTwoColor\n\n",
    "metadata": {
      "id": "indicator-library",
      "title": "indicator-library",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/indicator-library.md",
      "chunkIndex": 13,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nOverride for custom plot styles.\n\n### Bar Chart Support\n",
    "metadata": {
      "id": "indicator-library",
      "title": "indicator-library",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/indicator-library.md",
      "chunkIndex": 14,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nRequired for BarChart plot style.\n\n",
    "metadata": {
      "id": "indicator-library",
      "title": "indicator-library",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/indicator-library.md",
      "chunkIndex": 15,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nTrue to anchor y-axis at zero.\n\n## Populating Values\n\n### Main Population Method\n",
    "metadata": {
      "id": "indicator-library",
      "title": "indicator-library",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/indicator-library.md",
      "chunkIndex": 16,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nCalculate and assign indicator values:\n",
    "metadata": {
      "id": "indicator-library",
      "title": "indicator-library",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/indicator-library.md",
      "chunkIndex": 17,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n### Helper Methods\n",
    "metadata": {
      "id": "indicator-library",
      "title": "indicator-library",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/indicator-library.md",
      "chunkIndex": 18,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nCreates smoothed version of source series.\n\n## Static Methods\n\n### Series Method\n",
    "metadata": {
      "id": "indicator-library",
      "title": "indicator-library",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/indicator-library.md",
      "chunkIndex": 19,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n### Cache Key Generation\n",
    "metadata": {
      "id": "indicator-library",
      "title": "indicator-library",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/indicator-library.md",
      "chunkIndex": 20,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nCreates unique cache key from parameters.\n\n### Value Method\nCalculate indicator value at specific index.\n\n## Band Indicators\n\n### Band Properties\n",
    "metadata": {
      "id": "indicator-library",
      "title": "indicator-library",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/indicator-library.md",
      "chunkIndex": 21,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturn companion indicator abbreviation for bands.\n\n",
    "metadata": {
      "id": "indicator-library",
      "title": "indicator-library",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/indicator-library.md",
      "chunkIndex": 22,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nCreate companion indicator instance.\n\n## Indicator Companions\n",
    "metadata": {
      "id": "indicator-library",
      "title": "indicator-library",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/indicator-library.md",
      "chunkIndex": 23,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturn list of companion indicators to plot together.\n\n## Complete Example\n\nSee the SMA (Simple Moving Average) implementation at the end of this document for a full working example that demonstrates all these concepts. ",
    "metadata": {
      "id": "indicator-library",
      "title": "indicator-library",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/indicator-library.md",
      "chunkIndex": 24,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "//get user data folder\nstring folder = WLHost.Instance.DataFolder;\n",
    "metadata": {
      "id": "indicator-library",
      "title": "indicator-library",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/indicator-library.md",
      "chunkIndex": "code-0",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ator, making it available in appropriate locations of the WL8 user interface.\n\n## Accessing the Host (WL8) Environment\n\nThe `IHost` interface allows your extension to access information about the user's WealthLab environment. For example, the location of the user data folder, or obtaining a list of DataSets defined by the user. At any point in your extension's code base, you can access an instance of the `IHost` interface using the singleton class `WLHost` and its `Instance` property. Example:\n\n"
    }
  },
  {
    "pageContent": "ator, making it available in appropriate locations of the WL8 user interface.\n\n## Accessing the Host (WL8) Environment\n\nThe `IHost` interface allows your extension to access information about the user's WealthLab environment. For example, the location of the user data folder, or obtaining a list of DataSets defined by the user. At any point in your extension's code base, you can access an instance of the `IHost` interface using the singleton class `WLHost` and its `Instance` property. Example:\n\n\n\n```csharp\n//get user data folder\nstring folder = WLHost.Instance.DataFolder;\n\n```",
    "metadata": {
      "id": "indicator-library",
      "title": "indicator-library",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/indicator-library.md",
      "chunkIndex": "code-context-0",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "//parameterless constructor\npublic SMA() : base()\n{\n}\n\n//for code based construction\npublic SMA(TimeSeries source, int period)\n    : base()\n{\n    Parameters[0].Value = source;\n    Parameters[1].Value = period;\n    Populate();\n}\n",
    "metadata": {
      "id": "indicator-library",
      "title": "indicator-library",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/indicator-library.md",
      "chunkIndex": "code-1",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": " defined in the `WealthLab.Indicators` namespace. Here is the hierarchy of `IndicatorBase`'s ancestor classes:\n\n1. `DateSynchedList<double>`\n2. `TimeSeriesBase`\n3. `TimeSeries`\n4. `IndicatorBase`\n\n## Constructors\n\nEach Indicator should have at least two constructors:\n\n1. A parameterless constructor (used by WL8 to create lightweight instances for the Indicator roster)\n2. A constructor with parameters matching the Parameter instances from `GenerateParameters`\n\nExample SMA Indicator constructors:\n"
    }
  },
  {
    "pageContent": " defined in the `WealthLab.Indicators` namespace. Here is the hierarchy of `IndicatorBase`'s ancestor classes:\n\n1. `DateSynchedList<double>`\n2. `TimeSeriesBase`\n3. `TimeSeries`\n4. `IndicatorBase`\n\n## Constructors\n\nEach Indicator should have at least two constructors:\n\n1. A parameterless constructor (used by WL8 to create lightweight instances for the Indicator roster)\n2. A constructor with parameters matching the Parameter instances from `GenerateParameters`\n\nExample SMA Indicator constructors:\n\n\n```csharp\n//parameterless constructor\npublic SMA() : base()\n{\n}\n\n//for code based construction\npublic SMA(TimeSeries source, int period)\n    : base()\n{\n    Parameters[0].Value = source;\n    Parameters[1].Value = period;\n    Populate();\n}\n\n```",
    "metadata": {
      "id": "indicator-library",
      "title": "indicator-library",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/indicator-library.md",
      "chunkIndex": "code-context-1",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public ParameterList Parameters\n",
    "metadata": {
      "id": "indicator-library",
      "title": "indicator-library",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/indicator-library.md",
      "chunkIndex": "code-2",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ctor (used by WL8 to create lightweight instances for the Indicator roster)\n2. A constructor with parameters matching the Parameter instances from `GenerateParameters`\n\nExample SMA Indicator constructors:\n```csharp\n//parameterless constructor\npublic SMA() : base()\n{\n}\n\n//for code based construction\npublic SMA(TimeSeries source, int period)\n    : base()\n{\n    Parameters[0].Value = source;\n    Parameters[1].Value = period;\n    Populate();\n}\n```\n\n## Working with Parameters\n\n### Parameters Property\n"
    }
  },
  {
    "pageContent": "ctor (used by WL8 to create lightweight instances for the Indicator roster)\n2. A constructor with parameters matching the Parameter instances from `GenerateParameters`\n\nExample SMA Indicator constructors:\n```csharp\n//parameterless constructor\npublic SMA() : base()\n{\n}\n\n//for code based construction\npublic SMA(TimeSeries source, int period)\n    : base()\n{\n    Parameters[0].Value = source;\n    Parameters[1].Value = period;\n    Populate();\n}\n```\n\n## Working with Parameters\n\n### Parameters Property\n\n\n```csharp\npublic ParameterList Parameters\n\n```",
    "metadata": {
      "id": "indicator-library",
      "title": "indicator-library",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/indicator-library.md",
      "chunkIndex": "code-context-2",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "protected virtual void GenerateParameters()\n",
    "metadata": {
      "id": "indicator-library",
      "title": "indicator-library",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/indicator-library.md",
      "chunkIndex": "code-3",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "GenerateParameters`\n\nExample SMA Indicator constructors:\n```csharp\n//parameterless constructor\npublic SMA() : base()\n{\n}\n\n//for code based construction\npublic SMA(TimeSeries source, int period)\n    : base()\n{\n    Parameters[0].Value = source;\n    Parameters[1].Value = period;\n    Populate();\n}\n```\n\n## Working with Parameters\n\n### Parameters Property\n```csharp\npublic ParameterList Parameters\n```\nContains Parameter instances that define the Indicator's configurable values.\n\n### GenerateParameters\n"
    }
  },
  {
    "pageContent": "GenerateParameters`\n\nExample SMA Indicator constructors:\n```csharp\n//parameterless constructor\npublic SMA() : base()\n{\n}\n\n//for code based construction\npublic SMA(TimeSeries source, int period)\n    : base()\n{\n    Parameters[0].Value = source;\n    Parameters[1].Value = period;\n    Populate();\n}\n```\n\n## Working with Parameters\n\n### Parameters Property\n```csharp\npublic ParameterList Parameters\n```\nContains Parameter instances that define the Indicator's configurable values.\n\n### GenerateParameters\n\n\n```csharp\nprotected virtual void GenerateParameters()\n\n```",
    "metadata": {
      "id": "indicator-library",
      "title": "indicator-library",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/indicator-library.md",
      "chunkIndex": "code-context-3",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "protected override void GenerateParameters()\n{\n    AddParameter(\"Source\", ParameterType.TimeSeries, PriceComponents.Close);\n    AddParameter(\"Period\", ParameterType.Int32, 20);\n}\n",
    "metadata": {
      "id": "indicator-library",
      "title": "indicator-library",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/indicator-library.md",
      "chunkIndex": "code-4",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "/for code based construction\npublic SMA(TimeSeries source, int period)\n    : base()\n{\n    Parameters[0].Value = source;\n    Parameters[1].Value = period;\n    Populate();\n}\n```\n\n## Working with Parameters\n\n### Parameters Property\n```csharp\npublic ParameterList Parameters\n```\nContains Parameter instances that define the Indicator's configurable values.\n\n### GenerateParameters\n```csharp\nprotected virtual void GenerateParameters()\n```\nOverride to create and add Parameter instances. Example for SMA:\n"
    }
  },
  {
    "pageContent": "/for code based construction\npublic SMA(TimeSeries source, int period)\n    : base()\n{\n    Parameters[0].Value = source;\n    Parameters[1].Value = period;\n    Populate();\n}\n```\n\n## Working with Parameters\n\n### Parameters Property\n```csharp\npublic ParameterList Parameters\n```\nContains Parameter instances that define the Indicator's configurable values.\n\n### GenerateParameters\n```csharp\nprotected virtual void GenerateParameters()\n```\nOverride to create and add Parameter instances. Example for SMA:\n\n\n```csharp\nprotected override void GenerateParameters()\n{\n    AddParameter(\"Source\", ParameterType.TimeSeries, PriceComponents.Close);\n    AddParameter(\"Period\", ParameterType.Int32, 20);\n}\n\n```",
    "metadata": {
      "id": "indicator-library",
      "title": "indicator-library",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/indicator-library.md",
      "chunkIndex": "code-context-4",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "protected Parameter AddParameter(string name, ParameterTypes type, object value)\n",
    "metadata": {
      "id": "indicator-library",
      "title": "indicator-library",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/indicator-library.md",
      "chunkIndex": "code-5",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "csharp\npublic ParameterList Parameters\n```\nContains Parameter instances that define the Indicator's configurable values.\n\n### GenerateParameters\n```csharp\nprotected virtual void GenerateParameters()\n```\nOverride to create and add Parameter instances. Example for SMA:\n```csharp\nprotected override void GenerateParameters()\n{\n    AddParameter(\"Source\", ParameterType.TimeSeries, PriceComponents.Close);\n    AddParameter(\"Period\", ParameterType.Int32, 20);\n}\n```\n\n### Helper Methods\n\n#### AddParameter\n"
    }
  },
  {
    "pageContent": "csharp\npublic ParameterList Parameters\n```\nContains Parameter instances that define the Indicator's configurable values.\n\n### GenerateParameters\n```csharp\nprotected virtual void GenerateParameters()\n```\nOverride to create and add Parameter instances. Example for SMA:\n```csharp\nprotected override void GenerateParameters()\n{\n    AddParameter(\"Source\", ParameterType.TimeSeries, PriceComponents.Close);\n    AddParameter(\"Period\", ParameterType.Int32, 20);\n}\n```\n\n### Helper Methods\n\n#### AddParameter\n\n\n```csharp\nprotected Parameter AddParameter(string name, ParameterTypes type, object value)\n\n```",
    "metadata": {
      "id": "indicator-library",
      "title": "indicator-library",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/indicator-library.md",
      "chunkIndex": "code-context-5",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "protected Parameter AddIndicatorParameter(string name)\n",
    "metadata": {
      "id": "indicator-library",
      "title": "indicator-library",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/indicator-library.md",
      "chunkIndex": "code-6",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ed virtual void GenerateParameters()\n```\nOverride to create and add Parameter instances. Example for SMA:\n```csharp\nprotected override void GenerateParameters()\n{\n    AddParameter(\"Source\", ParameterType.TimeSeries, PriceComponents.Close);\n    AddParameter(\"Period\", ParameterType.Int32, 20);\n}\n```\n\n### Helper Methods\n\n#### AddParameter\n```csharp\nprotected Parameter AddParameter(string name, ParameterTypes type, object value)\n```\nCreates and adds a Parameter instance.\n\n#### AddIndicatorParameter\n"
    }
  },
  {
    "pageContent": "ed virtual void GenerateParameters()\n```\nOverride to create and add Parameter instances. Example for SMA:\n```csharp\nprotected override void GenerateParameters()\n{\n    AddParameter(\"Source\", ParameterType.TimeSeries, PriceComponents.Close);\n    AddParameter(\"Period\", ParameterType.Int32, 20);\n}\n```\n\n### Helper Methods\n\n#### AddParameter\n```csharp\nprotected Parameter AddParameter(string name, ParameterTypes type, object value)\n```\nCreates and adds a Parameter instance.\n\n#### AddIndicatorParameter\n\n\n```csharp\nprotected Parameter AddIndicatorParameter(string name)\n\n```",
    "metadata": {
      "id": "indicator-library",
      "title": "indicator-library",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/indicator-library.md",
      "chunkIndex": "code-context-6",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "protected override void GenerateParameters()\n{\n    AddParameter(\"Bars\", ParameterType.BarHistory, null);\n    AddIndicatorParameter(\"Indicator\", \"ROC\");        \n}\n\npublic override void Populate()\n{\n    BarHistory source = Parameters[0].AsBarHistory;\n    DateTimes = source.DateTimes;\n\n    Parameter p = Parameters[1];\n    string indName = p.IndicatorAbbreviation;\n    ParameterList indParams = p.IndicatorParameters;\n    IndicatorBase ind = IndicatorFactory.Instance.CreateIndicator(indName, indParams, source);\n    //...\n}\n",
    "metadata": {
      "id": "indicator-library",
      "title": "indicator-library",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/indicator-library.md",
      "chunkIndex": "code-7",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "GenerateParameters()\n{\n    AddParameter(\"Source\", ParameterType.TimeSeries, PriceComponents.Close);\n    AddParameter(\"Period\", ParameterType.Int32, 20);\n}\n```\n\n### Helper Methods\n\n#### AddParameter\n```csharp\nprotected Parameter AddParameter(string name, ParameterTypes type, object value)\n```\nCreates and adds a Parameter instance.\n\n#### AddIndicatorParameter\n```csharp\nprotected Parameter AddIndicatorParameter(string name)\n```\nCreates a Parameter for accepting another Indicator as input. Example:\n"
    }
  },
  {
    "pageContent": "GenerateParameters()\n{\n    AddParameter(\"Source\", ParameterType.TimeSeries, PriceComponents.Close);\n    AddParameter(\"Period\", ParameterType.Int32, 20);\n}\n```\n\n### Helper Methods\n\n#### AddParameter\n```csharp\nprotected Parameter AddParameter(string name, ParameterTypes type, object value)\n```\nCreates and adds a Parameter instance.\n\n#### AddIndicatorParameter\n```csharp\nprotected Parameter AddIndicatorParameter(string name)\n```\nCreates a Parameter for accepting another Indicator as input. Example:\n\n\n```csharp\nprotected override void GenerateParameters()\n{\n    AddParameter(\"Bars\", ParameterType.BarHistory, null);\n    AddIndicatorParameter(\"Indicator\", \"ROC\");        \n}\n\npublic override void Populate()\n{\n    BarHistory source = Parameters[0].AsBarHistory;\n    DateTimes = source.DateTimes;\n\n    Parameter p = Parameters[1];\n    string indName = p.IndicatorAbbreviation;\n    ParameterList indParams = p.IndicatorParameters;\n    IndicatorBase ind = IndicatorFactory.Instance.CreateIndicator(indName, indParams, source);\n    //...\n}\n\n```",
    "metadata": {
      "id": "indicator-library",
      "title": "indicator-library",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/indicator-library.md",
      "chunkIndex": "code-context-7",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "protected Parameter AddSmootherParameter(string name, string defaultValue)\n",
    "metadata": {
      "id": "indicator-library",
      "title": "indicator-library",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/indicator-library.md",
      "chunkIndex": "code-8",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "Parameter(\"Bars\", ParameterType.BarHistory, null);\n    AddIndicatorParameter(\"Indicator\", \"ROC\");        \n}\n\npublic override void Populate()\n{\n    BarHistory source = Parameters[0].AsBarHistory;\n    DateTimes = source.DateTimes;\n\n    Parameter p = Parameters[1];\n    string indName = p.IndicatorAbbreviation;\n    ParameterList indParams = p.IndicatorParameters;\n    IndicatorBase ind = IndicatorFactory.Instance.CreateIndicator(indName, indParams, source);\n    //...\n}\n```\n\n#### AddSmootherParameter\n"
    }
  },
  {
    "pageContent": "Parameter(\"Bars\", ParameterType.BarHistory, null);\n    AddIndicatorParameter(\"Indicator\", \"ROC\");        \n}\n\npublic override void Populate()\n{\n    BarHistory source = Parameters[0].AsBarHistory;\n    DateTimes = source.DateTimes;\n\n    Parameter p = Parameters[1];\n    string indName = p.IndicatorAbbreviation;\n    ParameterList indParams = p.IndicatorParameters;\n    IndicatorBase ind = IndicatorFactory.Instance.CreateIndicator(indName, indParams, source);\n    //...\n}\n```\n\n#### AddSmootherParameter\n\n\n```csharp\nprotected Parameter AddSmootherParameter(string name, string defaultValue)\n\n```",
    "metadata": {
      "id": "indicator-library",
      "title": "indicator-library",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/indicator-library.md",
      "chunkIndex": "code-context-8",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public override string PaneTag\n",
    "metadata": {
      "id": "indicator-library",
      "title": "indicator-library",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/indicator-library.md",
      "chunkIndex": "code-9",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": " for plotted values\n- `public virtual string HelpURL` - Optional link to detailed documentation\n\n### Indicator Type Properties\n\n- `public bool IsOscillator` - True if OverboughtLevel/OversoldLevel are set\n- `public double OversoldLevel` - Lower bound for oscillator\n- `public double OverboughtLevel` - Upper bound for oscillator\n- `public virtual bool IsSmoother` - True for smoothing indicators\n- `public string LibraryName` - Node name in Indicator tree\n\n## Color and Plot Style\n\n### Plot Location\n"
    }
  },
  {
    "pageContent": " for plotted values\n- `public virtual string HelpURL` - Optional link to detailed documentation\n\n### Indicator Type Properties\n\n- `public bool IsOscillator` - True if OverboughtLevel/OversoldLevel are set\n- `public double OversoldLevel` - Lower bound for oscillator\n- `public double OverboughtLevel` - Upper bound for oscillator\n- `public virtual bool IsSmoother` - True for smoothing indicators\n- `public string LibraryName` - Node name in Indicator tree\n\n## Color and Plot Style\n\n### Plot Location\n\n\n```csharp\npublic override string PaneTag\n\n```",
    "metadata": {
      "id": "indicator-library",
      "title": "indicator-library",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/indicator-library.md",
      "chunkIndex": "code-context-9",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public virtual Color DefaultColor\n",
    "metadata": {
      "id": "indicator-library",
      "title": "indicator-library",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/indicator-library.md",
      "chunkIndex": "code-10",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": " - True if OverboughtLevel/OversoldLevel are set\n- `public double OversoldLevel` - Lower bound for oscillator\n- `public double OverboughtLevel` - Upper bound for oscillator\n- `public virtual bool IsSmoother` - True for smoothing indicators\n- `public string LibraryName` - Node name in Indicator tree\n\n## Color and Plot Style\n\n### Plot Location\n```csharp\npublic override string PaneTag\n```\nReturn:\n- \"Price\" for price pane\n- \"Volume\" for volume pane\n- Custom string for own pane\n\n### Color Properties\n"
    }
  },
  {
    "pageContent": " - True if OverboughtLevel/OversoldLevel are set\n- `public double OversoldLevel` - Lower bound for oscillator\n- `public double OverboughtLevel` - Upper bound for oscillator\n- `public virtual bool IsSmoother` - True for smoothing indicators\n- `public string LibraryName` - Node name in Indicator tree\n\n## Color and Plot Style\n\n### Plot Location\n```csharp\npublic override string PaneTag\n```\nReturn:\n- \"Price\" for price pane\n- \"Volume\" for volume pane\n- Custom string for own pane\n\n### Color Properties\n\n\n```csharp\npublic virtual Color DefaultColor\n\n```",
    "metadata": {
      "id": "indicator-library",
      "title": "indicator-library",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/indicator-library.md",
      "chunkIndex": "code-context-10",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public override void Populate()\n{\n    //... indicator calculation ...\n    this.SeriesBarColors = new DateSynchedList<WLColor>(DateTimes, DefaultColor);\n    \n    for (int n = 0; n < bars.Count; n++)\n    {\n        Values[n] = myIndValues[n];\n        if (myIndValues[n] > 0)\n            this.SeriesBarColors[n] = myIndValues[n] > myIndValues[n - 1] ? \n                DefaultColor : WLColor.Blue;\n        else if (myIndValues[n] < 0)\n            this.SeriesBarColors[n] = myIndValues[n] < myIndValues[n - 1] ? \n                WLColor.Red : WLColor.Yellow;\n    }\n}\n",
    "metadata": {
      "id": "indicator-library",
      "title": "indicator-library",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/indicator-library.md",
      "chunkIndex": "code-11",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "or oscillator\n- `public double OverboughtLevel` - Upper bound for oscillator\n- `public virtual bool IsSmoother` - True for smoothing indicators\n- `public string LibraryName` - Node name in Indicator tree\n\n## Color and Plot Style\n\n### Plot Location\n```csharp\npublic override string PaneTag\n```\nReturn:\n- \"Price\" for price pane\n- \"Volume\" for volume pane\n- Custom string for own pane\n\n### Color Properties\n```csharp\npublic virtual Color DefaultColor\n```\nDefault plot color. For multi-color indicators:\n"
    }
  },
  {
    "pageContent": "or oscillator\n- `public double OverboughtLevel` - Upper bound for oscillator\n- `public virtual bool IsSmoother` - True for smoothing indicators\n- `public string LibraryName` - Node name in Indicator tree\n\n## Color and Plot Style\n\n### Plot Location\n```csharp\npublic override string PaneTag\n```\nReturn:\n- \"Price\" for price pane\n- \"Volume\" for volume pane\n- Custom string for own pane\n\n### Color Properties\n```csharp\npublic virtual Color DefaultColor\n```\nDefault plot color. For multi-color indicators:\n\n\n```csharp\npublic override void Populate()\n{\n    //... indicator calculation ...\n    this.SeriesBarColors = new DateSynchedList<WLColor>(DateTimes, DefaultColor);\n    \n    for (int n = 0; n < bars.Count; n++)\n    {\n        Values[n] = myIndValues[n];\n        if (myIndValues[n] > 0)\n            this.SeriesBarColors[n] = myIndValues[n] > myIndValues[n - 1] ? \n                DefaultColor : WLColor.Blue;\n        else if (myIndValues[n] < 0)\n            this.SeriesBarColors[n] = myIndValues[n] < myIndValues[n - 1] ? \n                WLColor.Red : WLColor.Yellow;\n    }\n}\n\n```",
    "metadata": {
      "id": "indicator-library",
      "title": "indicator-library",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/indicator-library.md",
      "chunkIndex": "code-context-11",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public virtual PlotStyles DefaultPlotStyle\n",
    "metadata": {
      "id": "indicator-library",
      "title": "indicator-library",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/indicator-library.md",
      "chunkIndex": "code-12",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "s = new DateSynchedList<WLColor>(DateTimes, DefaultColor);\n    \n    for (int n = 0; n < bars.Count; n++)\n    {\n        Values[n] = myIndValues[n];\n        if (myIndValues[n] > 0)\n            this.SeriesBarColors[n] = myIndValues[n] > myIndValues[n - 1] ? \n                DefaultColor : WLColor.Blue;\n        else if (myIndValues[n] < 0)\n            this.SeriesBarColors[n] = myIndValues[n] < myIndValues[n - 1] ? \n                WLColor.Red : WLColor.Yellow;\n    }\n}\n```\n\n### Plot Style Properties\n"
    }
  },
  {
    "pageContent": "s = new DateSynchedList<WLColor>(DateTimes, DefaultColor);\n    \n    for (int n = 0; n < bars.Count; n++)\n    {\n        Values[n] = myIndValues[n];\n        if (myIndValues[n] > 0)\n            this.SeriesBarColors[n] = myIndValues[n] > myIndValues[n - 1] ? \n                DefaultColor : WLColor.Blue;\n        else if (myIndValues[n] < 0)\n            this.SeriesBarColors[n] = myIndValues[n] < myIndValues[n - 1] ? \n                WLColor.Red : WLColor.Yellow;\n    }\n}\n```\n\n### Plot Style Properties\n\n\n```csharp\npublic virtual PlotStyles DefaultPlotStyle\n\n```",
    "metadata": {
      "id": "indicator-library",
      "title": "indicator-library",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/indicator-library.md",
      "chunkIndex": "code-context-12",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public virtual string DefaultPlotName\n",
    "metadata": {
      "id": "indicator-library",
      "title": "indicator-library",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/indicator-library.md",
      "chunkIndex": "code-13",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "              DefaultColor : WLColor.Blue;\n        else if (myIndValues[n] < 0)\n            this.SeriesBarColors[n] = myIndValues[n] < myIndValues[n - 1] ? \n                WLColor.Red : WLColor.Yellow;\n    }\n}\n```\n\n### Plot Style Properties\n```csharp\npublic virtual PlotStyles DefaultPlotStyle\n```\nAvailable styles:\n- Line\n- Histogram\n- Dots\n- ThickLine\n- ThickHistogram\n- DottedLine\n- DashedLine\n- BooleanDots\n- Bands\n- ZigZag\n- Blocks\n- GradientBlocks\n- BarHistory\n- BarChart\n- HistogramTwoColor\n\n"
    }
  },
  {
    "pageContent": "              DefaultColor : WLColor.Blue;\n        else if (myIndValues[n] < 0)\n            this.SeriesBarColors[n] = myIndValues[n] < myIndValues[n - 1] ? \n                WLColor.Red : WLColor.Yellow;\n    }\n}\n```\n\n### Plot Style Properties\n```csharp\npublic virtual PlotStyles DefaultPlotStyle\n```\nAvailable styles:\n- Line\n- Histogram\n- Dots\n- ThickLine\n- ThickHistogram\n- DottedLine\n- DashedLine\n- BooleanDots\n- Bands\n- ZigZag\n- Blocks\n- GradientBlocks\n- BarHistory\n- BarChart\n- HistogramTwoColor\n\n\n\n```csharp\npublic virtual string DefaultPlotName\n\n```",
    "metadata": {
      "id": "indicator-library",
      "title": "indicator-library",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/indicator-library.md",
      "chunkIndex": "code-context-13",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public virtual IndicatorBase GetBarChartCompanion(PriceComponents pc)\n",
    "metadata": {
      "id": "indicator-library",
      "title": "indicator-library",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/indicator-library.md",
      "chunkIndex": "code-14",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "lors[n] = myIndValues[n] < myIndValues[n - 1] ? \n                WLColor.Red : WLColor.Yellow;\n    }\n}\n```\n\n### Plot Style Properties\n```csharp\npublic virtual PlotStyles DefaultPlotStyle\n```\nAvailable styles:\n- Line\n- Histogram\n- Dots\n- ThickLine\n- ThickHistogram\n- DottedLine\n- DashedLine\n- BooleanDots\n- Bands\n- ZigZag\n- Blocks\n- GradientBlocks\n- BarHistory\n- BarChart\n- HistogramTwoColor\n\n```csharp\npublic virtual string DefaultPlotName\n```\nOverride for custom plot styles.\n\n### Bar Chart Support\n"
    }
  },
  {
    "pageContent": "lors[n] = myIndValues[n] < myIndValues[n - 1] ? \n                WLColor.Red : WLColor.Yellow;\n    }\n}\n```\n\n### Plot Style Properties\n```csharp\npublic virtual PlotStyles DefaultPlotStyle\n```\nAvailable styles:\n- Line\n- Histogram\n- Dots\n- ThickLine\n- ThickHistogram\n- DottedLine\n- DashedLine\n- BooleanDots\n- Bands\n- ZigZag\n- Blocks\n- GradientBlocks\n- BarHistory\n- BarChart\n- HistogramTwoColor\n\n```csharp\npublic virtual string DefaultPlotName\n```\nOverride for custom plot styles.\n\n### Bar Chart Support\n\n\n```csharp\npublic virtual IndicatorBase GetBarChartCompanion(PriceComponents pc)\n\n```",
    "metadata": {
      "id": "indicator-library",
      "title": "indicator-library",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/indicator-library.md",
      "chunkIndex": "code-context-14",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public virtual bool UseZeroOrigin\n",
    "metadata": {
      "id": "indicator-library",
      "title": "indicator-library",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/indicator-library.md",
      "chunkIndex": "code-15",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "yle Properties\n```csharp\npublic virtual PlotStyles DefaultPlotStyle\n```\nAvailable styles:\n- Line\n- Histogram\n- Dots\n- ThickLine\n- ThickHistogram\n- DottedLine\n- DashedLine\n- BooleanDots\n- Bands\n- ZigZag\n- Blocks\n- GradientBlocks\n- BarHistory\n- BarChart\n- HistogramTwoColor\n\n```csharp\npublic virtual string DefaultPlotName\n```\nOverride for custom plot styles.\n\n### Bar Chart Support\n```csharp\npublic virtual IndicatorBase GetBarChartCompanion(PriceComponents pc)\n```\nRequired for BarChart plot style.\n\n"
    }
  },
  {
    "pageContent": "yle Properties\n```csharp\npublic virtual PlotStyles DefaultPlotStyle\n```\nAvailable styles:\n- Line\n- Histogram\n- Dots\n- ThickLine\n- ThickHistogram\n- DottedLine\n- DashedLine\n- BooleanDots\n- Bands\n- ZigZag\n- Blocks\n- GradientBlocks\n- BarHistory\n- BarChart\n- HistogramTwoColor\n\n```csharp\npublic virtual string DefaultPlotName\n```\nOverride for custom plot styles.\n\n### Bar Chart Support\n```csharp\npublic virtual IndicatorBase GetBarChartCompanion(PriceComponents pc)\n```\nRequired for BarChart plot style.\n\n\n\n```csharp\npublic virtual bool UseZeroOrigin\n\n```",
    "metadata": {
      "id": "indicator-library",
      "title": "indicator-library",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/indicator-library.md",
      "chunkIndex": "code-context-15",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public abstract void Populate()\n",
    "metadata": {
      "id": "indicator-library",
      "title": "indicator-library",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/indicator-library.md",
      "chunkIndex": "code-16",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": " ThickHistogram\n- DottedLine\n- DashedLine\n- BooleanDots\n- Bands\n- ZigZag\n- Blocks\n- GradientBlocks\n- BarHistory\n- BarChart\n- HistogramTwoColor\n\n```csharp\npublic virtual string DefaultPlotName\n```\nOverride for custom plot styles.\n\n### Bar Chart Support\n```csharp\npublic virtual IndicatorBase GetBarChartCompanion(PriceComponents pc)\n```\nRequired for BarChart plot style.\n\n```csharp\npublic virtual bool UseZeroOrigin\n```\nTrue to anchor y-axis at zero.\n\n## Populating Values\n\n### Main Population Method\n"
    }
  },
  {
    "pageContent": " ThickHistogram\n- DottedLine\n- DashedLine\n- BooleanDots\n- Bands\n- ZigZag\n- Blocks\n- GradientBlocks\n- BarHistory\n- BarChart\n- HistogramTwoColor\n\n```csharp\npublic virtual string DefaultPlotName\n```\nOverride for custom plot styles.\n\n### Bar Chart Support\n```csharp\npublic virtual IndicatorBase GetBarChartCompanion(PriceComponents pc)\n```\nRequired for BarChart plot style.\n\n```csharp\npublic virtual bool UseZeroOrigin\n```\nTrue to anchor y-axis at zero.\n\n## Populating Values\n\n### Main Population Method\n\n\n```csharp\npublic abstract void Populate()\n\n```",
    "metadata": {
      "id": "indicator-library",
      "title": "indicator-library",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/indicator-library.md",
      "chunkIndex": "code-context-16",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "DateTimes = source.DateTimes;\nfor(int n = 0; n < source.Count; n++)\n{\n    double val = (source.High[n] + source.Low[n]) / 2.0;\n    Values[n] = val;\n}\n\n// Or using TimeSeries math:\nDateTimes = source.DateTimes;\nTimeSeries avg = (source.High + source.Low) / 2.0;\nValues = avg.Values;\n",
    "metadata": {
      "id": "indicator-library",
      "title": "indicator-library",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/indicator-library.md",
      "chunkIndex": "code-17",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "radientBlocks\n- BarHistory\n- BarChart\n- HistogramTwoColor\n\n```csharp\npublic virtual string DefaultPlotName\n```\nOverride for custom plot styles.\n\n### Bar Chart Support\n```csharp\npublic virtual IndicatorBase GetBarChartCompanion(PriceComponents pc)\n```\nRequired for BarChart plot style.\n\n```csharp\npublic virtual bool UseZeroOrigin\n```\nTrue to anchor y-axis at zero.\n\n## Populating Values\n\n### Main Population Method\n```csharp\npublic abstract void Populate()\n```\nCalculate and assign indicator values:\n"
    }
  },
  {
    "pageContent": "radientBlocks\n- BarHistory\n- BarChart\n- HistogramTwoColor\n\n```csharp\npublic virtual string DefaultPlotName\n```\nOverride for custom plot styles.\n\n### Bar Chart Support\n```csharp\npublic virtual IndicatorBase GetBarChartCompanion(PriceComponents pc)\n```\nRequired for BarChart plot style.\n\n```csharp\npublic virtual bool UseZeroOrigin\n```\nTrue to anchor y-axis at zero.\n\n## Populating Values\n\n### Main Population Method\n```csharp\npublic abstract void Populate()\n```\nCalculate and assign indicator values:\n\n\n```csharp\nDateTimes = source.DateTimes;\nfor(int n = 0; n < source.Count; n++)\n{\n    double val = (source.High[n] + source.Low[n]) / 2.0;\n    Values[n] = val;\n}\n\n// Or using TimeSeries math:\nDateTimes = source.DateTimes;\nTimeSeries avg = (source.High + source.Low) / 2.0;\nValues = avg.Values;\n\n```",
    "metadata": {
      "id": "indicator-library",
      "title": "indicator-library",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/indicator-library.md",
      "chunkIndex": "code-context-17",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "protected IndicatorBase GetSmoothedIndicator(string name, TimeSeries source, int period)\n",
    "metadata": {
      "id": "indicator-library",
      "title": "indicator-library",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/indicator-library.md",
      "chunkIndex": "code-18",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "UseZeroOrigin\n```\nTrue to anchor y-axis at zero.\n\n## Populating Values\n\n### Main Population Method\n```csharp\npublic abstract void Populate()\n```\nCalculate and assign indicator values:\n```csharp\nDateTimes = source.DateTimes;\nfor(int n = 0; n < source.Count; n++)\n{\n    double val = (source.High[n] + source.Low[n]) / 2.0;\n    Values[n] = val;\n}\n\n// Or using TimeSeries math:\nDateTimes = source.DateTimes;\nTimeSeries avg = (source.High + source.Low) / 2.0;\nValues = avg.Values;\n```\n\n### Helper Methods\n"
    }
  },
  {
    "pageContent": "UseZeroOrigin\n```\nTrue to anchor y-axis at zero.\n\n## Populating Values\n\n### Main Population Method\n```csharp\npublic abstract void Populate()\n```\nCalculate and assign indicator values:\n```csharp\nDateTimes = source.DateTimes;\nfor(int n = 0; n < source.Count; n++)\n{\n    double val = (source.High[n] + source.Low[n]) / 2.0;\n    Values[n] = val;\n}\n\n// Or using TimeSeries math:\nDateTimes = source.DateTimes;\nTimeSeries avg = (source.High + source.Low) / 2.0;\nValues = avg.Values;\n```\n\n### Helper Methods\n\n\n```csharp\nprotected IndicatorBase GetSmoothedIndicator(string name, TimeSeries source, int period)\n\n```",
    "metadata": {
      "id": "indicator-library",
      "title": "indicator-library",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/indicator-library.md",
      "chunkIndex": "code-context-18",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public static SMA Series(TimeSeries source, int period)\n{\n    string key = CacheKey(\"SMA\", period);\n    if (source.Cache.ContainsKey(key))\n        return (SMA)source.Cache[key];\n    SMA sma = new SMA(source, period);\n    source.Cache[key] = sma;\n    return sma;\n}\n",
    "metadata": {
      "id": "indicator-library",
      "title": "indicator-library",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/indicator-library.md",
      "chunkIndex": "code-19",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "```csharp\nDateTimes = source.DateTimes;\nfor(int n = 0; n < source.Count; n++)\n{\n    double val = (source.High[n] + source.Low[n]) / 2.0;\n    Values[n] = val;\n}\n\n// Or using TimeSeries math:\nDateTimes = source.DateTimes;\nTimeSeries avg = (source.High + source.Low) / 2.0;\nValues = avg.Values;\n```\n\n### Helper Methods\n```csharp\nprotected IndicatorBase GetSmoothedIndicator(string name, TimeSeries source, int period)\n```\nCreates smoothed version of source series.\n\n## Static Methods\n\n### Series Method\n"
    }
  },
  {
    "pageContent": "```csharp\nDateTimes = source.DateTimes;\nfor(int n = 0; n < source.Count; n++)\n{\n    double val = (source.High[n] + source.Low[n]) / 2.0;\n    Values[n] = val;\n}\n\n// Or using TimeSeries math:\nDateTimes = source.DateTimes;\nTimeSeries avg = (source.High + source.Low) / 2.0;\nValues = avg.Values;\n```\n\n### Helper Methods\n```csharp\nprotected IndicatorBase GetSmoothedIndicator(string name, TimeSeries source, int period)\n```\nCreates smoothed version of source series.\n\n## Static Methods\n\n### Series Method\n\n\n```csharp\npublic static SMA Series(TimeSeries source, int period)\n{\n    string key = CacheKey(\"SMA\", period);\n    if (source.Cache.ContainsKey(key))\n        return (SMA)source.Cache[key];\n    SMA sma = new SMA(source, period);\n    source.Cache[key] = sma;\n    return sma;\n}\n\n```",
    "metadata": {
      "id": "indicator-library",
      "title": "indicator-library",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/indicator-library.md",
      "chunkIndex": "code-context-19",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public static string CacheKey(params object[] arguments)\n",
    "metadata": {
      "id": "indicator-library",
      "title": "indicator-library",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/indicator-library.md",
      "chunkIndex": "code-20",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "per Methods\n```csharp\nprotected IndicatorBase GetSmoothedIndicator(string name, TimeSeries source, int period)\n```\nCreates smoothed version of source series.\n\n## Static Methods\n\n### Series Method\n```csharp\npublic static SMA Series(TimeSeries source, int period)\n{\n    string key = CacheKey(\"SMA\", period);\n    if (source.Cache.ContainsKey(key))\n        return (SMA)source.Cache[key];\n    SMA sma = new SMA(source, period);\n    source.Cache[key] = sma;\n    return sma;\n}\n```\n\n### Cache Key Generation\n"
    }
  },
  {
    "pageContent": "per Methods\n```csharp\nprotected IndicatorBase GetSmoothedIndicator(string name, TimeSeries source, int period)\n```\nCreates smoothed version of source series.\n\n## Static Methods\n\n### Series Method\n```csharp\npublic static SMA Series(TimeSeries source, int period)\n{\n    string key = CacheKey(\"SMA\", period);\n    if (source.Cache.ContainsKey(key))\n        return (SMA)source.Cache[key];\n    SMA sma = new SMA(source, period);\n    source.Cache[key] = sma;\n    return sma;\n}\n```\n\n### Cache Key Generation\n\n\n```csharp\npublic static string CacheKey(params object[] arguments)\n\n```",
    "metadata": {
      "id": "indicator-library",
      "title": "indicator-library",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/indicator-library.md",
      "chunkIndex": "code-context-20",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public virtual string BandCompanionAbbreviation\n",
    "metadata": {
      "id": "indicator-library",
      "title": "indicator-library",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/indicator-library.md",
      "chunkIndex": "code-21",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ic SMA Series(TimeSeries source, int period)\n{\n    string key = CacheKey(\"SMA\", period);\n    if (source.Cache.ContainsKey(key))\n        return (SMA)source.Cache[key];\n    SMA sma = new SMA(source, period);\n    source.Cache[key] = sma;\n    return sma;\n}\n```\n\n### Cache Key Generation\n```csharp\npublic static string CacheKey(params object[] arguments)\n```\nCreates unique cache key from parameters.\n\n### Value Method\nCalculate indicator value at specific index.\n\n## Band Indicators\n\n### Band Properties\n"
    }
  },
  {
    "pageContent": "ic SMA Series(TimeSeries source, int period)\n{\n    string key = CacheKey(\"SMA\", period);\n    if (source.Cache.ContainsKey(key))\n        return (SMA)source.Cache[key];\n    SMA sma = new SMA(source, period);\n    source.Cache[key] = sma;\n    return sma;\n}\n```\n\n### Cache Key Generation\n```csharp\npublic static string CacheKey(params object[] arguments)\n```\nCreates unique cache key from parameters.\n\n### Value Method\nCalculate indicator value at specific index.\n\n## Band Indicators\n\n### Band Properties\n\n\n```csharp\npublic virtual string BandCompanionAbbreviation\n\n```",
    "metadata": {
      "id": "indicator-library",
      "title": "indicator-library",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/indicator-library.md",
      "chunkIndex": "code-context-21",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public virtual IndicatorBase BandCompanion\n",
    "metadata": {
      "id": "indicator-library",
      "title": "indicator-library",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/indicator-library.md",
      "chunkIndex": "code-22",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ainsKey(key))\n        return (SMA)source.Cache[key];\n    SMA sma = new SMA(source, period);\n    source.Cache[key] = sma;\n    return sma;\n}\n```\n\n### Cache Key Generation\n```csharp\npublic static string CacheKey(params object[] arguments)\n```\nCreates unique cache key from parameters.\n\n### Value Method\nCalculate indicator value at specific index.\n\n## Band Indicators\n\n### Band Properties\n```csharp\npublic virtual string BandCompanionAbbreviation\n```\nReturn companion indicator abbreviation for bands.\n\n"
    }
  },
  {
    "pageContent": "ainsKey(key))\n        return (SMA)source.Cache[key];\n    SMA sma = new SMA(source, period);\n    source.Cache[key] = sma;\n    return sma;\n}\n```\n\n### Cache Key Generation\n```csharp\npublic static string CacheKey(params object[] arguments)\n```\nCreates unique cache key from parameters.\n\n### Value Method\nCalculate indicator value at specific index.\n\n## Band Indicators\n\n### Band Properties\n```csharp\npublic virtual string BandCompanionAbbreviation\n```\nReturn companion indicator abbreviation for bands.\n\n\n\n```csharp\npublic virtual IndicatorBase BandCompanion\n\n```",
    "metadata": {
      "id": "indicator-library",
      "title": "indicator-library",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/indicator-library.md",
      "chunkIndex": "code-context-22",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public virtual List<string> Companions\n",
    "metadata": {
      "id": "indicator-library",
      "title": "indicator-library",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/indicator-library.md",
      "chunkIndex": "code-23",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": ";\n    return sma;\n}\n```\n\n### Cache Key Generation\n```csharp\npublic static string CacheKey(params object[] arguments)\n```\nCreates unique cache key from parameters.\n\n### Value Method\nCalculate indicator value at specific index.\n\n## Band Indicators\n\n### Band Properties\n```csharp\npublic virtual string BandCompanionAbbreviation\n```\nReturn companion indicator abbreviation for bands.\n\n```csharp\npublic virtual IndicatorBase BandCompanion\n```\nCreate companion indicator instance.\n\n## Indicator Companions\n"
    }
  },
  {
    "pageContent": ";\n    return sma;\n}\n```\n\n### Cache Key Generation\n```csharp\npublic static string CacheKey(params object[] arguments)\n```\nCreates unique cache key from parameters.\n\n### Value Method\nCalculate indicator value at specific index.\n\n## Band Indicators\n\n### Band Properties\n```csharp\npublic virtual string BandCompanionAbbreviation\n```\nReturn companion indicator abbreviation for bands.\n\n```csharp\npublic virtual IndicatorBase BandCompanion\n```\nCreate companion indicator instance.\n\n## Indicator Companions\n\n\n```csharp\npublic virtual List<string> Companions\n\n```",
    "metadata": {
      "id": "indicator-library",
      "title": "indicator-library",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/indicator-library.md",
      "chunkIndex": "code-context-23",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "# Optimization Visualizer API\n\nThis document details the API for building Optimization Visualizer Extensions for Wealth-Lab 8. An Optimization Visualizer occupies a tab in the Optimization Results section of the Strategy window's Optimization section, and lets you present the results of an optimization in a particular way.\n\n## Build Environment\n\nYou can create an Optimization Visualizer in a .NET development tool such as Visual Studio 2022. Create a class library project that targets .NET8, then reference the WealthLab.WPF library DLL that you'll find in the WL8 installation folder.\n\n> **Note:** If you are using Visual Studio 2022, it will need to be updated to at least version 17.8.6 to use .NET8.\n\nYour Optimization Visualizer will be a class in this library that descends from `OptimizationVisualizerBase`, which is defined in the WealthLab.WPF library, in the `WealthLab.WPF` namespace. After you implement and build your library, simply copy the resulting assembly DLL into the WL8 installation folder. The next time WL8 starts up, it will discover your Optimization Visualizer, making it available in appropriate locations of the WL8 user interface.\n\n## Accessing the Host (WL8) Environment\n\nThe `IHost` interface allows your extension to access information about the user's WealthLab environment. For example, the location of the user data folder, or obtaining a list of DataSets defined by the user. At any point in your extension's code base, you can access an instance of the `IHost` interface using the singleton class `WLHost` and its `Instance` property. Example:\n\n",
    "metadata": {
      "id": "optimization-visualizer",
      "title": "optimization-visualizer",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/optimization-visualizer.md",
      "chunkIndex": 0,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n## ResultViewerBase\n\n`OptimizationVisualizerBase` is derived from the `ResultViewerBase` base class, defined in WealthLab.WPF. `ResultViewerBase` is derived from the WPF `UserControl`. `ResultViewerBase` contains additional members useful for developing Visualizers, particularly:\n\n- `ViewerName` property - Controls text in Visualizer's tab\n- `GlyphResource` property - Controls image in Visualizer's tab\n\n## Creating the Files in Visual Studio\n\n1. Create a new UserControl in Visual Studio (generates boilerplate XAML and CS)\n2. Modify CS file:\n   - Change class to derive from `OptimizationVisualizerBase`\n   - Add `WealthLab.WPF` to using clause\n3. Modify XAML file:\n   - Add XMLNS reference to WealthLab.WPF library\n   - Change base class from UserControl to OptimizationVisualizerBase\n\nExample XAML structure:\n",
    "metadata": {
      "id": "optimization-visualizer",
      "title": "optimization-visualizer",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/optimization-visualizer.md",
      "chunkIndex": 1,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n## Type of Optimization Supported\n\n### public virtual bool ForStandardOptimizations\nReturn:\n- `true` for standard optimizations\n- `false` for walk-forward (WFO) optimizations\n\n## Visualizing Optimization Results\n\n### public virtual void Clear()\nCalled at start of optimization. Clear any previous visual information.\n\n### public List<string> MetricNames\nReturns list of selected performance metrics. These metrics are returned in the `OptimizationResult` instances stored in `StrategyOptimizer.Results`.\n\n### public OptimizerBase OptimizationMethod\nReturns instance of selected `OptimizerBase`-derived class.\n\n## Visualizing Standard Optimizations\n\n### public virtual void Populate(StrategyOptimizer stratOpt)\nCalled when optimization completes. Visualize results from:\n- `stratOpt.Results` property (type: `OptimizationResultList`)\n- Contains list of `OptimizationResult` instances to visualize\n\n### public StrategyOptimizer StrategyOptimizer\nReturns `StrategyOptimizer` instance that conducted optimization.\n\n### public virtual bool SupportsInterimUpdates\nReturn true if visualizer supports partial updates during optimization.\n\n### public virtual void InterimPopulate(StrategyOptimizer stratOpt, List<OptimizationResult> newResults)\nCalled if `SupportsInterimUpdates` is true. Integrate new results into existing visualization.\n\n### public virtual void PopulateWithTheseValues(OptimizationResult or)\nCalled when user pushes selected run's values to other visualizers. Update visualization to reflect specified run.\n\n## Visualizing Walk-Forward Optimizations\n\n### public virtual void PopulateWFO(WFOOptimizer wfoOpt)\nCalled when Walk-Forward optimization completes. Visualize results from WFOOptimizer instance.\n\n### public WFOOptimizer WFOOptimizer\nReturns `WFOOptimizer` instance that conducted optimization.\n\n## Interacting with the Strategy Window\n\n### public IOptimizationHost ParentOptimizationWindow\nReturns `IOptimizationHost` interface for interacting with optimization section. Contains:\n- `StrategyHost` property (type: `IStrategyHost`)\n- Additional hooks into Strategy window\n\n### protected void SaveParameterDefaults(OptimizationResult or, FrameworkElement confirmElement = null)\nSets Strategy Parameters default values from OptimizationResult. Parameters:\n- `or`: OptimizationResult containing values to set\n- `confirmElement`: Optional FrameworkElement for animated confirmation\n\nExample usage in Optimization Tabular Visualizer:\n- Right-click menu option\n- Sets Strategy parameter defaults to selected optimization run values ",
    "metadata": {
      "id": "optimization-visualizer",
      "title": "optimization-visualizer",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/optimization-visualizer.md",
      "chunkIndex": 2,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "//get user data folder\nstring folder = WLHost.Instance.DataFolder;\n",
    "metadata": {
      "id": "optimization-visualizer",
      "title": "optimization-visualizer",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/optimization-visualizer.md",
      "chunkIndex": "code-0",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "izer, making it available in appropriate locations of the WL8 user interface.\n\n## Accessing the Host (WL8) Environment\n\nThe `IHost` interface allows your extension to access information about the user's WealthLab environment. For example, the location of the user data folder, or obtaining a list of DataSets defined by the user. At any point in your extension's code base, you can access an instance of the `IHost` interface using the singleton class `WLHost` and its `Instance` property. Example:\n\n"
    }
  },
  {
    "pageContent": "izer, making it available in appropriate locations of the WL8 user interface.\n\n## Accessing the Host (WL8) Environment\n\nThe `IHost` interface allows your extension to access information about the user's WealthLab environment. For example, the location of the user data folder, or obtaining a list of DataSets defined by the user. At any point in your extension's code base, you can access an instance of the `IHost` interface using the singleton class `WLHost` and its `Instance` property. Example:\n\n\n\n```csharp\n//get user data folder\nstring folder = WLHost.Instance.DataFolder;\n\n```",
    "metadata": {
      "id": "optimization-visualizer",
      "title": "optimization-visualizer",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/optimization-visualizer.md",
      "chunkIndex": "code-context-0",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "<wl:OptimizationVisualizerBase x:Class=\"YourNamespace.YourVisualizer\"\n    xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n    xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n    xmlns:wl=\"clr-namespace:WealthLab.WPF;assembly=WealthLab.WPF\">\n    <!-- Your XAML content here -->\n</wl:OptimizationVisualizerBase>\n",
    "metadata": {
      "id": "optimization-visualizer",
      "title": "optimization-visualizer",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/optimization-visualizer.md",
      "chunkIndex": "code-1",
      "contentType": "code",
      "language": "xaml",
      "chunkType": "code_block",
      "context": " text in Visualizer's tab\n- `GlyphResource` property - Controls image in Visualizer's tab\n\n## Creating the Files in Visual Studio\n\n1. Create a new UserControl in Visual Studio (generates boilerplate XAML and CS)\n2. Modify CS file:\n   - Change class to derive from `OptimizationVisualizerBase`\n   - Add `WealthLab.WPF` to using clause\n3. Modify XAML file:\n   - Add XMLNS reference to WealthLab.WPF library\n   - Change base class from UserControl to OptimizationVisualizerBase\n\nExample XAML structure:\n"
    }
  },
  {
    "pageContent": " text in Visualizer's tab\n- `GlyphResource` property - Controls image in Visualizer's tab\n\n## Creating the Files in Visual Studio\n\n1. Create a new UserControl in Visual Studio (generates boilerplate XAML and CS)\n2. Modify CS file:\n   - Change class to derive from `OptimizationVisualizerBase`\n   - Add `WealthLab.WPF` to using clause\n3. Modify XAML file:\n   - Add XMLNS reference to WealthLab.WPF library\n   - Change base class from UserControl to OptimizationVisualizerBase\n\nExample XAML structure:\n\n\n```xaml\n<wl:OptimizationVisualizerBase x:Class=\"YourNamespace.YourVisualizer\"\n    xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n    xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n    xmlns:wl=\"clr-namespace:WealthLab.WPF;assembly=WealthLab.WPF\">\n    <!-- Your XAML content here -->\n</wl:OptimizationVisualizerBase>\n\n```",
    "metadata": {
      "id": "optimization-visualizer",
      "title": "optimization-visualizer",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/optimization-visualizer.md",
      "chunkIndex": "code-context-1",
      "contentType": "mixed",
      "language": "xaml",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "# Optimizer API\n\nThis document details the API for building Optimizer extensions for Wealth-Lab 8. An Optimizer decides how Strategy Parameter values should be tested during an optimization.\n\nThe baseline Optimizer, Exhaustive, iterates through each possible combination of Parameter values. This can lead to extremely long run times depending on the number of Parameter combinations. Other Optimizers attempt different approaches to narrow down profitable Parameter ranges.\n\nEach Parameter instance has `MinValue`, `MaxValue`, and `StepValue` properties that determine the possible range of values to consider during optimization. An Optimizer orchestrates the optimization by determining how Parameter values change from run to run during the optimization process.\n\n## Build Environment\n\nYou can create an Optimizer in a .NET development tool such as Visual Studio 2022. Create a class library project that targets .NET8, then reference the WealthLab.Core library DLL that you'll find in the WL8 installation folder.\n\n> **Note:** If you are using Visual Studio 2022, it will need to be updated to at least version 17.8.6 to use .NET8.\n\nYour Optimizer will be a class in this library that descends from `OptimizerBase`, which is defined in the WealthLab.Core library, in the `WealthLab.Backtest` namespace. After you implement and build your library, simply copy the resulting assembly DLL into the WL8 installation folder. The next time WL8 starts up, it will discover your Optimizer, making it available in appropriate locations of the WL8 user interface.\n\n## Accessing the Host (WL8) Environment\n\nThe `IHost` interface allows your extension to access information about the user's WealthLab environment. For example, the location of the user data folder, or obtaining a list of DataSets defined by the user. At any point in your extension's code base, you can access an instance of the `IHost` interface using the singleton class `WLHost` and its `Instance` property. Example:\n\n",
    "metadata": {
      "id": "optimizer",
      "title": "optimizer",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/optimizer.md",
      "chunkIndex": 0,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n## Configuration of an Optimizer\n\n`OptimizerBase` descends from the base class `Configurable`, which provides a way to allow the user to configure the Optimizer. Consult the Configurable class reference for details.\n\nBy default, `OptimizerBase` assigns the `ParameterListType` value to its `ConfigurableType` property, so the Optimizer will use a `ParameterList` containing `Parameter` instances for configuration. You'll define these Parameters in the `GenerateParameters` method, as described in the Configurable class reference.\n\n## Permutations\n\n### public virtual int GetTotalPermutations(ParameterList pl)\nOverride this method to return the total (or estimated) number of optimization runs your Optimizer will perform based on:\n- Strategy Parameters in the ParameterList `pl` parameter\n- Your Optimizer's own Parameter values\n\n## Optimizing\n\n### public virtual void Initialize(StrategyOptimizer mo, ParameterList pl)\nOverride to perform initialization before each optimization run. Parameters:\n- `mo`: StrategyOptimizer instance containing methods for optimization runs\n- `pl`: ParameterList containing Optimizer's Parameter values\n\n> **Important:** Call `base.Initialize` if you implement this method.\n\n### public abstract void Optimize(ParameterList pl, bool resumePrevious)\nOverride to perform the optimization. Implementation steps:\n1. Use your Optimizer's logic to generate parameter value combinations\n2. Execute optimization runs via `StrategyOptimizer.ExecuteOptimizationRun`\n3. Assign test values using `Parameter.SetNumericValue` method\n4. Handle resuming previous runs if `resumePrevious` is true\n\n`ExecuteOptimizationRun` returns an `OptimizationResult` with calculated performance metrics based on user selection.\n\n### public bool IsCancelled\nCheck this property during optimization loops to detect user cancellation.\n\n### public StrategyOptimizer StrategyOptimizer\nReturns the `StrategyOptimizer` instance for executing optimization runs.\n\n## Working with Performance Metrics\n\n### ScoreCardFactory.Instance.SelectedMetrics\nReturns list of user-selected Performance Metric names.\n\n### protected virtual void ScoreCardChanged()\nOverride to handle changes to selected Performance Metrics.\n\n### protected void SetMetrics(Parameter p)\nSets up an Optimizer Parameter to select from available Performance Metrics:\n- Sets Parameter type to StringChoice\n- Populates Choices from `ScoreCardFactory.Instance.SelectedMetrics`\n- Call during Initialize and ScoreCardChanged\n\n## Internal State\n\n### public virtual string GetInternalState()\nOverride to return string representing Optimizer's internal state.\n\n### public virtual void SetInternalState(string s, ParameterList pl)\nOverride to restore Optimizer's internal state from string.\n\n> **Note:** Even without implementing state management, WL8 optimizes by caching results for identical Parameter values.\n\n## Parallel Processing Considerations\n\nFor multi-threaded Optimizers:\n1. Always clone ParameterList instances using `Clone()` method\n2. Work with the cloned copy to prevent corruption\n3. Take care with shared state across threads\n\n## Example Implementation\n\nBelow is a complete implementation of a single-threaded exhaustive Optimizer:\n\n```csharp\nusing System.Collections.Generic;\nusing WealthLab.Core;\n\nnamespace WealthLab.Backtest\n{\n    public class ExhaustiveNonParallel : OptimizerBase\n    {\n        //Name\n        public override string Name => \"Exhaustive (non-Parallel)\";\n\n        //description\n        public override string Description => \n            \"Executes the Strategy on each permutation of parameter values, \" + \n            \"but does not leverage parallel processing.\";\n\n        //private members\n        private int totalRuns;\n        private int runs;\n\n        //execute the optimization\n        public override void Optimize(ParameterList pl, bool resumePrevious)\n        {\n            totalRuns = GetTotalPermutations(pl);\n            runs = 0;\n            ProcessParameter(pl, 0);\n        }\n\n        //iterate through parameter values of the specified parameter (recursive)\n        private void ProcessParameter(ParameterList pl, int depth)\n        {\n            ParameterList myPL = pl.Clone();\n            if (depth == myPL.Count)\n            {\n                StrategyOptimizer.ExecuteOptimizationRun(myPL);\n                runs++;\n                StrategyOptimizer.ReportEstimatedCompletion(runs * 100.0 / totalRuns);\n                return;\n            }\n\n            //are we optimizing this parameter?\n            if (myPL[depth].IsChecked)\n            {\n                //yes, create list of step values\n                List<double> values = new List<double>(myPL[depth]);\n\n                //and optimize in parallel\n                foreach (double myValue in values)\n                {\n                    if (!IsCancelled)\n                    {\n                        //set value\n                        ParameterList runPL = myPL.Clone();\n                        runPL[depth].SetNumericValue(myValue);\n\n                        //continue to inner parameter\n                        ProcessParameter(runPL, depth + 1);\n                    }\n                }\n            }\n            else\n            {\n                //no, use established value\n                if (!IsCancelled)\n                {\n                    ProcessParameter(myPL, depth + 1);\n                }\n            }\n        }\n    }\n} ",
    "metadata": {
      "id": "optimizer",
      "title": "optimizer",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/optimizer.md",
      "chunkIndex": 1,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "//get user data folder\nstring folder = WLHost.Instance.DataFolder;\n",
    "metadata": {
      "id": "optimizer",
      "title": "optimizer",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/optimizer.md",
      "chunkIndex": "code-0",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "izer, making it available in appropriate locations of the WL8 user interface.\n\n## Accessing the Host (WL8) Environment\n\nThe `IHost` interface allows your extension to access information about the user's WealthLab environment. For example, the location of the user data folder, or obtaining a list of DataSets defined by the user. At any point in your extension's code base, you can access an instance of the `IHost` interface using the singleton class `WLHost` and its `Instance` property. Example:\n\n"
    }
  },
  {
    "pageContent": "izer, making it available in appropriate locations of the WL8 user interface.\n\n## Accessing the Host (WL8) Environment\n\nThe `IHost` interface allows your extension to access information about the user's WealthLab environment. For example, the location of the user data folder, or obtaining a list of DataSets defined by the user. At any point in your extension's code base, you can access an instance of the `IHost` interface using the singleton class `WLHost` and its `Instance` property. Example:\n\n\n\n```csharp\n//get user data folder\nstring folder = WLHost.Instance.DataFolder;\n\n```",
    "metadata": {
      "id": "optimizer",
      "title": "optimizer",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/optimizer.md",
      "chunkIndex": "code-context-0",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "# Performance Visualizer API\n\nThis document details the API for building Performance Visualizer Extensions for Wealth-Lab 8. A Performance Visualizer occupies a tab in the Backtest Results section of the Strategy window, and lets you present the results of a backtest in a particular way.\n\n## Build Environment\n\nYou can create a Performance Visualizer in a .NET development tool such as Visual Studio 2022. Create a class library project that targets .NET8, then reference the WealthLab.WPF library DLL that you'll find in the WL8 installation folder.\n\n> **Note:** If you are using Visual Studio 2022, it will need to be updated to at least version 17.8.6 to use .NET8.\n\nYour Performance Visualizer will be a class in this library that descends from `VisualizerBase`, which is defined in the WealthLab.WPF library, in the `WealthLab.WPF` namespace. After you implement and build your library, simply copy the resulting assembly DLL into the WL8 installation folder. The next time WL8 starts up, it will discover your Performance Visualizer, making it available in appropriate locations of the WL8 user interface.\n\n## ResultViewerBase\n\n`VisualizerBase` is derived from the `ResultViewerBase` base class, defined in WealthLab.WPF. `ResultViewerBase` is derived from the WPF `UserControl`. `ResultViewerBase` contains additional members useful for developing Visualizers, particularly:\n\n- `ViewerName` property - Controls text in Visualizer's tab\n- `GlyphResource` property - Controls image in Visualizer's tab\n\n## Creating the Files in Visual Studio\n\n1. Create a new UserControl in Visual Studio (generates boilerplate XAML and CS)\n2. Modify CS file:\n   - Change class to derive from `VisualizerBase`\n   - Add `WealthLab.WPF` to using clause\n3. Modify XAML file:\n   - Add XMLNS reference to WealthLab.WPF library\n   - Change base class from UserControl to VisualizerBase\n\nExample XAML structure:\n",
    "metadata": {
      "id": "performance-visualizer",
      "title": "performance-visualizer",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/performance-visualizer.md",
      "chunkIndex": 0,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n## Accessing the Host (WL8) Environment\n\nThe `IHost` interface allows your extension to access information about the user's WealthLab environment. For example, the location of the user data folder, or obtaining a list of DataSets defined by the user. At any point in your extension's code base, you can access an instance of the `IHost` interface using the singleton class `WLHost` and its `Instance` property. Example:\n\n",
    "metadata": {
      "id": "performance-visualizer",
      "title": "performance-visualizer",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/performance-visualizer.md",
      "chunkIndex": 1,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n## Visualizers for Specific Strategy Types\n\n### public virtual bool AllowForStrategyType(StrategyTypes st)\nOverride to specify supported Strategy types. Your Visualizer won't appear for unsupported types.\n\nAvailable `StrategyTypes` enum values:\n- `Code`\n- `BuildingBlock`\n- `Rotation`\n- `Compiled`\n- `MetaStrategy`\n- `TradeHistory`\n\n## Visualizing Backtest Results\n\n### public virtual void Initialize()\nOverride to implement one-time initialization for your Visualizer.\n\n### public virtual void Populate(Backtester backtester, Backtester backtesterBenchmark)\nOverride to implement backtest visualization. Parameters:\n- `backtester`: Contains Strategy backtest results\n- `backtesterBenchmark`: Contains benchmark buy & hold results\n\n> **Note:** Consult the Backtester class reference for available properties, especially the `Metrics` property exposing performance metrics generated by WL8 ScoreCards.\n\n### public Backtester Backtester\nReturns the Backtester instance containing Strategy performance results.\n\n### public Backtester BacktesterBenchmark\nReturns the Backtester instance containing benchmark buy & hold results.\n\n## Interacting with the Strategy Window\n\n### public IStrategyHost ParentStrategyWindow\nReturns `IStrategyHost` interface for interacting with the hosting Strategy window. Use this to:\n- Access Strategy window properties and methods\n- Trigger actions like charting specific symbols ",
    "metadata": {
      "id": "performance-visualizer",
      "title": "performance-visualizer",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/performance-visualizer.md",
      "chunkIndex": 2,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "<wl:VisualizerBase x:Class=\"YourNamespace.YourVisualizer\"\n    xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n    xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n    xmlns:wl=\"clr-namespace:WealthLab.WPF;assembly=WealthLab.WPF\">\n    <!-- Your XAML content here -->\n</wl:VisualizerBase>\n",
    "metadata": {
      "id": "performance-visualizer",
      "title": "performance-visualizer",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/performance-visualizer.md",
      "chunkIndex": "code-0",
      "contentType": "code",
      "language": "xaml",
      "chunkType": "code_block",
      "context": "ame` property - Controls text in Visualizer's tab\n- `GlyphResource` property - Controls image in Visualizer's tab\n\n## Creating the Files in Visual Studio\n\n1. Create a new UserControl in Visual Studio (generates boilerplate XAML and CS)\n2. Modify CS file:\n   - Change class to derive from `VisualizerBase`\n   - Add `WealthLab.WPF` to using clause\n3. Modify XAML file:\n   - Add XMLNS reference to WealthLab.WPF library\n   - Change base class from UserControl to VisualizerBase\n\nExample XAML structure:\n"
    }
  },
  {
    "pageContent": "ame` property - Controls text in Visualizer's tab\n- `GlyphResource` property - Controls image in Visualizer's tab\n\n## Creating the Files in Visual Studio\n\n1. Create a new UserControl in Visual Studio (generates boilerplate XAML and CS)\n2. Modify CS file:\n   - Change class to derive from `VisualizerBase`\n   - Add `WealthLab.WPF` to using clause\n3. Modify XAML file:\n   - Add XMLNS reference to WealthLab.WPF library\n   - Change base class from UserControl to VisualizerBase\n\nExample XAML structure:\n\n\n```xaml\n<wl:VisualizerBase x:Class=\"YourNamespace.YourVisualizer\"\n    xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n    xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n    xmlns:wl=\"clr-namespace:WealthLab.WPF;assembly=WealthLab.WPF\">\n    <!-- Your XAML content here -->\n</wl:VisualizerBase>\n\n```",
    "metadata": {
      "id": "performance-visualizer",
      "title": "performance-visualizer",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/performance-visualizer.md",
      "chunkIndex": "code-context-0",
      "contentType": "mixed",
      "language": "xaml",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "//get user data folder\nstring folder = WLHost.Instance.DataFolder;\n",
    "metadata": {
      "id": "performance-visualizer",
      "title": "performance-visualizer",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/performance-visualizer.md",
      "chunkIndex": "code-1",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "=WealthLab.WPF\">\n    <!-- Your XAML content here -->\n</wl:VisualizerBase>\n```\n\n## Accessing the Host (WL8) Environment\n\nThe `IHost` interface allows your extension to access information about the user's WealthLab environment. For example, the location of the user data folder, or obtaining a list of DataSets defined by the user. At any point in your extension's code base, you can access an instance of the `IHost` interface using the singleton class `WLHost` and its `Instance` property. Example:\n\n"
    }
  },
  {
    "pageContent": "=WealthLab.WPF\">\n    <!-- Your XAML content here -->\n</wl:VisualizerBase>\n```\n\n## Accessing the Host (WL8) Environment\n\nThe `IHost` interface allows your extension to access information about the user's WealthLab environment. For example, the location of the user data folder, or obtaining a list of DataSets defined by the user. At any point in your extension's code base, you can access an instance of the `IHost` interface using the singleton class `WLHost` and its `Instance` property. Example:\n\n\n\n```csharp\n//get user data folder\nstring folder = WLHost.Instance.DataFolder;\n\n```",
    "metadata": {
      "id": "performance-visualizer",
      "title": "performance-visualizer",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/performance-visualizer.md",
      "chunkIndex": "code-context-1",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "# Plot Style Extension API\n\nThis document details the API for building Plot Style Extensions for Wealth-Lab 8. A Plot Style determines how a time series (such as an indicator) is plotted on a WL8 chart. Common Plot Styles include:\n\n- Line\n- Histogram\n- Dots\n\n## Build Environment\n\nYou can create a Plot Style in a .NET development tool such as Visual Studio 2022. Create a class library project that targets .NET8, then reference the WealthLab.ChartWPF library DLL that you'll find in the WL8 installation folder.\n\n> **Note:** If you are using Visual Studio 2022, it will need to be updated to at least version 17.8.6 to use .NET8.\n\nYour Plot Style will be a class in this library that descends from `SeriesStyleBase`, which is defined in the WealthLab.ChartWPF library, in the `WealthLab.ChartWPF` namespace. After you implement and build your library, simply copy the resulting assembly DLL into the WL8 installation folder. The next time WL8 starts up, it will discover your Plot Style, making it available in appropriate locations of the WL8 user interface.\n\n`SeriesStyleBase` is derived from the `PlotBase` base class. Consult the PlotBase class reference for properties and methods available to `SeriesStyleBase`.\n\n## Accessing the Host (WL8) Environment\n\nThe `IHost` interface allows your extension to access information about the user's WealthLab environment. For example, the location of the user data folder, or obtaining a list of DataSets defined by the user. At any point in your extension's code base, you can access an instance of the `IHost` interface using the singleton class `WLHost` and its `Instance` property. Example:\n\n",
    "metadata": {
      "id": "plot-style",
      "title": "plot-style",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/plot-style.md",
      "chunkIndex": 0,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n## Descriptive Properties and Parameters\n\nThe `SeriesStyleBase` class is ultimately derived from the `Configurable` base class. `Configurable` contains properties that let you describe:\n- `Name` of your Plot Style\n- `GlyphResource` for its icon\n\n### public virtual void GenerateParameters()\nSince `SeriesStyleBase` derives from `Configurable`, it supports Parameters that can be modified by the user. Override this method to install new Parameters specific to your Plot Style.\n\n### public WLColor Color\nThe `SeriesStyleBase` constructor adds a Color Parameter to the Parameters list. The Color property:\n- Getter reads value from this Parameter\n- Setter sets value of this Parameter\n\n> **Important:** If using the Color property, don't remove the Color Parameter. When overriding `GenerateParameters`, call `base.GenerateParameters` before adding new parameters.\n\n## Accessing the CoreChart Instance\n\n### public CoreChart Chart\nInherited from `PlotBase`, returns the underlying chart component (`CoreChart` instance). Important properties include:\n- `StartIndex`: First index within BarHistory being charted\n- `EndIndex`: Last index within BarHistory being charted\n\n## Accessing the Source Data\n\n### public TimeSeries Series\nReturns the `TimeSeries` instance representing the data being plotted. The TimeSeries will have the same number of DateTimes and Values as the BarHistory being charted (`Chart.Bars` property).\n\n## Rendering the Plot Style\n\n### public abstract void Render(DrawingContext dc)\nOverride to render your Plot Style onto the WPF DrawingContext. Implementation steps:\n\n1. Loop through visible bars (`Chart.StartIndex` to `Chart.EndIndex`)\n2. Use conversion methods from PlotBase:\n   - `ConvertIndexToX`: Convert index to x-pixel coordinates\n   - `ConvertValueToY`: Convert price to y-pixel coordinates\n3. Render data points using DrawingContext methods\n4. Use `PenBrushFactory` for System.Windows.Media Pens and Brushes\n\n### public override WLColor GetBarColor(int idx)\nReturns color for rendering a data point. Default is based on Plot Style's Color property, but Strategy code can override colors.\n\n### public virtual string OverridePlotPane\nOverride to specify chart pane for plotting. Return values:\n- \"Price\": Plot in price pane\n- \"Volume\": Plot in volume pane\n\nExample: BooleanDots Plot Style returns \"Price\" to ensure dots plot in price pane regardless of indicator's pane.\n\n### public override void RenderHighlight(DrawingContext dc)\nCalled when user hovers over Plot Style. Default implementation plots thick, translucent line.\n\n### public bool IsCompanionPlotted\nFor indicators with companions (e.g., Bollinger Bands, Keltner Bands):\n- Returns true if companion already rendered\n- Access companion via `((IndicatorBase)Series).BandCompanion`\n\n## Example Implementation\n\nBelow is a complete implementation of the Line Plot Style:\n\n```csharp\nusing WealthLab.Core;\nusing WealthLab.WPF;\nusing System.Windows;\nusing System.Windows.Media;\n\nnamespace WealthLab.ChartWPF\n{\n    public class LineSeriesStyle : SeriesStyleBase\n    {\n        //generate parameters - add a line thickness parameter\n        public override void GenerateParameters()\n        {\n            base.GenerateParameters();\n            Parameters.Add(new Parameter(\"Thickness\", ParameterType.Int32, 2));\n            Parameters.Add(new Parameter(\"Line Style\", ParameterType.LineStyle, LineStyle.Solid));\n        }\n\n        //Name\n        public override string Name => \"Line\";\n\n        //glyph\n        public override string GlyphResource => \"WealthLab.ChartWPF.Glyphs.Line.png\";\n\n        //line thickness\n        public int LineThickness\n        {\n            get => Parameters.FindName(\"Thickness\").AsInt;\n            set\n            {\n                Parameter p = Parameters.FindName(\"Thickness\");\n                p.DefaultValue = value;\n                p.Value = value;\n            }\n        }\n\n        //line style\n        public LineStyle LineStyle\n        {\n            get\n            {\n                Parameter p = Parameters.FindName(\"Line Style\");\n                return p?.AsLineStyle ?? LineStyle.Solid;\n            }\n            set\n            {\n                Parameter p = Parameters.FindName(\"Line Style\");\n                p.DefaultValue = value;\n                p.Value = value;\n            }\n        }\n\n        //render\n        public override void Render(DrawingContext dc)\n        {\n            if (LineThickness <= 0)\n                return;\n            RenderLine(dc, Chart.StartIndex, Chart.EndIndex);\n        }\n\n        //render a line\n        protected void RenderLine(DrawingContext dc, int startIdx, int endIdx)\n        {\n            //create geometry\n            StreamGeometry sg = new StreamGeometry();\n            StreamGeometryContext sgc = sg.Open();\n\n            //get pen\n            WLColor c = Color;\n            Pen pen = PenBrushFactory.GetPen(c, LineThickness, LineStyle);\n\n            //fast render if not custom colored\n            if (Series.SeriesBarColors == null)\n            {\n                bool first = true;\n                for (int n = startIdx; n <= endIdx; n++)\n                {\n                    if (Double.IsNaN(Series[n]))\n                        continue;\n                    if (n < Series.FirstValidIndex)\n                        continue;\n                    double xCoord = ConvertIndexToX(n);\n                    double yData = ConvertValueToY(Series[n]);\n                    if (first)\n                    {\n                        sgc.BeginFigure(new Point(xCoord, yData), false, false);\n                        first = false;\n                    }\n                    else\n                    {\n                        sgc.LineTo(new Point(xCoord, yData), true, true);\n                    }\n                }\n                RenderStreamingBarLine(sgc);\n                sgc.Close();\n                dc.DrawGeometry(null, pen, sg);\n            }\n            else\n            {\n                bool first = true;\n                WLColor lastColor = WLColor.Empty;\n                for (int n = startIdx; n <= endIdx; n++)\n                {\n                    if (Double.IsNaN(Series[n]))\n                        continue;\n                    if (n < Series.FirstValidIndex)\n                        continue;\n                    double xCoord = ConvertIndexToX(n);\n                    double yData = ConvertValueToY(Series[n]);\n                    c = GetBarColor(n);\n                    Point pt = new Point(xCoord, yData);\n                    if (c != lastColor)\n                    {\n                        if (!first)\n                        {\n                            sgc.LineTo(pt, true, true);\n                            sgc.Close();\n                            pen = PenBrushFactory.GetPen(lastColor, LineThickness, LineStyle);\n                            dc.DrawGeometry(null, pen, sg);\n                            sg = new StreamGeometry();\n                            sgc = sg.Open();\n                        }\n                        sgc.BeginFigure(pt, false, false);\n                        lastColor = c;\n                        first = false;\n                    }\n                    else\n                    {\n                        sgc.LineTo(pt, true, true);\n                    }\n                }\n                RenderStreamingBarLine(sgc);\n                sgc.Close();\n                pen = PenBrushFactory.GetPen(lastColor, LineThickness, LineStyle);\n                dc.DrawGeometry(null, pen, sg);\n            }\n        }\n\n        //render streaming bar portion of the line\n        protected void RenderStreamingBarLine(StreamGeometryContext sgc)\n        {\n            if (LineThickness <= 0)\n                return;\n\n            if (Chart.ShouldStreamingBarBeRendered && !Double.IsNaN(Series.StreamingValue))\n            {\n                double xCoord = Chart.StreamingBarPlotX;\n                double yCoord = ConvertValueToY(Series.StreamingValue);\n                Point pt = new Point(xCoord, yCoord);\n                sgc.LineTo(pt, true, true);\n            }\n        }\n    }\n} ",
    "metadata": {
      "id": "plot-style",
      "title": "plot-style",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/plot-style.md",
      "chunkIndex": 1,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "//get user data folder\nstring folder = WLHost.Instance.DataFolder;\n",
    "metadata": {
      "id": "plot-style",
      "title": "plot-style",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/plot-style.md",
      "chunkIndex": "code-0",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "se class reference for properties and methods available to `SeriesStyleBase`.\n\n## Accessing the Host (WL8) Environment\n\nThe `IHost` interface allows your extension to access information about the user's WealthLab environment. For example, the location of the user data folder, or obtaining a list of DataSets defined by the user. At any point in your extension's code base, you can access an instance of the `IHost` interface using the singleton class `WLHost` and its `Instance` property. Example:\n\n"
    }
  },
  {
    "pageContent": "se class reference for properties and methods available to `SeriesStyleBase`.\n\n## Accessing the Host (WL8) Environment\n\nThe `IHost` interface allows your extension to access information about the user's WealthLab environment. For example, the location of the user data folder, or obtaining a list of DataSets defined by the user. At any point in your extension's code base, you can access an instance of the `IHost` interface using the singleton class `WLHost` and its `Instance` property. Example:\n\n\n\n```csharp\n//get user data folder\nstring folder = WLHost.Instance.DataFolder;\n\n```",
    "metadata": {
      "id": "plot-style",
      "title": "plot-style",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/plot-style.md",
      "chunkIndex": "code-context-0",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "# Position ScoreCard API\n\nThis document details the API for building Position ScoreCard extensions for Wealth-Lab 8. A Position ScoreCard generates a roster of Performance Metrics (such as Profit, MAE, and ProfitPerBar) based on a single Position in a set of Backtest results. These Position Performance Metrics can be selected for display in:\n- The Positions Visualizer in WL8\n- Other Visualizers (e.g., Position Metrics Visualizer in the Power Pack Extension)\n\n## Build Environment\n\nYou can create a Position ScoreCard in a .NET development tool such as Visual Studio 2022. Create a class library project that targets .NET8, then reference the WealthLab.Core library DLL that you'll find in the WL8 installation folder.\n\n> **Note:** If you are using Visual Studio 2022, it will need to be updated to at least version 17.8.6 to use .NET8.\n\nYour Position ScoreCard will be a class in this library that descends from `PositionScoreCardBase`, which is defined in the WealthLab.Core library, in the `WealthLab.Backtest` namespace. After you implement and build your library, simply copy the resulting assembly DLL into the WL8 installation folder. The next time WL8 starts up, it will discover your Position ScoreCard, making it available in appropriate locations of the WL8 user interface.\n\n## Accessing the Host (WL8) Environment\n\nThe `IHost` interface allows your extension to access information about the user's WealthLab environment. For example, the location of the user data folder, or obtaining a list of DataSets defined by the user. At any point in your extension's code base, you can access an instance of the `IHost` interface using the singleton class `WLHost` and its `Instance` property. Example:\n\n",
    "metadata": {
      "id": "position-scorecard",
      "title": "position-scorecard",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/position-scorecard.md",
      "chunkIndex": 0,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n## Descriptive Properties\n\n### public abstract string Name\nReturn the name of the Position ScoreCard, which appears in the Position Metrics Preference page in WL8 where users select Position Metrics for the Positions Visualizer.\n\n### public abstract List<string> PositionMetricNames\nReturn a List containing the names of the Performance Metrics that your Position ScoreCard calculates and returns.\n\n## Calculating Metrics\n\n### public abstract double CalculatePositionMetric(Backtester bt, Position pos, string metricName)\nOverride this method to calculate Performance Metrics. Parameters:\n- `bt`: Backtester instance that generated the backtest\n- `pos`: Position instance to analyze\n- `metricName`: Name of metric to calculate\n\nReturn the calculated metric value as a double.\n\n## Metric Properties\n\n### public abstract bool ColorizeMetric(string metric)\nReturn true if the specified metric should be colorized in the Positions Visualizer:\n- Green for profit\n- Red for loss\n\n### public abstract int DecimalsMetric(string metric)\nReturn the number of decimal places to use when displaying the metric value in the Positions Visualizer.\n\n## Example Implementation\n\nBelow is a simple example of a Position ScoreCard that calculates basic position metrics:\n\n```csharp\nusing System.Collections.Generic;\nusing WealthLab.Core;\nusing WealthLab.Backtest;\n\nnamespace WealthLab.Metrics\n{\n    public class BasicPositionScoreCard : PositionScoreCardBase\n    {\n        public override string Name => \"Basic Position Metrics\";\n\n        public override List<string> PositionMetricNames => new List<string>\n        {\n            \"Profit\",\n            \"Profit %\",\n            \"Bars Held\"\n        };\n\n        public override double CalculatePositionMetric(Backtester bt, Position pos, string metricName)\n        {\n            switch (metricName)\n            {\n                case \"Profit\":\n                    return pos.ProfitPoints * pos.Size;\n                \n                case \"Profit %\":\n                    return pos.ProfitPercent;\n                \n                case \"Bars Held\":\n                    return pos.BarsHeld;\n                \n                default:\n                    return 0.0;\n            }\n        }\n\n        public override bool ColorizeMetric(string metric)\n        {\n            // Colorize profit-related metrics\n            return metric.StartsWith(\"Profit\");\n        }\n\n        public override int DecimalsMetric(string metric)\n        {\n            switch (metric)\n            {\n                case \"Profit\":\n                    return 2;  // Show dollars to 2 decimal places\n                \n                case \"Profit %\":\n                    return 2;  // Show percentages to 2 decimal places\n                \n                case \"Bars Held\":\n                    return 0;  // Show whole numbers for bars\n                \n                default:\n                    return 2;\n            }\n        }\n    }\n} ",
    "metadata": {
      "id": "position-scorecard",
      "title": "position-scorecard",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/position-scorecard.md",
      "chunkIndex": 1,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "//get user data folder\nstring folder = WLHost.Instance.DataFolder;\n",
    "metadata": {
      "id": "position-scorecard",
      "title": "position-scorecard",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/position-scorecard.md",
      "chunkIndex": "code-0",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "Card, making it available in appropriate locations of the WL8 user interface.\n\n## Accessing the Host (WL8) Environment\n\nThe `IHost` interface allows your extension to access information about the user's WealthLab environment. For example, the location of the user data folder, or obtaining a list of DataSets defined by the user. At any point in your extension's code base, you can access an instance of the `IHost` interface using the singleton class `WLHost` and its `Instance` property. Example:\n\n"
    }
  },
  {
    "pageContent": "Card, making it available in appropriate locations of the WL8 user interface.\n\n## Accessing the Host (WL8) Environment\n\nThe `IHost` interface allows your extension to access information about the user's WealthLab environment. For example, the location of the user data folder, or obtaining a list of DataSets defined by the user. At any point in your extension's code base, you can access an instance of the `IHost` interface using the singleton class `WLHost` and its `Instance` property. Example:\n\n\n\n```csharp\n//get user data folder\nstring folder = WLHost.Instance.DataFolder;\n\n```",
    "metadata": {
      "id": "position-scorecard",
      "title": "position-scorecard",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/position-scorecard.md",
      "chunkIndex": "code-context-0",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "# ScoreCard API\n\nThis document details the API for building ScoreCard extensions for Wealth-Lab 8. A ScoreCard generates a roster of Performance Metrics (such as APR, Net Profit, and Sharpe Ratio) based on the results of a backtest run. These Performance Metrics can be displayed in various Performance Visualizers and can be selected as optimization targets by certain Optimizers.\n\n## Build Environment\n\nYou can create a ScoreCard in a .NET development tool such as Visual Studio 2022. Create a class library project that targets .NET8, then reference the WealthLab.Core library DLL that you'll find in the WL8 installation folder.\n\n> **Note:** If you are using Visual Studio 2022, it will need to be updated to at least version 17.8.6 to use .NET8.\n\nYour ScoreCard will be a class in this library that descends from `ScoreCardBase`, which is defined in the WealthLab.Core library, in the `WealthLab.Backtest` namespace. After you implement and build your library, simply copy the resulting assembly DLL into the WL8 installation folder. The next time WL8 starts up, it will discover your ScoreCard, making it available in appropriate locations of the WL8 user interface.\n\n## Accessing the Host (WL8) Environment\n\nThe `IHost` interface allows your extension to access information about the user's WealthLab environment. For example, the location of the user data folder, or obtaining a list of DataSets defined by the user. At any point in your extension's code base, you can access an instance of the `IHost` interface using the singleton class `WLHost` and its `Instance` property. Example:\n\n",
    "metadata": {
      "id": "scorecard",
      "title": "scorecard",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/scorecard.md",
      "chunkIndex": 0,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n## Descriptive Properties\n\n### public abstract string Name\nReturn the name of the ScoreCard, which appears in the Metrics Report and any other areas in the WL8 user interface that let the user select a ScoreCard.\n\n### public abstract List<string> MetricNames\nReturn a List containing the names of the Performance Metrics that your ScoreCard calculates and returns. Each Metric should be named using a valid .NET variable name. You can associate more descriptive labels for Metrics in the report layout.\n\n## Calculating Metrics\n\n### public virtual void Initialize(Backtester bt)\nOverride this method to calculate your ScoreCard's Performance Metrics. Each Metric should be assigned to the `Metrics` property of the Backtester instance using the Metric name as a property name.\n\nThe Backtester class' `Metrics` property is a dynamic type, accepting any property name that is a valid .NET variable name. This allows you to inject custom Metrics into the WL8 environment that can be used by Optimizers or Performance Visualizers.\n\nExample from the Basic ScoreCard:\n",
    "metadata": {
      "id": "scorecard",
      "title": "scorecard",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/scorecard.md",
      "chunkIndex": 1,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n> **Note:** You can \"reuse\" Metrics calculated by other Scorecards (such as Basic or Extended). The list of Metric names can be found in the Preferences dialog > Metric Columns tab. This allows you to build derivative Metrics, combine various Metrics, and save effort in recreating them.\n\n## Performance Metrics Report\n\n### public abstract void LayoutMetricsReport(IMetricsReportHost reportHost)\nWL8 calls this method when compiling a performance metrics report (e.g., in the Metrics Report Performance Visualizer). Override this method to compose the report using the `IMetricsReportHost` methods.\n\nExample from the Basic ScoreCard:\n",
    "metadata": {
      "id": "scorecard",
      "title": "scorecard",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/scorecard.md",
      "chunkIndex": 2,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n### public override string GetMetricTip(string itemName)\nWL8 calls this method to determine what tooltip hint (if any) to display when a user clicks on a Performance Metric in the Metrics Report.\n\n## Metrics in Optimizations\n\n### public virtual int GetMetricValueDirection(string itemName)\nWL8 calls this method to determine if a Performance Metric's value is \"better\" when:\n- Higher (returns 1): Examples include NetProfit, APR, SharpeRatio\n- Lower (returns -1): Examples include Beta, MarginInterest\n\nThe default return value is 1, so override this and return -1 for Metrics that are \"better\" when lower.\n\n### public virtual List<string> OptimizableMetricNames\nReturns a List of Performance Metric names that are exposed to optimizations. The default implementation includes Metrics of type int or double. Override this method for more specific control over which Metrics are exposed to optimizations.\n\n### public abstract string DefaultMetricName\nReturn the name of the Performance Metric that should appear when your ScoreCard is first selected in an optimization context.\n\n## Example Implementation\n\nBelow is a simple example of a custom ScoreCard that calculates basic risk metrics:\n\n```csharp\npublic class RiskMetricsScoreCard : ScoreCardBase\n{\n    public override string Name => \"Risk Metrics\";\n\n    public override List<string> MetricNames => new List<string>\n    {\n        \"MaxDrawdown\",\n        \"MaxDrawdownPct\",\n        \"RiskAdjustedReturn\",\n        \"ValueAtRisk\"\n    };\n\n    public override void Initialize(Backtester bt)\n    {\n        // Calculate maximum drawdown\n        double maxDD = 0;\n        double maxDDPct = 0;\n        double peak = bt.EquityCurve[0];\n        \n        for (int i = 1; i < bt.EquityCurve.Count; i++)\n        {\n            if (bt.EquityCurve[i] > peak)\n                peak = bt.EquityCurve[i];\n            else\n            {\n                double dd = peak - bt.EquityCurve[i];\n                double ddPct = dd / peak * 100;\n                if (dd > maxDD) maxDD = dd;\n                if (ddPct > maxDDPct) maxDDPct = ddPct;\n            }\n        }\n\n        bt.Metrics.MaxDrawdown = maxDD;\n        bt.Metrics.MaxDrawdownPct = maxDDPct;\n\n        // Calculate risk-adjusted return\n        double returns = bt.Metrics.APR;\n        double volatility = bt.Metrics.Volatility;\n        bt.Metrics.RiskAdjustedReturn = returns / volatility;\n\n        // Calculate Value at Risk (95% confidence)\n        double var = CalculateValueAtRisk(bt.EquityCurve, 0.95);\n        bt.Metrics.ValueAtRisk = var;\n    }\n\n    public override void LayoutMetricsReport(IMetricsReportHost reportHost)\n    {\n        reportHost.AddHeader(\"Risk Metrics\");\n        reportHost.AddMetricDouble(\"MaxDrawdown\", true, false, 2, \"Maximum Drawdown ($)\");\n        reportHost.AddMetricDouble(\"MaxDrawdownPct\", true, true, 2, \"Maximum Drawdown (%)\");\n        reportHost.AddMetricDouble(\"RiskAdjustedReturn\", false, false, 2, \"Risk-Adjusted Return\");\n        reportHost.AddMetricDouble(\"ValueAtRisk\", true, false, 2, \"Value at Risk (95%)\");\n        reportHost.AddSeparator();\n    }\n\n    public override string GetMetricTip(string itemName)\n    {\n        switch (itemName)\n        {\n            case \"MaxDrawdown\":\n                return \"The largest peak-to-trough decline in portfolio value\";\n            case \"MaxDrawdownPct\":\n                return \"The largest peak-to-trough decline as a percentage\";\n            case \"RiskAdjustedReturn\":\n                return \"Annual return divided by annual volatility\";\n            case \"ValueAtRisk\":\n                return \"Maximum expected loss at 95% confidence level\";\n            default:\n                return null;\n        }\n    }\n\n    public override int GetMetricValueDirection(string itemName)\n    {\n        // All risk metrics are better when lower\n        return -1;\n    }\n\n    public override string DefaultMetricName => \"RiskAdjustedReturn\";\n\n    private double CalculateValueAtRisk(TimeSeries equity, double confidence)\n    {\n        // Implement VaR calculation\n        // This is a simplified example\n        return 0.0;\n    }\n} ",
    "metadata": {
      "id": "scorecard",
      "title": "scorecard",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/scorecard.md",
      "chunkIndex": 3,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "//get user data folder\nstring folder = WLHost.Instance.DataFolder;\n",
    "metadata": {
      "id": "scorecard",
      "title": "scorecard",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/scorecard.md",
      "chunkIndex": "code-0",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "Card, making it available in appropriate locations of the WL8 user interface.\n\n## Accessing the Host (WL8) Environment\n\nThe `IHost` interface allows your extension to access information about the user's WealthLab environment. For example, the location of the user data folder, or obtaining a list of DataSets defined by the user. At any point in your extension's code base, you can access an instance of the `IHost` interface using the singleton class `WLHost` and its `Instance` property. Example:\n\n"
    }
  },
  {
    "pageContent": "Card, making it available in appropriate locations of the WL8 user interface.\n\n## Accessing the Host (WL8) Environment\n\nThe `IHost` interface allows your extension to access information about the user's WealthLab environment. For example, the location of the user data folder, or obtaining a list of DataSets defined by the user. At any point in your extension's code base, you can access an instance of the `IHost` interface using the singleton class `WLHost` and its `Instance` property. Example:\n\n\n\n```csharp\n//get user data folder\nstring folder = WLHost.Instance.DataFolder;\n\n```",
    "metadata": {
      "id": "scorecard",
      "title": "scorecard",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/scorecard.md",
      "chunkIndex": "code-context-0",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "//gross profit\ndouble sum = 0;\nforeach (Position pos in bt.Positions)\n    if (pos.Profit > 0)\n        sum += pos.Profit;\nbt.Metrics.GrossProfitWinners = sum;\n\n//gross loss\nsum = 0;\nforeach (Position pos in bt.Positions)\n    if (pos.Profit < 0)\n        sum += pos.Profit;\nbt.Metrics.GrossLossLosers = sum;\n",
    "metadata": {
      "id": "scorecard",
      "title": "scorecard",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/scorecard.md",
      "chunkIndex": "code-1",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "e(Backtester bt)\nOverride this method to calculate your ScoreCard's Performance Metrics. Each Metric should be assigned to the `Metrics` property of the Backtester instance using the Metric name as a property name.\n\nThe Backtester class' `Metrics` property is a dynamic type, accepting any property name that is a valid .NET variable name. This allows you to inject custom Metrics into the WL8 environment that can be used by Optimizers or Performance Visualizers.\n\nExample from the Basic ScoreCard:\n"
    }
  },
  {
    "pageContent": "e(Backtester bt)\nOverride this method to calculate your ScoreCard's Performance Metrics. Each Metric should be assigned to the `Metrics` property of the Backtester instance using the Metric name as a property name.\n\nThe Backtester class' `Metrics` property is a dynamic type, accepting any property name that is a valid .NET variable name. This allows you to inject custom Metrics into the WL8 environment that can be used by Optimizers or Performance Visualizers.\n\nExample from the Basic ScoreCard:\n\n\n```csharp\n//gross profit\ndouble sum = 0;\nforeach (Position pos in bt.Positions)\n    if (pos.Profit > 0)\n        sum += pos.Profit;\nbt.Metrics.GrossProfitWinners = sum;\n\n//gross loss\nsum = 0;\nforeach (Position pos in bt.Positions)\n    if (pos.Profit < 0)\n        sum += pos.Profit;\nbt.Metrics.GrossLossLosers = sum;\n\n```",
    "metadata": {
      "id": "scorecard",
      "title": "scorecard",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/scorecard.md",
      "chunkIndex": "code-context-1",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "reportHost.AddHeader(\"Summary\");\nreportHost.AddMetricDouble(\"Profit\", true, false);\nreportHost.AddMetricDouble(\"ProfitPct\", true, true);\nreportHost.AddMetricDouble(\"ProfitPerBar\", true, false);\nreportHost.AddMetricDouble(\"APR\", true, true, 2, \"APR\");\nreportHost.AddMetricDouble(\"Exposure\", false, true);\nreportHost.AddMetricDouble(\"Alpha\", false, false, 2, \"Alpha (α)\");\nreportHost.AddMetricDouble(\"Beta\", false, false, 2, \"Beta (β)\");\nreportHost.AddMetricDouble(\"SharpeRatio\", false, false);\nreportHost.AddMetricDouble(\"SortinoRatio\", false, false);\nreportHost.AddMetricDouble(\"WLScore\", false, false, 2, \"WL Score\");\nreportHost.AddSeparator();\n",
    "metadata": {
      "id": "scorecard",
      "title": "scorecard",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/scorecard.md",
      "chunkIndex": "code-2",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "in the Preferences dialog > Metric Columns tab. This allows you to build derivative Metrics, combine various Metrics, and save effort in recreating them.\n\n## Performance Metrics Report\n\n### public abstract void LayoutMetricsReport(IMetricsReportHost reportHost)\nWL8 calls this method when compiling a performance metrics report (e.g., in the Metrics Report Performance Visualizer). Override this method to compose the report using the `IMetricsReportHost` methods.\n\nExample from the Basic ScoreCard:\n"
    }
  },
  {
    "pageContent": "in the Preferences dialog > Metric Columns tab. This allows you to build derivative Metrics, combine various Metrics, and save effort in recreating them.\n\n## Performance Metrics Report\n\n### public abstract void LayoutMetricsReport(IMetricsReportHost reportHost)\nWL8 calls this method when compiling a performance metrics report (e.g., in the Metrics Report Performance Visualizer). Override this method to compose the report using the `IMetricsReportHost` methods.\n\nExample from the Basic ScoreCard:\n\n\n```csharp\nreportHost.AddHeader(\"Summary\");\nreportHost.AddMetricDouble(\"Profit\", true, false);\nreportHost.AddMetricDouble(\"ProfitPct\", true, true);\nreportHost.AddMetricDouble(\"ProfitPerBar\", true, false);\nreportHost.AddMetricDouble(\"APR\", true, true, 2, \"APR\");\nreportHost.AddMetricDouble(\"Exposure\", false, true);\nreportHost.AddMetricDouble(\"Alpha\", false, false, 2, \"Alpha (α)\");\nreportHost.AddMetricDouble(\"Beta\", false, false, 2, \"Beta (β)\");\nreportHost.AddMetricDouble(\"SharpeRatio\", false, false);\nreportHost.AddMetricDouble(\"SortinoRatio\", false, false);\nreportHost.AddMetricDouble(\"WLScore\", false, false, 2, \"WL Score\");\nreportHost.AddSeparator();\n\n```",
    "metadata": {
      "id": "scorecard",
      "title": "scorecard",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/scorecard.md",
      "chunkIndex": "code-context-2",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "# SettingsManager Class\n\n**Namespace:** WealthLab.Core  \n**Parent:** Object\n\nThe `SettingsManager` class provides a robust, thread-safe mechanism for managing application settings across various data types, with built-in automatic file persistence and optional encryption.\n\n## Constructors\n\n### SettingsManager\n",
    "metadata": {
      "id": "settings-manager",
      "title": "settings-manager",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/settings-manager.md",
      "chunkIndex": 0,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nCreates a new `SettingsManager` instance with specified file storage and optional encryption.\n\n**Parameters:**\n- `fileName`: Path to the file where settings will be stored\n- `encrypt`: Optional flag to enable encryption (default: `false`)\n\n**Best Practice Example:**\n",
    "metadata": {
      "id": "settings-manager",
      "title": "settings-manager",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/settings-manager.md",
      "chunkIndex": 1,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n## Data Access Methods\n\n### Get Methods\nRetrieve settings values with type-specific overloads:\n\n",
    "metadata": {
      "id": "settings-manager",
      "title": "settings-manager",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/settings-manager.md",
      "chunkIndex": 2,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n**Supported Types:**\n- `string`\n- `bool`\n- `int`\n- `double`\n- `DateTime`\n- `WLColor`\n\n**Usage Example:**\n",
    "metadata": {
      "id": "settings-manager",
      "title": "settings-manager",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/settings-manager.md",
      "chunkIndex": 3,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n### Set Methods\nStore settings values with type-specific overloads:\n\n",
    "metadata": {
      "id": "settings-manager",
      "title": "settings-manager",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/settings-manager.md",
      "chunkIndex": 4,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n**Usage Example:**\n",
    "metadata": {
      "id": "settings-manager",
      "title": "settings-manager",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/settings-manager.md",
      "chunkIndex": 5,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n## Properties\n\n### FileName\n",
    "metadata": {
      "id": "settings-manager",
      "title": "settings-manager",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/settings-manager.md",
      "chunkIndex": 6,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nReturns the full path of the file where settings are stored.\n\n### FullDictionary\n",
    "metadata": {
      "id": "settings-manager",
      "title": "settings-manager",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/settings-manager.md",
      "chunkIndex": 7,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nProvides direct access to the underlying settings dictionary.\n\n### IsEncrypted\n",
    "metadata": {
      "id": "settings-manager",
      "title": "settings-manager",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/settings-manager.md",
      "chunkIndex": 8,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nIndicates whether the settings are encrypted when saved to disk.\n\n### SaveThrottleSeconds\n",
    "metadata": {
      "id": "settings-manager",
      "title": "settings-manager",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/settings-manager.md",
      "chunkIndex": 9,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\nControls the minimum time between disk writes (default: 1 second).\n\n**Usage Example:**\n",
    "metadata": {
      "id": "settings-manager",
      "title": "settings-manager",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/settings-manager.md",
      "chunkIndex": 10,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n## Advanced Usage Patterns\n\n### Configuration Management\n",
    "metadata": {
      "id": "settings-manager",
      "title": "settings-manager",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/settings-manager.md",
      "chunkIndex": 11,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n### Secure Settings Storage\n",
    "metadata": {
      "id": "settings-manager",
      "title": "settings-manager",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/settings-manager.md",
      "chunkIndex": 12,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n## Best Practices\n\n1. **Encryption**\n   - Use encryption for sensitive settings\n   - Store sensitive data like API keys securely\n   - Be cautious with encryption key management\n\n2. **Performance**\n   - Adjust `SaveThrottleSeconds` based on update frequency\n   - Minimize frequent updates\n   - Use batch updates when possible\n\n3. **Type Safety**\n   - Always provide default values\n   - Handle potential type conversion issues\n   - Validate settings before use\n\n4. **Thread Safety**\n   - `SettingsManager` is thread-safe\n   - Can be used in multi-threaded environments\n   - No additional synchronization required\n\n## Notes\n\n- Automatic file persistence\n- Thread-safe implementation\n- Supports multiple data types\n- Built-in encryption option\n- Lightweight and easy to use\n\n## Requirements\n\n- .NET Framework understanding\n- Basic knowledge of file I/O\n- Familiarity with dictionary and key-value storage concepts\n\n## Cleanup\n\nWealthLab 8 automatically calls the static `CleanUp` method during application shutdown, ensuring any pending saves are written to disk. ",
    "metadata": {
      "id": "settings-manager",
      "title": "settings-manager",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/settings-manager.md",
      "chunkIndex": 13,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "public SettingsManager(string fileName, bool encrypt = false)\n",
    "metadata": {
      "id": "settings-manager",
      "title": "settings-manager",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/settings-manager.md",
      "chunkIndex": "code-0",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "# SettingsManager Class\n\n**Namespace:** WealthLab.Core  \n**Parent:** Object\n\nThe `SettingsManager` class provides a robust, thread-safe mechanism for managing application settings across various data types, with built-in automatic file persistence and optional encryption.\n\n## Constructors\n\n### SettingsManager\n"
    }
  },
  {
    "pageContent": "# SettingsManager Class\n\n**Namespace:** WealthLab.Core  \n**Parent:** Object\n\nThe `SettingsManager` class provides a robust, thread-safe mechanism for managing application settings across various data types, with built-in automatic file persistence and optional encryption.\n\n## Constructors\n\n### SettingsManager\n\n\n```csharp\npublic SettingsManager(string fileName, bool encrypt = false)\n\n```",
    "metadata": {
      "id": "settings-manager",
      "title": "settings-manager",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/settings-manager.md",
      "chunkIndex": "code-context-0",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "// Using WLHost to get appropriate data folder\nstring settingsPath = WLHost.Instance.DataFolder + \"\\\\MyAppSettings.xml\";\nvar settingsManager = new SettingsManager(settingsPath, encrypt: true);\n",
    "metadata": {
      "id": "settings-manager",
      "title": "settings-manager",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/settings-manager.md",
      "chunkIndex": "code-1",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ging application settings across various data types, with built-in automatic file persistence and optional encryption.\n\n## Constructors\n\n### SettingsManager\n```csharp\npublic SettingsManager(string fileName, bool encrypt = false)\n```\nCreates a new `SettingsManager` instance with specified file storage and optional encryption.\n\n**Parameters:**\n- `fileName`: Path to the file where settings will be stored\n- `encrypt`: Optional flag to enable encryption (default: `false`)\n\n**Best Practice Example:**\n"
    }
  },
  {
    "pageContent": "ging application settings across various data types, with built-in automatic file persistence and optional encryption.\n\n## Constructors\n\n### SettingsManager\n```csharp\npublic SettingsManager(string fileName, bool encrypt = false)\n```\nCreates a new `SettingsManager` instance with specified file storage and optional encryption.\n\n**Parameters:**\n- `fileName`: Path to the file where settings will be stored\n- `encrypt`: Optional flag to enable encryption (default: `false`)\n\n**Best Practice Example:**\n\n\n```csharp\n// Using WLHost to get appropriate data folder\nstring settingsPath = WLHost.Instance.DataFolder + \"\\\\MyAppSettings.xml\";\nvar settingsManager = new SettingsManager(settingsPath, encrypt: true);\n\n```",
    "metadata": {
      "id": "settings-manager",
      "title": "settings-manager",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/settings-manager.md",
      "chunkIndex": "code-context-1",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public string Get(string key, string defaultValue)\npublic bool Get(string key, bool defaultValue)\npublic int Get(string key, int defaultValue)\npublic double Get(string key, double defaultValue)\npublic DateTime Get(string key, DateTime defaultValue)\npublic WLColor Get(string key, WLColor value)\n",
    "metadata": {
      "id": "settings-manager",
      "title": "settings-manager",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/settings-manager.md",
      "chunkIndex": "code-2",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "d optional encryption.\n\n**Parameters:**\n- `fileName`: Path to the file where settings will be stored\n- `encrypt`: Optional flag to enable encryption (default: `false`)\n\n**Best Practice Example:**\n```csharp\n// Using WLHost to get appropriate data folder\nstring settingsPath = WLHost.Instance.DataFolder + \"\\\\MyAppSettings.xml\";\nvar settingsManager = new SettingsManager(settingsPath, encrypt: true);\n```\n\n## Data Access Methods\n\n### Get Methods\nRetrieve settings values with type-specific overloads:\n\n"
    }
  },
  {
    "pageContent": "d optional encryption.\n\n**Parameters:**\n- `fileName`: Path to the file where settings will be stored\n- `encrypt`: Optional flag to enable encryption (default: `false`)\n\n**Best Practice Example:**\n```csharp\n// Using WLHost to get appropriate data folder\nstring settingsPath = WLHost.Instance.DataFolder + \"\\\\MyAppSettings.xml\";\nvar settingsManager = new SettingsManager(settingsPath, encrypt: true);\n```\n\n## Data Access Methods\n\n### Get Methods\nRetrieve settings values with type-specific overloads:\n\n\n\n```csharp\npublic string Get(string key, string defaultValue)\npublic bool Get(string key, bool defaultValue)\npublic int Get(string key, int defaultValue)\npublic double Get(string key, double defaultValue)\npublic DateTime Get(string key, DateTime defaultValue)\npublic WLColor Get(string key, WLColor value)\n\n```",
    "metadata": {
      "id": "settings-manager",
      "title": "settings-manager",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/settings-manager.md",
      "chunkIndex": "code-context-2",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "// Retrieve settings with default values\nstring username = settingsManager.Get(\"Username\", \"DefaultUser\");\nint maxItems = settingsManager.Get(\"MaxItems\", 10);\nbool darkMode = settingsManager.Get(\"DarkMode\", false);\n",
    "metadata": {
      "id": "settings-manager",
      "title": "settings-manager",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/settings-manager.md",
      "chunkIndex": "code-3",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ess Methods\n\n### Get Methods\nRetrieve settings values with type-specific overloads:\n\n```csharp\npublic string Get(string key, string defaultValue)\npublic bool Get(string key, bool defaultValue)\npublic int Get(string key, int defaultValue)\npublic double Get(string key, double defaultValue)\npublic DateTime Get(string key, DateTime defaultValue)\npublic WLColor Get(string key, WLColor value)\n```\n\n**Supported Types:**\n- `string`\n- `bool`\n- `int`\n- `double`\n- `DateTime`\n- `WLColor`\n\n**Usage Example:**\n"
    }
  },
  {
    "pageContent": "ess Methods\n\n### Get Methods\nRetrieve settings values with type-specific overloads:\n\n```csharp\npublic string Get(string key, string defaultValue)\npublic bool Get(string key, bool defaultValue)\npublic int Get(string key, int defaultValue)\npublic double Get(string key, double defaultValue)\npublic DateTime Get(string key, DateTime defaultValue)\npublic WLColor Get(string key, WLColor value)\n```\n\n**Supported Types:**\n- `string`\n- `bool`\n- `int`\n- `double`\n- `DateTime`\n- `WLColor`\n\n**Usage Example:**\n\n\n```csharp\n// Retrieve settings with default values\nstring username = settingsManager.Get(\"Username\", \"DefaultUser\");\nint maxItems = settingsManager.Get(\"MaxItems\", 10);\nbool darkMode = settingsManager.Get(\"DarkMode\", false);\n\n```",
    "metadata": {
      "id": "settings-manager",
      "title": "settings-manager",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/settings-manager.md",
      "chunkIndex": "code-context-3",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public void Set(string key, string value)\npublic void Set(string key, bool value)\npublic void Set(string key, int value)\npublic void Set(string key, double value)\npublic void Set(string key, DateTime value)\npublic void Set(string key, WLColor value)\n",
    "metadata": {
      "id": "settings-manager",
      "title": "settings-manager",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/settings-manager.md",
      "chunkIndex": "code-4",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "eTime Get(string key, DateTime defaultValue)\npublic WLColor Get(string key, WLColor value)\n```\n\n**Supported Types:**\n- `string`\n- `bool`\n- `int`\n- `double`\n- `DateTime`\n- `WLColor`\n\n**Usage Example:**\n```csharp\n// Retrieve settings with default values\nstring username = settingsManager.Get(\"Username\", \"DefaultUser\");\nint maxItems = settingsManager.Get(\"MaxItems\", 10);\nbool darkMode = settingsManager.Get(\"DarkMode\", false);\n```\n\n### Set Methods\nStore settings values with type-specific overloads:\n\n"
    }
  },
  {
    "pageContent": "eTime Get(string key, DateTime defaultValue)\npublic WLColor Get(string key, WLColor value)\n```\n\n**Supported Types:**\n- `string`\n- `bool`\n- `int`\n- `double`\n- `DateTime`\n- `WLColor`\n\n**Usage Example:**\n```csharp\n// Retrieve settings with default values\nstring username = settingsManager.Get(\"Username\", \"DefaultUser\");\nint maxItems = settingsManager.Get(\"MaxItems\", 10);\nbool darkMode = settingsManager.Get(\"DarkMode\", false);\n```\n\n### Set Methods\nStore settings values with type-specific overloads:\n\n\n\n```csharp\npublic void Set(string key, string value)\npublic void Set(string key, bool value)\npublic void Set(string key, int value)\npublic void Set(string key, double value)\npublic void Set(string key, DateTime value)\npublic void Set(string key, WLColor value)\n\n```",
    "metadata": {
      "id": "settings-manager",
      "title": "settings-manager",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/settings-manager.md",
      "chunkIndex": "code-context-4",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "// Store various types of settings\nsettingsManager.Set(\"Username\", \"JohnDoe\");\nsettingsManager.Set(\"MaxItems\", 25);\nsettingsManager.Set(\"DarkMode\", true);\nsettingsManager.Set(\"LastLoginDate\", DateTime.Now);\n",
    "metadata": {
      "id": "settings-manager",
      "title": "settings-manager",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/settings-manager.md",
      "chunkIndex": "code-5",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "r.Get(\"Username\", \"DefaultUser\");\nint maxItems = settingsManager.Get(\"MaxItems\", 10);\nbool darkMode = settingsManager.Get(\"DarkMode\", false);\n```\n\n### Set Methods\nStore settings values with type-specific overloads:\n\n```csharp\npublic void Set(string key, string value)\npublic void Set(string key, bool value)\npublic void Set(string key, int value)\npublic void Set(string key, double value)\npublic void Set(string key, DateTime value)\npublic void Set(string key, WLColor value)\n```\n\n**Usage Example:**\n"
    }
  },
  {
    "pageContent": "r.Get(\"Username\", \"DefaultUser\");\nint maxItems = settingsManager.Get(\"MaxItems\", 10);\nbool darkMode = settingsManager.Get(\"DarkMode\", false);\n```\n\n### Set Methods\nStore settings values with type-specific overloads:\n\n```csharp\npublic void Set(string key, string value)\npublic void Set(string key, bool value)\npublic void Set(string key, int value)\npublic void Set(string key, double value)\npublic void Set(string key, DateTime value)\npublic void Set(string key, WLColor value)\n```\n\n**Usage Example:**\n\n\n```csharp\n// Store various types of settings\nsettingsManager.Set(\"Username\", \"JohnDoe\");\nsettingsManager.Set(\"MaxItems\", 25);\nsettingsManager.Set(\"DarkMode\", true);\nsettingsManager.Set(\"LastLoginDate\", DateTime.Now);\n\n```",
    "metadata": {
      "id": "settings-manager",
      "title": "settings-manager",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/settings-manager.md",
      "chunkIndex": "code-context-5",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public string FileName\n",
    "metadata": {
      "id": "settings-manager",
      "title": "settings-manager",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/settings-manager.md",
      "chunkIndex": "code-6",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ey, string value)\npublic void Set(string key, bool value)\npublic void Set(string key, int value)\npublic void Set(string key, double value)\npublic void Set(string key, DateTime value)\npublic void Set(string key, WLColor value)\n```\n\n**Usage Example:**\n```csharp\n// Store various types of settings\nsettingsManager.Set(\"Username\", \"JohnDoe\");\nsettingsManager.Set(\"MaxItems\", 25);\nsettingsManager.Set(\"DarkMode\", true);\nsettingsManager.Set(\"LastLoginDate\", DateTime.Now);\n```\n\n## Properties\n\n### FileName\n"
    }
  },
  {
    "pageContent": "ey, string value)\npublic void Set(string key, bool value)\npublic void Set(string key, int value)\npublic void Set(string key, double value)\npublic void Set(string key, DateTime value)\npublic void Set(string key, WLColor value)\n```\n\n**Usage Example:**\n```csharp\n// Store various types of settings\nsettingsManager.Set(\"Username\", \"JohnDoe\");\nsettingsManager.Set(\"MaxItems\", 25);\nsettingsManager.Set(\"DarkMode\", true);\nsettingsManager.Set(\"LastLoginDate\", DateTime.Now);\n```\n\n## Properties\n\n### FileName\n\n\n```csharp\npublic string FileName\n\n```",
    "metadata": {
      "id": "settings-manager",
      "title": "settings-manager",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/settings-manager.md",
      "chunkIndex": "code-context-6",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public Dictionary<string, string> FullDictionary\n",
    "metadata": {
      "id": "settings-manager",
      "title": "settings-manager",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/settings-manager.md",
      "chunkIndex": "code-7",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "g key, double value)\npublic void Set(string key, DateTime value)\npublic void Set(string key, WLColor value)\n```\n\n**Usage Example:**\n```csharp\n// Store various types of settings\nsettingsManager.Set(\"Username\", \"JohnDoe\");\nsettingsManager.Set(\"MaxItems\", 25);\nsettingsManager.Set(\"DarkMode\", true);\nsettingsManager.Set(\"LastLoginDate\", DateTime.Now);\n```\n\n## Properties\n\n### FileName\n```csharp\npublic string FileName\n```\nReturns the full path of the file where settings are stored.\n\n### FullDictionary\n"
    }
  },
  {
    "pageContent": "g key, double value)\npublic void Set(string key, DateTime value)\npublic void Set(string key, WLColor value)\n```\n\n**Usage Example:**\n```csharp\n// Store various types of settings\nsettingsManager.Set(\"Username\", \"JohnDoe\");\nsettingsManager.Set(\"MaxItems\", 25);\nsettingsManager.Set(\"DarkMode\", true);\nsettingsManager.Set(\"LastLoginDate\", DateTime.Now);\n```\n\n## Properties\n\n### FileName\n```csharp\npublic string FileName\n```\nReturns the full path of the file where settings are stored.\n\n### FullDictionary\n\n\n```csharp\npublic Dictionary<string, string> FullDictionary\n\n```",
    "metadata": {
      "id": "settings-manager",
      "title": "settings-manager",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/settings-manager.md",
      "chunkIndex": "code-context-7",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public bool IsEncrypted\n",
    "metadata": {
      "id": "settings-manager",
      "title": "settings-manager",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/settings-manager.md",
      "chunkIndex": "code-8",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "// Store various types of settings\nsettingsManager.Set(\"Username\", \"JohnDoe\");\nsettingsManager.Set(\"MaxItems\", 25);\nsettingsManager.Set(\"DarkMode\", true);\nsettingsManager.Set(\"LastLoginDate\", DateTime.Now);\n```\n\n## Properties\n\n### FileName\n```csharp\npublic string FileName\n```\nReturns the full path of the file where settings are stored.\n\n### FullDictionary\n```csharp\npublic Dictionary<string, string> FullDictionary\n```\nProvides direct access to the underlying settings dictionary.\n\n### IsEncrypted\n"
    }
  },
  {
    "pageContent": "// Store various types of settings\nsettingsManager.Set(\"Username\", \"JohnDoe\");\nsettingsManager.Set(\"MaxItems\", 25);\nsettingsManager.Set(\"DarkMode\", true);\nsettingsManager.Set(\"LastLoginDate\", DateTime.Now);\n```\n\n## Properties\n\n### FileName\n```csharp\npublic string FileName\n```\nReturns the full path of the file where settings are stored.\n\n### FullDictionary\n```csharp\npublic Dictionary<string, string> FullDictionary\n```\nProvides direct access to the underlying settings dictionary.\n\n### IsEncrypted\n\n\n```csharp\npublic bool IsEncrypted\n\n```",
    "metadata": {
      "id": "settings-manager",
      "title": "settings-manager",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/settings-manager.md",
      "chunkIndex": "code-context-8",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public int SaveThrottleSeconds\n",
    "metadata": {
      "id": "settings-manager",
      "title": "settings-manager",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/settings-manager.md",
      "chunkIndex": "code-9",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ger.Set(\"DarkMode\", true);\nsettingsManager.Set(\"LastLoginDate\", DateTime.Now);\n```\n\n## Properties\n\n### FileName\n```csharp\npublic string FileName\n```\nReturns the full path of the file where settings are stored.\n\n### FullDictionary\n```csharp\npublic Dictionary<string, string> FullDictionary\n```\nProvides direct access to the underlying settings dictionary.\n\n### IsEncrypted\n```csharp\npublic bool IsEncrypted\n```\nIndicates whether the settings are encrypted when saved to disk.\n\n### SaveThrottleSeconds\n"
    }
  },
  {
    "pageContent": "ger.Set(\"DarkMode\", true);\nsettingsManager.Set(\"LastLoginDate\", DateTime.Now);\n```\n\n## Properties\n\n### FileName\n```csharp\npublic string FileName\n```\nReturns the full path of the file where settings are stored.\n\n### FullDictionary\n```csharp\npublic Dictionary<string, string> FullDictionary\n```\nProvides direct access to the underlying settings dictionary.\n\n### IsEncrypted\n```csharp\npublic bool IsEncrypted\n```\nIndicates whether the settings are encrypted when saved to disk.\n\n### SaveThrottleSeconds\n\n\n```csharp\npublic int SaveThrottleSeconds\n\n```",
    "metadata": {
      "id": "settings-manager",
      "title": "settings-manager",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/settings-manager.md",
      "chunkIndex": "code-context-9",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "// Customize save throttling\nsettingsManager.SaveThrottleSeconds = 5; // Wait 5 seconds between saves\n",
    "metadata": {
      "id": "settings-manager",
      "title": "settings-manager",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/settings-manager.md",
      "chunkIndex": "code-10",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ing FileName\n```\nReturns the full path of the file where settings are stored.\n\n### FullDictionary\n```csharp\npublic Dictionary<string, string> FullDictionary\n```\nProvides direct access to the underlying settings dictionary.\n\n### IsEncrypted\n```csharp\npublic bool IsEncrypted\n```\nIndicates whether the settings are encrypted when saved to disk.\n\n### SaveThrottleSeconds\n```csharp\npublic int SaveThrottleSeconds\n```\nControls the minimum time between disk writes (default: 1 second).\n\n**Usage Example:**\n"
    }
  },
  {
    "pageContent": "ing FileName\n```\nReturns the full path of the file where settings are stored.\n\n### FullDictionary\n```csharp\npublic Dictionary<string, string> FullDictionary\n```\nProvides direct access to the underlying settings dictionary.\n\n### IsEncrypted\n```csharp\npublic bool IsEncrypted\n```\nIndicates whether the settings are encrypted when saved to disk.\n\n### SaveThrottleSeconds\n```csharp\npublic int SaveThrottleSeconds\n```\nControls the minimum time between disk writes (default: 1 second).\n\n**Usage Example:**\n\n\n```csharp\n// Customize save throttling\nsettingsManager.SaveThrottleSeconds = 5; // Wait 5 seconds between saves\n\n```",
    "metadata": {
      "id": "settings-manager",
      "title": "settings-manager",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/settings-manager.md",
      "chunkIndex": "code-context-10",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public class AppConfigManager\n{\n    private SettingsManager _settings;\n\n    public AppConfigManager()\n    {\n        string configPath = WLHost.Instance.DataFolder + \"\\\\AppConfig.xml\";\n        _settings = new SettingsManager(configPath, encrypt: true);\n    }\n\n    public void SaveUserPreferences(UserPreferences prefs)\n    {\n        _settings.Set(\"Theme\", prefs.Theme);\n        _settings.Set(\"Language\", prefs.Language);\n        _settings.Set(\"NotificationsEnabled\", prefs.NotificationsEnabled);\n    }\n\n    public UserPreferences LoadUserPreferences()\n    {\n        return new UserPreferences\n        {\n            Theme = _settings.Get(\"Theme\", \"Light\"),\n            Language = _settings.Get(\"Language\", \"English\"),\n            NotificationsEnabled = _settings.Get(\"NotificationsEnabled\", true)\n        };\n    }\n}\n",
    "metadata": {
      "id": "settings-manager",
      "title": "settings-manager",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/settings-manager.md",
      "chunkIndex": "code-11",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ct access to the underlying settings dictionary.\n\n### IsEncrypted\n```csharp\npublic bool IsEncrypted\n```\nIndicates whether the settings are encrypted when saved to disk.\n\n### SaveThrottleSeconds\n```csharp\npublic int SaveThrottleSeconds\n```\nControls the minimum time between disk writes (default: 1 second).\n\n**Usage Example:**\n```csharp\n// Customize save throttling\nsettingsManager.SaveThrottleSeconds = 5; // Wait 5 seconds between saves\n```\n\n## Advanced Usage Patterns\n\n### Configuration Management\n"
    }
  },
  {
    "pageContent": "ct access to the underlying settings dictionary.\n\n### IsEncrypted\n```csharp\npublic bool IsEncrypted\n```\nIndicates whether the settings are encrypted when saved to disk.\n\n### SaveThrottleSeconds\n```csharp\npublic int SaveThrottleSeconds\n```\nControls the minimum time between disk writes (default: 1 second).\n\n**Usage Example:**\n```csharp\n// Customize save throttling\nsettingsManager.SaveThrottleSeconds = 5; // Wait 5 seconds between saves\n```\n\n## Advanced Usage Patterns\n\n### Configuration Management\n\n\n```csharp\npublic class AppConfigManager\n{\n    private SettingsManager _settings;\n\n    public AppConfigManager()\n    {\n        string configPath = WLHost.Instance.DataFolder + \"\\\\AppConfig.xml\";\n        _settings = new SettingsManager(configPath, encrypt: true);\n    }\n\n    public void SaveUserPreferences(UserPreferences prefs)\n    {\n        _settings.Set(\"Theme\", prefs.Theme);\n        _settings.Set(\"Language\", prefs.Language);\n        _settings.Set(\"NotificationsEnabled\", prefs.NotificationsEnabled);\n    }\n\n    public UserPreferences LoadUserPreferences()\n    {\n        return new UserPreferences\n        {\n            Theme = _settings.Get(\"Theme\", \"Light\"),\n            Language = _settings.Get(\"Language\", \"English\"),\n            NotificationsEnabled = _settings.Get(\"NotificationsEnabled\", true)\n        };\n    }\n}\n\n```",
    "metadata": {
      "id": "settings-manager",
      "title": "settings-manager",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/settings-manager.md",
      "chunkIndex": "code-context-11",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public class SecureSettingsExample\n{\n    private SettingsManager _secureSettings;\n\n    public SecureSettingsExample()\n    {\n        // Enable encryption for sensitive data\n        string sensitiveConfigPath = WLHost.Instance.DataFolder + \"\\\\SecureConfig.xml\";\n        _secureSettings = new SettingsManager(sensitiveConfigPath, encrypt: true);\n    }\n\n    public void StoreApiCredentials(string apiKey, string apiSecret)\n    {\n        _secureSettings.Set(\"APIKey\", apiKey);\n        _secureSettings.Set(\"APISecret\", apiSecret);\n    }\n}\n",
    "metadata": {
      "id": "settings-manager",
      "title": "settings-manager",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/settings-manager.md",
      "chunkIndex": "code-12",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "Theme\", prefs.Theme);\n        _settings.Set(\"Language\", prefs.Language);\n        _settings.Set(\"NotificationsEnabled\", prefs.NotificationsEnabled);\n    }\n\n    public UserPreferences LoadUserPreferences()\n    {\n        return new UserPreferences\n        {\n            Theme = _settings.Get(\"Theme\", \"Light\"),\n            Language = _settings.Get(\"Language\", \"English\"),\n            NotificationsEnabled = _settings.Get(\"NotificationsEnabled\", true)\n        };\n    }\n}\n```\n\n### Secure Settings Storage\n"
    }
  },
  {
    "pageContent": "Theme\", prefs.Theme);\n        _settings.Set(\"Language\", prefs.Language);\n        _settings.Set(\"NotificationsEnabled\", prefs.NotificationsEnabled);\n    }\n\n    public UserPreferences LoadUserPreferences()\n    {\n        return new UserPreferences\n        {\n            Theme = _settings.Get(\"Theme\", \"Light\"),\n            Language = _settings.Get(\"Language\", \"English\"),\n            NotificationsEnabled = _settings.Get(\"NotificationsEnabled\", true)\n        };\n    }\n}\n```\n\n### Secure Settings Storage\n\n\n```csharp\npublic class SecureSettingsExample\n{\n    private SettingsManager _secureSettings;\n\n    public SecureSettingsExample()\n    {\n        // Enable encryption for sensitive data\n        string sensitiveConfigPath = WLHost.Instance.DataFolder + \"\\\\SecureConfig.xml\";\n        _secureSettings = new SettingsManager(sensitiveConfigPath, encrypt: true);\n    }\n\n    public void StoreApiCredentials(string apiKey, string apiSecret)\n    {\n        _secureSettings.Set(\"APIKey\", apiKey);\n        _secureSettings.Set(\"APISecret\", apiSecret);\n    }\n}\n\n```",
    "metadata": {
      "id": "settings-manager",
      "title": "settings-manager",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/settings-manager.md",
      "chunkIndex": "code-context-12",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "# Signal Publishing Service API\n\nThis document details the API for building Signal Publishing Service extensions for Wealth-Lab 8. These extensions represent remote services that can be selected in the WL8 Signals Publisher tool. You can publish trading Signals to a publishing service by linking a WL8 Strategy to a Remote Strategy that's defined on the service.\n\n## Build Environment\n\nYou can create a Signal Publishing Service in a .NET development tool such as Visual Studio 2022. Create a class library project that targets .NET8, then reference the WealthLab.Core library DLL that you'll find in the WL8 installation folder.\n\n> **Note:** If you are using Visual Studio 2022, it will need to be updated to at least version 17.8.6 to use .NET8.\n\nYour Signal Publishing Service will be a class in this library that descends from `SignalPublishingServiceBase`, which is defined in the WealthLab.Core library, in the `WealthLab.Core` namespace. After you implement and build your library, simply copy the resulting assembly DLL into the WL8 installation folder. The next time WL8 starts up, it will discover your Signal Publishing Service, making it available in appropriate locations of the WL8 user interface.\n\n## Accessing the Host (WL8) Environment\n\nThe `IHost` interface allows your extension to access information about the user's WealthLab environment. For example, the location of the user data folder, or obtaining a list of DataSets defined by the user. At any point in your extension's code base, you can access an instance of the `IHost` interface using the singleton class `WLHost` and its `Instance` property. Example:\n\n",
    "metadata": {
      "id": "signal-publishing-service",
      "title": "signal-publishing-service",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/signal-publishing-service.md",
      "chunkIndex": 0,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n## Descriptive Properties\n\nThe `Configurable` class, which `SignalPublishingServiceBase` descends from, provides descriptive properties that control how your Signals Publishing Service appears in WL8. The most important ones to override are:\n- `Name`\n- `GlyphResource`\n- `Description`\n- `URL`\n\n### public virtual string ManageSignalsURL(RemoteStrategyInfo rsi)\nOverride this method to return a URL on the remote publishing service that will allow the user to manage the signals on-site for the indicated Remote Strategy.\n\n## Login Credentials\n\n### public virtual bool RequiresLogin\nIndicates that the Signal Publishing Service requires a login and returns true by default. When true, causes User Name and Password inputs to become enabled in the Linked Strategy configuration dialog.\n\n### public string UserName\nAccesses the User Name that the user entered when creating a Linked Strategy.\n\n### public string Password\nAccesses the Password that the user entered when creating a Linked Strategy.\n\n### public virtual string CheckLogin()\nOverride this method to perform an authentication check with the remote publishing service using the `UserName` and `Password`. If the login was successful, return null, otherwise return an appropriate error message.\n\n## Getting Remote Strategies\n\nRemote Strategies are the Signal Publishing Service API's way of referring to the publishable \"slots\" that a remote publishing service offers. A service might provide:\n- Only a single slot (like Wealth$im on WealthLab.com)\n- Multiple user-created slots (like WealthSignals)\n\nEach slot is represented as an instance of the `RemoteStrategyInfo` class with these properties:\n- `RemoteStrategyName`: The Remote Strategy name as it appears on the service\n- `RemoteStrategyID`: A string representation of the Remote Strategy's unique ID\n- `Tag`: An object that you can assign implementation-specific details\n\n### public abstract List<RemoteStrategyInfo> GetPublishedStrategies()\nOverride this method to return a list of `RemoteStrategyInfo` instances that represent the available publishing slots.\n\n> **Note:** When WL8 loads persisted Signals Publisher data on startup, the Tag values will not be available. If they are required, you'll need to re-assign them as needed if they are null.\n\n### public virtual bool AllowMultipleLinks\nReturn a bool indicating whether the Publishing Service should allow multiple WL8 Strategies to link to the same Remote Strategy. Examples:\n- WealthSignals returns false (each Strategy links to only one WL8 Strategy)\n- WealthSim returns true (multiple WL8 Strategies can link to a single account)\n\n## Getting Current Equity and Positions\n\n### public abstract (double, double) GetEquityAndCash(RemoteStrategyInfo rsi)\nOverride this method to return the current account equity and cash values from the publishing service, for the indicated Remote Strategy.\n\n### public abstract List<PositionPayload> GetOpenPositions(RemoteStrategyInfo rsi)\nOverride this method to return a list of open positions that are held at the publishing service, for the indicated Remote Strategy. The `PositionPayload` lightweight class contains:\n- `PositionType` (Long or Short)\n- `Symbol`\n- `Quantity` (double)\n- `EntryDate`\n\n## Publishing Signals\n\n### public virtual bool CanPublishSignals\nReturn a boolean value indicating if Signal publishing is currently allowed. The default implementation returns true if the US stock market is currently closed.\n\n### public abstract OrderSubmissionPayload SubmitSignals(RemoteStrategyInfo rsi, List<OrderPayload> signals)\nOverride this method to publish a list of Signals to the publishing service, for the indicated Remote Strategy. \n\nThe signals are represented by a List of `OrderPayload` instances with these properties:\n- `TransactionType` (Buy, Sell, Short, Cover)\n- `Quantity` (double)\n- `Symbol`\n- `OrderType` (Market, Limit, Stop)\n- `OrderPrice` (double)\n- `Weight` (double) - transaction weight, higher values = higher priority\n\nThe method returns an `OrderSubmissionPayload` instance with these properties:\n- `OrdersSubmitted` (int) - count of successfully published Signals\n- `InfoMsg`\n- `ErrorMsg` - assigning a value indicates an error\n\n## Publishing Backtest Results\n\n### public virtual bool CanPublishBacktestData(RemoteStrategyInfo rsi)\nSome signal publishing services (notably WealthSignals) allow you to publish Strategy backtest results. Override this property to return true if the facility is available for the specified Remote Strategy.\n\n### public virtual void PublishBacktestData(RemoteStrategyInfo rsi, Backtester bt)\nOverride this method to implement the actual publishing of backtest data for the specified Remote Strategy. The `Backtester` instance contains:\n- All available backtest performance metrics\n- An `EquityCurve` TimeSeries\n- A dynamic `Metrics` property for accessing all ScoreCard metrics\n\n## Example Implementation\n\nBelow is a simplified example of a Signal Publishing Service:\n\n```csharp\npublic class SimplePublishingService : SignalPublishingServiceBase\n{\n    public override string Name => \"Simple Publisher\";\n    public override string Description => \"Basic signal publishing service example\";\n    \n    private readonly Dictionary<string, RemoteStrategyInfo> _strategies = new();\n    \n    public override List<RemoteStrategyInfo> GetPublishedStrategies()\n    {\n        // In a real implementation, fetch strategies from remote service\n        var strategies = new List<RemoteStrategyInfo>();\n        var rsi = new RemoteStrategyInfo\n        {\n            RemoteStrategyName = \"Demo Strategy\",\n            RemoteStrategyID = \"DEMO-001\",\n            Tag = new { ApiKey = \"demo-key\" }\n        };\n        _strategies[rsi.RemoteStrategyID] = rsi;\n        strategies.Add(rsi);\n        return strategies;\n    }\n    \n    public override (double, double) GetEquityAndCash(RemoteStrategyInfo rsi)\n    {\n        // Fetch current equity and cash from remote service\n        return (100000.0, 50000.0);  // Example values\n    }\n    \n    public override List<PositionPayload> GetOpenPositions(RemoteStrategyInfo rsi)\n    {\n        var positions = new List<PositionPayload>();\n        positions.Add(new PositionPayload\n        {\n            PositionType = PositionType.Long,\n            Symbol = \"AAPL\",\n            Quantity = 100,\n            EntryDate = DateTime.Now.AddDays(-5)\n        });\n        return positions;\n    }\n    \n    public override OrderSubmissionPayload SubmitSignals(\n        RemoteStrategyInfo rsi, \n        List<OrderPayload> signals)\n    {\n        var result = new OrderSubmissionPayload();\n        \n        try\n        {\n            // Submit signals to remote service\n            foreach (var signal in signals)\n            {\n                // Process signal\n                result.OrdersSubmitted++;\n            }\n            \n            result.InfoMsg = $\"Successfully submitted {result.OrdersSubmitted} signals\";\n        }\n        catch (Exception ex)\n        {\n            result.ErrorMsg = $\"Error submitting signals: {ex.Message}\";\n        }\n        \n        return result;\n    }\n    \n    public override string CheckLogin()\n    {\n        // Verify credentials with remote service\n        if (string.IsNullOrEmpty(UserName) || string.IsNullOrEmpty(Password))\n            return \"Username and password are required\";\n            \n        // Authenticate with service\n        return null;  // Return null for successful login\n    }\n    \n    public override bool CanPublishBacktestData(RemoteStrategyInfo rsi)\n    {\n        return true;  // This service supports backtest data publishing\n    }\n    \n    public override void PublishBacktestData(RemoteStrategyInfo rsi, Backtester bt)\n    {\n        // Upload backtest results to remote service\n        var equityCurve = bt.EquityCurve;\n        var metrics = bt.Metrics;\n        \n        // Process and upload data...\n    }\n} ",
    "metadata": {
      "id": "signal-publishing-service",
      "title": "signal-publishing-service",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/signal-publishing-service.md",
      "chunkIndex": 1,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "//get user data folder\nstring folder = WLHost.Instance.DataFolder;\n",
    "metadata": {
      "id": "signal-publishing-service",
      "title": "signal-publishing-service",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/signal-publishing-service.md",
      "chunkIndex": "code-0",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "vice, making it available in appropriate locations of the WL8 user interface.\n\n## Accessing the Host (WL8) Environment\n\nThe `IHost` interface allows your extension to access information about the user's WealthLab environment. For example, the location of the user data folder, or obtaining a list of DataSets defined by the user. At any point in your extension's code base, you can access an instance of the `IHost` interface using the singleton class `WLHost` and its `Instance` property. Example:\n\n"
    }
  },
  {
    "pageContent": "vice, making it available in appropriate locations of the WL8 user interface.\n\n## Accessing the Host (WL8) Environment\n\nThe `IHost` interface allows your extension to access information about the user's WealthLab environment. For example, the location of the user data folder, or obtaining a list of DataSets defined by the user. At any point in your extension's code base, you can access an instance of the `IHost` interface using the singleton class `WLHost` and its `Instance` property. Example:\n\n\n\n```csharp\n//get user data folder\nstring folder = WLHost.Instance.DataFolder;\n\n```",
    "metadata": {
      "id": "signal-publishing-service",
      "title": "signal-publishing-service",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/signal-publishing-service.md",
      "chunkIndex": "code-context-0",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "# Strategy Evolver Visualizer API\n\nThis document details the API for building Strategy Evolver Visualizer Extensions for Wealth-Lab 8. A Strategy Evolver Visualizer appears after you stop an evolution session of the Strategy Genetic Evolver tool. Each Visualizer adds a new tab to the Strategy Evolver window and portrays the results of the Evolver run in some distinct way.\n\n## Build Environment\n\nYou can create a Strategy Evolver Visualizer in a .NET development tool such as Visual Studio 2022. Create a class library project that targets .NET8, then reference the WealthLab.WPF library DLL that you'll find in the WL8 installation folder.\n\n> **Note:** If you are using Visual Studio 2022, it will need to be updated to at least version 17.8.6 to use .NET8.\n\nYour Strategy Evolver Visualizer will be a class in this library that descends from `StrategyEvolverVisualizerBase`, which is defined in the WealthLab.WPF library, in the `WealthLab.WPF` namespace. After you implement and build your library, simply copy the resulting assembly DLL into the WL8 installation folder. The next time WL8 starts up, it will discover your Strategy Evolver Visualizer, making it available in appropriate locations of the WL8 user interface.\n\n## ResultViewerBase\n\n`StrategyEvolverVisualizerBase` is derived from the `ResultViewerBase` base class, defined in WealthLab.WPF. `ResultViewerBase` is derived from the WPF `UserControl`. `ResultViewerBase` contains additional members useful for developing Visualizers, particularly:\n\n- `ViewerName` property - Controls text in Visualizer's tab\n- `GlyphResource` property - Controls image in Visualizer's tab\n\n## Creating the Files in Visual Studio\n\n1. Create a new UserControl in Visual Studio (generates boilerplate XAML and CS)\n2. Modify CS file:\n   - Change class to derive from `StrategyEvolverVisualizerBase`\n   - Add `WealthLab.WPF` to using clause\n3. Modify XAML file:\n   - Add XMLNS reference to WealthLab.WPF library\n   - Change base class from UserControl to StrategyEvolverVisualizerBase\n\nExample XAML structure:\n",
    "metadata": {
      "id": "strategy-evolver-visualizer",
      "title": "strategy-evolver-visualizer",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/strategy-evolver-visualizer.md",
      "chunkIndex": 0,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n## Accessing the Host (WL8) Environment\n\nThe `IHost` interface allows your extension to access information about the user's WealthLab environment. For example, the location of the user data folder, or obtaining a list of DataSets defined by the user. At any point in your extension's code base, you can access an instance of the `IHost` interface using the singleton class `WLHost` and its `Instance` property. Example:\n\n",
    "metadata": {
      "id": "strategy-evolver-visualizer",
      "title": "strategy-evolver-visualizer",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/strategy-evolver-visualizer.md",
      "chunkIndex": 1,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n## Accessing the Evolver Results\n\n### public StrategyEvolverResults Results\nThe `Results` property returns an instance of the `StrategyEvolverResults` class, which contains the complete results of the Strategy Evolver session. This includes:\n- The most recent run\n- Any completed Apex runs\n\n## Core Methods\n\n### public virtual void Initialize()\nOverride this method to perform one-time initialization for your Visualizer.\n\n### public virtual void Cleanup()\nOverride this method to perform any required cleanup for your Visualizer.\n\n### public virtual void Populate(StrategyEvolverResults results)\nOverride this method to render the Strategy Evolver results passed in the results parameter to your Visualizer.\n\n## Accessing Selected Metrics\n\n### public List<string> MetricNames\nReturns a List<string> containing the names of the performance metrics used during the Evolver session.\n\n## Accessing the Parent Evolver Window\n\n### public IStrategyEvolverHost Host\nReturns an instance of the `IStrategyEvolverHost` interface that provides a way to interact with the Strategy Evolver window hosting your Visualizer.\n\n## Example Implementation\n\nBelow is a simple example of a Strategy Evolver Visualizer that displays evolution metrics in a chart:\n\n",
    "metadata": {
      "id": "strategy-evolver-visualizer",
      "title": "strategy-evolver-visualizer",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/strategy-evolver-visualizer.md",
      "chunkIndex": 2,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\nThis example:\n1. Creates a chart visualization of evolution metrics\n2. Shows metric values across generations\n3. Properly handles initialization and cleanup\n4. Demonstrates interaction with the Evolver results\n5. Uses the WPF-based LiveCharts library for visualization ",
    "metadata": {
      "id": "strategy-evolver-visualizer",
      "title": "strategy-evolver-visualizer",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/strategy-evolver-visualizer.md",
      "chunkIndex": 3,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "<wl:StrategyEvolverVisualizerBase x:Class=\"YourNamespace.YourVisualizer\"\n    xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n    xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n    xmlns:wl=\"clr-namespace:WealthLab.WPF;assembly=WealthLab.WPF\">\n    <!-- Your XAML content here -->\n</wl:StrategyEvolverVisualizerBase>\n",
    "metadata": {
      "id": "strategy-evolver-visualizer",
      "title": "strategy-evolver-visualizer",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/strategy-evolver-visualizer.md",
      "chunkIndex": "code-0",
      "contentType": "code",
      "language": "xaml",
      "chunkType": "code_block",
      "context": "in Visualizer's tab\n- `GlyphResource` property - Controls image in Visualizer's tab\n\n## Creating the Files in Visual Studio\n\n1. Create a new UserControl in Visual Studio (generates boilerplate XAML and CS)\n2. Modify CS file:\n   - Change class to derive from `StrategyEvolverVisualizerBase`\n   - Add `WealthLab.WPF` to using clause\n3. Modify XAML file:\n   - Add XMLNS reference to WealthLab.WPF library\n   - Change base class from UserControl to StrategyEvolverVisualizerBase\n\nExample XAML structure:\n"
    }
  },
  {
    "pageContent": "in Visualizer's tab\n- `GlyphResource` property - Controls image in Visualizer's tab\n\n## Creating the Files in Visual Studio\n\n1. Create a new UserControl in Visual Studio (generates boilerplate XAML and CS)\n2. Modify CS file:\n   - Change class to derive from `StrategyEvolverVisualizerBase`\n   - Add `WealthLab.WPF` to using clause\n3. Modify XAML file:\n   - Add XMLNS reference to WealthLab.WPF library\n   - Change base class from UserControl to StrategyEvolverVisualizerBase\n\nExample XAML structure:\n\n\n```xaml\n<wl:StrategyEvolverVisualizerBase x:Class=\"YourNamespace.YourVisualizer\"\n    xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n    xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n    xmlns:wl=\"clr-namespace:WealthLab.WPF;assembly=WealthLab.WPF\">\n    <!-- Your XAML content here -->\n</wl:StrategyEvolverVisualizerBase>\n\n```",
    "metadata": {
      "id": "strategy-evolver-visualizer",
      "title": "strategy-evolver-visualizer",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/strategy-evolver-visualizer.md",
      "chunkIndex": "code-context-0",
      "contentType": "mixed",
      "language": "xaml",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "//get user data folder\nstring folder = WLHost.Instance.DataFolder;\n",
    "metadata": {
      "id": "strategy-evolver-visualizer",
      "title": "strategy-evolver-visualizer",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/strategy-evolver-visualizer.md",
      "chunkIndex": "code-1",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": ">\n    <!-- Your XAML content here -->\n</wl:StrategyEvolverVisualizerBase>\n```\n\n## Accessing the Host (WL8) Environment\n\nThe `IHost` interface allows your extension to access information about the user's WealthLab environment. For example, the location of the user data folder, or obtaining a list of DataSets defined by the user. At any point in your extension's code base, you can access an instance of the `IHost` interface using the singleton class `WLHost` and its `Instance` property. Example:\n\n"
    }
  },
  {
    "pageContent": ">\n    <!-- Your XAML content here -->\n</wl:StrategyEvolverVisualizerBase>\n```\n\n## Accessing the Host (WL8) Environment\n\nThe `IHost` interface allows your extension to access information about the user's WealthLab environment. For example, the location of the user data folder, or obtaining a list of DataSets defined by the user. At any point in your extension's code base, you can access an instance of the `IHost` interface using the singleton class `WLHost` and its `Instance` property. Example:\n\n\n\n```csharp\n//get user data folder\nstring folder = WLHost.Instance.DataFolder;\n\n```",
    "metadata": {
      "id": "strategy-evolver-visualizer",
      "title": "strategy-evolver-visualizer",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/strategy-evolver-visualizer.md",
      "chunkIndex": "code-context-1",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public class MetricsChartVisualizer : StrategyEvolverVisualizerBase\n{\n    private CartesianChart _chart;\n    \n    public override string ViewerName => \"Metrics Chart\";\n    public override string GlyphResource => \"YourNamespace.Glyphs.ChartIcon.png\";\n    \n    public MetricsChartVisualizer()\n    {\n        InitializeComponent();\n        _chart = new CartesianChart();\n        Content = _chart;\n    }\n    \n    public override void Initialize()\n    {\n        // One-time initialization\n        _chart.Series = new SeriesCollection();\n        _chart.AxisX.Add(new Axis { Title = \"Generation\" });\n        _chart.AxisY.Add(new Axis { Title = \"Metric Value\" });\n    }\n    \n    public override void Populate(StrategyEvolverResults results)\n    {\n        var metrics = new List<LineSeries>();\n        \n        // Create a series for each metric\n        foreach (var metricName in MetricNames)\n        {\n            var series = new LineSeries\n            {\n                Title = metricName,\n                Values = new ChartValues<double>()\n            };\n            \n            // Add values for each generation\n            foreach (var generation in results.Generations)\n            {\n                var bestResult = generation.Results\n                    .OrderByDescending(r => r.Metrics[metricName])\n                    .First();\n                series.Values.Add(bestResult.Metrics[metricName]);\n            }\n            \n            metrics.Add(series);\n        }\n        \n        _chart.Series = new SeriesCollection(metrics);\n    }\n    \n    public override void Cleanup()\n    {\n        _chart?.Dispose();\n        _chart = null;\n    }\n}\n",
    "metadata": {
      "id": "strategy-evolver-visualizer",
      "title": "strategy-evolver-visualizer",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/strategy-evolver-visualizer.md",
      "chunkIndex": "code-2",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "### public List<string> MetricNames\nReturns a List<string> containing the names of the performance metrics used during the Evolver session.\n\n## Accessing the Parent Evolver Window\n\n### public IStrategyEvolverHost Host\nReturns an instance of the `IStrategyEvolverHost` interface that provides a way to interact with the Strategy Evolver window hosting your Visualizer.\n\n## Example Implementation\n\nBelow is a simple example of a Strategy Evolver Visualizer that displays evolution metrics in a chart:\n\n"
    }
  },
  {
    "pageContent": "### public List<string> MetricNames\nReturns a List<string> containing the names of the performance metrics used during the Evolver session.\n\n## Accessing the Parent Evolver Window\n\n### public IStrategyEvolverHost Host\nReturns an instance of the `IStrategyEvolverHost` interface that provides a way to interact with the Strategy Evolver window hosting your Visualizer.\n\n## Example Implementation\n\nBelow is a simple example of a Strategy Evolver Visualizer that displays evolution metrics in a chart:\n\n\n\n```csharp\npublic class MetricsChartVisualizer : StrategyEvolverVisualizerBase\n{\n    private CartesianChart _chart;\n    \n    public override string ViewerName => \"Metrics Chart\";\n    public override string GlyphResource => \"YourNamespace.Glyphs.ChartIcon.png\";\n    \n    public MetricsChartVisualizer()\n    {\n        InitializeComponent();\n        _chart = new CartesianChart();\n        Content = _chart;\n    }\n    \n    public override void Initialize()\n    {\n        // One-time initialization\n        _chart.Series = new SeriesCollection();\n        _chart.AxisX.Add(new Axis { Title = \"Generation\" });\n        _chart.AxisY.Add(new Axis { Title = \"Metric Value\" });\n    }\n    \n    public override void Populate(StrategyEvolverResults results)\n    {\n        var metrics = new List<LineSeries>();\n        \n        // Create a series for each metric\n        foreach (var metricName in MetricNames)\n        {\n            var series = new LineSeries\n            {\n                Title = metricName,\n                Values = new ChartValues<double>()\n            };\n            \n            // Add values for each generation\n            foreach (var generation in results.Generations)\n            {\n                var bestResult = generation.Results\n                    .OrderByDescending(r => r.Metrics[metricName])\n                    .First();\n                series.Values.Add(bestResult.Metrics[metricName]);\n            }\n            \n            metrics.Add(series);\n        }\n        \n        _chart.Series = new SeriesCollection(metrics);\n    }\n    \n    public override void Cleanup()\n    {\n        _chart?.Dispose();\n        _chart = null;\n    }\n}\n\n```",
    "metadata": {
      "id": "strategy-evolver-visualizer",
      "title": "strategy-evolver-visualizer",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/strategy-evolver-visualizer.md",
      "chunkIndex": "code-context-2",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "# Strategy Gene API\n\nThis document details the API for building Strategy Genes for Wealth-Lab 8 Strategy Genetic Evolver. The Genetic Evolver uses these Genes to randomly generate and mutate trading Strategies over a number of generations.\n\n## Build Environment\n\nYou can create a Strategy Gene in a .NET development tool such as Visual Studio 2022. Create a class library project that targets .NET8, then reference the WealthLab.Core library DLL that you'll find in the WL8 installation folder.\n\n> **Note:** If you are using Visual Studio 2022, it will need to be updated to at least version 17.8.6 to use .NET8.\n\nYour Strategy Gene will be a class in this library that descends from `StrategyGeneBase`, which is defined in the WealthLab.Core library, in the `WealthLab.Backtest` namespace. After you implement and build your library, simply copy the resulting assembly DLL into the WL8 installation folder. The next time WL8 starts up, it will discover your Strategy Gene, making it available in appropriate locations of the WL8 user interface.\n\n## Accessing the Host (WL8) Environment\n\nThe `IHost` interface allows your extension to access information about the user's WealthLab environment. For example, the location of the user data folder, or obtaining a list of DataSets defined by the user. At any point in your extension's code base, you can access an instance of the `IHost` interface using the singleton class `WLHost` and its `Instance` property. Example:\n\n",
    "metadata": {
      "id": "strategy-gene",
      "title": "strategy-gene",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/strategy-gene.md",
      "chunkIndex": 0,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n## Gene Name and Code\n\n### public abstract string Name\nOverride the Name property to return a descriptive name for your Gene.\n\n### public abstract string ShortCode\nReturn a short string code to identify the Gene. The Evolver displays all of a Genetic Strategy's Genes as a concatenation of their Codes.\n\n## Gene Parameters\n\n### public virtual string GeneData\nYou can use standard .NET class properties to store the values of your Gene's parameters. Override the GeneData property getter and setter method to package your Gene's properties into a single string. WL8 uses this string to persist the Gene's information.\n\nExample:\n",
    "metadata": {
      "id": "strategy-gene",
      "title": "strategy-gene",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/strategy-gene.md",
      "chunkIndex": 1,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n## Gene's Relation to Building Block\n\n### public abstract BuildingBlockBase GetBuildingBlock()\nEach Strategy Gene will ultimately inject a single Building Block into the Genetic Strategy. The injected Building Blocks can be either Entry/Exit or Condition Blocks. The Building Block inserted is determined by the return value of GetBuildingBlock.\n\nExample:\n",
    "metadata": {
      "id": "strategy-gene",
      "title": "strategy-gene",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/strategy-gene.md",
      "chunkIndex": 2,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n## Randomization and Mutation\n\n### public virtual void Initialize()\nWL8 calls this method when the Gene is being initialized in a new Genetic Strategy.\n\n### public virtual void Randomize()\nOverride this method to completely randomize the parameter property values of your Gene.\n\n### public virtual void Mutate(GeneticStrategy gs)\nOverride this method to mutate the Gene, meaning to change one (or at least a small number) of its property parameter values.\n\n### protected internal static Random RNG\nA static instance of the .NET Random class for generating random numbers.\n\nExample:\n",
    "metadata": {
      "id": "strategy-gene",
      "title": "strategy-gene",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/strategy-gene.md",
      "chunkIndex": 3,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n## Entry and Exit Genes\n\n### public virtual bool IsEntry\n### public virtual bool IsExit\nOverride one of these properties and return true to indicate that your Gene is an Entry or Exit.\n\n### public bool IsEntryExit \nThis property resolves to true if either IsEntry or IsExit returns true.\n\n### public virtual PositionType PositionType\nOverride this property to return the PositionType that your Entry/Exit handles (Long or Short).\n\n### protected void AddConditionsBlocks(BuildingBlockBase bb)\nCall this method to cause randomized Condition Genes to be injected.\n\n### public virtual bool CanAddExit(List<StrategyGeneBase> exits)\nFor Exit Blocks, optionally override this method to control if the Exit Gene should be added.\n\nExample:\n",
    "metadata": {
      "id": "strategy-gene",
      "title": "strategy-gene",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/strategy-gene.md",
      "chunkIndex": 4,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n## Inserting Conditions\n\n### protected void InsertConditions(int max, StrategyGeneBase parentGene, StrategyGeneConditionTypes conditionType)\nCall this method in your Randomize implementation to add random Condition Genes.\n\n## Condition Genes\n\n### public bool IsCondition\nResolves to true for Condition Genes.\n\n### public virtual StrategyGeneConditionTypes ConditionType\nOverride to specify the type of Condition Gene:\n- `StrategyGeneConditionTypes.Signal`\n- `StrategyGeneConditionTypes.Filter`\n- `StrategyGeneConditionTypes.Both`\n\n### public virtual bool CanIncludeCondition\nOverride to control if the Condition Gene should be included.\n\n## Restricting Genes\n\n### public virtual bool IsValid(GeneticStrategy gs, StrategyGeneBase parent)\nOverride to indicate whether the Gene would be valid given the current state.\n\n## Working with Indicator Parameters\n\nExample:\n",
    "metadata": {
      "id": "strategy-gene",
      "title": "strategy-gene",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/strategy-gene.md",
      "chunkIndex": 5,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n## Coordinating Genes\n\n### public GeneticStrategy ParentStrategy\nAccess to the current Genetic Strategy being constructed.\n\n### public StrategyGeneBase ParentGene\nFor Condition Genes, returns the parent Entry/Exit Gene.\n\n### public List<StrategyGeneBase> ChildGenes\nReturns the Conditions already added to an Entry/Exit Gene.\n\n## Helper Methods\n\n### public static double RandomizeValue(double value, double pct = 10.0)\nReturns a randomized double value.\n\n### public static int RandomizeValue(int value)\nReturns a randomized int value.\n\n### public static void RandomizeParameters(ParameterList pl)\nRandomizes Parameter values in a ParameterList.\n\n### public static PriceComponent RandomPriceComponent\nReturns a random PriceComponent.\n\n### public string RandomIndexSymbol\nReturns a random market index symbol.\n\n## Example Implementation\n\nSee the complete example of the PriceCompareIndicatorGene at the end of this document for a full working implementation that demonstrates all these concepts. ",
    "metadata": {
      "id": "strategy-gene",
      "title": "strategy-gene",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/strategy-gene.md",
      "chunkIndex": 6,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "//get user data folder\nstring folder = WLHost.Instance.DataFolder;\n",
    "metadata": {
      "id": "strategy-gene",
      "title": "strategy-gene",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/strategy-gene.md",
      "chunkIndex": "code-0",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "Gene, making it available in appropriate locations of the WL8 user interface.\n\n## Accessing the Host (WL8) Environment\n\nThe `IHost` interface allows your extension to access information about the user's WealthLab environment. For example, the location of the user data folder, or obtaining a list of DataSets defined by the user. At any point in your extension's code base, you can access an instance of the `IHost` interface using the singleton class `WLHost` and its `Instance` property. Example:\n\n"
    }
  },
  {
    "pageContent": "Gene, making it available in appropriate locations of the WL8 user interface.\n\n## Accessing the Host (WL8) Environment\n\nThe `IHost` interface allows your extension to access information about the user's WealthLab environment. For example, the location of the user data folder, or obtaining a list of DataSets defined by the user. At any point in your extension's code base, you can access an instance of the `IHost` interface using the singleton class `WLHost` and its `Instance` property. Example:\n\n\n\n```csharp\n//get user data folder\nstring folder = WLHost.Instance.DataFolder;\n\n```",
    "metadata": {
      "id": "strategy-gene",
      "title": "strategy-gene",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/strategy-gene.md",
      "chunkIndex": "code-context-0",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public override string GeneData\n{\n    get\n    {\n        return Value.ToString(CultureInfo.InvariantCulture) + \";\" + Lookback.ToString();\n    }\n    set\n    {\n        string[] tokens = value.Split(';');\n        Value = Double.Parse(tokens[0], CultureInfo.InvariantCulture);\n        Lookback = Int32.Parse(tokens[1]);\n    }\n}\n",
    "metadata": {
      "id": "strategy-gene",
      "title": "strategy-gene",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/strategy-gene.md",
      "chunkIndex": "code-1",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "### public abstract string ShortCode\nReturn a short string code to identify the Gene. The Evolver displays all of a Genetic Strategy's Genes as a concatenation of their Codes.\n\n## Gene Parameters\n\n### public virtual string GeneData\nYou can use standard .NET class properties to store the values of your Gene's parameters. Override the GeneData property getter and setter method to package your Gene's properties into a single string. WL8 uses this string to persist the Gene's information.\n\nExample:\n"
    }
  },
  {
    "pageContent": "### public abstract string ShortCode\nReturn a short string code to identify the Gene. The Evolver displays all of a Genetic Strategy's Genes as a concatenation of their Codes.\n\n## Gene Parameters\n\n### public virtual string GeneData\nYou can use standard .NET class properties to store the values of your Gene's parameters. Override the GeneData property getter and setter method to package your Gene's properties into a single string. WL8 uses this string to persist the Gene's information.\n\nExample:\n\n\n```csharp\npublic override string GeneData\n{\n    get\n    {\n        return Value.ToString(CultureInfo.InvariantCulture) + \";\" + Lookback.ToString();\n    }\n    set\n    {\n        string[] tokens = value.Split(';');\n        Value = Double.Parse(tokens[0], CultureInfo.InvariantCulture);\n        Lookback = Int32.Parse(tokens[1]);\n    }\n}\n\n```",
    "metadata": {
      "id": "strategy-gene",
      "title": "strategy-gene",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/strategy-gene.md",
      "chunkIndex": "code-context-1",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public override BuildingBlockBase GetBuildingBlock()\n{\n    SellAfterNBars bb = new SellAfterNBars(); //This is the WL8 Building Block\n    bb.Parameters[0].Value = NumBars;\n    AddConditionsBlocks(bb); //See Entry and Exit Genes below for explanation\n    return bb;\n}\n",
    "metadata": {
      "id": "strategy-gene",
      "title": "strategy-gene",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/strategy-gene.md",
      "chunkIndex": "code-2",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "alue.Split(';');\n        Value = Double.Parse(tokens[0], CultureInfo.InvariantCulture);\n        Lookback = Int32.Parse(tokens[1]);\n    }\n}\n```\n\n## Gene's Relation to Building Block\n\n### public abstract BuildingBlockBase GetBuildingBlock()\nEach Strategy Gene will ultimately inject a single Building Block into the Genetic Strategy. The injected Building Blocks can be either Entry/Exit or Condition Blocks. The Building Block inserted is determined by the return value of GetBuildingBlock.\n\nExample:\n"
    }
  },
  {
    "pageContent": "alue.Split(';');\n        Value = Double.Parse(tokens[0], CultureInfo.InvariantCulture);\n        Lookback = Int32.Parse(tokens[1]);\n    }\n}\n```\n\n## Gene's Relation to Building Block\n\n### public abstract BuildingBlockBase GetBuildingBlock()\nEach Strategy Gene will ultimately inject a single Building Block into the Genetic Strategy. The injected Building Blocks can be either Entry/Exit or Condition Blocks. The Building Block inserted is determined by the return value of GetBuildingBlock.\n\nExample:\n\n\n```csharp\npublic override BuildingBlockBase GetBuildingBlock()\n{\n    SellAfterNBars bb = new SellAfterNBars(); //This is the WL8 Building Block\n    bb.Parameters[0].Value = NumBars;\n    AddConditionsBlocks(bb); //See Entry and Exit Genes below for explanation\n    return bb;\n}\n\n```",
    "metadata": {
      "id": "strategy-gene",
      "title": "strategy-gene",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/strategy-gene.md",
      "chunkIndex": "code-context-2",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public override void Mutate(GeneticStrategy gs)\n{\n    NumBars = RandomizeValue(NumBars);\n}\n",
    "metadata": {
      "id": "strategy-gene",
      "title": "strategy-gene",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/strategy-gene.md",
      "chunkIndex": "code-3",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": " method when the Gene is being initialized in a new Genetic Strategy.\n\n### public virtual void Randomize()\nOverride this method to completely randomize the parameter property values of your Gene.\n\n### public virtual void Mutate(GeneticStrategy gs)\nOverride this method to mutate the Gene, meaning to change one (or at least a small number) of its property parameter values.\n\n### protected internal static Random RNG\nA static instance of the .NET Random class for generating random numbers.\n\nExample:\n"
    }
  },
  {
    "pageContent": " method when the Gene is being initialized in a new Genetic Strategy.\n\n### public virtual void Randomize()\nOverride this method to completely randomize the parameter property values of your Gene.\n\n### public virtual void Mutate(GeneticStrategy gs)\nOverride this method to mutate the Gene, meaning to change one (or at least a small number) of its property parameter values.\n\n### protected internal static Random RNG\nA static instance of the .NET Random class for generating random numbers.\n\nExample:\n\n\n```csharp\npublic override void Mutate(GeneticStrategy gs)\n{\n    NumBars = RandomizeValue(NumBars);\n}\n\n```",
    "metadata": {
      "id": "strategy-gene",
      "title": "strategy-gene",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/strategy-gene.md",
      "chunkIndex": "code-context-3",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public override bool CanAddExit(List<StrategyGeneBase> exits)\n{\n    if (exits.Count == 0)\n        return false;\n    foreach (StrategyGeneBase exit in exits)\n        if (exit is SellAtStopLossGene)\n            return false;\n    return true;\n}\n",
    "metadata": {
      "id": "strategy-gene",
      "title": "strategy-gene",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/strategy-gene.md",
      "chunkIndex": "code-4",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "solves to true if either IsEntry or IsExit returns true.\n\n### public virtual PositionType PositionType\nOverride this property to return the PositionType that your Entry/Exit handles (Long or Short).\n\n### protected void AddConditionsBlocks(BuildingBlockBase bb)\nCall this method to cause randomized Condition Genes to be injected.\n\n### public virtual bool CanAddExit(List<StrategyGeneBase> exits)\nFor Exit Blocks, optionally override this method to control if the Exit Gene should be added.\n\nExample:\n"
    }
  },
  {
    "pageContent": "solves to true if either IsEntry or IsExit returns true.\n\n### public virtual PositionType PositionType\nOverride this property to return the PositionType that your Entry/Exit handles (Long or Short).\n\n### protected void AddConditionsBlocks(BuildingBlockBase bb)\nCall this method to cause randomized Condition Genes to be injected.\n\n### public virtual bool CanAddExit(List<StrategyGeneBase> exits)\nFor Exit Blocks, optionally override this method to control if the Exit Gene should be added.\n\nExample:\n\n\n```csharp\npublic override bool CanAddExit(List<StrategyGeneBase> exits)\n{\n    if (exits.Count == 0)\n        return false;\n    foreach (StrategyGeneBase exit in exits)\n        if (exit is SellAtStopLossGene)\n            return false;\n    return true;\n}\n\n```",
    "metadata": {
      "id": "strategy-gene",
      "title": "strategy-gene",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/strategy-gene.md",
      "chunkIndex": "code-context-4",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "//Create an instance of the Building Block\nIndicatorValue bb = new IndicatorValue();\n\n//parameter 0 - indicator\nParameter p = bb.Parameters[0];\np.IndicatorAbbreviation = OscillatorAbbreviation;\np.IndicatorParameters = OscillatorParameters;\n",
    "metadata": {
      "id": "strategy-gene",
      "title": "strategy-gene",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/strategy-gene.md",
      "chunkIndex": "code-5",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "onType\nOverride to specify the type of Condition Gene:\n- `StrategyGeneConditionTypes.Signal`\n- `StrategyGeneConditionTypes.Filter`\n- `StrategyGeneConditionTypes.Both`\n\n### public virtual bool CanIncludeCondition\nOverride to control if the Condition Gene should be included.\n\n## Restricting Genes\n\n### public virtual bool IsValid(GeneticStrategy gs, StrategyGeneBase parent)\nOverride to indicate whether the Gene would be valid given the current state.\n\n## Working with Indicator Parameters\n\nExample:\n"
    }
  },
  {
    "pageContent": "onType\nOverride to specify the type of Condition Gene:\n- `StrategyGeneConditionTypes.Signal`\n- `StrategyGeneConditionTypes.Filter`\n- `StrategyGeneConditionTypes.Both`\n\n### public virtual bool CanIncludeCondition\nOverride to control if the Condition Gene should be included.\n\n## Restricting Genes\n\n### public virtual bool IsValid(GeneticStrategy gs, StrategyGeneBase parent)\nOverride to indicate whether the Gene would be valid given the current state.\n\n## Working with Indicator Parameters\n\nExample:\n\n\n```csharp\n//Create an instance of the Building Block\nIndicatorValue bb = new IndicatorValue();\n\n//parameter 0 - indicator\nParameter p = bb.Parameters[0];\np.IndicatorAbbreviation = OscillatorAbbreviation;\np.IndicatorParameters = OscillatorParameters;\n\n```",
    "metadata": {
      "id": "strategy-gene",
      "title": "strategy-gene",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/strategy-gene.md",
      "chunkIndex": "code-context-5",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "# Strategy Library API\n\nThis document details the API for building Compiled Strategies for Wealth-Lab 8. A Strategy Library is simply a collection of Wealth-Lab 8 Strategies packaged and compiled in a .NET library assembly. WL8 displays these libraries as separate nodes in the Strategies tree. If your Strategy exposes Parameters, these will be exposed as sliders in the Strategy Settings tab, just like they are for a C#-Coded or a Building Block Strategy.\n\n## Build Environment\n\nYou can create a Compiled Strategy in a .NET development tool such as Visual Studio 2022. Create a class library project that targets .NET8, then reference the WealthLab.Core library DLL that you'll find in the WL8 installation folder.\n\n> **Note:** If you are using Visual Studio 2022, it will need to be updated to at least version 17.8.6 to use .NET8.\n\nYour Compiled Strategy will be a class in this library that descends from `UserStrategyBase`, which is defined in the WealthLab.Core library, in the `WealthLab.Backtest` namespace. After you implement and build your library, simply copy the resulting assembly DLL into the WL8 installation folder. The next time WL8 starts up, it will discover your Compiled Strategy, making it available in appropriate locations of the WL8 user interface.\n\n## Accessing the Host (WL8) Environment\n\nThe `IHost` interface allows your extension to access information about the user's WealthLab environment. For example, the location of the user data folder, or obtaining a list of DataSets defined by the user. At any point in your extension's code base, you can access an instance of the `IHost` interface using the singleton class `WLHost` and its `Instance` property. Example:\n\n",
    "metadata": {
      "id": "strategy-library",
      "title": "strategy-library",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/strategy-library.md",
      "chunkIndex": 0,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n## UserStrategyBase\n\nSince custom Strategies are classes that descend from the `UserStrategyBase` class, consult the UserStrategyBase class reference for more information about coding a Strategy.\n\n## Descriptive Properties\n\nYou should override the following descriptive properties in your Strategy classes:\n\n### public virtual string StrategyName\nReturn a descriptive name for the Strategy. The default implementation returns the .NET class name.\n\n### public virtual string Author\nReturn a name that indicates how you'd like to see the Strategy attributed in WL8.\n\n### public virtual string Description\nReturn a short description of your Strategy.\n\n### public virtual DateTime CreationDate\nReturn the date that you created the Strategy.\n\n## Visual Studio Development Setup\n\n### Enabling \"Edit and Continue\" Feature\n\nTo streamline development and enable the \"Edit and Continue\" feature in Visual Studio, follow these steps:\n\n1. **Modify Project File**\n   - Close solution in Visual Studio\n   - Find your project file (e.g., `Strategies.csproj`)\n   - Add the following lines to the PropertyGroup section:\n   ",
    "metadata": {
      "id": "strategy-library",
      "title": "strategy-library",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/strategy-library.md",
      "chunkIndex": 1,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n2. **Configure Visual Studio**\n   - Launch Visual Studio as administrator\n   - Open your project\n   - Go to Project > Properties\n   - On Build tab:\n     - Set Output path to: `C:\\Program Files\\Quantacula, LLC\\WealthLab 8`\n   - On Debug tab:\n     - Set Executable to: `C:\\Program Files\\Quantacula, LLC\\WealthLab 8\\WealthLab8.exe`\n\n3. **Setup Debug Profile (for newer VS versions)**\n   - Go to Project Properties > Debug > General\n   - Click \"Open Debug Launch Profile UI\"\n   - Click \"Create New Profile\" (type: Executable)\n   - Change the Launch Profile to the newly created one\n\nWith this setup:\n- Your DLL will automatically be copied to the WL8 folder when debugging\n- WL8 will launch automatically when you start debugging\n- You can set breakpoints and edit code while debugging\n- Changes take effect without restarting WL8\n\n## Example Implementation\n\nHere's a simple example of a compiled Strategy:\n\n",
    "metadata": {
      "id": "strategy-library",
      "title": "strategy-library",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/strategy-library.md",
      "chunkIndex": 2,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\nThis example demonstrates:\n1. Basic Strategy structure\n2. Parameter creation and management\n3. Indicator calculation\n4. Signal generation\n5. Order placement ",
    "metadata": {
      "id": "strategy-library",
      "title": "strategy-library",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/strategy-library.md",
      "chunkIndex": 3,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "//get user data folder\nstring folder = WLHost.Instance.DataFolder;\n",
    "metadata": {
      "id": "strategy-library",
      "title": "strategy-library",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/strategy-library.md",
      "chunkIndex": "code-0",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "tegy, making it available in appropriate locations of the WL8 user interface.\n\n## Accessing the Host (WL8) Environment\n\nThe `IHost` interface allows your extension to access information about the user's WealthLab environment. For example, the location of the user data folder, or obtaining a list of DataSets defined by the user. At any point in your extension's code base, you can access an instance of the `IHost` interface using the singleton class `WLHost` and its `Instance` property. Example:\n\n"
    }
  },
  {
    "pageContent": "tegy, making it available in appropriate locations of the WL8 user interface.\n\n## Accessing the Host (WL8) Environment\n\nThe `IHost` interface allows your extension to access information about the user's WealthLab environment. For example, the location of the user data folder, or obtaining a list of DataSets defined by the user. At any point in your extension's code base, you can access an instance of the `IHost` interface using the singleton class `WLHost` and its `Instance` property. Example:\n\n\n\n```csharp\n//get user data folder\nstring folder = WLHost.Instance.DataFolder;\n\n```",
    "metadata": {
      "id": "strategy-library",
      "title": "strategy-library",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/strategy-library.md",
      "chunkIndex": "code-context-0",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "   <Project Sdk=\"Microsoft.NET.Sdk.WindowsDesktop\">\n     <PropertyGroup>\n       <TargetFramework>net8.0</TargetFramework>\n       <UseWPF>true</UseWPF>\n       <AppendTargetFrameworkToOutputPath>false</AppendTargetFrameworkToOutputPath>\n       <AppendRuntimeIdentifierToOutputPath>false</AppendRuntimeIdentifierToOutputPath>\n     </PropertyGroup>\n     ...\n   </Project>\n   ",
    "metadata": {
      "id": "strategy-library",
      "title": "strategy-library",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/strategy-library.md",
      "chunkIndex": "code-1",
      "contentType": "code",
      "language": "xml",
      "chunkType": "code_block",
      "context": "urn a short description of your Strategy.\n\n### public virtual DateTime CreationDate\nReturn the date that you created the Strategy.\n\n## Visual Studio Development Setup\n\n### Enabling \"Edit and Continue\" Feature\n\nTo streamline development and enable the \"Edit and Continue\" feature in Visual Studio, follow these steps:\n\n1. **Modify Project File**\n   - Close solution in Visual Studio\n   - Find your project file (e.g., `Strategies.csproj`)\n   - Add the following lines to the PropertyGroup section:\n   "
    }
  },
  {
    "pageContent": "urn a short description of your Strategy.\n\n### public virtual DateTime CreationDate\nReturn the date that you created the Strategy.\n\n## Visual Studio Development Setup\n\n### Enabling \"Edit and Continue\" Feature\n\nTo streamline development and enable the \"Edit and Continue\" feature in Visual Studio, follow these steps:\n\n1. **Modify Project File**\n   - Close solution in Visual Studio\n   - Find your project file (e.g., `Strategies.csproj`)\n   - Add the following lines to the PropertyGroup section:\n   \n\n```xml\n   <Project Sdk=\"Microsoft.NET.Sdk.WindowsDesktop\">\n     <PropertyGroup>\n       <TargetFramework>net8.0</TargetFramework>\n       <UseWPF>true</UseWPF>\n       <AppendTargetFrameworkToOutputPath>false</AppendTargetFrameworkToOutputPath>\n       <AppendRuntimeIdentifierToOutputPath>false</AppendRuntimeIdentifierToOutputPath>\n     </PropertyGroup>\n     ...\n   </Project>\n   \n```",
    "metadata": {
      "id": "strategy-library",
      "title": "strategy-library",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/strategy-library.md",
      "chunkIndex": "code-context-1",
      "contentType": "mixed",
      "language": "xml",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "using WealthLab.Core;\nusing WealthLab.Indicators;\n\nnamespace MyStrategyLibrary\n{\n    public class SimpleMovingAverageCrossover : UserStrategyBase\n    {\n        // Descriptive properties\n        public override string StrategyName => \"SMA Crossover\";\n        public override string Author => \"Your Name\";\n        public override string Description => \"Simple Moving Average Crossover Strategy\";\n        public override DateTime CreationDate => new DateTime(2024, 1, 1);\n\n        // Strategy parameters\n        private Parameter _fastPeriod;\n        private Parameter _slowPeriod;\n\n        public SimpleMovingAverageCrossover()\n        {\n            // Create parameters\n            _fastPeriod = CreateParameter(\"Fast SMA\", 10, 5, 50, 1);\n            _slowPeriod = CreateParameter(\"Slow SMA\", 20, 10, 100, 1);\n        }\n\n        protected override void Execute()\n        {\n            // Calculate indicators\n            var fastSMA = SMA.Series(Bars.Close, _fastPeriod.AsInt);\n            var slowSMA = SMA.Series(Bars.Close, _slowPeriod.AsInt);\n\n            // Generate signals\n            for (int bar = GetTradingStartBar(fastSMA, slowSMA); bar < Bars.Count; bar++)\n            {\n                if (CrossOver(fastSMA, slowSMA, bar))\n                    BuyAtMarket(bar + 1, \"SMA Cross Up\");\n                else if (CrossUnder(fastSMA, slowSMA, bar))\n                    SellAtMarket(bar + 1, \"SMA Cross Down\");\n            }\n        }\n    }\n}\n",
    "metadata": {
      "id": "strategy-library",
      "title": "strategy-library",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/strategy-library.md",
      "chunkIndex": "code-2",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "erties > Debug > General\n   - Click \"Open Debug Launch Profile UI\"\n   - Click \"Create New Profile\" (type: Executable)\n   - Change the Launch Profile to the newly created one\n\nWith this setup:\n- Your DLL will automatically be copied to the WL8 folder when debugging\n- WL8 will launch automatically when you start debugging\n- You can set breakpoints and edit code while debugging\n- Changes take effect without restarting WL8\n\n## Example Implementation\n\nHere's a simple example of a compiled Strategy:\n\n"
    }
  },
  {
    "pageContent": "erties > Debug > General\n   - Click \"Open Debug Launch Profile UI\"\n   - Click \"Create New Profile\" (type: Executable)\n   - Change the Launch Profile to the newly created one\n\nWith this setup:\n- Your DLL will automatically be copied to the WL8 folder when debugging\n- WL8 will launch automatically when you start debugging\n- You can set breakpoints and edit code while debugging\n- Changes take effect without restarting WL8\n\n## Example Implementation\n\nHere's a simple example of a compiled Strategy:\n\n\n\n```csharp\nusing WealthLab.Core;\nusing WealthLab.Indicators;\n\nnamespace MyStrategyLibrary\n{\n    public class SimpleMovingAverageCrossover : UserStrategyBase\n    {\n        // Descriptive properties\n        public override string StrategyName => \"SMA Crossover\";\n        public override string Author => \"Your Name\";\n        public override string Description => \"Simple Moving Average Crossover Strategy\";\n        public override DateTime CreationDate => new DateTime(2024, 1, 1);\n\n        // Strategy parameters\n        private Parameter _fastPeriod;\n        private Parameter _slowPeriod;\n\n        public SimpleMovingAverageCrossover()\n        {\n            // Create parameters\n            _fastPeriod = CreateParameter(\"Fast SMA\", 10, 5, 50, 1);\n            _slowPeriod = CreateParameter(\"Slow SMA\", 20, 10, 100, 1);\n        }\n\n        protected override void Execute()\n        {\n            // Calculate indicators\n            var fastSMA = SMA.Series(Bars.Close, _fastPeriod.AsInt);\n            var slowSMA = SMA.Series(Bars.Close, _slowPeriod.AsInt);\n\n            // Generate signals\n            for (int bar = GetTradingStartBar(fastSMA, slowSMA); bar < Bars.Count; bar++)\n            {\n                if (CrossOver(fastSMA, slowSMA, bar))\n                    BuyAtMarket(bar + 1, \"SMA Cross Up\");\n                else if (CrossUnder(fastSMA, slowSMA, bar))\n                    SellAtMarket(bar + 1, \"SMA Cross Down\");\n            }\n        }\n    }\n}\n\n```",
    "metadata": {
      "id": "strategy-library",
      "title": "strategy-library",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/strategy-library.md",
      "chunkIndex": "code-context-2",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "# Streaming Data Provider API\n\nThis document details the API for building Streaming Data Provider extensions for Wealth-Lab 8. A Streaming Data Provider allows WL8 to subscribe to symbol updates and get notified live whenever trades (ticks) occur for the subscribed symbol(s).\n\n## Build Environment\n\nYou can create a Streaming Data Provider in a .NET development tool such as Visual Studio 2022. Create a class library project that targets .NET8, then reference the WealthLab.Core library DLL that you'll find in the WL8 installation folder.\n\n> **Note:** If you are using Visual Studio 2022, it will need to be updated to at least version 17.8.6 to use .NET8.\n\nYour Streaming Data Provider will be a class in this library that descends from `StreamingProviderBase`, which is defined in the WealthLab.Core library, in the `WealthLab.Data` namespace. After you implement and build your library, simply copy the resulting assembly DLL into the WL8 installation folder. The next time WL8 starts up, it will discover your Streaming Data Provider, making it available in appropriate locations of the WL8 user interface.\n\n## Accessing the Host (WL8) Environment\n\nThe `IHost` interface allows your extension to access information about the user's WealthLab environment. For example, the location of the user data folder, or obtaining a list of DataSets defined by the user. At any point in your extension's code base, you can access an instance of the `IHost` interface using the singleton class `WLHost` and its `Instance` property. Example:\n\n",
    "metadata": {
      "id": "streaming-data-provider",
      "title": "streaming-data-provider",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/streaming-data-provider.md",
      "chunkIndex": 0,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n## Configuration of a Streaming Data Provider\n\n`StreamingProviderBase` ultimately descends from the base class `Configurable`, which provides a way to allow the user to configure the provider. By default, it uses `ParameterList` type configuration, but you can change to `VanillaString` if needed.\n\n### Parameter-Based Configuration\n",
    "metadata": {
      "id": "streaming-data-provider",
      "title": "streaming-data-provider",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/streaming-data-provider.md",
      "chunkIndex": 1,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n## Important Descriptive Properties\n\nOverride these properties to control how your provider appears in WL8:\n- `Name`\n- `GlyphResource`\n- `Description`\n- `URL`\n\n## Connection Management\n\n### protected abstract bool Connect()\nOverride to establish connection to streaming source:\n\n",
    "metadata": {
      "id": "streaming-data-provider",
      "title": "streaming-data-provider",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/streaming-data-provider.md",
      "chunkIndex": 2,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n### public bool IsConnected\nReturns connection status.\n\n### public void DisconnectStreaming(string reason, Exception ex = null)\nCall when connection is lost:\n",
    "metadata": {
      "id": "streaming-data-provider",
      "title": "streaming-data-provider",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/streaming-data-provider.md",
      "chunkIndex": 3,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n### Auto-Reconnect Support\n",
    "metadata": {
      "id": "streaming-data-provider",
      "title": "streaming-data-provider",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/streaming-data-provider.md",
      "chunkIndex": 4,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n## Symbol Subscriptions\n\n### protected abstract void SubscribeTo(string symbol)\nOverride to subscribe to symbol updates:\n",
    "metadata": {
      "id": "streaming-data-provider",
      "title": "streaming-data-provider",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/streaming-data-provider.md",
      "chunkIndex": 5,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n### protected abstract void UnsubscribeFrom(string symbol)\nOverride to unsubscribe from symbol updates:\n",
    "metadata": {
      "id": "streaming-data-provider",
      "title": "streaming-data-provider",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/streaming-data-provider.md",
      "chunkIndex": 6,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n## Updating WL8 with Market Data\n\n### Trade Updates\n",
    "metadata": {
      "id": "streaming-data-provider",
      "title": "streaming-data-provider",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/streaming-data-provider.md",
      "chunkIndex": 7,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n### Quote Updates\n",
    "metadata": {
      "id": "streaming-data-provider",
      "title": "streaming-data-provider",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/streaming-data-provider.md",
      "chunkIndex": 8,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n### Heartbeat Updates\n",
    "metadata": {
      "id": "streaming-data-provider",
      "title": "streaming-data-provider",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/streaming-data-provider.md",
      "chunkIndex": 9,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n## Streaming Bar Support\n\n### Bar Interval Support\n",
    "metadata": {
      "id": "streaming-data-provider",
      "title": "streaming-data-provider",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/streaming-data-provider.md",
      "chunkIndex": 10,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n### Bar Subscriptions\n",
    "metadata": {
      "id": "streaming-data-provider",
      "title": "streaming-data-provider",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/streaming-data-provider.md",
      "chunkIndex": 11,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n### Bar Updates\n",
    "metadata": {
      "id": "streaming-data-provider",
      "title": "streaming-data-provider",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/streaming-data-provider.md",
      "chunkIndex": 12,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n## Example Implementation\n\nHere's a simple example using WebSocket-based streaming:\n\n",
    "metadata": {
      "id": "streaming-data-provider",
      "title": "streaming-data-provider",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/streaming-data-provider.md",
      "chunkIndex": 13,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\nThis example demonstrates:\n1. WebSocket connection management\n2. Authentication\n3. Message handling\n4. Trade and quote updates\n5. Streaming bar support\n6. Auto-reconnect capability ",
    "metadata": {
      "id": "streaming-data-provider",
      "title": "streaming-data-provider",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/streaming-data-provider.md",
      "chunkIndex": 14,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "//get user data folder\nstring folder = WLHost.Instance.DataFolder;\n",
    "metadata": {
      "id": "streaming-data-provider",
      "title": "streaming-data-provider",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/streaming-data-provider.md",
      "chunkIndex": "code-0",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ider, making it available in appropriate locations of the WL8 user interface.\n\n## Accessing the Host (WL8) Environment\n\nThe `IHost` interface allows your extension to access information about the user's WealthLab environment. For example, the location of the user data folder, or obtaining a list of DataSets defined by the user. At any point in your extension's code base, you can access an instance of the `IHost` interface using the singleton class `WLHost` and its `Instance` property. Example:\n\n"
    }
  },
  {
    "pageContent": "ider, making it available in appropriate locations of the WL8 user interface.\n\n## Accessing the Host (WL8) Environment\n\nThe `IHost` interface allows your extension to access information about the user's WealthLab environment. For example, the location of the user data folder, or obtaining a list of DataSets defined by the user. At any point in your extension's code base, you can access an instance of the `IHost` interface using the singleton class `WLHost` and its `Instance` property. Example:\n\n\n\n```csharp\n//get user data folder\nstring folder = WLHost.Instance.DataFolder;\n\n```",
    "metadata": {
      "id": "streaming-data-provider",
      "title": "streaming-data-provider",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/streaming-data-provider.md",
      "chunkIndex": "code-context-0",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "protected override void GenerateParameters()\n{\n    Parameters.Add(new Parameter(\"API Key\", ParameterType.String));\n    Parameters.Add(new Parameter(\"Server URL\", ParameterType.String, \"wss://stream.example.com\"));\n}\n",
    "metadata": {
      "id": "streaming-data-provider",
      "title": "streaming-data-provider",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/streaming-data-provider.md",
      "chunkIndex": "code-1",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": " interface using the singleton class `WLHost` and its `Instance` property. Example:\n\n```csharp\n//get user data folder\nstring folder = WLHost.Instance.DataFolder;\n```\n\n## Configuration of a Streaming Data Provider\n\n`StreamingProviderBase` ultimately descends from the base class `Configurable`, which provides a way to allow the user to configure the provider. By default, it uses `ParameterList` type configuration, but you can change to `VanillaString` if needed.\n\n### Parameter-Based Configuration\n"
    }
  },
  {
    "pageContent": " interface using the singleton class `WLHost` and its `Instance` property. Example:\n\n```csharp\n//get user data folder\nstring folder = WLHost.Instance.DataFolder;\n```\n\n## Configuration of a Streaming Data Provider\n\n`StreamingProviderBase` ultimately descends from the base class `Configurable`, which provides a way to allow the user to configure the provider. By default, it uses `ParameterList` type configuration, but you can change to `VanillaString` if needed.\n\n### Parameter-Based Configuration\n\n\n```csharp\nprotected override void GenerateParameters()\n{\n    Parameters.Add(new Parameter(\"API Key\", ParameterType.String));\n    Parameters.Add(new Parameter(\"Server URL\", ParameterType.String, \"wss://stream.example.com\"));\n}\n\n```",
    "metadata": {
      "id": "streaming-data-provider",
      "title": "streaming-data-provider",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/streaming-data-provider.md",
      "chunkIndex": "code-context-1",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "protected override bool Connect()\n{\n    try\n    {\n        _webSocket = new WebSocket(_serverUrl);\n        _webSocket.OnMessage += HandleMessage;\n        _webSocket.Connect();\n        return true;\n    }\n    catch (Exception ex)\n    {\n        DisconnectStreaming(\"Connection failed\", ex);\n        return false;\n    }\n}\n",
    "metadata": {
      "id": "streaming-data-provider",
      "title": "streaming-data-provider",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/streaming-data-provider.md",
      "chunkIndex": "code-2",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "protected override void GenerateParameters()\n{\n    Parameters.Add(new Parameter(\"API Key\", ParameterType.String));\n    Parameters.Add(new Parameter(\"Server URL\", ParameterType.String, \"wss://stream.example.com\"));\n}\n```\n\n## Important Descriptive Properties\n\nOverride these properties to control how your provider appears in WL8:\n- `Name`\n- `GlyphResource`\n- `Description`\n- `URL`\n\n## Connection Management\n\n### protected abstract bool Connect()\nOverride to establish connection to streaming source:\n\n"
    }
  },
  {
    "pageContent": "protected override void GenerateParameters()\n{\n    Parameters.Add(new Parameter(\"API Key\", ParameterType.String));\n    Parameters.Add(new Parameter(\"Server URL\", ParameterType.String, \"wss://stream.example.com\"));\n}\n```\n\n## Important Descriptive Properties\n\nOverride these properties to control how your provider appears in WL8:\n- `Name`\n- `GlyphResource`\n- `Description`\n- `URL`\n\n## Connection Management\n\n### protected abstract bool Connect()\nOverride to establish connection to streaming source:\n\n\n\n```csharp\nprotected override bool Connect()\n{\n    try\n    {\n        _webSocket = new WebSocket(_serverUrl);\n        _webSocket.OnMessage += HandleMessage;\n        _webSocket.Connect();\n        return true;\n    }\n    catch (Exception ex)\n    {\n        DisconnectStreaming(\"Connection failed\", ex);\n        return false;\n    }\n}\n\n```",
    "metadata": {
      "id": "streaming-data-provider",
      "title": "streaming-data-provider",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/streaming-data-provider.md",
      "chunkIndex": "code-context-2",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "DisconnectStreaming(\"Connection lost\", exception);\n",
    "metadata": {
      "id": "streaming-data-provider",
      "title": "streaming-data-provider",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/streaming-data-provider.md",
      "chunkIndex": "code-3",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": " source:\n\n```csharp\nprotected override bool Connect()\n{\n    try\n    {\n        _webSocket = new WebSocket(_serverUrl);\n        _webSocket.OnMessage += HandleMessage;\n        _webSocket.Connect();\n        return true;\n    }\n    catch (Exception ex)\n    {\n        DisconnectStreaming(\"Connection failed\", ex);\n        return false;\n    }\n}\n```\n\n### public bool IsConnected\nReturns connection status.\n\n### public void DisconnectStreaming(string reason, Exception ex = null)\nCall when connection is lost:\n"
    }
  },
  {
    "pageContent": " source:\n\n```csharp\nprotected override bool Connect()\n{\n    try\n    {\n        _webSocket = new WebSocket(_serverUrl);\n        _webSocket.OnMessage += HandleMessage;\n        _webSocket.Connect();\n        return true;\n    }\n    catch (Exception ex)\n    {\n        DisconnectStreaming(\"Connection failed\", ex);\n        return false;\n    }\n}\n```\n\n### public bool IsConnected\nReturns connection status.\n\n### public void DisconnectStreaming(string reason, Exception ex = null)\nCall when connection is lost:\n\n\n```csharp\nDisconnectStreaming(\"Connection lost\", exception);\n\n```",
    "metadata": {
      "id": "streaming-data-provider",
      "title": "streaming-data-provider",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/streaming-data-provider.md",
      "chunkIndex": "code-context-3",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public override bool SupportsAutoReconnect => true;\n\nprotected override bool Reconnect()\n{\n    if (ReconnectInProgress)\n    {\n        // Skip heartbeat subscription during reconnect\n        return base.Reconnect();\n    }\n    return false;\n}\n",
    "metadata": {
      "id": "streaming-data-provider",
      "title": "streaming-data-provider",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/streaming-data-provider.md",
      "chunkIndex": "code-4",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "w WebSocket(_serverUrl);\n        _webSocket.OnMessage += HandleMessage;\n        _webSocket.Connect();\n        return true;\n    }\n    catch (Exception ex)\n    {\n        DisconnectStreaming(\"Connection failed\", ex);\n        return false;\n    }\n}\n```\n\n### public bool IsConnected\nReturns connection status.\n\n### public void DisconnectStreaming(string reason, Exception ex = null)\nCall when connection is lost:\n```csharp\nDisconnectStreaming(\"Connection lost\", exception);\n```\n\n### Auto-Reconnect Support\n"
    }
  },
  {
    "pageContent": "w WebSocket(_serverUrl);\n        _webSocket.OnMessage += HandleMessage;\n        _webSocket.Connect();\n        return true;\n    }\n    catch (Exception ex)\n    {\n        DisconnectStreaming(\"Connection failed\", ex);\n        return false;\n    }\n}\n```\n\n### public bool IsConnected\nReturns connection status.\n\n### public void DisconnectStreaming(string reason, Exception ex = null)\nCall when connection is lost:\n```csharp\nDisconnectStreaming(\"Connection lost\", exception);\n```\n\n### Auto-Reconnect Support\n\n\n```csharp\npublic override bool SupportsAutoReconnect => true;\n\nprotected override bool Reconnect()\n{\n    if (ReconnectInProgress)\n    {\n        // Skip heartbeat subscription during reconnect\n        return base.Reconnect();\n    }\n    return false;\n}\n\n```",
    "metadata": {
      "id": "streaming-data-provider",
      "title": "streaming-data-provider",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/streaming-data-provider.md",
      "chunkIndex": "code-context-4",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "protected override void SubscribeTo(string symbol)\n{\n    var request = new\n    {\n        type = \"subscribe\",\n        symbol = symbol\n    };\n    _webSocket.Send(JsonSerializer.Serialize(request));\n}\n",
    "metadata": {
      "id": "streaming-data-provider",
      "title": "streaming-data-provider",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/streaming-data-provider.md",
      "chunkIndex": "code-5",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "Call when connection is lost:\n```csharp\nDisconnectStreaming(\"Connection lost\", exception);\n```\n\n### Auto-Reconnect Support\n```csharp\npublic override bool SupportsAutoReconnect => true;\n\nprotected override bool Reconnect()\n{\n    if (ReconnectInProgress)\n    {\n        // Skip heartbeat subscription during reconnect\n        return base.Reconnect();\n    }\n    return false;\n}\n```\n\n## Symbol Subscriptions\n\n### protected abstract void SubscribeTo(string symbol)\nOverride to subscribe to symbol updates:\n"
    }
  },
  {
    "pageContent": "Call when connection is lost:\n```csharp\nDisconnectStreaming(\"Connection lost\", exception);\n```\n\n### Auto-Reconnect Support\n```csharp\npublic override bool SupportsAutoReconnect => true;\n\nprotected override bool Reconnect()\n{\n    if (ReconnectInProgress)\n    {\n        // Skip heartbeat subscription during reconnect\n        return base.Reconnect();\n    }\n    return false;\n}\n```\n\n## Symbol Subscriptions\n\n### protected abstract void SubscribeTo(string symbol)\nOverride to subscribe to symbol updates:\n\n\n```csharp\nprotected override void SubscribeTo(string symbol)\n{\n    var request = new\n    {\n        type = \"subscribe\",\n        symbol = symbol\n    };\n    _webSocket.Send(JsonSerializer.Serialize(request));\n}\n\n```",
    "metadata": {
      "id": "streaming-data-provider",
      "title": "streaming-data-provider",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/streaming-data-provider.md",
      "chunkIndex": "code-context-5",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "protected override void UnsubscribeFrom(string symbol)\n{\n    var request = new\n    {\n        type = \"unsubscribe\",\n        symbol = symbol\n    };\n    _webSocket.Send(JsonSerializer.Serialize(request));\n}\n",
    "metadata": {
      "id": "streaming-data-provider",
      "title": "streaming-data-provider",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/streaming-data-provider.md",
      "chunkIndex": "code-6",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "      return base.Reconnect();\n    }\n    return false;\n}\n```\n\n## Symbol Subscriptions\n\n### protected abstract void SubscribeTo(string symbol)\nOverride to subscribe to symbol updates:\n```csharp\nprotected override void SubscribeTo(string symbol)\n{\n    var request = new\n    {\n        type = \"subscribe\",\n        symbol = symbol\n    };\n    _webSocket.Send(JsonSerializer.Serialize(request));\n}\n```\n\n### protected abstract void UnsubscribeFrom(string symbol)\nOverride to unsubscribe from symbol updates:\n"
    }
  },
  {
    "pageContent": "      return base.Reconnect();\n    }\n    return false;\n}\n```\n\n## Symbol Subscriptions\n\n### protected abstract void SubscribeTo(string symbol)\nOverride to subscribe to symbol updates:\n```csharp\nprotected override void SubscribeTo(string symbol)\n{\n    var request = new\n    {\n        type = \"subscribe\",\n        symbol = symbol\n    };\n    _webSocket.Send(JsonSerializer.Serialize(request));\n}\n```\n\n### protected abstract void UnsubscribeFrom(string symbol)\nOverride to unsubscribe from symbol updates:\n\n\n```csharp\nprotected override void UnsubscribeFrom(string symbol)\n{\n    var request = new\n    {\n        type = \"unsubscribe\",\n        symbol = symbol\n    };\n    _webSocket.Send(JsonSerializer.Serialize(request));\n}\n\n```",
    "metadata": {
      "id": "streaming-data-provider",
      "title": "streaming-data-provider",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/streaming-data-provider.md",
      "chunkIndex": "code-context-6",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public void UpdateTick(string symbol, DateTime dt, double price, double size, double prevClose)\n{\n    // Call when trade data received\n}\n\npublic void UpdateTicksHighLow(string symbol, DateTime dt, double high, double low, double close, double size, double prevClose)\n{\n    // Call when aggregate tick data received\n}\n",
    "metadata": {
      "id": "streaming-data-provider",
      "title": "streaming-data-provider",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/streaming-data-provider.md",
      "chunkIndex": "code-7",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": " {\n        type = \"subscribe\",\n        symbol = symbol\n    };\n    _webSocket.Send(JsonSerializer.Serialize(request));\n}\n```\n\n### protected abstract void UnsubscribeFrom(string symbol)\nOverride to unsubscribe from symbol updates:\n```csharp\nprotected override void UnsubscribeFrom(string symbol)\n{\n    var request = new\n    {\n        type = \"unsubscribe\",\n        symbol = symbol\n    };\n    _webSocket.Send(JsonSerializer.Serialize(request));\n}\n```\n\n## Updating WL8 with Market Data\n\n### Trade Updates\n"
    }
  },
  {
    "pageContent": " {\n        type = \"subscribe\",\n        symbol = symbol\n    };\n    _webSocket.Send(JsonSerializer.Serialize(request));\n}\n```\n\n### protected abstract void UnsubscribeFrom(string symbol)\nOverride to unsubscribe from symbol updates:\n```csharp\nprotected override void UnsubscribeFrom(string symbol)\n{\n    var request = new\n    {\n        type = \"unsubscribe\",\n        symbol = symbol\n    };\n    _webSocket.Send(JsonSerializer.Serialize(request));\n}\n```\n\n## Updating WL8 with Market Data\n\n### Trade Updates\n\n\n```csharp\npublic void UpdateTick(string symbol, DateTime dt, double price, double size, double prevClose)\n{\n    // Call when trade data received\n}\n\npublic void UpdateTicksHighLow(string symbol, DateTime dt, double high, double low, double close, double size, double prevClose)\n{\n    // Call when aggregate tick data received\n}\n\n```",
    "metadata": {
      "id": "streaming-data-provider",
      "title": "streaming-data-provider",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/streaming-data-provider.md",
      "chunkIndex": "code-context-7",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public void UpdateBidAsk(string symbol, double bid, double ask)\n{\n    // Call when quote data received\n}\n",
    "metadata": {
      "id": "streaming-data-provider",
      "title": "streaming-data-provider",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/streaming-data-provider.md",
      "chunkIndex": "code-8",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "e\",\n        symbol = symbol\n    };\n    _webSocket.Send(JsonSerializer.Serialize(request));\n}\n```\n\n## Updating WL8 with Market Data\n\n### Trade Updates\n```csharp\npublic void UpdateTick(string symbol, DateTime dt, double price, double size, double prevClose)\n{\n    // Call when trade data received\n}\n\npublic void UpdateTicksHighLow(string symbol, DateTime dt, double high, double low, double close, double size, double prevClose)\n{\n    // Call when aggregate tick data received\n}\n```\n\n### Quote Updates\n"
    }
  },
  {
    "pageContent": "e\",\n        symbol = symbol\n    };\n    _webSocket.Send(JsonSerializer.Serialize(request));\n}\n```\n\n## Updating WL8 with Market Data\n\n### Trade Updates\n```csharp\npublic void UpdateTick(string symbol, DateTime dt, double price, double size, double prevClose)\n{\n    // Call when trade data received\n}\n\npublic void UpdateTicksHighLow(string symbol, DateTime dt, double high, double low, double close, double size, double prevClose)\n{\n    // Call when aggregate tick data received\n}\n```\n\n### Quote Updates\n\n\n```csharp\npublic void UpdateBidAsk(string symbol, double bid, double ask)\n{\n    // Call when quote data received\n}\n\n```",
    "metadata": {
      "id": "streaming-data-provider",
      "title": "streaming-data-provider",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/streaming-data-provider.md",
      "chunkIndex": "code-context-8",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public void UpdateHeartbeat(DateTime dt)\n{\n    // Call for connection health monitoring\n}\n",
    "metadata": {
      "id": "streaming-data-provider",
      "title": "streaming-data-provider",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/streaming-data-provider.md",
      "chunkIndex": "code-9",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "Updates\n```csharp\npublic void UpdateTick(string symbol, DateTime dt, double price, double size, double prevClose)\n{\n    // Call when trade data received\n}\n\npublic void UpdateTicksHighLow(string symbol, DateTime dt, double high, double low, double close, double size, double prevClose)\n{\n    // Call when aggregate tick data received\n}\n```\n\n### Quote Updates\n```csharp\npublic void UpdateBidAsk(string symbol, double bid, double ask)\n{\n    // Call when quote data received\n}\n```\n\n### Heartbeat Updates\n"
    }
  },
  {
    "pageContent": "Updates\n```csharp\npublic void UpdateTick(string symbol, DateTime dt, double price, double size, double prevClose)\n{\n    // Call when trade data received\n}\n\npublic void UpdateTicksHighLow(string symbol, DateTime dt, double high, double low, double close, double size, double prevClose)\n{\n    // Call when aggregate tick data received\n}\n```\n\n### Quote Updates\n```csharp\npublic void UpdateBidAsk(string symbol, double bid, double ask)\n{\n    // Call when quote data received\n}\n```\n\n### Heartbeat Updates\n\n\n```csharp\npublic void UpdateHeartbeat(DateTime dt)\n{\n    // Call for connection health monitoring\n}\n\n```",
    "metadata": {
      "id": "streaming-data-provider",
      "title": "streaming-data-provider",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/streaming-data-provider.md",
      "chunkIndex": "code-context-9",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public override bool SupportsStreamingBarInterval(int interval)\n{\n    // Return true for supported intervals (in minutes)\n    return interval == 1 || interval == 5 || interval == 15;\n}\n",
    "metadata": {
      "id": "streaming-data-provider",
      "title": "streaming-data-provider",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/streaming-data-provider.md",
      "chunkIndex": "code-10",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "public void UpdateTicksHighLow(string symbol, DateTime dt, double high, double low, double close, double size, double prevClose)\n{\n    // Call when aggregate tick data received\n}\n```\n\n### Quote Updates\n```csharp\npublic void UpdateBidAsk(string symbol, double bid, double ask)\n{\n    // Call when quote data received\n}\n```\n\n### Heartbeat Updates\n```csharp\npublic void UpdateHeartbeat(DateTime dt)\n{\n    // Call for connection health monitoring\n}\n```\n\n## Streaming Bar Support\n\n### Bar Interval Support\n"
    }
  },
  {
    "pageContent": "public void UpdateTicksHighLow(string symbol, DateTime dt, double high, double low, double close, double size, double prevClose)\n{\n    // Call when aggregate tick data received\n}\n```\n\n### Quote Updates\n```csharp\npublic void UpdateBidAsk(string symbol, double bid, double ask)\n{\n    // Call when quote data received\n}\n```\n\n### Heartbeat Updates\n```csharp\npublic void UpdateHeartbeat(DateTime dt)\n{\n    // Call for connection health monitoring\n}\n```\n\n## Streaming Bar Support\n\n### Bar Interval Support\n\n\n```csharp\npublic override bool SupportsStreamingBarInterval(int interval)\n{\n    // Return true for supported intervals (in minutes)\n    return interval == 1 || interval == 5 || interval == 15;\n}\n\n```",
    "metadata": {
      "id": "streaming-data-provider",
      "title": "streaming-data-provider",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/streaming-data-provider.md",
      "chunkIndex": "code-context-10",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "protected override void SubscribeToStreamingBar(string symbol, HistoryScale scale)\n{\n    var request = new\n    {\n        type = \"subscribe_bars\",\n        symbol = symbol,\n        interval = scale.Interval\n    };\n    _webSocket.Send(JsonSerializer.Serialize(request));\n}\n\nprotected override void UnsubscribeFromStreamingBar(string symbol, HistoryScale scale)\n{\n    var request = new\n    {\n        type = \"unsubscribe_bars\",\n        symbol = symbol,\n        interval = scale.Interval\n    };\n    _webSocket.Send(JsonSerializer.Serialize(request));\n}\n",
    "metadata": {
      "id": "streaming-data-provider",
      "title": "streaming-data-provider",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/streaming-data-provider.md",
      "chunkIndex": "code-11",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "d UpdateBidAsk(string symbol, double bid, double ask)\n{\n    // Call when quote data received\n}\n```\n\n### Heartbeat Updates\n```csharp\npublic void UpdateHeartbeat(DateTime dt)\n{\n    // Call for connection health monitoring\n}\n```\n\n## Streaming Bar Support\n\n### Bar Interval Support\n```csharp\npublic override bool SupportsStreamingBarInterval(int interval)\n{\n    // Return true for supported intervals (in minutes)\n    return interval == 1 || interval == 5 || interval == 15;\n}\n```\n\n### Bar Subscriptions\n"
    }
  },
  {
    "pageContent": "d UpdateBidAsk(string symbol, double bid, double ask)\n{\n    // Call when quote data received\n}\n```\n\n### Heartbeat Updates\n```csharp\npublic void UpdateHeartbeat(DateTime dt)\n{\n    // Call for connection health monitoring\n}\n```\n\n## Streaming Bar Support\n\n### Bar Interval Support\n```csharp\npublic override bool SupportsStreamingBarInterval(int interval)\n{\n    // Return true for supported intervals (in minutes)\n    return interval == 1 || interval == 5 || interval == 15;\n}\n```\n\n### Bar Subscriptions\n\n\n```csharp\nprotected override void SubscribeToStreamingBar(string symbol, HistoryScale scale)\n{\n    var request = new\n    {\n        type = \"subscribe_bars\",\n        symbol = symbol,\n        interval = scale.Interval\n    };\n    _webSocket.Send(JsonSerializer.Serialize(request));\n}\n\nprotected override void UnsubscribeFromStreamingBar(string symbol, HistoryScale scale)\n{\n    var request = new\n    {\n        type = \"unsubscribe_bars\",\n        symbol = symbol,\n        interval = scale.Interval\n    };\n    _webSocket.Send(JsonSerializer.Serialize(request));\n}\n\n```",
    "metadata": {
      "id": "streaming-data-provider",
      "title": "streaming-data-provider",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/streaming-data-provider.md",
      "chunkIndex": "code-context-11",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public void UpdateStreamingBar(string symbol, HistoryScale scale, BarData barData)\n{\n    // Call when complete bar received\n}\n",
    "metadata": {
      "id": "streaming-data-provider",
      "title": "streaming-data-provider",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/streaming-data-provider.md",
      "chunkIndex": "code-12",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ryScale scale)\n{\n    var request = new\n    {\n        type = \"subscribe_bars\",\n        symbol = symbol,\n        interval = scale.Interval\n    };\n    _webSocket.Send(JsonSerializer.Serialize(request));\n}\n\nprotected override void UnsubscribeFromStreamingBar(string symbol, HistoryScale scale)\n{\n    var request = new\n    {\n        type = \"unsubscribe_bars\",\n        symbol = symbol,\n        interval = scale.Interval\n    };\n    _webSocket.Send(JsonSerializer.Serialize(request));\n}\n```\n\n### Bar Updates\n"
    }
  },
  {
    "pageContent": "ryScale scale)\n{\n    var request = new\n    {\n        type = \"subscribe_bars\",\n        symbol = symbol,\n        interval = scale.Interval\n    };\n    _webSocket.Send(JsonSerializer.Serialize(request));\n}\n\nprotected override void UnsubscribeFromStreamingBar(string symbol, HistoryScale scale)\n{\n    var request = new\n    {\n        type = \"unsubscribe_bars\",\n        symbol = symbol,\n        interval = scale.Interval\n    };\n    _webSocket.Send(JsonSerializer.Serialize(request));\n}\n```\n\n### Bar Updates\n\n\n```csharp\npublic void UpdateStreamingBar(string symbol, HistoryScale scale, BarData barData)\n{\n    // Call when complete bar received\n}\n\n```",
    "metadata": {
      "id": "streaming-data-provider",
      "title": "streaming-data-provider",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/streaming-data-provider.md",
      "chunkIndex": "code-context-12",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public class WebSocketStreamingProvider : StreamingProviderBase\n{\n    private WebSocket _webSocket;\n    private string _apiKey;\n    private string _serverUrl;\n    \n    public override string Name => \"WebSocket Streaming\";\n    public override string Description => \"Real-time data via WebSocket\";\n    \n    protected override void GenerateParameters()\n    {\n        Parameters.Add(new Parameter(\"API Key\", ParameterType.String));\n        Parameters.Add(new Parameter(\"Server URL\", ParameterType.String, \"wss://stream.example.com\"));\n    }\n    \n    public override void Initialize()\n    {\n        _apiKey = Parameters[0].AsString;\n        _serverUrl = Parameters[1].AsString;\n    }\n    \n    protected override bool Connect()\n    {\n        try\n        {\n            _webSocket = new WebSocket(_serverUrl);\n            _webSocket.OnMessage += HandleMessage;\n            _webSocket.OnClose += HandleDisconnect;\n            _webSocket.Connect();\n            \n            // Authenticate\n            var auth = new { type = \"auth\", apiKey = _apiKey };\n            _webSocket.Send(JsonSerializer.Serialize(auth));\n            \n            return true;\n        }\n        catch (Exception ex)\n        {\n            DisconnectStreaming(\"Connection failed\", ex);\n            return false;\n        }\n    }\n    \n    private void HandleMessage(string message)\n    {\n        var data = JsonSerializer.Deserialize<StreamingData>(message);\n        \n        switch (data.type)\n        {\n            case \"trade\":\n                UpdateTick(data.symbol, data.timestamp, data.price, data.size, data.prevClose);\n                break;\n                \n            case \"quote\":\n                UpdateBidAsk(data.symbol, data.bid, data.ask);\n                break;\n                \n            case \"bar\":\n                var bar = new BarData(data.timestamp, data.open, data.high, \n                                   data.low, data.close, data.volume);\n                UpdateStreamingBar(data.symbol, new HistoryScale(data.interval), bar);\n                break;\n        }\n    }\n    \n    private void HandleDisconnect()\n    {\n        DisconnectStreaming(\"WebSocket connection closed\");\n    }\n    \n    protected override void SubscribeTo(string symbol)\n    {\n        var sub = new { type = \"subscribe\", symbol = symbol };\n        _webSocket.Send(JsonSerializer.Serialize(sub));\n    }\n    \n    protected override void UnsubscribeFrom(string symbol)\n    {\n        var unsub = new { type = \"unsubscribe\", symbol = symbol };\n        _webSocket.Send(JsonSerializer.Serialize(unsub));\n    }\n    \n    public override bool SupportsAutoReconnect => true;\n    \n    public override bool SupportsStreamingBarInterval(int interval)\n    {\n        return interval == 1 || interval == 5;\n    }\n}\n",
    "metadata": {
      "id": "streaming-data-provider",
      "title": "streaming-data-provider",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/streaming-data-provider.md",
      "chunkIndex": "code-13",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": " UnsubscribeFromStreamingBar(string symbol, HistoryScale scale)\n{\n    var request = new\n    {\n        type = \"unsubscribe_bars\",\n        symbol = symbol,\n        interval = scale.Interval\n    };\n    _webSocket.Send(JsonSerializer.Serialize(request));\n}\n```\n\n### Bar Updates\n```csharp\npublic void UpdateStreamingBar(string symbol, HistoryScale scale, BarData barData)\n{\n    // Call when complete bar received\n}\n```\n\n## Example Implementation\n\nHere's a simple example using WebSocket-based streaming:\n\n"
    }
  },
  {
    "pageContent": " UnsubscribeFromStreamingBar(string symbol, HistoryScale scale)\n{\n    var request = new\n    {\n        type = \"unsubscribe_bars\",\n        symbol = symbol,\n        interval = scale.Interval\n    };\n    _webSocket.Send(JsonSerializer.Serialize(request));\n}\n```\n\n### Bar Updates\n```csharp\npublic void UpdateStreamingBar(string symbol, HistoryScale scale, BarData barData)\n{\n    // Call when complete bar received\n}\n```\n\n## Example Implementation\n\nHere's a simple example using WebSocket-based streaming:\n\n\n\n```csharp\npublic class WebSocketStreamingProvider : StreamingProviderBase\n{\n    private WebSocket _webSocket;\n    private string _apiKey;\n    private string _serverUrl;\n    \n    public override string Name => \"WebSocket Streaming\";\n    public override string Description => \"Real-time data via WebSocket\";\n    \n    protected override void GenerateParameters()\n    {\n        Parameters.Add(new Parameter(\"API Key\", ParameterType.String));\n        Parameters.Add(new Parameter(\"Server URL\", ParameterType.String, \"wss://stream.example.com\"));\n    }\n    \n    public override void Initialize()\n    {\n        _apiKey = Parameters[0].AsString;\n        _serverUrl = Parameters[1].AsString;\n    }\n    \n    protected override bool Connect()\n    {\n        try\n        {\n            _webSocket = new WebSocket(_serverUrl);\n            _webSocket.OnMessage += HandleMessage;\n            _webSocket.OnClose += HandleDisconnect;\n            _webSocket.Connect();\n            \n            // Authenticate\n            var auth = new { type = \"auth\", apiKey = _apiKey };\n            _webSocket.Send(JsonSerializer.Serialize(auth));\n            \n            return true;\n        }\n        catch (Exception ex)\n        {\n            DisconnectStreaming(\"Connection failed\", ex);\n            return false;\n        }\n    }\n    \n    private void HandleMessage(string message)\n    {\n        var data = JsonSerializer.Deserialize<StreamingData>(message);\n        \n        switch (data.type)\n        {\n            case \"trade\":\n                UpdateTick(data.symbol, data.timestamp, data.price, data.size, data.prevClose);\n                break;\n                \n            case \"quote\":\n                UpdateBidAsk(data.symbol, data.bid, data.ask);\n                break;\n                \n            case \"bar\":\n                var bar = new BarData(data.timestamp, data.open, data.high, \n                                   data.low, data.close, data.volume);\n                UpdateStreamingBar(data.symbol, new HistoryScale(data.interval), bar);\n                break;\n        }\n    }\n    \n    private void HandleDisconnect()\n    {\n        DisconnectStreaming(\"WebSocket connection closed\");\n    }\n    \n    protected override void SubscribeTo(string symbol)\n    {\n        var sub = new { type = \"subscribe\", symbol = symbol };\n        _webSocket.Send(JsonSerializer.Serialize(sub));\n    }\n    \n    protected override void UnsubscribeFrom(string symbol)\n    {\n        var unsub = new { type = \"unsubscribe\", symbol = symbol };\n        _webSocket.Send(JsonSerializer.Serialize(unsub));\n    }\n    \n    public override bool SupportsAutoReconnect => true;\n    \n    public override bool SupportsStreamingBarInterval(int interval)\n    {\n        return interval == 1 || interval == 5;\n    }\n}\n\n```",
    "metadata": {
      "id": "streaming-data-provider",
      "title": "streaming-data-provider",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/streaming-data-provider.md",
      "chunkIndex": "code-context-13",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "# Theming API\n\nThis document details the theming capabilities introduced in Wealth-Lab 8. WL8 supports both Light and Dark themes, with a framework designed to accommodate additional themes in the future.\n\n## Theme Resources\n\nThemes are defined in XAML files (`LightTheme.xaml` and `DarkTheme.xaml`) in the Themes folder. When building WL8 UI extensions, use these theme resources via DynamicResource bindings.\n\n### Using Theme Resources in XAML\n\n",
    "metadata": {
      "id": "theming",
      "title": "theming",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/theming.md",
      "chunkIndex": 0,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n### Available Theme Colors\n\n#### Window Colors\n",
    "metadata": {
      "id": "theming",
      "title": "theming",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/theming.md",
      "chunkIndex": 1,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n#### WL8 Specific Colors\n",
    "metadata": {
      "id": "theming",
      "title": "theming",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/theming.md",
      "chunkIndex": 2,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n#### Panel Background Colors\n",
    "metadata": {
      "id": "theming",
      "title": "theming",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/theming.md",
      "chunkIndex": 3,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n#### Standard UI Elements\n",
    "metadata": {
      "id": "theming",
      "title": "theming",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/theming.md",
      "chunkIndex": 4,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n## Theme Detection and Changes\n\n### Detecting Theme in Code\n",
    "metadata": {
      "id": "theming",
      "title": "theming",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/theming.md",
      "chunkIndex": 5,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n### Theme Detection in XAML\n",
    "metadata": {
      "id": "theming",
      "title": "theming",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/theming.md",
      "chunkIndex": 6,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n## WL8 UI Components\n\n### WLImage\nEnhanced Image control with theme support:\n\n",
    "metadata": {
      "id": "theming",
      "title": "theming",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/theming.md",
      "chunkIndex": 7,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n### WLButton\nEnhanced Button control with theme support:\n\n",
    "metadata": {
      "id": "theming",
      "title": "theming",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/theming.md",
      "chunkIndex": 9,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n### DialogWindow\nBase window class for themed windows:\n\n",
    "metadata": {
      "id": "theming",
      "title": "theming",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/theming.md",
      "chunkIndex": 11,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n### WLContextMenu\nTheme-aware context menu:\n\n",
    "metadata": {
      "id": "theming",
      "title": "theming",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/theming.md",
      "chunkIndex": 12,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n## Working with Themes\n\n### Configurable Extensions\nFor extensions derived from `Configurable`:\n\n",
    "metadata": {
      "id": "theming",
      "title": "theming",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/theming.md",
      "chunkIndex": 13,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n### Dynamic UI Updates\nRefresh theme on dynamically created UI elements:\n\n",
    "metadata": {
      "id": "theming",
      "title": "theming",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/theming.md",
      "chunkIndex": 14,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n## Best Practices\n\n1. **Use Theme Resources**\n   - Always use DynamicResource for colors and brushes\n   - Reference standard theme colors where possible\n\n2. **Window Development**\n   - Derive from DialogWindow instead of Window\n   - Use CustomToolWindowStyle\n   - Use DesignSizeToContent instead of SizeToContent\n\n3. **Context Menus**\n   - Use WLContextMenu instead of ContextMenu\n   - Ensures proper theme behavior\n\n4. **Image Handling**\n   - Use WLImage for automatic dark theme support\n   - Override DisableGlyphReverse when needed\n\n5. **Dynamic UI**\n   - Call RefreshTheme after creating UI elements\n   - Subscribe to ThemeChanged for runtime updates\n\n## Example Implementation\n\nHere's a complete example of a themed window:\n\n",
    "metadata": {
      "id": "theming",
      "title": "theming",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/theming.md",
      "chunkIndex": 15,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\nThis example demonstrates:\n1. Proper window setup\n2. Theme-aware controls\n3. Context menu implementation\n4. Dynamic theme handling\n5. Best practices for UI development ",
    "metadata": {
      "id": "theming",
      "title": "theming",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/theming.md",
      "chunkIndex": 17,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "<Window Background=\"{DynamicResource BrownBackground}\">\n",
    "metadata": {
      "id": "theming",
      "title": "theming",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/theming.md",
      "chunkIndex": "code-0",
      "contentType": "code",
      "language": "xaml",
      "chunkType": "code_block",
      "context": "# Theming API\n\nThis document details the theming capabilities introduced in Wealth-Lab 8. WL8 supports both Light and Dark themes, with a framework designed to accommodate additional themes in the future.\n\n## Theme Resources\n\nThemes are defined in XAML files (`LightTheme.xaml` and `DarkTheme.xaml`) in the Themes folder. When building WL8 UI extensions, use these theme resources via DynamicResource bindings.\n\n### Using Theme Resources in XAML\n\n"
    }
  },
  {
    "pageContent": "# Theming API\n\nThis document details the theming capabilities introduced in Wealth-Lab 8. WL8 supports both Light and Dark themes, with a framework designed to accommodate additional themes in the future.\n\n## Theme Resources\n\nThemes are defined in XAML files (`LightTheme.xaml` and `DarkTheme.xaml`) in the Themes folder. When building WL8 UI extensions, use these theme resources via DynamicResource bindings.\n\n### Using Theme Resources in XAML\n\n\n\n```xaml\n<Window Background=\"{DynamicResource BrownBackground}\">\n\n```",
    "metadata": {
      "id": "theming",
      "title": "theming",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/theming.md",
      "chunkIndex": "code-context-0",
      "contentType": "mixed",
      "language": "xaml",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "<SolidColorBrush x:Key=\"BackgroundColour\" Color=\"#FFF8F8F8\" />\n<SolidColorBrush x:Key=\"WindowBorderColour\" Color=\"#FFE0E0E0\" />\n<SolidColorBrush x:Key=\"WindowTitleColour\" Color=\"WhiteSmoke\" />\n",
    "metadata": {
      "id": "theming",
      "title": "theming",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/theming.md",
      "chunkIndex": "code-1",
      "contentType": "code",
      "language": "xaml",
      "chunkType": "code_block",
      "context": "ntroduced in Wealth-Lab 8. WL8 supports both Light and Dark themes, with a framework designed to accommodate additional themes in the future.\n\n## Theme Resources\n\nThemes are defined in XAML files (`LightTheme.xaml` and `DarkTheme.xaml`) in the Themes folder. When building WL8 UI extensions, use these theme resources via DynamicResource bindings.\n\n### Using Theme Resources in XAML\n\n```xaml\n<Window Background=\"{DynamicResource BrownBackground}\">\n```\n\n### Available Theme Colors\n\n#### Window Colors\n"
    }
  },
  {
    "pageContent": "ntroduced in Wealth-Lab 8. WL8 supports both Light and Dark themes, with a framework designed to accommodate additional themes in the future.\n\n## Theme Resources\n\nThemes are defined in XAML files (`LightTheme.xaml` and `DarkTheme.xaml`) in the Themes folder. When building WL8 UI extensions, use these theme resources via DynamicResource bindings.\n\n### Using Theme Resources in XAML\n\n```xaml\n<Window Background=\"{DynamicResource BrownBackground}\">\n```\n\n### Available Theme Colors\n\n#### Window Colors\n\n\n```xaml\n<SolidColorBrush x:Key=\"BackgroundColour\" Color=\"#FFF8F8F8\" />\n<SolidColorBrush x:Key=\"WindowBorderColour\" Color=\"#FFE0E0E0\" />\n<SolidColorBrush x:Key=\"WindowTitleColour\" Color=\"WhiteSmoke\" />\n\n```",
    "metadata": {
      "id": "theming",
      "title": "theming",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/theming.md",
      "chunkIndex": "code-context-1",
      "contentType": "mixed",
      "language": "xaml",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "<SolidColorBrush x:Key=\"MDITitleBackground\" Color=\"LightSteelBlue\"/>\n<SolidColorBrush x:Key=\"SelectorBackground\" Color=\"DarkSlateGray\"/>\n<SolidColorBrush x:Key=\"BuildingBlock\" Color=\"#f9e8d2\"/>\n<SolidColorBrush x:Key=\"BuildingBlockBuy\" Color=\"#cce6ff\"/>\n<SolidColorBrush x:Key=\"BuildingBlockSell\" Color=\"#ffcccc\"/>\n<SolidColorBrush x:Key=\"BuildingBlockShort\" Color=\"#ccffcc\"/>\n<SolidColorBrush x:Key=\"BuildingBlockCover\" Color=\"#ffe6cc\"/>\n",
    "metadata": {
      "id": "theming",
      "title": "theming",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/theming.md",
      "chunkIndex": "code-2",
      "contentType": "code",
      "language": "xaml",
      "chunkType": "code_block",
      "context": "aml`) in the Themes folder. When building WL8 UI extensions, use these theme resources via DynamicResource bindings.\n\n### Using Theme Resources in XAML\n\n```xaml\n<Window Background=\"{DynamicResource BrownBackground}\">\n```\n\n### Available Theme Colors\n\n#### Window Colors\n```xaml\n<SolidColorBrush x:Key=\"BackgroundColour\" Color=\"#FFF8F8F8\" />\n<SolidColorBrush x:Key=\"WindowBorderColour\" Color=\"#FFE0E0E0\" />\n<SolidColorBrush x:Key=\"WindowTitleColour\" Color=\"WhiteSmoke\" />\n```\n\n#### WL8 Specific Colors\n"
    }
  },
  {
    "pageContent": "aml`) in the Themes folder. When building WL8 UI extensions, use these theme resources via DynamicResource bindings.\n\n### Using Theme Resources in XAML\n\n```xaml\n<Window Background=\"{DynamicResource BrownBackground}\">\n```\n\n### Available Theme Colors\n\n#### Window Colors\n```xaml\n<SolidColorBrush x:Key=\"BackgroundColour\" Color=\"#FFF8F8F8\" />\n<SolidColorBrush x:Key=\"WindowBorderColour\" Color=\"#FFE0E0E0\" />\n<SolidColorBrush x:Key=\"WindowTitleColour\" Color=\"WhiteSmoke\" />\n```\n\n#### WL8 Specific Colors\n\n\n```xaml\n<SolidColorBrush x:Key=\"MDITitleBackground\" Color=\"LightSteelBlue\"/>\n<SolidColorBrush x:Key=\"SelectorBackground\" Color=\"DarkSlateGray\"/>\n<SolidColorBrush x:Key=\"BuildingBlock\" Color=\"#f9e8d2\"/>\n<SolidColorBrush x:Key=\"BuildingBlockBuy\" Color=\"#cce6ff\"/>\n<SolidColorBrush x:Key=\"BuildingBlockSell\" Color=\"#ffcccc\"/>\n<SolidColorBrush x:Key=\"BuildingBlockShort\" Color=\"#ccffcc\"/>\n<SolidColorBrush x:Key=\"BuildingBlockCover\" Color=\"#ffe6cc\"/>\n\n```",
    "metadata": {
      "id": "theming",
      "title": "theming",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/theming.md",
      "chunkIndex": "code-context-2",
      "contentType": "mixed",
      "language": "xaml",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "<SolidColorBrush x:Key=\"GreenBackground\" Color=\"#dfecdf\"/>\n<SolidColorBrush x:Key=\"RedBackground\" Color=\"#eddede\"/>\n<SolidColorBrush x:Key=\"YellowBackground\" Color=\"#f1ecda\"/>\n<SolidColorBrush x:Key=\"BlueBackground\" Color=\"#d6edf5\"/>\n<SolidColorBrush x:Key=\"BrownBackground\" Color=\"#ecdfdf\"/>\n",
    "metadata": {
      "id": "theming",
      "title": "theming",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/theming.md",
      "chunkIndex": "code-3",
      "contentType": "code",
      "language": "xaml",
      "chunkType": "code_block",
      "context": "L8 Specific Colors\n```xaml\n<SolidColorBrush x:Key=\"MDITitleBackground\" Color=\"LightSteelBlue\"/>\n<SolidColorBrush x:Key=\"SelectorBackground\" Color=\"DarkSlateGray\"/>\n<SolidColorBrush x:Key=\"BuildingBlock\" Color=\"#f9e8d2\"/>\n<SolidColorBrush x:Key=\"BuildingBlockBuy\" Color=\"#cce6ff\"/>\n<SolidColorBrush x:Key=\"BuildingBlockSell\" Color=\"#ffcccc\"/>\n<SolidColorBrush x:Key=\"BuildingBlockShort\" Color=\"#ccffcc\"/>\n<SolidColorBrush x:Key=\"BuildingBlockCover\" Color=\"#ffe6cc\"/>\n```\n\n#### Panel Background Colors\n"
    }
  },
  {
    "pageContent": "L8 Specific Colors\n```xaml\n<SolidColorBrush x:Key=\"MDITitleBackground\" Color=\"LightSteelBlue\"/>\n<SolidColorBrush x:Key=\"SelectorBackground\" Color=\"DarkSlateGray\"/>\n<SolidColorBrush x:Key=\"BuildingBlock\" Color=\"#f9e8d2\"/>\n<SolidColorBrush x:Key=\"BuildingBlockBuy\" Color=\"#cce6ff\"/>\n<SolidColorBrush x:Key=\"BuildingBlockSell\" Color=\"#ffcccc\"/>\n<SolidColorBrush x:Key=\"BuildingBlockShort\" Color=\"#ccffcc\"/>\n<SolidColorBrush x:Key=\"BuildingBlockCover\" Color=\"#ffe6cc\"/>\n```\n\n#### Panel Background Colors\n\n\n```xaml\n<SolidColorBrush x:Key=\"GreenBackground\" Color=\"#dfecdf\"/>\n<SolidColorBrush x:Key=\"RedBackground\" Color=\"#eddede\"/>\n<SolidColorBrush x:Key=\"YellowBackground\" Color=\"#f1ecda\"/>\n<SolidColorBrush x:Key=\"BlueBackground\" Color=\"#d6edf5\"/>\n<SolidColorBrush x:Key=\"BrownBackground\" Color=\"#ecdfdf\"/>\n\n```",
    "metadata": {
      "id": "theming",
      "title": "theming",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/theming.md",
      "chunkIndex": "code-context-3",
      "contentType": "mixed",
      "language": "xaml",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "<SolidColorBrush x:Key=\"ContainerBackground\" Color=\"WhiteSmoke\"/>\n<SolidColorBrush x:Key=\"ControlDefaultForeground\" Color=\"#FF040404\" />\n<SolidColorBrush x:Key=\"ControlDefaultBackground\" Color=\"#FFE1E1E1\"/>\n",
    "metadata": {
      "id": "theming",
      "title": "theming",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/theming.md",
      "chunkIndex": "code-4",
      "contentType": "code",
      "language": "xaml",
      "chunkType": "code_block",
      "context": "ffcccc\"/>\n<SolidColorBrush x:Key=\"BuildingBlockShort\" Color=\"#ccffcc\"/>\n<SolidColorBrush x:Key=\"BuildingBlockCover\" Color=\"#ffe6cc\"/>\n```\n\n#### Panel Background Colors\n```xaml\n<SolidColorBrush x:Key=\"GreenBackground\" Color=\"#dfecdf\"/>\n<SolidColorBrush x:Key=\"RedBackground\" Color=\"#eddede\"/>\n<SolidColorBrush x:Key=\"YellowBackground\" Color=\"#f1ecda\"/>\n<SolidColorBrush x:Key=\"BlueBackground\" Color=\"#d6edf5\"/>\n<SolidColorBrush x:Key=\"BrownBackground\" Color=\"#ecdfdf\"/>\n```\n\n#### Standard UI Elements\n"
    }
  },
  {
    "pageContent": "ffcccc\"/>\n<SolidColorBrush x:Key=\"BuildingBlockShort\" Color=\"#ccffcc\"/>\n<SolidColorBrush x:Key=\"BuildingBlockCover\" Color=\"#ffe6cc\"/>\n```\n\n#### Panel Background Colors\n```xaml\n<SolidColorBrush x:Key=\"GreenBackground\" Color=\"#dfecdf\"/>\n<SolidColorBrush x:Key=\"RedBackground\" Color=\"#eddede\"/>\n<SolidColorBrush x:Key=\"YellowBackground\" Color=\"#f1ecda\"/>\n<SolidColorBrush x:Key=\"BlueBackground\" Color=\"#d6edf5\"/>\n<SolidColorBrush x:Key=\"BrownBackground\" Color=\"#ecdfdf\"/>\n```\n\n#### Standard UI Elements\n\n\n```xaml\n<SolidColorBrush x:Key=\"ContainerBackground\" Color=\"WhiteSmoke\"/>\n<SolidColorBrush x:Key=\"ControlDefaultForeground\" Color=\"#FF040404\" />\n<SolidColorBrush x:Key=\"ControlDefaultBackground\" Color=\"#FFE1E1E1\"/>\n\n```",
    "metadata": {
      "id": "theming",
      "title": "theming",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/theming.md",
      "chunkIndex": "code-context-4",
      "contentType": "mixed",
      "language": "xaml",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "// Check if dark theme is active\nbool isDark = WLClientHost.Instance.IsDarkTheme;\n\n// Subscribe to theme changes\nEventRouter.Subscribe(\"ThemeChanged\", (bool isDark) => {\n    // Handle theme change\n});\n",
    "metadata": {
      "id": "theming",
      "title": "theming",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/theming.md",
      "chunkIndex": "code-5",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "\"#eddede\"/>\n<SolidColorBrush x:Key=\"YellowBackground\" Color=\"#f1ecda\"/>\n<SolidColorBrush x:Key=\"BlueBackground\" Color=\"#d6edf5\"/>\n<SolidColorBrush x:Key=\"BrownBackground\" Color=\"#ecdfdf\"/>\n```\n\n#### Standard UI Elements\n```xaml\n<SolidColorBrush x:Key=\"ContainerBackground\" Color=\"WhiteSmoke\"/>\n<SolidColorBrush x:Key=\"ControlDefaultForeground\" Color=\"#FF040404\" />\n<SolidColorBrush x:Key=\"ControlDefaultBackground\" Color=\"#FFE1E1E1\"/>\n```\n\n## Theme Detection and Changes\n\n### Detecting Theme in Code\n"
    }
  },
  {
    "pageContent": "\"#eddede\"/>\n<SolidColorBrush x:Key=\"YellowBackground\" Color=\"#f1ecda\"/>\n<SolidColorBrush x:Key=\"BlueBackground\" Color=\"#d6edf5\"/>\n<SolidColorBrush x:Key=\"BrownBackground\" Color=\"#ecdfdf\"/>\n```\n\n#### Standard UI Elements\n```xaml\n<SolidColorBrush x:Key=\"ContainerBackground\" Color=\"WhiteSmoke\"/>\n<SolidColorBrush x:Key=\"ControlDefaultForeground\" Color=\"#FF040404\" />\n<SolidColorBrush x:Key=\"ControlDefaultBackground\" Color=\"#FFE1E1E1\"/>\n```\n\n## Theme Detection and Changes\n\n### Detecting Theme in Code\n\n\n```csharp\n// Check if dark theme is active\nbool isDark = WLClientHost.Instance.IsDarkTheme;\n\n// Subscribe to theme changes\nEventRouter.Subscribe(\"ThemeChanged\", (bool isDark) => {\n    // Handle theme change\n});\n\n```",
    "metadata": {
      "id": "theming",
      "title": "theming",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/theming.md",
      "chunkIndex": "code-context-5",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "<wpf:WLImage IsReversed=\"{DynamicResource IsDark}\" />\n",
    "metadata": {
      "id": "theming",
      "title": "theming",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/theming.md",
      "chunkIndex": "code-6",
      "contentType": "code",
      "language": "xaml",
      "chunkType": "code_block",
      "context": " x:Key=\"ContainerBackground\" Color=\"WhiteSmoke\"/>\n<SolidColorBrush x:Key=\"ControlDefaultForeground\" Color=\"#FF040404\" />\n<SolidColorBrush x:Key=\"ControlDefaultBackground\" Color=\"#FFE1E1E1\"/>\n```\n\n## Theme Detection and Changes\n\n### Detecting Theme in Code\n```csharp\n// Check if dark theme is active\nbool isDark = WLClientHost.Instance.IsDarkTheme;\n\n// Subscribe to theme changes\nEventRouter.Subscribe(\"ThemeChanged\", (bool isDark) => {\n    // Handle theme change\n});\n```\n\n### Theme Detection in XAML\n"
    }
  },
  {
    "pageContent": " x:Key=\"ContainerBackground\" Color=\"WhiteSmoke\"/>\n<SolidColorBrush x:Key=\"ControlDefaultForeground\" Color=\"#FF040404\" />\n<SolidColorBrush x:Key=\"ControlDefaultBackground\" Color=\"#FFE1E1E1\"/>\n```\n\n## Theme Detection and Changes\n\n### Detecting Theme in Code\n```csharp\n// Check if dark theme is active\nbool isDark = WLClientHost.Instance.IsDarkTheme;\n\n// Subscribe to theme changes\nEventRouter.Subscribe(\"ThemeChanged\", (bool isDark) => {\n    // Handle theme change\n});\n```\n\n### Theme Detection in XAML\n\n\n```xaml\n<wpf:WLImage IsReversed=\"{DynamicResource IsDark}\" />\n\n```",
    "metadata": {
      "id": "theming",
      "title": "theming",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/theming.md",
      "chunkIndex": "code-context-6",
      "contentType": "mixed",
      "language": "xaml",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "<wpf:WLImage \n    BaseSource=\"/Images/icon.png\"\n    DisableReverse=\"False\"\n    IsReversed=\"{DynamicResource IsDark}\" />\n",
    "metadata": {
      "id": "theming",
      "title": "theming",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/theming.md",
      "chunkIndex": "code-7",
      "contentType": "code",
      "language": "xaml",
      "chunkType": "code_block",
      "context": "ControlDefaultBackground\" Color=\"#FFE1E1E1\"/>\n```\n\n## Theme Detection and Changes\n\n### Detecting Theme in Code\n```csharp\n// Check if dark theme is active\nbool isDark = WLClientHost.Instance.IsDarkTheme;\n\n// Subscribe to theme changes\nEventRouter.Subscribe(\"ThemeChanged\", (bool isDark) => {\n    // Handle theme change\n});\n```\n\n### Theme Detection in XAML\n```xaml\n<wpf:WLImage IsReversed=\"{DynamicResource IsDark}\" />\n```\n\n## WL8 UI Components\n\n### WLImage\nEnhanced Image control with theme support:\n\n"
    }
  },
  {
    "pageContent": "ControlDefaultBackground\" Color=\"#FFE1E1E1\"/>\n```\n\n## Theme Detection and Changes\n\n### Detecting Theme in Code\n```csharp\n// Check if dark theme is active\nbool isDark = WLClientHost.Instance.IsDarkTheme;\n\n// Subscribe to theme changes\nEventRouter.Subscribe(\"ThemeChanged\", (bool isDark) => {\n    // Handle theme change\n});\n```\n\n### Theme Detection in XAML\n```xaml\n<wpf:WLImage IsReversed=\"{DynamicResource IsDark}\" />\n```\n\n## WL8 UI Components\n\n### WLImage\nEnhanced Image control with theme support:\n\n\n\n```xaml\n<wpf:WLImage \n    BaseSource=\"/Images/icon.png\"\n    DisableReverse=\"False\"\n    IsReversed=\"{DynamicResource IsDark}\" />\n\n```",
    "metadata": {
      "id": "theming",
      "title": "theming",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/theming.md",
      "chunkIndex": "code-context-7",
      "contentType": "mixed",
      "language": "xaml",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public class WLImage : Image\n{\n    public ImageSource BaseSource { get; set; }\n    public bool DisableReverse { get; set; }\n    public bool IsReversed { get; set; }\n}\n",
    "metadata": {
      "id": "theming",
      "title": "theming",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/theming.md",
      "chunkIndex": "code-8",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "dark theme is active\nbool isDark = WLClientHost.Instance.IsDarkTheme;\n\n// Subscribe to theme changes\nEventRouter.Subscribe(\"ThemeChanged\", (bool isDark) => {\n    // Handle theme change\n});\n```\n\n### Theme Detection in XAML\n```xaml\n<wpf:WLImage IsReversed=\"{DynamicResource IsDark}\" />\n```\n\n## WL8 UI Components\n\n### WLImage\nEnhanced Image control with theme support:\n\n```xaml\n<wpf:WLImage \n    BaseSource=\"/Images/icon.png\"\n    DisableReverse=\"False\"\n    IsReversed=\"{DynamicResource IsDark}\" />\n```\n\n"
    }
  },
  {
    "pageContent": "dark theme is active\nbool isDark = WLClientHost.Instance.IsDarkTheme;\n\n// Subscribe to theme changes\nEventRouter.Subscribe(\"ThemeChanged\", (bool isDark) => {\n    // Handle theme change\n});\n```\n\n### Theme Detection in XAML\n```xaml\n<wpf:WLImage IsReversed=\"{DynamicResource IsDark}\" />\n```\n\n## WL8 UI Components\n\n### WLImage\nEnhanced Image control with theme support:\n\n```xaml\n<wpf:WLImage \n    BaseSource=\"/Images/icon.png\"\n    DisableReverse=\"False\"\n    IsReversed=\"{DynamicResource IsDark}\" />\n```\n\n\n\n```csharp\npublic class WLImage : Image\n{\n    public ImageSource BaseSource { get; set; }\n    public bool DisableReverse { get; set; }\n    public bool IsReversed { get; set; }\n}\n\n```",
    "metadata": {
      "id": "theming",
      "title": "theming",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/theming.md",
      "chunkIndex": "code-context-8",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "<wpf:WLButton \n    DisplayState=\"ImageAndText\"\n    Text=\"Submit\"\n    Image=\"/Images/submit.png\"\n    DisableReverse=\"False\" />\n",
    "metadata": {
      "id": "theming",
      "title": "theming",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/theming.md",
      "chunkIndex": "code-9",
      "contentType": "code",
      "language": "xaml",
      "chunkType": "code_block",
      "context": "ge IsReversed=\"{DynamicResource IsDark}\" />\n```\n\n## WL8 UI Components\n\n### WLImage\nEnhanced Image control with theme support:\n\n```xaml\n<wpf:WLImage \n    BaseSource=\"/Images/icon.png\"\n    DisableReverse=\"False\"\n    IsReversed=\"{DynamicResource IsDark}\" />\n```\n\n```csharp\npublic class WLImage : Image\n{\n    public ImageSource BaseSource { get; set; }\n    public bool DisableReverse { get; set; }\n    public bool IsReversed { get; set; }\n}\n```\n\n### WLButton\nEnhanced Button control with theme support:\n\n"
    }
  },
  {
    "pageContent": "ge IsReversed=\"{DynamicResource IsDark}\" />\n```\n\n## WL8 UI Components\n\n### WLImage\nEnhanced Image control with theme support:\n\n```xaml\n<wpf:WLImage \n    BaseSource=\"/Images/icon.png\"\n    DisableReverse=\"False\"\n    IsReversed=\"{DynamicResource IsDark}\" />\n```\n\n```csharp\npublic class WLImage : Image\n{\n    public ImageSource BaseSource { get; set; }\n    public bool DisableReverse { get; set; }\n    public bool IsReversed { get; set; }\n}\n```\n\n### WLButton\nEnhanced Button control with theme support:\n\n\n\n```xaml\n<wpf:WLButton \n    DisplayState=\"ImageAndText\"\n    Text=\"Submit\"\n    Image=\"/Images/submit.png\"\n    DisableReverse=\"False\" />\n\n```",
    "metadata": {
      "id": "theming",
      "title": "theming",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/theming.md",
      "chunkIndex": "code-context-9",
      "contentType": "mixed",
      "language": "xaml",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public class WLButton : Button\n{\n    public WLButtonDisplayState DisplayState { get; set; }\n    public string Text { get; set; }\n    public ImageSource Image { get; set; }\n    public bool DisableReverse { get; set; }\n}\n",
    "metadata": {
      "id": "theming",
      "title": "theming",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/theming.md",
      "chunkIndex": "code-10",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": ":WLImage \n    BaseSource=\"/Images/icon.png\"\n    DisableReverse=\"False\"\n    IsReversed=\"{DynamicResource IsDark}\" />\n```\n\n```csharp\npublic class WLImage : Image\n{\n    public ImageSource BaseSource { get; set; }\n    public bool DisableReverse { get; set; }\n    public bool IsReversed { get; set; }\n}\n```\n\n### WLButton\nEnhanced Button control with theme support:\n\n```xaml\n<wpf:WLButton \n    DisplayState=\"ImageAndText\"\n    Text=\"Submit\"\n    Image=\"/Images/submit.png\"\n    DisableReverse=\"False\" />\n```\n\n"
    }
  },
  {
    "pageContent": ":WLImage \n    BaseSource=\"/Images/icon.png\"\n    DisableReverse=\"False\"\n    IsReversed=\"{DynamicResource IsDark}\" />\n```\n\n```csharp\npublic class WLImage : Image\n{\n    public ImageSource BaseSource { get; set; }\n    public bool DisableReverse { get; set; }\n    public bool IsReversed { get; set; }\n}\n```\n\n### WLButton\nEnhanced Button control with theme support:\n\n```xaml\n<wpf:WLButton \n    DisplayState=\"ImageAndText\"\n    Text=\"Submit\"\n    Image=\"/Images/submit.png\"\n    DisableReverse=\"False\" />\n```\n\n\n\n```csharp\npublic class WLButton : Button\n{\n    public WLButtonDisplayState DisplayState { get; set; }\n    public string Text { get; set; }\n    public ImageSource Image { get; set; }\n    public bool DisableReverse { get; set; }\n}\n\n```",
    "metadata": {
      "id": "theming",
      "title": "theming",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/theming.md",
      "chunkIndex": "code-context-10",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "<wpf:DialogWindow\n    Style=\"{DynamicResource CustomToolWindowStyle}\"\n    Background=\"{DynamicResource ContainerBackground}\"\n    DesignSizeToContent=\"WidthAndHeight\">\n",
    "metadata": {
      "id": "theming",
      "title": "theming",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/theming.md",
      "chunkIndex": "code-11",
      "contentType": "code",
      "language": "xaml",
      "chunkType": "code_block",
      "context": "et; }\n}\n```\n\n### WLButton\nEnhanced Button control with theme support:\n\n```xaml\n<wpf:WLButton \n    DisplayState=\"ImageAndText\"\n    Text=\"Submit\"\n    Image=\"/Images/submit.png\"\n    DisableReverse=\"False\" />\n```\n\n```csharp\npublic class WLButton : Button\n{\n    public WLButtonDisplayState DisplayState { get; set; }\n    public string Text { get; set; }\n    public ImageSource Image { get; set; }\n    public bool DisableReverse { get; set; }\n}\n```\n\n### DialogWindow\nBase window class for themed windows:\n\n"
    }
  },
  {
    "pageContent": "et; }\n}\n```\n\n### WLButton\nEnhanced Button control with theme support:\n\n```xaml\n<wpf:WLButton \n    DisplayState=\"ImageAndText\"\n    Text=\"Submit\"\n    Image=\"/Images/submit.png\"\n    DisableReverse=\"False\" />\n```\n\n```csharp\npublic class WLButton : Button\n{\n    public WLButtonDisplayState DisplayState { get; set; }\n    public string Text { get; set; }\n    public ImageSource Image { get; set; }\n    public bool DisableReverse { get; set; }\n}\n```\n\n### DialogWindow\nBase window class for themed windows:\n\n\n\n```xaml\n<wpf:DialogWindow\n    Style=\"{DynamicResource CustomToolWindowStyle}\"\n    Background=\"{DynamicResource ContainerBackground}\"\n    DesignSizeToContent=\"WidthAndHeight\">\n\n```",
    "metadata": {
      "id": "theming",
      "title": "theming",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/theming.md",
      "chunkIndex": "code-context-11",
      "contentType": "mixed",
      "language": "xaml",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "<wpf:WLContextMenu>\n    <MenuItem Header=\"Option 1\" />\n    <MenuItem Header=\"Option 2\" />\n</wpf:WLContextMenu>\n",
    "metadata": {
      "id": "theming",
      "title": "theming",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/theming.md",
      "chunkIndex": "code-12",
      "contentType": "code",
      "language": "xaml",
      "chunkType": "code_block",
      "context": "c class WLButton : Button\n{\n    public WLButtonDisplayState DisplayState { get; set; }\n    public string Text { get; set; }\n    public ImageSource Image { get; set; }\n    public bool DisableReverse { get; set; }\n}\n```\n\n### DialogWindow\nBase window class for themed windows:\n\n```xaml\n<wpf:DialogWindow\n    Style=\"{DynamicResource CustomToolWindowStyle}\"\n    Background=\"{DynamicResource ContainerBackground}\"\n    DesignSizeToContent=\"WidthAndHeight\">\n```\n\n### WLContextMenu\nTheme-aware context menu:\n\n"
    }
  },
  {
    "pageContent": "c class WLButton : Button\n{\n    public WLButtonDisplayState DisplayState { get; set; }\n    public string Text { get; set; }\n    public ImageSource Image { get; set; }\n    public bool DisableReverse { get; set; }\n}\n```\n\n### DialogWindow\nBase window class for themed windows:\n\n```xaml\n<wpf:DialogWindow\n    Style=\"{DynamicResource CustomToolWindowStyle}\"\n    Background=\"{DynamicResource ContainerBackground}\"\n    DesignSizeToContent=\"WidthAndHeight\">\n```\n\n### WLContextMenu\nTheme-aware context menu:\n\n\n\n```xaml\n<wpf:WLContextMenu>\n    <MenuItem Header=\"Option 1\" />\n    <MenuItem Header=\"Option 2\" />\n</wpf:WLContextMenu>\n\n```",
    "metadata": {
      "id": "theming",
      "title": "theming",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/theming.md",
      "chunkIndex": "code-context-12",
      "contentType": "mixed",
      "language": "xaml",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public class MyExtension : Configurable\n{\n    public override bool DisableGlyphReverse => true; // Disable automatic image reversal\n}\n",
    "metadata": {
      "id": "theming",
      "title": "theming",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/theming.md",
      "chunkIndex": "code-13",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "# DialogWindow\nBase window class for themed windows:\n\n```xaml\n<wpf:DialogWindow\n    Style=\"{DynamicResource CustomToolWindowStyle}\"\n    Background=\"{DynamicResource ContainerBackground}\"\n    DesignSizeToContent=\"WidthAndHeight\">\n```\n\n### WLContextMenu\nTheme-aware context menu:\n\n```xaml\n<wpf:WLContextMenu>\n    <MenuItem Header=\"Option 1\" />\n    <MenuItem Header=\"Option 2\" />\n</wpf:WLContextMenu>\n```\n\n## Working with Themes\n\n### Configurable Extensions\nFor extensions derived from `Configurable`:\n\n"
    }
  },
  {
    "pageContent": "# DialogWindow\nBase window class for themed windows:\n\n```xaml\n<wpf:DialogWindow\n    Style=\"{DynamicResource CustomToolWindowStyle}\"\n    Background=\"{DynamicResource ContainerBackground}\"\n    DesignSizeToContent=\"WidthAndHeight\">\n```\n\n### WLContextMenu\nTheme-aware context menu:\n\n```xaml\n<wpf:WLContextMenu>\n    <MenuItem Header=\"Option 1\" />\n    <MenuItem Header=\"Option 2\" />\n</wpf:WLContextMenu>\n```\n\n## Working with Themes\n\n### Configurable Extensions\nFor extensions derived from `Configurable`:\n\n\n\n```csharp\npublic class MyExtension : Configurable\n{\n    public override bool DisableGlyphReverse => true; // Disable automatic image reversal\n}\n\n```",
    "metadata": {
      "id": "theming",
      "title": "theming",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/theming.md",
      "chunkIndex": "code-context-13",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public void OnUIChanged()\n{\n    // Refresh theme on this control and descendants\n    MyClientHost.RefreshTheme(this);\n}\n",
    "metadata": {
      "id": "theming",
      "title": "theming",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/theming.md",
      "chunkIndex": "code-14",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ght\">\n```\n\n### WLContextMenu\nTheme-aware context menu:\n\n```xaml\n<wpf:WLContextMenu>\n    <MenuItem Header=\"Option 1\" />\n    <MenuItem Header=\"Option 2\" />\n</wpf:WLContextMenu>\n```\n\n## Working with Themes\n\n### Configurable Extensions\nFor extensions derived from `Configurable`:\n\n```csharp\npublic class MyExtension : Configurable\n{\n    public override bool DisableGlyphReverse => true; // Disable automatic image reversal\n}\n```\n\n### Dynamic UI Updates\nRefresh theme on dynamically created UI elements:\n\n"
    }
  },
  {
    "pageContent": "ght\">\n```\n\n### WLContextMenu\nTheme-aware context menu:\n\n```xaml\n<wpf:WLContextMenu>\n    <MenuItem Header=\"Option 1\" />\n    <MenuItem Header=\"Option 2\" />\n</wpf:WLContextMenu>\n```\n\n## Working with Themes\n\n### Configurable Extensions\nFor extensions derived from `Configurable`:\n\n```csharp\npublic class MyExtension : Configurable\n{\n    public override bool DisableGlyphReverse => true; // Disable automatic image reversal\n}\n```\n\n### Dynamic UI Updates\nRefresh theme on dynamically created UI elements:\n\n\n\n```csharp\npublic void OnUIChanged()\n{\n    // Refresh theme on this control and descendants\n    MyClientHost.RefreshTheme(this);\n}\n\n```",
    "metadata": {
      "id": "theming",
      "title": "theming",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/theming.md",
      "chunkIndex": "code-context-14",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "<wpf:DialogWindow x:Class=\"MyNamespace.MyWindow\"\n    xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n    xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n    xmlns:wpf=\"clr-namespace:WealthLab.WPF;assembly=WealthLab.WPF\"\n    Title=\"My Window\"\n    Style=\"{DynamicResource CustomToolWindowStyle}\"\n    Background=\"{DynamicResource ContainerBackground}\"\n    DesignSizeToContent=\"WidthAndHeight\">\n    \n    <Grid Margin=\"10\">\n        <StackPanel>\n            <wpf:WLButton \n                DisplayState=\"ImageAndText\"\n                Text=\"Settings\"\n                Image=\"/Images/settings.png\">\n                <wpf:WLButton.ContextMenu>\n                    <wpf:WLContextMenu>\n                        <MenuItem Header=\"Option 1\" />\n                        <MenuItem Header=\"Option 2\" />\n                    </wpf:WLContextMenu>\n                </wpf:WLButton.ContextMenu>\n            </wpf:WLButton>\n            \n            <TextBlock \n                Text=\"Sample Text\"\n                Foreground=\"{DynamicResource ControlDefaultForeground}\" />\n                \n            <Border \n                Background=\"{DynamicResource BlueBackground}\"\n                BorderBrush=\"{DynamicResource ControlDefaultBorderBrush}\"\n                BorderThickness=\"1\"\n                Padding=\"10\">\n                <wpf:WLImage \n                    BaseSource=\"/Images/icon.png\"\n                    Width=\"32\"\n                    Height=\"32\" />\n            </Border>\n        </StackPanel>\n    </Grid>\n</wpf:DialogWindow>\n",
    "metadata": {
      "id": "theming",
      "title": "theming",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/theming.md",
      "chunkIndex": "code-15",
      "contentType": "code",
      "language": "xaml",
      "chunkType": "code_block",
      "context": " - Use CustomToolWindowStyle\n   - Use DesignSizeToContent instead of SizeToContent\n\n3. **Context Menus**\n   - Use WLContextMenu instead of ContextMenu\n   - Ensures proper theme behavior\n\n4. **Image Handling**\n   - Use WLImage for automatic dark theme support\n   - Override DisableGlyphReverse when needed\n\n5. **Dynamic UI**\n   - Call RefreshTheme after creating UI elements\n   - Subscribe to ThemeChanged for runtime updates\n\n## Example Implementation\n\nHere's a complete example of a themed window:\n\n"
    }
  },
  {
    "pageContent": " - Use CustomToolWindowStyle\n   - Use DesignSizeToContent instead of SizeToContent\n\n3. **Context Menus**\n   - Use WLContextMenu instead of ContextMenu\n   - Ensures proper theme behavior\n\n4. **Image Handling**\n   - Use WLImage for automatic dark theme support\n   - Override DisableGlyphReverse when needed\n\n5. **Dynamic UI**\n   - Call RefreshTheme after creating UI elements\n   - Subscribe to ThemeChanged for runtime updates\n\n## Example Implementation\n\nHere's a complete example of a themed window:\n\n\n\n```xaml\n<wpf:DialogWindow x:Class=\"MyNamespace.MyWindow\"\n    xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n    xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n    xmlns:wpf=\"clr-namespace:WealthLab.WPF;assembly=WealthLab.WPF\"\n    Title=\"My Window\"\n    Style=\"{DynamicResource CustomToolWindowStyle}\"\n    Background=\"{DynamicResource ContainerBackground}\"\n    DesignSizeToContent=\"WidthAndHeight\">\n    \n    <Grid Margin=\"10\">\n        <StackPanel>\n            <wpf:WLButton \n                DisplayState=\"ImageAndText\"\n                Text=\"Settings\"\n                Image=\"/Images/settings.png\">\n                <wpf:WLButton.ContextMenu>\n                    <wpf:WLContextMenu>\n                        <MenuItem Header=\"Option 1\" />\n                        <MenuItem Header=\"Option 2\" />\n                    </wpf:WLContextMenu>\n                </wpf:WLButton.ContextMenu>\n            </wpf:WLButton>\n            \n            <TextBlock \n                Text=\"Sample Text\"\n                Foreground=\"{DynamicResource ControlDefaultForeground}\" />\n                \n            <Border \n                Background=\"{DynamicResource BlueBackground}\"\n                BorderBrush=\"{DynamicResource ControlDefaultBorderBrush}\"\n                BorderThickness=\"1\"\n                Padding=\"10\">\n                <wpf:WLImage \n                    BaseSource=\"/Images/icon.png\"\n                    Width=\"32\"\n                    Height=\"32\" />\n            </Border>\n        </StackPanel>\n    </Grid>\n</wpf:DialogWindow>\n\n```",
    "metadata": {
      "id": "theming",
      "title": "theming",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/theming.md",
      "chunkIndex": "code-context-15",
      "contentType": "mixed",
      "language": "xaml",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public partial class MyWindow : DialogWindow\n{\n    public MyWindow()\n    {\n        InitializeComponent();\n        \n        // Subscribe to theme changes\n        EventRouter.Subscribe(\"ThemeChanged\", OnThemeChanged);\n    }\n    \n    private void OnThemeChanged(bool isDark)\n    {\n        // Handle theme change\n        MyClientHost.RefreshTheme(this);\n    }\n}\n",
    "metadata": {
      "id": "theming",
      "title": "theming",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/theming.md",
      "chunkIndex": "code-16",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "ce ControlDefaultForeground}\" />\n                \n            <Border \n                Background=\"{DynamicResource BlueBackground}\"\n                BorderBrush=\"{DynamicResource ControlDefaultBorderBrush}\"\n                BorderThickness=\"1\"\n                Padding=\"10\">\n                <wpf:WLImage \n                    BaseSource=\"/Images/icon.png\"\n                    Width=\"32\"\n                    Height=\"32\" />\n            </Border>\n        </StackPanel>\n    </Grid>\n</wpf:DialogWindow>\n```\n\n"
    }
  },
  {
    "pageContent": "ce ControlDefaultForeground}\" />\n                \n            <Border \n                Background=\"{DynamicResource BlueBackground}\"\n                BorderBrush=\"{DynamicResource ControlDefaultBorderBrush}\"\n                BorderThickness=\"1\"\n                Padding=\"10\">\n                <wpf:WLImage \n                    BaseSource=\"/Images/icon.png\"\n                    Width=\"32\"\n                    Height=\"32\" />\n            </Border>\n        </StackPanel>\n    </Grid>\n</wpf:DialogWindow>\n```\n\n\n\n```csharp\npublic partial class MyWindow : DialogWindow\n{\n    public MyWindow()\n    {\n        InitializeComponent();\n        \n        // Subscribe to theme changes\n        EventRouter.Subscribe(\"ThemeChanged\", OnThemeChanged);\n    }\n    \n    private void OnThemeChanged(bool isDark)\n    {\n        // Handle theme change\n        MyClientHost.RefreshTheme(this);\n    }\n}\n\n```",
    "metadata": {
      "id": "theming",
      "title": "theming",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/theming.md",
      "chunkIndex": "code-context-16",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "# UI Elements for WL8 Extensions\n\nThis document details how to provide user interface elements for WL8 Extensions. WL8 enforces a separation of core logic components and user-interface (WPF) components to support cross-platform development.\n\n## Architecture Overview\n\nWL8 uses two main assemblies:\n- `WealthLab.Core`: Platform-neutral core logic library\n- `WealthLab.WPF`: Windows-specific UI components\n\nThe bridge between logical components and their editors is established through classes deriving from `ObjectEditorBase`. This provides several integration points:\n\n1. Custom Settings panels for configurable components\n2. New DataSet Wizard pages for Historical Data Providers\n3. BarGlyphs for Event Providers to display Events uniquely\n4. Platform Methods for cross-platform functionality\n\n## Developing an ObjectEditorBase Class\n\nIf your components need custom configuration or WL8 UI interaction, create a class derived from `ObjectEditorBase`. The `Name` property must match exactly the `Name` of the component you're supporting.\n\nExample:\n",
    "metadata": {
      "id": "ui-elements",
      "title": "ui-elements",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/ui-elements.md",
      "chunkIndex": 0,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n## Custom Editor Panels\n\n### Configuration Modes\n\nThe `Configurable` base class supports two modes via `ConfigurableType`:\n\n1. `ParameterList`:\n   - Uses `Parameters` property containing `Parameter` instances\n   - Parameters created in `GenerateParameters` method\n   - Default Parameter Editor Panel provided by WL8\n\n2. `VanillaString`:\n   - Uses single `Configuration` string property\n   - Requires custom Editor Panel implementation\n\n### When to Create Custom Editor Panels\n\nCreate a custom Editor Panel when:\n- Using `VanillaString` configuration mode\n- Need specialized UI beyond standard Parameter Editor\n- Want to provide enhanced user experience\n\n### Implementing Custom Editor\n\n",
    "metadata": {
      "id": "ui-elements",
      "title": "ui-elements",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/ui-elements.md",
      "chunkIndex": 1,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n## New DataSet Wizard Pages\n\n### Purpose\nAllows Historical Data Providers to integrate with WL8's New DataSet Wizard for custom configuration.\n\n### Key Methods\n\n#### Initialization\n",
    "metadata": {
      "id": "ui-elements",
      "title": "ui-elements",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/ui-elements.md",
      "chunkIndex": 2,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n#### Page Navigation\n",
    "metadata": {
      "id": "ui-elements",
      "title": "ui-elements",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/ui-elements.md",
      "chunkIndex": 3,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n#### Configuration String\n",
    "metadata": {
      "id": "ui-elements",
      "title": "ui-elements",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/ui-elements.md",
      "chunkIndex": 4,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n## BarGlyphs for Events\n\n### Custom Event Visualization\nEvent Providers can customize event visualization on charts by implementing:\n\n",
    "metadata": {
      "id": "ui-elements",
      "title": "ui-elements",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/ui-elements.md",
      "chunkIndex": 5,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n## Platform Methods\n\n### Cross-Platform Functionality\nEnables platform-specific operations from platform-neutral code:\n\n",
    "metadata": {
      "id": "ui-elements",
      "title": "ui-elements",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/ui-elements.md",
      "chunkIndex": 6,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n### Example Usage\nFrom platform-neutral code:\n",
    "metadata": {
      "id": "ui-elements",
      "title": "ui-elements",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/ui-elements.md",
      "chunkIndex": 7,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "\n\n## Example Implementation\n\nBelow is a complete example of a custom editor for a Historical Data Provider:\n\n",
    "metadata": {
      "id": "ui-elements",
      "title": "ui-elements",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/ui-elements.md",
      "chunkIndex": 8,
      "contentType": "text",
      "chunkType": "text_only"
    }
  },
  {
    "pageContent": "public class MyProviderEditor : ObjectEditorBase\n{\n    public override string Name => \"My Provider\";  // Must match component's Name\n}\n",
    "metadata": {
      "id": "ui-elements",
      "title": "ui-elements",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/ui-elements.md",
      "chunkIndex": "code-0",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "integration points:\n\n1. Custom Settings panels for configurable components\n2. New DataSet Wizard pages for Historical Data Providers\n3. BarGlyphs for Event Providers to display Events uniquely\n4. Platform Methods for cross-platform functionality\n\n## Developing an ObjectEditorBase Class\n\nIf your components need custom configuration or WL8 UI interaction, create a class derived from `ObjectEditorBase`. The `Name` property must match exactly the `Name` of the component you're supporting.\n\nExample:\n"
    }
  },
  {
    "pageContent": "integration points:\n\n1. Custom Settings panels for configurable components\n2. New DataSet Wizard pages for Historical Data Providers\n3. BarGlyphs for Event Providers to display Events uniquely\n4. Platform Methods for cross-platform functionality\n\n## Developing an ObjectEditorBase Class\n\nIf your components need custom configuration or WL8 UI interaction, create a class derived from `ObjectEditorBase`. The `Name` property must match exactly the `Name` of the component you're supporting.\n\nExample:\n\n\n```csharp\npublic class MyProviderEditor : ObjectEditorBase\n{\n    public override string Name => \"My Provider\";  // Must match component's Name\n}\n\n```",
    "metadata": {
      "id": "ui-elements",
      "title": "ui-elements",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/ui-elements.md",
      "chunkIndex": "code-context-0",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public override ICustomSettingsEditor GetCustomSettingsEditor()\n{\n    return new MyCustomEditorPanel();  // Your WPF UserControl implementing ICustomSettingsEditor\n}\n",
    "metadata": {
      "id": "ui-elements",
      "title": "ui-elements",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/ui-elements.md",
      "chunkIndex": "code-1",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": " `Parameter` instances\n   - Parameters created in `GenerateParameters` method\n   - Default Parameter Editor Panel provided by WL8\n\n2. `VanillaString`:\n   - Uses single `Configuration` string property\n   - Requires custom Editor Panel implementation\n\n### When to Create Custom Editor Panels\n\nCreate a custom Editor Panel when:\n- Using `VanillaString` configuration mode\n- Need specialized UI beyond standard Parameter Editor\n- Want to provide enhanced user experience\n\n### Implementing Custom Editor\n\n"
    }
  },
  {
    "pageContent": " `Parameter` instances\n   - Parameters created in `GenerateParameters` method\n   - Default Parameter Editor Panel provided by WL8\n\n2. `VanillaString`:\n   - Uses single `Configuration` string property\n   - Requires custom Editor Panel implementation\n\n### When to Create Custom Editor Panels\n\nCreate a custom Editor Panel when:\n- Using `VanillaString` configuration mode\n- Need specialized UI beyond standard Parameter Editor\n- Want to provide enhanced user experience\n\n### Implementing Custom Editor\n\n\n\n```csharp\npublic override ICustomSettingsEditor GetCustomSettingsEditor()\n{\n    return new MyCustomEditorPanel();  // Your WPF UserControl implementing ICustomSettingsEditor\n}\n\n```",
    "metadata": {
      "id": "ui-elements",
      "title": "ui-elements",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/ui-elements.md",
      "chunkIndex": "code-context-1",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public override void InitializeNewDataSetWizard(DataSet ds = null)\n{\n    // Initialize wizard pages\n    if (ds != null)\n    {\n        // Populate controls based on ds.DSString\n    }\n}\n",
    "metadata": {
      "id": "ui-elements",
      "title": "ui-elements",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/ui-elements.md",
      "chunkIndex": "code-2",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "n mode\n- Need specialized UI beyond standard Parameter Editor\n- Want to provide enhanced user experience\n\n### Implementing Custom Editor\n\n```csharp\npublic override ICustomSettingsEditor GetCustomSettingsEditor()\n{\n    return new MyCustomEditorPanel();  // Your WPF UserControl implementing ICustomSettingsEditor\n}\n```\n\n## New DataSet Wizard Pages\n\n### Purpose\nAllows Historical Data Providers to integrate with WL8's New DataSet Wizard for custom configuration.\n\n### Key Methods\n\n#### Initialization\n"
    }
  },
  {
    "pageContent": "n mode\n- Need specialized UI beyond standard Parameter Editor\n- Want to provide enhanced user experience\n\n### Implementing Custom Editor\n\n```csharp\npublic override ICustomSettingsEditor GetCustomSettingsEditor()\n{\n    return new MyCustomEditorPanel();  // Your WPF UserControl implementing ICustomSettingsEditor\n}\n```\n\n## New DataSet Wizard Pages\n\n### Purpose\nAllows Historical Data Providers to integrate with WL8's New DataSet Wizard for custom configuration.\n\n### Key Methods\n\n#### Initialization\n\n\n```csharp\npublic override void InitializeNewDataSetWizard(DataSet ds = null)\n{\n    // Initialize wizard pages\n    if (ds != null)\n    {\n        // Populate controls based on ds.DSString\n    }\n}\n\n```",
    "metadata": {
      "id": "ui-elements",
      "title": "ui-elements",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/ui-elements.md",
      "chunkIndex": "code-context-2",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public override UserControl GetFirstWizardPage()\n{\n    return new MyFirstWizardPage();\n}\n\npublic override bool CanAdvanceToNextPage(UserControl page, ref string errorMessage)\n{\n    // Validate current page\n    if (!isValid)\n    {\n        errorMessage = \"Please correct...\";\n        return false;\n    }\n    return true;\n}\n\npublic override UserControl GetNextWizardPage(UserControl page)\n{\n    if (page is MyFirstWizardPage)\n        return new MySecondWizardPage();\n    return null;  // No more pages\n}\n\npublic override bool IsLastWizardPage(UserControl page)\n{\n    return page is MyLastWizardPage;\n}\n",
    "metadata": {
      "id": "ui-elements",
      "title": "ui-elements",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/ui-elements.md",
      "chunkIndex": "code-3",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "turn new MyCustomEditorPanel();  // Your WPF UserControl implementing ICustomSettingsEditor\n}\n```\n\n## New DataSet Wizard Pages\n\n### Purpose\nAllows Historical Data Providers to integrate with WL8's New DataSet Wizard for custom configuration.\n\n### Key Methods\n\n#### Initialization\n```csharp\npublic override void InitializeNewDataSetWizard(DataSet ds = null)\n{\n    // Initialize wizard pages\n    if (ds != null)\n    {\n        // Populate controls based on ds.DSString\n    }\n}\n```\n\n#### Page Navigation\n"
    }
  },
  {
    "pageContent": "turn new MyCustomEditorPanel();  // Your WPF UserControl implementing ICustomSettingsEditor\n}\n```\n\n## New DataSet Wizard Pages\n\n### Purpose\nAllows Historical Data Providers to integrate with WL8's New DataSet Wizard for custom configuration.\n\n### Key Methods\n\n#### Initialization\n```csharp\npublic override void InitializeNewDataSetWizard(DataSet ds = null)\n{\n    // Initialize wizard pages\n    if (ds != null)\n    {\n        // Populate controls based on ds.DSString\n    }\n}\n```\n\n#### Page Navigation\n\n\n```csharp\npublic override UserControl GetFirstWizardPage()\n{\n    return new MyFirstWizardPage();\n}\n\npublic override bool CanAdvanceToNextPage(UserControl page, ref string errorMessage)\n{\n    // Validate current page\n    if (!isValid)\n    {\n        errorMessage = \"Please correct...\";\n        return false;\n    }\n    return true;\n}\n\npublic override UserControl GetNextWizardPage(UserControl page)\n{\n    if (page is MyFirstWizardPage)\n        return new MySecondWizardPage();\n    return null;  // No more pages\n}\n\npublic override bool IsLastWizardPage(UserControl page)\n{\n    return page is MyLastWizardPage;\n}\n\n```",
    "metadata": {
      "id": "ui-elements",
      "title": "ui-elements",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/ui-elements.md",
      "chunkIndex": "code-context-3",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public override string GetWizardDSString()\n{\n    // Return configuration based on wizard page inputs\n    return $\"setting1={value1};setting2={value2}\";\n}\n",
    "metadata": {
      "id": "ui-elements",
      "title": "ui-elements",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/ui-elements.md",
      "chunkIndex": "code-4",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "e(UserControl page, ref string errorMessage)\n{\n    // Validate current page\n    if (!isValid)\n    {\n        errorMessage = \"Please correct...\";\n        return false;\n    }\n    return true;\n}\n\npublic override UserControl GetNextWizardPage(UserControl page)\n{\n    if (page is MyFirstWizardPage)\n        return new MySecondWizardPage();\n    return null;  // No more pages\n}\n\npublic override bool IsLastWizardPage(UserControl page)\n{\n    return page is MyLastWizardPage;\n}\n```\n\n#### Configuration String\n"
    }
  },
  {
    "pageContent": "e(UserControl page, ref string errorMessage)\n{\n    // Validate current page\n    if (!isValid)\n    {\n        errorMessage = \"Please correct...\";\n        return false;\n    }\n    return true;\n}\n\npublic override UserControl GetNextWizardPage(UserControl page)\n{\n    if (page is MyFirstWizardPage)\n        return new MySecondWizardPage();\n    return null;  // No more pages\n}\n\npublic override bool IsLastWizardPage(UserControl page)\n{\n    return page is MyLastWizardPage;\n}\n```\n\n#### Configuration String\n\n\n```csharp\npublic override string GetWizardDSString()\n{\n    // Return configuration based on wizard page inputs\n    return $\"setting1={value1};setting2={value2}\";\n}\n\n```",
    "metadata": {
      "id": "ui-elements",
      "title": "ui-elements",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/ui-elements.md",
      "chunkIndex": "code-context-4",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public override object GetEventBarGlyph(EventDataPoint edp)\n{\n    switch (edp.Name)\n    {\n        case \"CustomEvent\":\n            return new MyCustomBarGlyph();\n        default:\n            return null;  // Use default glyph\n    }\n}\n",
    "metadata": {
      "id": "ui-elements",
      "title": "ui-elements",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/ui-elements.md",
      "chunkIndex": "code-5",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "turn new MySecondWizardPage();\n    return null;  // No more pages\n}\n\npublic override bool IsLastWizardPage(UserControl page)\n{\n    return page is MyLastWizardPage;\n}\n```\n\n#### Configuration String\n```csharp\npublic override string GetWizardDSString()\n{\n    // Return configuration based on wizard page inputs\n    return $\"setting1={value1};setting2={value2}\";\n}\n```\n\n## BarGlyphs for Events\n\n### Custom Event Visualization\nEvent Providers can customize event visualization on charts by implementing:\n\n"
    }
  },
  {
    "pageContent": "turn new MySecondWizardPage();\n    return null;  // No more pages\n}\n\npublic override bool IsLastWizardPage(UserControl page)\n{\n    return page is MyLastWizardPage;\n}\n```\n\n#### Configuration String\n```csharp\npublic override string GetWizardDSString()\n{\n    // Return configuration based on wizard page inputs\n    return $\"setting1={value1};setting2={value2}\";\n}\n```\n\n## BarGlyphs for Events\n\n### Custom Event Visualization\nEvent Providers can customize event visualization on charts by implementing:\n\n\n\n```csharp\npublic override object GetEventBarGlyph(EventDataPoint edp)\n{\n    switch (edp.Name)\n    {\n        case \"CustomEvent\":\n            return new MyCustomBarGlyph();\n        default:\n            return null;  // Use default glyph\n    }\n}\n\n```",
    "metadata": {
      "id": "ui-elements",
      "title": "ui-elements",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/ui-elements.md",
      "chunkIndex": "code-context-5",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public override object ExecutePlatformMethod(string methodName, object parameter)\n{\n    switch (methodName)\n    {\n        case \"OpenDialog\":\n            return ShowCustomDialog(parameter as string);\n        case \"SaveFile\":\n            return HandleFileSave(parameter);\n        default:\n            return null;\n    }\n}\n",
    "metadata": {
      "id": "ui-elements",
      "title": "ui-elements",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/ui-elements.md",
      "chunkIndex": "code-6",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": " BarGlyphs for Events\n\n### Custom Event Visualization\nEvent Providers can customize event visualization on charts by implementing:\n\n```csharp\npublic override object GetEventBarGlyph(EventDataPoint edp)\n{\n    switch (edp.Name)\n    {\n        case \"CustomEvent\":\n            return new MyCustomBarGlyph();\n        default:\n            return null;  // Use default glyph\n    }\n}\n```\n\n## Platform Methods\n\n### Cross-Platform Functionality\nEnables platform-specific operations from platform-neutral code:\n\n"
    }
  },
  {
    "pageContent": " BarGlyphs for Events\n\n### Custom Event Visualization\nEvent Providers can customize event visualization on charts by implementing:\n\n```csharp\npublic override object GetEventBarGlyph(EventDataPoint edp)\n{\n    switch (edp.Name)\n    {\n        case \"CustomEvent\":\n            return new MyCustomBarGlyph();\n        default:\n            return null;  // Use default glyph\n    }\n}\n```\n\n## Platform Methods\n\n### Cross-Platform Functionality\nEnables platform-specific operations from platform-neutral code:\n\n\n\n```csharp\npublic override object ExecutePlatformMethod(string methodName, object parameter)\n{\n    switch (methodName)\n    {\n        case \"OpenDialog\":\n            return ShowCustomDialog(parameter as string);\n        case \"SaveFile\":\n            return HandleFileSave(parameter);\n        default:\n            return null;\n    }\n}\n\n```",
    "metadata": {
      "id": "ui-elements",
      "title": "ui-elements",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/ui-elements.md",
      "chunkIndex": "code-context-6",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "bool success = (bool)WLHost.Instance.ExecutePlatformMethod(\"OpenDialog\", \"Message\");\n",
    "metadata": {
      "id": "ui-elements",
      "title": "ui-elements",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/ui-elements.md",
      "chunkIndex": "code-7",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "# Platform Methods\n\n### Cross-Platform Functionality\nEnables platform-specific operations from platform-neutral code:\n\n```csharp\npublic override object ExecutePlatformMethod(string methodName, object parameter)\n{\n    switch (methodName)\n    {\n        case \"OpenDialog\":\n            return ShowCustomDialog(parameter as string);\n        case \"SaveFile\":\n            return HandleFileSave(parameter);\n        default:\n            return null;\n    }\n}\n```\n\n### Example Usage\nFrom platform-neutral code:\n"
    }
  },
  {
    "pageContent": "# Platform Methods\n\n### Cross-Platform Functionality\nEnables platform-specific operations from platform-neutral code:\n\n```csharp\npublic override object ExecutePlatformMethod(string methodName, object parameter)\n{\n    switch (methodName)\n    {\n        case \"OpenDialog\":\n            return ShowCustomDialog(parameter as string);\n        case \"SaveFile\":\n            return HandleFileSave(parameter);\n        default:\n            return null;\n    }\n}\n```\n\n### Example Usage\nFrom platform-neutral code:\n\n\n```csharp\nbool success = (bool)WLHost.Instance.ExecutePlatformMethod(\"OpenDialog\", \"Message\");\n\n```",
    "metadata": {
      "id": "ui-elements",
      "title": "ui-elements",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/ui-elements.md",
      "chunkIndex": "code-context-7",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  },
  {
    "pageContent": "public class MyProviderEditor : ObjectEditorBase\n{\n    private MyWizardPage _wizardPage;\n    \n    public override string Name => \"My Provider\";\n    \n    public override void InitializeNewDataSetWizard(DataSet ds = null)\n    {\n        _wizardPage = new MyWizardPage();\n        if (ds != null)\n        {\n            // Parse ds.DSString and populate wizard page\n            var settings = ParseDSString(ds.DSString);\n            _wizardPage.PopulateControls(settings);\n        }\n    }\n    \n    public override UserControl GetFirstWizardPage()\n    {\n        return _wizardPage;\n    }\n    \n    public override bool CanAdvanceToNextPage(UserControl page, ref string errorMessage)\n    {\n        if (!_wizardPage.ValidateInputs())\n        {\n            errorMessage = \"Please enter required settings\";\n            return false;\n        }\n        return true;\n    }\n    \n    public override string GetWizardDSString()\n    {\n        return _wizardPage.GenerateConfigString();\n    }\n    \n    public override ICustomSettingsEditor GetCustomSettingsEditor()\n    {\n        return new MyCustomSettingsPanel();\n    }\n    \n    public override object GetEventBarGlyph(EventDataPoint edp)\n    {\n        if (edp.Name == \"SpecialEvent\")\n            return new MyCustomGlyph();\n        return null;\n    }\n    \n    public override object ExecutePlatformMethod(string methodName, object parameter)\n    {\n        switch (methodName)\n        {\n            case \"ShowSettings\":\n                return ShowSettingsDialog();\n            default:\n                return null;\n        }\n    }\n}\n",
    "metadata": {
      "id": "ui-elements",
      "title": "ui-elements",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/ui-elements.md",
      "chunkIndex": "code-8",
      "contentType": "code",
      "language": "csharp",
      "chunkType": "code_block",
      "context": "er)\n{\n    switch (methodName)\n    {\n        case \"OpenDialog\":\n            return ShowCustomDialog(parameter as string);\n        case \"SaveFile\":\n            return HandleFileSave(parameter);\n        default:\n            return null;\n    }\n}\n```\n\n### Example Usage\nFrom platform-neutral code:\n```csharp\nbool success = (bool)WLHost.Instance.ExecutePlatformMethod(\"OpenDialog\", \"Message\");\n```\n\n## Example Implementation\n\nBelow is a complete example of a custom editor for a Historical Data Provider:\n\n"
    }
  },
  {
    "pageContent": "er)\n{\n    switch (methodName)\n    {\n        case \"OpenDialog\":\n            return ShowCustomDialog(parameter as string);\n        case \"SaveFile\":\n            return HandleFileSave(parameter);\n        default:\n            return null;\n    }\n}\n```\n\n### Example Usage\nFrom platform-neutral code:\n```csharp\nbool success = (bool)WLHost.Instance.ExecutePlatformMethod(\"OpenDialog\", \"Message\");\n```\n\n## Example Implementation\n\nBelow is a complete example of a custom editor for a Historical Data Provider:\n\n\n\n```csharp\npublic class MyProviderEditor : ObjectEditorBase\n{\n    private MyWizardPage _wizardPage;\n    \n    public override string Name => \"My Provider\";\n    \n    public override void InitializeNewDataSetWizard(DataSet ds = null)\n    {\n        _wizardPage = new MyWizardPage();\n        if (ds != null)\n        {\n            // Parse ds.DSString and populate wizard page\n            var settings = ParseDSString(ds.DSString);\n            _wizardPage.PopulateControls(settings);\n        }\n    }\n    \n    public override UserControl GetFirstWizardPage()\n    {\n        return _wizardPage;\n    }\n    \n    public override bool CanAdvanceToNextPage(UserControl page, ref string errorMessage)\n    {\n        if (!_wizardPage.ValidateInputs())\n        {\n            errorMessage = \"Please enter required settings\";\n            return false;\n        }\n        return true;\n    }\n    \n    public override string GetWizardDSString()\n    {\n        return _wizardPage.GenerateConfigString();\n    }\n    \n    public override ICustomSettingsEditor GetCustomSettingsEditor()\n    {\n        return new MyCustomSettingsPanel();\n    }\n    \n    public override object GetEventBarGlyph(EventDataPoint edp)\n    {\n        if (edp.Name == \"SpecialEvent\")\n            return new MyCustomGlyph();\n        return null;\n    }\n    \n    public override object ExecutePlatformMethod(string methodName, object parameter)\n    {\n        switch (methodName)\n        {\n            case \"ShowSettings\":\n                return ShowSettingsDialog();\n            default:\n                return null;\n        }\n    }\n}\n\n```",
    "metadata": {
      "id": "ui-elements",
      "title": "ui-elements",
      "description": "",
      "category": "framework",
      "source": "/Users/darcynestibo/Documents/project 2/temp/WL8-pkm/docs/wealth-lab-framework/ui-elements.md",
      "chunkIndex": "code-context-8",
      "contentType": "mixed",
      "language": "csharp",
      "chunkType": "code_with_context"
    }
  }
]